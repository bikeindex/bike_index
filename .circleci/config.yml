version: 2
jobs:
  build:
    working_directory: ~/bikeindex/bike_index
    parallelism: 2
    shell: /bin/bash --login
    environment:
      RAILS_ENV: test
      RACK_ENV: test
      COVERAGE: true
      TZ: /usr/share/zoneinfo/America/Chicago

    docker:
      - image: circleci/ruby:2.5.1-stretch-node
        environment:
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: circleci/postgres:10.4-alpine-postgis
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: bikeindex_test
      - image: redis:4.0.9

    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: install system libraries
          command: sudo apt-get update && sudo apt-get -y install imagemagick postgresql-client

      - run:
          name: install bundler
          command: gem install bundler

      # Ruby dependencies
      - restore_cache:
          key: v2-bundler-{{ checksum "Gemfile.lock" }}
      - run:
          name: bundle gems
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: v2-bundler-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - ~/.bundle

      # Node dependencies
      - restore_cache:
          key: v2-yarn-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: v2-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # Asset compilation
      - restore_cache:
          keys:
            # This branch if available
            - v2-assets-{{ .Branch }}
            # Default branch if not
            - v2-assets-master-
            - v2-assets-
      - run: bundle exec rake assets:precompile
      - save_cache:
          key: v2-assets-{{ .Branch }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Wait for PostgreSQL to start
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Setup Database
          command: |
            bundle exec rake db:create db:structure:load

      - run:
          name: RSpec
          command: |
            mkdir -p test-results/rspec test-artifacts
            ./cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 \
                              --color \
                              --order random \
                              --require rails_helper \
                              --format RspecJunitFormatter \
                              --out test-results/rspec/rspec.xml \
                              --format progress \
                              -- ${TESTFILES}
      - run:
          name: "eslint"
          command: "yarn lint"

      - run:
          name: "Jest: Install junit coverage"
          command: yarn add --dev jest-junit

      - run:
          name: "Jest: Tests"
          command: yarn jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"

      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-artifacts

  upload-coverage:
    docker:
      - image: circleci/ruby:2.5.1-stretch-node
    environment:
      CC_TEST_REPORTER_ID: 04daa6564351115dc1515504790cd379ad8dc25e7778f0641e0f8c63185f887c
    working_directory: ~/bikeindex/bike_index

    steps:
      - attach_workspace:
          at: ~/bikeindex/bike_index
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -

  deploy_production:
    machine:
      enabled: true
    working_directory: ~/bikeindex/bike_index
    steps:
      - checkout
      - run:
          name: Deploying to Cloud66 production
          command: |
            curl -X POST -d "" https://hooks.cloud66.com/stacks/redeploy/${CLOUD66_REDEPLOYMENT_PATH}

workflows:
  version: 2

  commit:
    jobs:
      - build
      - upload-coverage:
          requires:
            - build
      - deploy_production:
          requires:
            - build
          filters:
            branches:
              only: master
