.container
  .row.first-row
    .col-md-8
      %h1
        = t(".user_bikes", current_user_name: current_user.display_name)

    .col-md-4.ad-col
      .ad-block.ad-binx.ad468x60
  .row
    .col-md-8
      %ul.user-items-nav.nav.nav-tabs{ role: 'tablist' }
        %li.nav-item
          %a.nav-link{ class: ('active' unless @locks_active_tab), href: '#bikes_tab_content', data: { toggle: 'tab', role: 'tab' } }
            = t(".bikes")
        %li.nav-item
          %a.nav-link{ class: ('active' if @locks_active_tab), href: '#locks_tab_content', data: { toggle: 'tab', role: 'tab' } }
            = t(".locks")
      .user-items-content.tab-content
        .tab-pane#bikes_tab_content{ class: ('active' unless @locks_active_tab) }
          - if @bikes.present?
            - user_alerts = current_user.alert_slugs.any? ? current_user.user_alerts.active.account : []
            %ul.bike-boxes
              - @bikes.each do |bike|
                - bike_alerts = user_alerts.select { |ua| ua.bike_id == bike.id }
                %li.bike-box-item
                  - cache(bike) do
                    - image_link = bike.thumb_path ? bike_url(bike) : edit_bike_url(bike, page: 'photos')
                    %a.bike-list-image{ href: image_link, class: ('hover-expand' if bike.thumb_path) }
                      - unless bike.thumb_path
                        .thumb-overlay
                          = image_tag 'revised/photo_icon.svg'
                          %h4= t(".add_a_photo")
                      = bike_thumb_image(bike)
                    .bike-information.multi-attr-lists
                      %h5.title-link
                        = bike_status_span(bike)
                        %strong
                          - unless bike.type == 'bike'
                            = bike.type
                          = [bike.year, bike.mnfg_name].reject(&:blank?).join(' ')
                        #{bike.frame_model}
                      %ul.attr-list
                        = attr_list_item(bike.serial_display(current_user), t(".serial"))
                        = attr_list_item(bike.frame_colors.to_sentence, t(".primary_colors"))
                        - if bike.bike_stickers.any?
                          - sticker_count = bike.bike_stickers.count
                          %li
                            %strong= t(".bike_sticker").pluralize(sticker_count)
                            - if sticker_count > 1
                              %ul.multi-sticker
                                - bike.bike_stickers.includes(:bike_sticker_batch).each do |bike_sticker|
                                  %li
                                    %code.sticker-code= bike_sticker.pretty_code
                            - else
                              - bike.bike_stickers.includes(:bike_sticker_batch).each do |bike_sticker|
                                %code.sticker-code= bike_sticker.pretty_code
                        %br
                        - if bike.current_stolen_record.present?
                          = attr_list_item(l(bike.current_stolen_record.date_stolen, format: :dotted), t('.date_stolen'))
                          = attr_list_item(bike.current_stolen_record.address_location(include_all: true), t(".location"))
                        - elsif bike.current_impound_record.present?
                          = attr_list_item(l(bike.current_impound_record.impounded_at, format: :dotted), t('.date_found'))
                          = attr_list_item(bike.current_impound_record.address, t(".location"))
                      %ul.attr-list
                        %li= link_to t(".edit_bike"), edit_bike_path(bike)
                        - if bike.status_stolen?
                          -# %li
                          -#   # Hide printable PDF because it isn't working right now :(
                          -#     = link_to t(".printable_pdf"), pdf_bike_path(bike)
                          - if bike.impound_claims_submitting.active.any?
                            - impound_claim = bike.impound_claims_submitting.active.last
                            %li
                              %span.text-warning
                                %em= impound_claim.status_humanized.titleize
                                claim to
                              = link_to "this #{impound_claim.impound_record.kind} #{impound_claim.bike_claimed.type}", bike_path(impound_claim.bike_claimed)
                        - elsif bike.status_with_owner?
                          %li
                            = link_to t(".mark_bike_stolen"), edit_bike_path(bike, page: "report_stolen"), class: "text-danger less-strong"

                - if bike_alerts.any?
                  - alert = bike_alerts.find { |a| a.kind == "unassigned_bike_org" }
                  - if alert.present?
                    .account-user-alert.alert.alert-info.mb-0
                      = t(".generally_connect_to_org", org_name: alert.organization&.short_name)
                      = link_to t(".add_it_now"), user_alert_path(id: alert.id, add_bike_organization: true), method: :patch, action: "update", class: "text-underline text-success"
                      .small.less-strong.dismiss-wrapper
                        = link_to t(".ignore"), user_alert_path(id: alert.id, alert_action: "dismiss"), method: :patch, action: "update"

            .paginate-container.paginate-container-bottom
              = paginate @bikes
          - else
            %h2= t(".you_have_no_registered_bikes")
        .tab-pane#locks_tab_content{ class: ('active' if @locks_active_tab) }
          - if @locks.present?
            %table.table.table-striped.table-bordered
              %thead
                %th= t(".lock_type")
                %th= t(".manufacturer")
                %th= t(".key_serial")
                %th= t(".combination")
              %tbody
                - @locks.each do |lock|
                  %tr
                    %td
                      = lock.lock_type&.name
                      = link_to(t(".edit"), edit_lock_path(lock))
                    %td= lock.manufacturer_name
                    %td= lock.key_serial
                    %td= lock.combination
          - else
            %h2= t(".you_have_no_registered_locks")
    .col-md-4
      .side-box
        %h3.first-item
          = t(".register_new_items")
        .inner
          = link_to t(".add_a_bike"), choose_registration_path, class: "btn btn-primary btn-lg"
          = link_to t(".add_a_lock"), new_lock_url, class: "btn btn-primary-offset btn-lg"
        %h3
          = t(".next")
        .inner.last-item
          - if @bikes.present?
            .lock-group
              .image-column
                - if @bikes.last.status_stolen?
                  = image_tag 'https://abs.twimg.com/emoji/v1/72x72/1f622.png', alt: 'Crying, sad face'
                - else
                  = image_tag 'https://abs.twimg.com/emoji/v1/72x72/1f60a.png', alt: 'Happy, Smiling face'
              .col-xs-10
                %p
                  - if @bikes.count > 0
                    - if @bikes.last.status_stolen?
                      = t(".sorry_your_bike_was_stolen", bikes_last_type: @bikes.last.type)
                    - else
                      = t(".thanks_for_adding_your_bike", bikes_last_type: @bikes.last.type)
                  - else
                    %strong= t(".welcome")
                    = t(".to_bike_index_thanks_for_signing_up")
          .lock-group
            .image-column
              = image_tag 'revised/lock_icon.svg'
            .col-xs-10
              %p
                %strong
                  = t(".tell_us_more_about_yourself")
                = link_to t(".update_your_profile"), edit_my_account_url
          - if @bikes.present?
            .lock-group
              .image-column
                = image_tag "logos/bikefair.svg"
              .col-xs-10
                %p
                  = t(".want_to_sell_your_bikes")
                  = link_to t(".list_a_bike_on_bikefair"), "https://bikefair.org/auth/bikeindex"

-# Cache this render callout to avoid allocations
- cache("donation_modal1") do
  = render "/shared/donation_modal"
