- if @bike.present?
  = render partial: "/admin/bikes/bike_tabs", locals: {bike: @bike, active_tab: "promoted_alerts", display_recovery: true}
  %h1.mt-5.mb-4
    Promoted Alerts
    = link_to "New Promoted alert", new_admin_promoted_alert_path(bike_id: @bike.id), class: "small btn btn-outline-success btn-sm ml-2"


- else
  .admin-subnav
    .col-md-5
      %h1 Promoted Alerts
    .col-md-7
      %ul
        %li.nav-item.dropdown.dropleft
          %a.nav-link.dropdown-toggle{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@status != "all" ? "active" : "") }
            #{@status.titleize} #{@status == "all" ? "statuses" : "alerts"}
          .dropdown-menu
            = link_to "All statuses", url_for(sortable_search_params.merge(search_status: nil)), class: "dropdown-item #{@status == 'all' ? 'active' : '' }"
            .dropdown-divider
            - available_statuses.each do |status|
              = link_to "#{status.humanize} alerts", url_for(sortable_search_params.merge(search_status: status)), class: "dropdown-item #{@status == status ? 'active' : '' }"
        %li.nav-item.dropdown
          %a.nav-link.dropdown-toggle{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@search_paid_admin.present? ? "active" : "") }
            = @search_paid_admin.humanize
          .dropdown-menu
            - available_paid_admin.each do |paid_admin|
              - if paid_admin == "paid_and_unpaid"
                .dropdown-divider
              = link_to paid_admin.humanize, url_for(sortable_search_params.merge(search_paid_admin: paid_admin)), class: "dropdown-item #{@search_paid_admin == paid_admin ? 'active' : '' }"
        %li.nav-item
          = link_to "fbook data", url_for(sortable_search_params.merge(search_facebook_data: !@search_facebook_data)), class: "nav-link #{@search_facebook_data ? 'active' : ''}"
        %li.nav-item
          = link_to "recovered", url_for(sortable_search_params.merge(search_recovered: !@search_recovered)), class: "nav-link #{@search_recovered ? 'active' : ''}"
        %li.nav-item
          = link_to "location counts", admin_promoted_alerts_path(sortable_search_params.merge(search_location_counts: !@location_counts)), class: "nav-link #{@location_counts ? 'active' : ''}"
        %li.nav-item
          = link_to "graph", url_for(sortable_search_params.merge(render_chart: !@render_chart)), class: "nav-link #{@render_chart ? 'active' : ''}"
    = render partial: "/shared/admin/current_header", locals: { viewing: "Promoted Alerts" }

  - promoted_alert_plans = PromotedAlertPlan.price_ordered_desc.select { |plan| searched_promoted_alerts.where(promoted_alert_plan: plan).any? }
  - stolen_records = StolenRecord.recovered.with_promoted_alerts.where(promoted_alerts: {id: searched_promoted_alerts.pluck(:id)})

  - if @render_chart
    :ruby
      promoted_alerts_graph = promoted_alert_plans.map do |promoted_alert_plan|
        {
          name: promoted_alert_plan.name,
          data: time_range_counts(collection: searched_promoted_alerts.where(promoted_alert_plan_id: promoted_alert_plan.id))
        }
      end
      alerts_recoveries_graph = promoted_alert_plans.map do |promoted_alert_plan|
        {
          name: "#{promoted_alert_plan.name} recoveries",
          data: time_range_counts(collection: stolen_records.where(promoted_alerts: {promoted_alert_plan_id: promoted_alert_plan.id}), column: "promoted_alerts.created_at")
        }
      end

      if @search_facebook_data
        facebook_reach_graph = promoted_alert_plans.map do |promoted_alert_plan|
          {
            name: promoted_alert_plan.name,
            data: time_range_amounts(collection: searched_promoted_alerts.where(promoted_alert_plan_id: promoted_alert_plan.id), amount_column: "reach")
          }
        end
      end
    .col-12.mt-2
      = column_chart promoted_alerts_graph, stacked: true, thousands: ","
    - if @search_facebook_data
      %h3.mt-5
        %em Sum of Facebook reach for ads started in the period
      = column_chart facebook_reach_graph, stacked: true, thousands: ","
      .mt-5
    - unless @search_recovered
      .col-12.mt-2
        = column_chart alerts_recoveries_graph, stacked: true, thousands: ","

  - if @location_counts
    .col-md-8.offset-md-2.mb-3
      .full-screen-table{style: "max-height: 500px; overflow-y: scroll;"}
        %table.table.table-striped.table-bordered.table-sm
          %thead
            %th Country
            %th City
            %th State
            %th Count
          %tbody
            - searched_promoted_alerts.cities_count.each do |count|
              %tr
                %td.small= count[0]
                %td
                  - link_text = count[1].present? ? count[1] : "Blank location"
                  = link_to link_text, admin_promoted_alerts_path(sortable_search_params.merge(search_location: "#{count[1]}, #{count[2]} #{count[0]}"))
                %td.small= count[2]
                %td= admin_number_display(count[3])

  = render partial: "/shared/period_select"
  .row.mb-4.mt-4
    .col
      = form_tag admin_promoted_alerts_path, method: :get, class: "form-inline" do
        = hidden_field_tag :search_recovery_display_status, @search_recovered
        = hidden_field_tag :search_status, @status
        = hidden_field_tag :search_paid_admin, @search_paid
        = hidden_field_tag :search_facebook_data, @search_facebook_data
        = hidden_field_tag :search_recovered, @search_recovered
        = hidden_field_tag :search_location_counts, @location_counts
        = render partial: "/shared/hidden_search_fields"

        .form-group.ml-auto.mr-1.mb-2
          %em.small.less-strong.mr-1.d-md-inline.d-none within
          = number_field_tag :search_distance, @distance, class: "form-control", style: "width: 5rem;"
          %em.small.less-strong.ml-1.mr-1.d-md-inline.d-none miles of
        .form-group.mr-2.mb-2
          = text_field_tag :search_location, params[:search_location], placeholder: "anywhere", class: "form-control"
        = submit_tag "Search", name: "search", class: "btn btn-primary mb-2"

    - if promoted_alert_plans.present?
      .col
        .full-screen-table
          %table.table.table-striped.table-bordered.table-sm
            %thead
              %th
              %th Count
              %th Fbook Reach
              %th Fbook Spend
              %th Revenue
              %th.small Recovered
            %tbody
              - alert_count_total = 0
              - fbook_reach_total = 0
              - fbook_cents_total = 0
              - revenue_cents_total = 0
              - recovered_count_total = 0
              - promoted_alert_plans.each do |promoted_alert_plan|
                %tr
                  %td
                    = promoted_alert_plan.name
                    %small= MoneyFormatter.money_format(promoted_alert_plan.amount_cents_facebook)
                  %td
                    - alert_count = searched_promoted_alerts.where(promoted_alert_plan: promoted_alert_plan).count
                    - alert_count_total += alert_count
                    = admin_number_display(alert_count)
                  %td
                    - fbook_reach = searched_promoted_alerts.where(promoted_alert_plan: promoted_alert_plan).sum(:reach)
                    - fbook_reach_total += fbook_reach
                    = admin_number_display(fbook_reach)
                  %td
                    - fbook_cents = searched_promoted_alerts.where(promoted_alert_plan: promoted_alert_plan).sum(:amount_cents_facebook_spent)
                    - fbook_cents_total += fbook_cents
                    = MoneyFormatter.money_format(fbook_cents)
                  %td.small
                    - revenue_cents = searched_promoted_alerts.where(promoted_alert_plan: promoted_alert_plan).paid_cents
                    - revenue_cents_total += revenue_cents
                    = MoneyFormatter.money_format(revenue_cents)
                  %td.small
                    - recovered_count = stolen_records.where(promoted_alerts: {promoted_alert_plan_id: promoted_alert_plan.id}).count
                    - recovered_count_total += recovered_count
                    = admin_number_display(recovered_count)
              %tr{style: "border-top: 2px solid #000"}
                %td
                  %strong Total
                %td= admin_number_display(alert_count_total)
                %td= admin_number_display(fbook_reach_total)
                %td= MoneyFormatter.money_format(fbook_cents_total)
                %td
                  %small= MoneyFormatter.money_format(revenue_cents_total)
                %td.small= admin_number_display(recovered_count_total)


= render partial: "/shared/admin/pagination", locals: {collection: @promoted_alerts, count: searched_promoted_alerts.count, viewing: "Promoted Alert"}

= render partial: "/admin/promoted_alerts/table", locals: {render_sortable: true, promoted_alerts: @promoted_alerts, skip_bike: @bike.present?}

= render partial: "/shared/admin/pagination", locals: {collection: @promoted_alerts, count: searched_promoted_alerts.count, viewing: "Promoted Alert", skip_total: true}
