:ruby
  def humanize_pos_kind(kind)
    if kind == "all"
      "All POS kinds"
    elsif kind == "not_no_pos"
      "Any POS kind (all but no_pos)"
    else
      kind&.humanize
    end
  end

.admin-subnav
  .col-md-5
    %h1 Organization Statuses

  .col-md-7
    %ul
      %li.nav-item
        %a.nav-link.dropdown-toggle{href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@kind != "all" ? "active" : "")}
          - if @kind == "all"
            All org kinds
          - else
            = Organization.kind_humanized(@kind)
        .dropdown-menu
          = link_to "All kinds", url_for(sortable_search_params.merge(search_kind: nil)), class: "dropdown-item #{@kind == "all" ? 'active' : ''}"
          - not_bike_shop_active = @kind == "not_bike_shop"
          = link_to "NOT bike shops", url_for(sortable_search_params.merge(search_kind: not_bike_shop_active ? "" : "not_bike_shop")), class: "dropdown-item #{not_bike_shop_active ? 'active' : ''}"
          .dropdown-divider
          - Organization.kinds.each do |kind|
            - kind_active = @kind == kind
            = link_to Organization.kind_humanized(kind), url_for(sortable_search_params.merge(search_kind: kind_active ? nil : kind)), class: "dropdown-item #{kind_active ? 'active' : ''}"
      %li.nav-item
        %a.nav-link.dropdown-toggle{href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@pos_kind != "all" ? "active" : "")}
          = humanize_pos_kind(@pos_kind)
        .dropdown-menu
          = link_to humanize_pos_kind("all"), url_for(sortable_search_params.merge(search_pos_kind: nil)), class: "dropdown-item #{@pos_kind == "all" ? 'active' : ''}"
          - grouped_pos_kinds.each do |pos_kind|
            - pos_kind_active = @pos_kind == pos_kind
            = link_to humanize_pos_kind(pos_kind), url_for(sortable_search_params.merge(search_pos_kind: pos_kind_active ? nil : pos_kind)), class: "dropdown-item #{pos_kind_active ? 'active' : ''}"
          .dropdown-divider
          - Organization.pos_kinds.each do |pos_kind|
            - pos_kind_active = @pos_kind == pos_kind
            = link_to pos_kind.humanize, url_for(sortable_search_params.merge(search_pos_kind: pos_kind_active ? nil : pos_kind)), class: "dropdown-item #{pos_kind_active ? 'active' : ''}"
      %li.nav-item
        = link_to "current", url_for(sortable_search_params.merge(search_current: !@current)), class: "nav-link #{@current ? 'active' : ''}"
      %li.nav-item
        = link_to "deleted", url_for(sortable_search_params.merge(search_deleted: !@deleted)), class: "nav-link #{@deleted ? 'active' : ''}"
      %li.nav-item
        = link_to "ended", url_for(sortable_search_params.merge(search_ended: !@ended)), class: "nav-link #{@ended ? 'active' : ''}"
      %li.nav-item
        = link_to "graph", url_for(sortable_search_params.merge(render_chart: !@render_chart)), class: "nav-link #{@render_chart ? 'active' : ''}"

  = render partial: "/shared/admin/current_header", locals: {viewing: "Organization Statuses"}

- if @render_chart

  - if sort_column != "created_at"
    = render partial: "graphs"
  - else
    -# ALMOST ALWAYS we want to see fancy graphs for the start/end.
    -# But, in case you want to see created_at (probably for bug hunting), graph that
    = column_chart time_range_counts(collection: matching_organization_statuses, column: @time_range_column), stacked: true, thousands: ","

.mt-2
  = render partial: "/shared/period_select"

.mt-4

= render partial: "/shared/admin/pagination", locals: {collection: @organization_statuses}

- org_ids = @organization_statuses.distinct.map(&:organization_id)
- org_names_hash = Organization.unscoped.where(id: org_ids).pluck(:id, :short_name).to_h
- show_created_at = sort_column == "created_at" || InputNormalizer.boolean(params[:search_show_created_at])

.full-screen-table
  %table.table.table-striped.table-bordered.table-sm.without-exterior-border
    %thead.small-header
      %th
        = sortable "start_at"
      - if show_created_at
        %th.small
          = sortable "created_at"
      %th
        = sortable "end_at"
      %th
        Duration
      %th
        = sortable "organization_id"
      %th
        = sortable "pos_kind", "POS kind"
      %th
        = sortable "kind"
      %th.small
        = sortable "organization_deleted_at", "Deleted"
    %tbody
      - @organization_statuses.each do |organization_status|
        %tr
          %td
            %span.convertTime.preciseTime
              = l organization_status.start_at, format: :convert_time
            - if display_dev_info?
              %code.small.only-dev-visible= organization_status.id
          - if show_created_at
            %td.small
              %span.convertTime= l organization_status.created_at, format: :convert_time

          %td
            - if organization_status.end_at.present?
              %span.convertTime.preciseTime
                = l organization_status.end_at, format: :convert_time
          %td
            - if organization_status.end_at.present?
              = period_in_words(organization_status.end_at - organization_status.start_at)
          %td
            = render partial: "/shared/admin/organization_cell", locals: {organization: organization_status.organization, organization_id: organization_status.organization_id, render_search: params[:organization_id].blank?}


          %td
            - status_class = organization_status.pos_kind.match?(/broken/) ? "text-danger" : ""
            - status_class = "less-strong" if organization_status.pos_kind == "no_pos"
            %span{class: status_class}
              = organization_status.pos_kind&.humanize
          %td
            = Organization.kind_humanized(organization_status.kind)
          %td
            - if organization_status.organization_deleted_at.present?
              %span.convertTime.preciseTime.text-danger
                = l organization_status.organization_deleted_at, format: :convert_time



= render partial: "/shared/admin/pagination", locals: {collection: @organization_statuses, skip_total: true}
