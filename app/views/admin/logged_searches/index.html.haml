.admin-subnav
  .col-md-5
    %h1
      Logged Bike Searches
  .col-md-7
    %ul
      %li.nav-item
        %a.nav-link.dropdown-toggle{href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@endpoint != "all" ? "active" : "")}
          - if @endpoint == "all"
            All endpoints
          - elsif special_endpoints.include?(@endpoint)
            = @endpoint.humanize
          - else
            = @endpoint
        .dropdown-menu
          = link_to "All endpoints", url_for(sortable_search_params.merge(search_endpoint: nil)), class: "dropdown-item #{@endpoint == "all" ? 'active' : ''}"
          - special_endpoints.each do |endpoint|
            - endpoint_active = @endpoint == endpoint
            = link_to endpoint.humanize, url_for(sortable_search_params.merge(search_endpoint: endpoint_active ? nil : endpoint)), class: "dropdown-item #{endpoint_active ? 'active' : ''}"
          .dropdown-divider
          - LoggedSearch.endpoints.keys.each do |endpoint|
            - endpoint_active = @endpoint == endpoint
            = link_to endpoint, url_for(sortable_search_params.merge(search_endpoint: endpoint_active ? nil : endpoint)), class: "dropdown-item #{endpoint_active ? 'active' : ''}"
      %li.nav-item
        = link_to "serial", url_for(sortable_search_params.merge(search_serial: !@serial)), class: "nav-link #{@serial ? 'active' : ''}"
      %li.nav-item
        = link_to "include query", url_for(sortable_search_params.merge(search_includes_query: !@includes_query)), class: "nav-link #{@includes_query ? 'active' : ''}"
      %li.nav-item
        = link_to "graph", url_for(sortable_search_params.merge(render_chart: !@render_chart)), class: "nav-link #{@render_chart ? 'active' : ''}"

  = render partial: "/shared/admin_current_header", locals: {viewing: "Logged Searches"}

- if @render_chart
  - if @endpoint.present?
    - endpoints = matching_logged_searches.distinct.pluck(:endpoint).sort
    - counts_by_endpoint = endpoints.map { |endpoint| {name: endpoint, data: time_range_counts(collection: matching_logged_searches.where(endpoint: endpoint), column: @time_range_column)} }
    = column_chart counts_by_endpoint, stacked: true, thousands: ","
  - else
    = column_chart time_range_counts(collection: matching_logged_searches, column: @time_range_column), stacked: true, thousands: ","

.mt-2
  = render partial: "/shared/period_select"

.mt-4

- if params[:search_endpoint].present?
  %p
    Viewing only Searches
    %strong to
    - if special_endpoints.include?(params[:search_endpoint])
      %em= params[:search_endpoint].humanize
    - else
      %code= params[:search_endpoint]
    = link_to "view for all endpoints", url_for(sortable_search_params.merge(search_endpoint: nil)), class: "gray-link small"

- if params[:search_ip_address].present?
  %p
    Viewing only Searches
    %strong from
    %code= params[:search_ip_address]
    = link_to "view from any ip address", url_for(sortable_search_params.merge(search_ip_address: nil)), class: "gray-link small"

= render partial: "/shared/pagination", locals: {collection: @logged_searches, count: matching_logged_searches.size}

.full-screen-table
  %table.table.table-striped.table-bordered.table-sm.without-exterior-border
    %thead.small-header
      %th
        = sortable "request_at"
      - if sort_column == "created_at"
        %th.small
          = sortable "created_at"
      %th
        = sortable "endpoint"
      %th
        = sortable "ip_address"
      %th
        Query
      %th
        = sortable "organization_id"
      %th
        = sortable "user_id"
      %th
        = sortable "stolenness"
      %th
        = sortable "page"
      - if sort_column == "serial_normalized"
        %th
          = sortable "serial_normalized", "Serial"
      %th{title: "Duration in seconds"}
        = sortable "duration_ms", "Duration s"
    %tbody
      - @logged_searches.each do |logged_search|
        %tr
          %td
            %span.convertTime.preciseTimeSeconds
              = l logged_search.request_at, format: :convert_time
          - if sort_column == "created_at"
            %td.small
              %span.convertTime= l logged_search.created_at, format: :convert_time

          %td
            %code.small{style: "word-break: keep-all;"}
              = logged_search.endpoint
              = link_to search_emoji, url_for(sortable_search_params.merge(search_endpoint: logged_search.endpoint)), class: "display-sortable-link small"
          %td
            %code.small= logged_search.ip_address
            = link_to search_emoji, url_for(sortable_search_params.merge(search_ip_address: logged_search.ip_address)), class: "display-sortable-link small"
          %td.data-cell.only-data.small
            .wrapper{style: "position: relative"}
              - if logged_search.query_items.present?
                = pretty_print_json(logged_search.query_items)

              - if logged_search.log_line.present?
                - full_line_id = "fullLine-#{logged_search.id}"
                %a.less-strong{href: "#", "data-toggle" => "collapse", "data-target" => "##{full_line_id}", style: "position: absolute;right: 0.5rem; top: 0.5rem;"}
                  ↔️
                %code.collapse{id: full_line_id}
                  = logged_search.log_line
          %td
            - if logged_search.organization_id.present?
              = link_to logged_search.organization&.short_name, admin_organization_path(logged_search.organization_id), class: "text-link"
              = link_to search_emoji, url_for(sortable_search_params.merge(organization_id: logged_search.organization_id)), class: "display-sortable-link small"
          %td
            - if logged_search.user_id.present?
              = render partial: "/shared/admin_user_cell", locals: {user: logged_search.user, render_search: true, cache: true, user_id: logged_search.user_id}

          %td
            - unless logged_search.stolenness_all?
              %small= logged_search.stolenness
          %td.small
            = admin_number_display(logged_search.page)
          - if sort_column == "serial_normalized"
            %td.small
              - if logged_search.serial_normalized.present?
                %code= logged_search.serial_normalized
          %td
            - if logged_search.duration_ms.present?
              %span{title: "#{logged_search.duration_ms} ms"}
                = admin_number_display((logged_search.duration_ms * 0.001).round(2))


= render partial: "/shared/pagination", locals: {collection: @logged_searches, skip_total: true}
