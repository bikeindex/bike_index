- if @organization.errors.any?
  = render partial: "/shared/errors", locals: { name: "Organization", obj: @organization}


.row
  .form-group.col-md-6
    = f.label :name
    = f.text_field :name, required: true, class: "form-control"

  .form-group.col-md-6
    = f.label :available_invitation_count, "Available invitations"
    = f.number_field :available_invitation_count, class: "form-control"
    %p.text-success
      = "Invitations sent: #{@organization.sent_invitation_count}"
.row
  .col-md-6
    .form-group
      = f.label :short_name, "Short name (15 letters or less)"
      = f.text_field :short_name, required: true, class: "form-control"
  .col-md-6
    .form-group
      = f.label :ascend_name
      = f.text_field :ascend_name, class: "form-control"

.row
  .col-md-6
    .form-group
      = f.label :website
      = f.text_field :website, class: "form-control"
  .col-6.col-lg-3
    %fieldset{:disabled => "disabled"}
      .form-group
        = f.label :slug, "Slug:"
        %p
          = @organization.slug
  - if current_user.developer?
    .col-6.col-lg-3
      .form-group
        = f.label :previous_slug do
          Previous Slug
          %em.small.text-warning
            Rarely unnecessary
        = f.text_field :previous_slug, class: "form-control"

.row
  .col-md-6.pl-4
    .form-group#js-organization-type
      %label
      Organization Type
      - Organization.kinds.each do |kind|
        .form-check
          = f.radio_button "kind", kind, class: "form-check-input"
          = f.label "kind_#{kind}", kind.humanize, class: "form-check-label"

  .col-md-6
    .form-group
      = f.label :city
      = f.text_field :city, class: "form-control"
    .form-group
      = f.label :state
      = f.collection_select(:state_id, State.all, :id, :name,
        { include_blank: true, prompt: "Select a state" },
        { class: "form-control" })
    .form-group
      = f.label :zipcode
      = f.text_field :zipcode, class: "form-control"
    .form-group
      = f.label :country_id
      = f.select :country_id, Country.select_options,
        { prompt: "Select a country" },
        { class: "country-select-input form-control" }
    .form-group
      = f.label :search_radius, "Search radius (mi)"
      = f.number_field :search_radius, {class: "form-control"}

  .col-md-6
    .form-group
      = f.check_box :show_on_map
      = f.label :show_on_map
    .form-group
      = f.check_box :lock_show_on_map
      = f.label :lock_show_on_map, 'Lock shown on map'
      %small.less-strong
        Restrict org from updating show on map above (e.g. they're known bad actors)
    .form-group
      = f.check_box :api_access_approved
      = f.label :api_access_approved
      %small.less-strong
        to be able to post updates via API, check this too

    .form-group
      = f.check_box :approved
      = f.label :approved, 'Validated & approved'

    .form-group
      .form-check
        = f.check_box :regional, class: "form-check-input"
        = f.label :regional, "Regional organization", class: "form-check-label"
        %small.less-strong
          Check to give #{@organization.name} access to aggregated data from regional sub-organizations

.row
  .col-md-6
    .form-group.fancy-select.unfancy
      = f.label :regional_organization_id, "Regional umbrella organization"
      = f.collection_select(:regional_organization_id, Organization.regional, :id, :name, { prompt: "Choose regional organization" }, class: "form-control")
  .col-md-6
    .form-group.fancy-select.unfancy
      = f.label :parent_organization_id
      = f.collection_select(:parent_organization_id, Organization.all, :id, :name, { prompt: "Choose organization" }, class: "form-control")
  - if @organization.id.present?
    .col-md-6
      - emails = @organization.users.pluck(:email)
      - emails << ENV['AUTO_ORG_MEMBER'] unless emails.any?
      .form-group.fancy-select.unfancy
        = f.label :embedable_user_email
        = f.select :embedable_user_email, emails, {prompt: "Select email", selected: @embedable_email}, class: "form-control"
        %small.less-strong
          - if @organization.memberships.count == 0
            You can use #{ENV['AUTO_ORG_MEMBER']} if
            there are no members of the organization

  / .control-group.padded
  /   .control-label
  /     = f.label :is_suspended
  /   .controls
  /     = f.check_box :is_suspended
