.admin-subnav
  .col-md-4
    %h1
      Organizations
  .col-md-8
    %ul
      %li.nav-item
        - active_kind = params[:search_kind]
        %a.nav-link.dropdown-toggle{href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (active_kind.present? ? "active" : "")}
          - if active_kind.present?
            = active_kind.humanize
          - else
            Kind
        .dropdown-menu
          = link_to "All Kinds", admin_organizations_path(sortable_search_params.merge(search_kind: nil)), class: "dropdown-item #{active_kind.blank? ? 'active' : ''}"
          .dropdown-divider
          - Organization.kinds.each do |kind|
            - kind_active = active_kind == kind
            = link_to kind.humanize, admin_organizations_path(sortable_search_params.merge(search_kind: kind_active ? nil : kind)), class: "dropdown-item #{kind_active ? 'active' : ''}"
      %li.nav-item
        - active_pos_kind = params[:search_pos]
        %a.nav-link.dropdown-toggle{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (active_pos_kind.present? ? "active" : "") }
          - if active_pos_kind.present?
            = active_pos_kind.humanize
          - else
            POS
        .dropdown-menu
          - (%w[with_pos without_pos broken_pos] + Organization.pos_kinds).each do |pos_kind|
            - kind_active = active_pos_kind == pos_kind
            = link_to pos_kind.humanize, admin_organizations_path(sortable_search_params.merge(search_pos: kind_active ? nil : pos_kind)), class: "dropdown-item #{kind_active ? 'active' : ''}"
            - if pos_kind == "broken_pos"
              .dropdown-divider
      %li.nav-item
        - paid_search_params = sortable_search_params.merge(search_paid: !@search_paid)
        = link_to "Paid", admin_organizations_path(paid_search_params), class: @search_paid ? "nav-link active" : "nav-link"
      %li.nav-item
        = link_to "Deleted", show_deleted_admin_organizations_path, class: "nav-link"
      %li.nav-item
        = link_to "graph", url_for(sortable_search_params.merge(render_chart: !@render_chart)), class: "nav-link #{@render_chart ? 'active' : ''}"
      %li.nav-item
        = link_to 'New Organization', new_admin_organization_url, class: "nav-link"

  = render partial: "/shared/admin_current_header", locals: {viewing: "Organizations"}

- if @render_chart
  = column_chart time_range_counts(collection: matching_organizations, column: @time_range_column), stacked: true, thousands: ","
= render partial: "/shared/period_select"

-# Minor style adjustment for selectize
<style>.form-control.selectize-control { width: 100%; }</style>

= form_tag admin_organizations_path, method: :get do
  = render partial: "/shared/hidden_search_fields"
  = hidden_field_tag :search_paid, @search_paid
  = hidden_field_tag :search_pos, params[:search_pos]
  .mt-4.mb-4.d-flex.justify-content-md-end.flex-wrap
    .fancy-select.no-restore-on-backspace.unfancy.col-md-4.mt-2{style: "margin-bottom: -0.4rem; padding-left: 0;"}
      - features_group = OrganizationFeature.order(name: :desc).pluck(:name, :id)
      - settings_group = [["With Stolen Message", "with_stolen_message"], ["Opted into Theft Survey", "theft_survey"], ["Shown on map", "mapped"], ["NOT shown on map", "not_mapped"], ["Not Approved", "not_approved"]]
      - opt_groups = [["Settings", settings_group], ["Features", features_group]]
      = select_tag :search_features_and_settings, grouped_options_for_select(opt_groups, selected: @features_and_settings_ids), placeholder: "With features", class: "form-control", include_blank: true, multiple: true
    .align-self-end.mt-2.mr-2
      = text_field_tag :search_query, params[:search_query], placeholder: "Name/Location", class: "form-control", style: ""
    .mt-2.mr-2
      = submit_tag "Search", name: "search", class: "btn btn-primary"

= render partial: "/shared/pagination", locals: {collection: @organizations}

= render partial: "/admin/organizations/table", locals: { render_sortable: true }

= render partial: "/shared/pagination", locals: {collection: @organizations, skip_total: true}
