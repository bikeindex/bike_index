.admin-subnav
  .col-md-5
    %h1
      Parking notifications
  .col-md-7
    %ul
      %li.nav-item
        %a.nav-link.dropdown-toggle{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false", class: (@search_status == "all" ? "" : "active") }
          #{@search_status.humanize} notifications
        .dropdown-menu
          - (%w[all resolved active] + ParkingNotification.statuses).each do |kind|
            - kind_active = @search_status == kind
            - kind_link_params = sortable_search_params.merge(search_status: (kind_active ? nil : kind))
            - kind_display = "#{kind.humanize} notifications"
            = link_to kind_display, admin_parking_notifications_path(kind_link_params), class: "dropdown-item #{kind_active ? 'active' : ''}"
            - if kind == "active" # Add a divider after active
              .dropdown-divider
      %li.nav-item
        = link_to "graph", admin_parking_notifications_path(sortable_search_params.merge(render_chart: !@render_chart)), class: "nav-link #{@render_chart ? 'active' : ''}"

  = render partial: "/shared/admin_current_header", locals: { viewing: "Parking notifications" }

.row.mt-4.mb-4
  .col-sm-6
    = number_with_delimiter(@parking_notifications.total_count)
    matching parking notifications
    %em
      = humanized_time_range(@time_range)
    - if current_organization.present?
      %strong
        from
        = link_to current_organization.short_name, admin_organization_path(current_organization)

- if @render_chart
  = column_chart time_range_counts(collection: matching_parking_notifications), stacked: true, thousands: ","
  - unless params[:organization_id].present?
    .row.mt-4
      .col-md-6.offset-md-3
        %table.table-list.wide-definition
          %tbody
            - matching_parking_notification_per_org_id = matching_parking_notifications.distinct.pluck(:organization_id).map { |id| [id, matching_parking_notifications.where(organization_id: id).count] }
            - matching_parking_notification_per_org_id.sort_by { |id, number| number }.each do |id, number|
              - organization = Organization.unscoped.find_by_id(id) if id.present?
              %tr
                %td
                  - if organization.present?
                    = link_to organization.short_name, admin_parking_notifications_path(sortable_search_params.merge(organization_id: id)), class: (organization.deleted? ? "text-danger" : "")
                  - else
                    = link_to "no organization", admin_parking_notifications_path(sortable_search_params.merge(organization_id: "none")), class: "gray-link"
                %td
                  = number_with_delimiter(number)

.mt-4.mb-4
  = render partial: "/shared/period_select"

= paginate @parking_notifications, views_prefix: "admin"

= render partial: "/admin/parking_notifications/table", locals: {parking_notifications: @parking_notifications, render_sortable: true}
