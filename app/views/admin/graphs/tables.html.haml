= render partial: "admin/graphs/graphs_subnav", locals: {location_count: true}
= form_tag tables_admin_graphs_path, method: :get do
  .form-inline
    = text_field_tag :location, params[:location], placeholder: 'Location', class: "form-control mr-2"
    = text_field_tag :location_radius, params[:location_radius], placeholder: 'Proximity in miles', class: "form-control mr-2"
    = hidden_field_tag :tables, true
    = submit_tag 'Load', name: 'search', class: 'btn btn-primary'
- years = Array(2013..Time.current.year)
- dates = years.map { |y| Date.civil(y, 6, 6) }
- yday = Time.current.yday
- days_left = Time.current.end_of_year.yday - yday

%h2
  Records everywhere
%p
  The
  %span.less-strong
    data in this color
  is (simplified, not accounting for seasonalness) projections for the end of the current year
.full-screen-table
  %table.table.table-striped.table-bordered.table-sm
    %thead.thead-light
      %th
      %th Stolen in year
      %th Total stolen by eoy
      %th Recovered in year
      %th Stolen & non, in year
      %th Total Stolen & non by eoy
      %th Users in year
    %tbody
      - years.each_with_index do |year, index|
        / - cache("admin_table_count_#{year}", expires_in: 1.hour) do
        - date = dates[index]
        %tr
          %td
            = year
          %td
            / Because of data import from SBR - after, we want created_at,it's more reliable
            / because we automatically take it, also, people reporting previous thefts, etc
            - if [2013, 2014].include?(year)
              = StolenRecord.unscoped.where(date_stolen: date.all_year).count
            - else
              = count = StolenRecord.unscoped.where(created_at: date.all_year).count
              - if year == Time.current.year
                %span.less-strong
                  = s_project = count + (BigDecimal.new(count) / yday * days_left).to_i
          %td
            = count = StolenRecord.unscoped.where('created_at < ?', date.end_of_year).count
            - if year == Time.current.year
              %span.less-strong
                = s_project + count
          %td
            = count = StolenRecord.unscoped.where(recovered_at: date.all_year).count
            - if year == Time.current.year
              %span.less-strong
                = count + (BigDecimal.new(count) / yday * days_left).to_i
          %td
            = count = Bike.unscoped.where(created_at: date.all_year).count
            - if year == Time.current.year
              %span.less-strong
                = a_project = count + (BigDecimal.new(count) / yday * days_left).to_i
          %td
            = count = Bike.unscoped.where('created_at < ?', date.all_year.last).count
            - if year == Time.current.year
              %span.less-strong
                = a_project + count
          %td
            = count = User.unscoped.where(created_at: date.all_year).count
            - if year == Time.current.year
              %span.less-strong
                = count + (BigDecimal.new(count) / yday * days_left).to_i
.mt-4
.mt-4
- location_radius = params[:location_radius].present? ? params[:location_radius].to_i : 100
- box = params[:location].present? && Geocoder::Calculations.bounding_box(params[:location], location_radius)
- if box && !box[0].nan?
  %h2.mt-4
    Records in
    %strong
      = params[:location]
    %small
      within #{location_radius} miles
  %table.table.table-striped.table-bordered.table-sm
    %thead.thead-light
      %th
      %th Stolen in year
      %th Total stolen by eoy
      %th Recovered in year
      %th Stolen & non, in year
      %th Total Stolen & non by eoy
      %th Users in year
    %tbody
      - years.each_with_index do |year, index|
        - date = dates[index]
        %tr
          %td
            = year
          %td
            / Because of data import from SBR - after, we want created_at,it's more reliable
            / because we automatically take it, also, people reporting previous thefts, etc
            - if [2013, 2014].include?(year)
              = StolenRecord.unscoped.where(date_stolen: date.all_year).within_bounding_box(box).count
            - else
              = count = StolenRecord.unscoped.where(created_at: date.all_year).within_bounding_box(box).count
              - if year == Time.current.year
                %span.less-strong
                  = s_project = count + (BigDecimal.new(count) / yday * days_left).to_i
          %td
            / To calculate for a specific time period:
            / StolenRecord.unscoped.where(created_at: Time.current.beginning_of_month..Time.current).within_bounding_box(Geocoder::Calculations.bounding_box('Seattle', 25)).count
            = count = StolenRecord.unscoped.where('created_at < ?', date.end_of_year).within_bounding_box(box).count
            - if year == Time.current.year
              %span.less-strong
                = s_project + count
          %td
            = count = StolenRecord.unscoped.where(recovered_at: date.all_year).within_bounding_box(box).count
            - if year == Time.current.year
              %span.less-strong
                = count + (BigDecimal.new(count) / yday * days_left).to_i
          %td
          %td
          %td

- else
  %h2
    %em
      Add a location to the search section at the top of the page to see stats about that location
  - if params[:location].present?
    %h4
      The location and proximity you entered weren't useable. Try again.
