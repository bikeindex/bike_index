-# Make sure that period is passed - because it's a different period than other places
- sortable_params = {period: default_period}.merge(sortable_search_params).symbolize_keys
- if current_user.superuser?
  = render partial: "admin/graphs/graphs_subnav", locals: {location_count: true, sortable_params: sortable_params}

.mb-4
  = form_tag tables_admin_graphs_path, method: :get do
    .form-inline
      = text_field_tag :location, params[:location], placeholder: 'Location', class: "form-control mr-2"
      = text_field_tag :location_radius, params[:location_radius], placeholder: 'Proximity in miles', class: "form-control mr-2"
      = hidden_field_tag :tables, true
      = submit_tag 'Load', name: 'search', class: 'btn btn-primary'
- years = Array(2013..Time.current.year)
- dates = years.map { |y| Date.civil(y, 6, 6) }
- yday = Time.current.yday
- days_left = Time.current.end_of_year.yday - yday

%h2
  Records everywhere
%p
  The
  %span.less-strong
    data in this color
  is (simplified, not accounting for seasonalness) projections for the end of the current year

- bikes = Bike.with_user_hidden
- stolen_records = stolen_records = StolenRecord.unscoped.joins(:bike).merge(bikes)
.full-screen-table
  %table.table.table-striped.table-bordered.table-sm
    %thead.thead-light
      %th
      %th Stolen in year
      %th Total stolen by eoy
      %th Recovered in year
      %th Recovered by eoy
      %th Stolen & non, in year
      %th Total Stolen & non by eoy
      %th Users in year
    %tbody
      - years.each_with_index do |year, index|
        - cache("admin_table_count_#{year}", expires_in: 1.hour) do
          - date = dates[index]
          %tr
            %td
              = year
            %td
              / Because of data import from SBR - after, we want created_at, it's more reliable
              / and we're actually showing bikes registered/recorded - not stolen times
              - if [2013, 2014].include?(year)
                - stolen_in_year = stolen_records.where(date_stolen: date.all_year).count
              - else
                - stolen_in_year = stolen_records.where("stolen_records.created_at" => date.all_year).count
              = number_with_delimiter(stolen_in_year)
              - if year == Time.current.year
                - stolen_past_year = stolen_records.where("stolen_records.created_at" => (Time.current - 1.year)..Time.current).count
                - stolen_per_day = BigDecimal(stolen_past_year) / 365
                %span.less-strong.ml-1
                  - stolen_in_year_projection = stolen_in_year + (stolen_per_day * days_left).to_i
                  = number_with_delimiter(stolen_in_year_projection)
            %td
              - stolen_beginning_of_year = stolen_records.where("date_stolen < ?", date.beginning_of_year).count
              = number_with_delimiter(stolen_beginning_of_year + stolen_in_year)
              - if year == Time.current.year
                %span.less-strong.ml-1
                  = number_with_delimiter(stolen_in_year_projection + stolen_beginning_of_year)
            %td
              - recovered_in_year = stolen_records.recovered.where(recovered_at: date.all_year).count
              = number_with_delimiter(recovered_in_year)
              - if year == Time.current.year
                - recovered_past_year = stolen_records.recovered.where(recovered_at: (Time.current - 1.year)..Time.current).count
                - recovered_per_day = BigDecimal(recovered_past_year) / 365
                %span.less-strong.ml-1
                  - recovered_in_year_projection = recovered_in_year + (recovered_per_day * days_left).to_i
                  = number_with_delimiter(recovered_in_year_projection)
            %td
              - recovered_beginning_of_year = stolen_records.recovered.where("recovered_at < ?", date.beginning_of_year).count
              = number_with_delimiter(recovered_beginning_of_year + recovered_in_year)
              - if year == Time.current.year
                %span.less-strong.ml-1
                  = number_with_delimiter(recovered_beginning_of_year + recovered_in_year_projection)
            %td
              - all_in_year = bikes.where(created_at: date.all_year).count
              = number_with_delimiter(all_in_year)
              - if year == Time.current.year
                - all_past_year = bikes.where(created_at: (Time.current - 1.year)..Time.current).count
                - all_per_day = BigDecimal(all_past_year) / 365
                %span.less-strong.ml-1
                  - all_in_year_projection = all_in_year + (all_per_day * days_left).to_i
                  = number_with_delimiter(all_in_year_projection)
            %td
              - all_beginning_of_year = bikes.where("created_at < ?", date.all_year.last).count
              = number_with_delimiter(all_beginning_of_year + all_in_year)
              - if year == Time.current.year
                %span.less-strong.ml-1
                  = number_with_delimiter(all_beginning_of_year + all_in_year_projection)
            %td
              - users_in_year = User.unscoped.where(created_at: date.all_year).count
              = number_with_delimiter(users_in_year)
              - if year == Time.current.year
                - users_past_year = User.unscoped.where(created_at: (Time.current - 1.year)..Time.current).count
                - users_per_day = BigDecimal(users_past_year) / 365
                %span.less-strong.ml-1
                  - users_in_year_projection = users_in_year + (users_per_day * days_left).to_i
                  = number_with_delimiter(users_in_year_projection)
.mt-4
.mt-4
- location_radius = params[:location_radius].present? ? params[:location_radius].to_i : 100
- box = params[:location].present? && GeocodeHelper.bounding_box(params[:location], location_radius)
- if box.present?
  %h4.mt-4
    Records
    %em
      within #{location_radius} miles of
    %strong
      = params[:location]

  .full-screen-table.mt-3
    %table.table.table-striped.table-bordered.table-sm
      %thead.thead-light
        %th
        %th Stolen in year
        %th Total stolen by eoy
        %th Recovered in year
        %th Recovered by eoy
        %th Stolen & non, in year
        %th Total Stolen & non by eoy
        %th Users in year
      %tbody
        - years.each_with_index do |year, index|
          - date = dates[index]
          - bounded_stolen_records = stolen_records.within_bounding_box(box)
          %tr
            %td
              = year
            %td
              / Because of data import from SBR - after, we want created_at, it's more reliable
              / and we're actually showing bikes registered/recorded - not stolen times
              - if [2013, 2014].include?(year)
                - stolen_in_year = bounded_stolen_records.where(date_stolen: date.all_year).count
              - else
                - stolen_in_year = bounded_stolen_records.where("stolen_records.created_at" => date.all_year).count
              = number_with_delimiter(stolen_in_year)
              - if year == Time.current.year
                - stolen_past_year = bounded_stolen_records.where("stolen_records.created_at > ?", Time.current - 1.year).count
                - stolen_per_day = BigDecimal(stolen_past_year) / 365
                %span.less-strong.ml-1
                  - stolen_in_year_projection = stolen_in_year + (stolen_per_day * days_left).to_i
                  = number_with_delimiter(stolen_in_year_projection)
            %td
              / To calculate for a specific time period:
              / stolen_records.where("stolen_records.created_at" => Time.current.beginning_of_month..Time.current).within_bounding_box(GeocodeHelper.bounding_box('Seattle', 25)).count
              - stolen_beginning_of_year = bounded_stolen_records.where("stolen_records.created_at < ?", date.beginning_of_year).count
              = number_with_delimiter(stolen_beginning_of_year + stolen_in_year)
              - if year == Time.current.year
                %span.less-strong.ml-1
                  = number_with_delimiter(stolen_beginning_of_year + stolen_in_year_projection)
            %td
              - recovered_in_year = bounded_stolen_records.where(recovered_at: date.all_year).count
              = number_with_delimiter(recovered_in_year)
              - if year == Time.current.year
                - recovered_past_year = bounded_stolen_records.where(recovered_at: (Time.current - 1.year)..Time.current).count
                - recovered_per_day = BigDecimal(recovered_past_year) / 365
                %span.less-strong.ml-1
                  - recovered_in_year_projection = recovered_in_year + (recovered_per_day * days_left).to_i
                  = number_with_delimiter(recovered_in_year_projection)
            %td
              - recovered_beginning_of_year = bounded_stolen_records.where("recovered_at < ?", date.beginning_of_year).count
              = number_with_delimiter(recovered_beginning_of_year + recovered_in_year)
              - if year == Time.current.year
                %span.less-strong.ml-1
                  = number_with_delimiter(recovered_in_year_projection + recovered_beginning_of_year)
            %td
            %td
            %td

- else
  %h2
    %em
      Add a location to the search section at the top of the page to see stats about that location
  - if params[:location].present?
    %h4
      The location and proximity you entered weren't useable. Try again.
