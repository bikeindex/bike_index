-# TODO: translations
.organized-page-header
  %h1.uncap
    %em
      = current_location.name
    Virtual Line
    %em{ style: "font-size: 50%;" }
      = link_to "customer view", organization_walkrightup_path(organization_id: current_organization.to_param, location_id: current_location.to_param)

.row.mt-4.mb-4
  .col-xs-6.mb-4
    %a{ href: "#", "data-toggle" => "collapse", "data-target" => ".manual-new-appointment-form" }
      Manually add someone
  .col-xs-6.mb-4.text-right
    %a#toggleUpdateMultiple{ href: "#" }
      Update multiple

.manual-new-appointment-form.collapse
  .card
    .card-body
      = form_for @appointment, { as: :appointment, url: organization_appointments_path(organization_id: current_organization.to_param, location_id: current_location&.id), action: "create", method: "POST" } do |f|
        = f.hidden_field :location_id
        .row
          .form-group.col-xs-6.col-xl-3
            = f.label :name, "Customer name"
            = f.text_field :name, required: true, class: "form-control"
          .form-group.col-xs-6.col-xl-3
            = f.label :email, "Customer email"
            = f.email_field :email, placeholder: "Optional", class: "form-control"
          .form-group.col-xs-6.col-xl-3
            = f.label :reason, "Reason for visit"
            = f.select :reason, @appointment.permitted_reasons, { prompt: " ", allow_blank: true }, class: "form-control"
          .form-group.col-xs-6.col-xl-3
            %label.d-block &nbsp;
            = f.submit "Add to line!", class: "btn btn-success"

- valid_update_statuses = [["Being helped", "being_helped"], ["Manually remove from line", "removed"], ["Left without being helped", "abandoned"], ["Page - they're needed", "paging"], ["On deck", "on_deck"], ["Waiting in line", "waiting"], ["Unable to find", "failed_to_find"]]
-# Form needs to wrap the table to get the checked appointment ids
= form_tag organization_line_path(current_location.to_param, organization_id: current_organization.to_param), id: "multiAppointmentSelectForm", method: :put, action: "update" do

  .showOnMultiSelect.collapse
    .row.mt-4
      .col-xs-6
        .form-group
          = select_tag :status, options_for_select(valid_update_statuses), required: true , class: "form-control"
      .col-xs-6
        .form-group
          = submit_tag "Update checked", class: "btn btn-success"

  .full-screen-table.organized-appointment-table
    %table.table.table-striped.table-bordered.table-sm.without-exterior-border
      %thead
        %th.multiselect-cell.showOnMultiSelect.collapse
          %label
            %a#selectAllSelector{ href: "#" }
              = check_mark
        %th Joined line
        %th Name
        %th Status
        %th Reason
        %th
        %th
      %tbody
        - @appointments.each do |appointment|
          %tr
            %td.multiselect-cell.showOnMultiSelect.collapse
              %label
                = check_box_tag "ids[#{appointment.id}]", appointment.id
            %td
              %span.convertTime.preciseTime
                = l(appointment.created_at, format: :convert_time)
            %td
              = appointment.name
              - if appointment.organization_member?
                %small.less-strong
                  added by #{appointment.user&.public_display_name}
            %td
              - if appointment.waiting?
                %span.less-strong in line
              - else
                = status_display(appointment.status)

              - if appointment.appointment_updates.any?
                %ul.status-list
                  - appointment.appointment_updates.reorder(id: :desc).each do |appointment_update|
                    %li
                      %span.less-strong
                        #{appointment_update.status.gsub("_", " ")} -
                        -# It's too garish - but there needs to be some color differentiation
                        -# #{status_display(appointment_update.status)} -

                      %em.convertTime.preciseTime
                        = l(appointment_update.created_at, format: :convert_time)
                      %small
                        - if appointment_update.customer_creator?
                          by
                          %em customer
                        - elsif appointment_update.user_id.present?
                          by
                          %em= appointment_update.user&.public_display_name
            %td
              = appointment.reason
              - if appointment.description.present?
                %small.less-strong= appointment.description
            %td.text-center
              - if appointment.paging?
                = link_to "helped", organization_appointment_path(appointment.to_param, organization_id: current_organization.id, status: "being_helped"), method: "PUT", action: "update", class: "btn btn-sm btn-success uncap mb-2"
              - elsif appointment.on_deck?
                = link_to "Page", organization_appointment_path(appointment.to_param, organization_id: current_organization.id, status: "paging"), method: "PUT", action: "update", class: "btn btn-sm btn-outline-success uncap mb-2"
            %td.text-center
              - if appointment.paging?
                = link_to "can't find", organization_appointment_path(appointment.to_param, organization_id: current_organization.id, status: "failed_to_find"), method: "PUT", action: "update", class: "btn btn-sm btn-warning uncap ml-2 mb-2"
              %small.d-block.dropdown.dropleft.update-status-dropdown
                %a.dropdown-toggle{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false" }
                  update status
                .dropdown-menu.dropleft
                  - valid_update_statuses.each do |status_display, val|
                    = link_to status_display, organization_appointment_path(appointment.to_param, organization_id: current_organization.id, status: val), method: "PUT", action: "update", class: "dropdown-item"

