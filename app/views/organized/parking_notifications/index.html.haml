.organized-page-header
  %h1
    = t(".parking_notifications")

= render partial: "repeated_updates_information" # Render information about the result of create_and_send_repeats

- # TODO: add translations

.organized-records
  .text-right.mb-4
    = link_to "New notification for unregistered bike", new_organization_bike_path(organization_id: current_organization, parking_notification: true), class: "btn btn-sm btn-outline-primary"

  #map


  = render partial: "/shared/period_select", locals: { skip_submission: true }

  .mt-4
    = form_tag organization_parking_notifications_path(organization_id: current_organization.to_param), id: 'bikes_search_form', class: 'bikes-search-form', method: :get do
      .query-field-wrap.nojs
        - opt_vals = @selected_query_items_options.map { |i| i.is_a?(String) ? [i, i] : [i['text'], i['search_id']]  }
        = select_tag :query_items,                                      |
          options_for_select(opt_vals, selected: opt_vals.map(&:last)), |
          placeholder: t(".search_bike_descriptions"),                  |
          class: 'form-control query-field',                            |
          multiple: true

        = text_field_tag :query, params[:query], placeholder: t(".search_bike_descriptions"), class: 'form-control query-field'
        .sidebyside-queries
          = text_field_tag :search_email, params[:search_email], placeholder: t(".search_owner_email"), class: 'form-control query-field email-field-too'
          = text_field_tag :serial, params[:serial], placeholder: t(".search_for_serial_number"), class: 'form-control query-field email-field-too'

      .search-button-wrap
        = button_tag(type: 'submit', class: 'searchit btn btn-primary') do
          :plain
            <svg id="search-button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 29 29"><defs><style>.cls-1,.cls-2{fill:none;stroke:#fff;stroke-miterlimit:10;stroke-width:2px;}.cls-2{stroke-linecap:round;}</style></defs><title>searcher</title><circle class="cls-1" cx="10.39" cy="10.39" r="9.39"/><line class="cls-2" x1="17.03" y1="17.03" x2="28" y2="28"/></svg>
      = hidden_field_tag :stolenness, @stolenness
      = hidden_field_tag :organization_id, passive_organization&.to_param

      = hidden_field_tag :period, params[:period]
      = hidden_field_tag :start_time, params[:start_time]
      = hidden_field_tag :end_time, params[:end_time]
      = hidden_field_tag :search_status, @search_status

  .row.mt-4
    .col-sm-6
      - if search_params_present?
        = pluralize number_with_delimiter(matching_parking_notifications.count), "parking notification"

        - if params[:search_bike_id].present?
          for
          - searched_bike = Bike.unscoped.find_by_id(params[:search_bike_id])
          - if searched_bike.present?
            = link_to searched_bike.title_string, bike_path(searched_bike)
          - else
            %em
              unknown bike ##{params[:search_bike_id]}
          %em.less-strong
            view notifications
            = link_to "for all bikes", organization_parking_notifications_path(sortable_search_params.merge(search_bike_id: nil))

  .row.mt-2.mb-4
    .col-md-4.col-xs-6
      #recordsCount
        %span.number 0
        = t(".matches_visible")
    .col-md-4.col-xs-6
      #recordsTotalCount.text-right.less-strong
        %span.number 0
        total matches
    .col-md-4.col-xs-12
      -# Hide the repeat notification interface because the checks don't display on mobile
      .text-right.hidden-md-down
        %a.gray-link#toggleSendRepeat{ href: "#sendRepeatNotifications", data: { toggle: "collapse", target: "#sendRepeatNotifications" } }
          retrieve/send repeat notification
  .row.mt-2.mb-4
    .col-sm-12
      %a.dropdown-toggle.btn.btn-outline-primary{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false" }
        #{@search_status.humanize} notifications
      .dropdown-menu
        - (ParkingNotification.statuses + ["all"]).each do |kind|
          - if kind == "all" # Add a divider before all
            .dropdown-divider
          - kind_active = @search_status == kind
          - kind_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_status: (kind_active ? nil : kind))
          - kind_display = "#{kind.humanize} notifications"
          = link_to kind_display, organization_parking_notifications_path(kind_link_params), class: "dropdown-item #{kind_active ? 'active' : ''}"

  - # Form needs to wrap the table too

  = form_for ParkingNotification.new, url: organization_parking_notifications_path(organization_id: current_organization) do |f|
    #sendRepeatNotifications.collapse
      -# similar form on parking notification show
      .row
        .mt-4.mb-4.col-md-8.offset-md-2.col-xl-6.offset-xl-3
          .card
            .card-block
              .card-title
                %h3.uncap
                  Mark retrieved or send follow up notifications
                  %br
                  %em.small.less-strong
                    For table rows with checks
              .card-body
                -# Matching form is on parking notification index
                .row#sendRepeatOrRetrieveFields
                  .col-xs-6
                    = select_tag :kind, options_for_select(parking_notification_repeat_kinds), { prompt: "...", class: "form-control", required: true }
                  .col-xs-6.text-center
                    = submit_tag "Create notifications", class: "btn btn-success btn-md-lg"

    = render partial: "/organized/parking_notifications/table", locals: { parking_notifications: [], hide_status: @search_status != "all" }

:javascript
  window.pageInfo = #{@page_data.to_json}
