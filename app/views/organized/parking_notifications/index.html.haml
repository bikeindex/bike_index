.organized-page-header
  %h1
    = t(".parking_notifications")

= render partial: "repeated_updates_information" # Render information about the result of create_and_send_repeats

- # TODO: add translations

.organized-records
  .new-unregistered-btn-wrap
    = link_to "New notification for unregistered bike", new_organization_bike_path(organization_id: current_organization, parking_notification: true), class: "btn btn-sm btn-outline-primary"
  .map-wrapper
    #map
    %a#redo-search-in-map.currently-hidden{ href: "#" }
      redo search in current location
  .row.mt-2.mb-4
    .col-xs-4
      .recordsCount
        %span.number 0
        = t(".matches_visible")
    .col-xs-8
      .recordsTotalCount.less-strong.text-right
        %span.number 0
        total matches
        %em.maxNumberDisplayed.currently-hidden
          \- first
          %span#perPageCount
          loaded
  .row.mt-2.mb-4
    .col-sm-12
      %ul.nav#parking-notification-nav-links
        %li.nav-item
          %a.dropdown-toggle.uncap.btn.btn-sm.btn-outline-primary{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false" }
            - if @search_kind == "all"
              All types
            - else
              #{@search_kind.humanize}s
          .dropdown-menu
            - (["all"] + ParkingNotification.kinds).each do |kind|
              - kind_active = @search_kind == kind
              - kind_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_kind: (kind_active ? nil : kind))
              - kind_display = kind == "all" ? "All types" : "#{kind.humanize}s"
              = link_to kind_display, organization_parking_notifications_path(kind_link_params), class: "dropdown-item linkWithSortableSearchParams #{kind_active ? 'active' : ''}", "data-urlparams" => "search_kind,#{kind}"
              - if kind == "all" # Add a divider after all
                .dropdown-divider
        %li.nav-item.parking-notification-status-li
          :ruby
            status_display_hash = {
              current: {m: "Current notifications"},
              resolved: {m: "Resolved notifications", s: "retrieved, impounded or otherwise resolved"},
              all: {m: "All statuses"},
              retrieved: {m: "Retrieved notifications", s: "notifications marked retrieved"},
              replaced: {m: "Replaced notifications", s: "notifications replaced by another notification"},
              impounded: {m: "Impounded notifications", s: "impound notifications"},
              impounded_resolved: {m: "Impounded resolved", s: "impounded bikes which have been resolved"}
            }
            status_display_hash.except(*@unpermitted_statuses.map(&:to_sym))

          %a.dropdown-toggle.uncap.btn.btn-sm.btn-outline-primary{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false" }
            -# Fallback to status, in case there isn't a match (only happens if manually writing in other statuses right now)
            - current_status = status_display_hash[@search_status.to_sym] || { m: @search_status }
            = current_status[:m]
            - if current_status[:s].present?
              %small.less-strong= current_status[:s]

          .dropdown-menu
            -# NOTE! this list does not include resolved_otherwise - because that's a failure state, which shouldn't happen. If there start being multiple notifications in that state, revisit this decision
            - status_display_hash.each do |status, display_hash|
              - status_active = @search_status == status.to_s
              - status_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_status: (status_active ? nil : status))
              = link_to organization_parking_notifications_path(status_link_params), class: "dropdown-item linkWithSortableSearchParams #{status_active ? 'active' : ''}", "data-urlparams" => "search_status,#{status}" do
                = display_hash[:m]
                - if display_hash[:s].present?
                  %small.less-strong= display_hash[:s]
              - if status == :all # Add a divider after all
                .dropdown-divider
        %li.nav-item
          %a.dropdown-toggle.uncap.btn.btn-sm.btn-outline-primary{ href: "#", role: "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "false" }
            - if @search_unregistered == "not_unregistered"
              Registered bikes only
            - else
              #{@search_unregistered.humanize} bikes
          .dropdown-menu
            - unregistered_all_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_unregistered: "all")
            = link_to "All bikes", organization_parking_notifications_path(unregistered_all_link_params), class: "dropdown-item linkWithSortableSearchParams #{@search_unregistered == 'all' ? 'active' : ''}", "data-urlparams" => "search_unregistered,all"
            .dropdown-divider
            - unregistered_active = @search_unregistered == "only_unregistered"
            - unregistered_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_unregistered: (unregistered_active ? nil : "only_unregistered"))
            = link_to "Only unregistered bikes", organization_parking_notifications_path(unregistered_link_params), class: "dropdown-item linkWithSortableSearchParams #{unregistered_active ? 'active' : ''}", "data-urlparams" => "search_unregistered,only_unregistered"

            - unregistered_not_active = @search_unregistered == "not_unregistered"
            - unregistered_not_link_params = sortable_search_params.merge(organization_id: current_organization.id, search_unregistered: (unregistered_not_active ? nil : "not_unregistered"))
            = link_to "Registered bikes only", organization_parking_notifications_path(unregistered_not_link_params), class: "dropdown-item linkWithSortableSearchParams #{unregistered_not_active ? 'active' : ''}", "data-urlparams" => "search_unregistered,only_unregistered"

        %li.nav-item
          %a#FitMapTrigger{href: "#", class: (@page_data[:default_location] ? "currently-hidden" : "")}
            Fit map to notifications
  = render partial: "/shared/period_select", locals: { skip_submission: true }

  .mt-4
    = render partial: "/shared/bike_search_form", locals: {include_organized_search_fields: true, search_path: organization_parking_notifications_path(organization_id: current_organization.to_param)}

  .row.mt-4.mb-2
    .col-sm-6
      - if search_params_present?
        = pluralize number_with_delimiter(matching_parking_notifications.count), "parking notification"

        - if params[:search_bike_id].present?
          for
          - searched_bike = Bike.unscoped.find_by_id(params[:search_bike_id])
          - if searched_bike.present?
            = link_to searched_bike.title_string, bike_path(searched_bike)
          - else
            %em
              unknown bike ##{params[:search_bike_id]}
          %em.less-strong
            view notifications
            = link_to "for all bikes", organization_parking_notifications_path(sortable_search_params.merge(search_bike_id: nil)), class: "linkWithSortableSearchParams", "data-urlparams" => "search_bike_id,"
      - if params[:user_id].present?
        - user = User.find_by_id(params[:user_id])
        Only notifications created by
        %strong
          = user&.display_name&.truncate(20)
        %span.less-strong
          = link_to "(view by all)", organization_parking_notifications_path(sortable_search_params.merge(user_id: nil)), class: "linkWithSortableSearchParams", "data-urlparams" => "user_id,"

    .col-md-6.col-xs-12
      -# Hide the repeat notification interface because the checks don't display on mobile
      .text-right.hidden-md-down
        %a.gray-link#toggleSendRepeat{ href: "#sendRepeatNotifications", data: { toggle: "collapse", target: "#sendRepeatNotifications" } }
          retrieve/send repeat notification


  - # Form needs to wrap the table too
  = form_for ParkingNotification.new, url: organization_parking_notifications_path(organization_id: current_organization) do |f|
    #sendRepeatNotifications.collapse
      -# similar form on parking notification show
      .row
        .mt-4.mb-4.col-md-8.offset-md-2.col-xl-6.offset-xl-3
          .card
            .card-block
              .card-title
                %h3.uncap
                  Mark retrieved or send follow up notifications
                  %br
                  %em.small.less-strong
                    For table rows with checks
              .card-body
                -# Matching form is on parking notification index
                .row#sendRepeatOrRetrieveFields
                  .col-xs-6
                    = select_tag :kind, options_for_select(parking_notification_repeat_kinds), { prompt: "...", class: "form-control", required: true }
                  .col-xs-6.text-center
                    = submit_tag "Create notifications", class: "btn btn-success btn-md-lg"
    .full-screen-table
      -# only hide status on current - because otherwise it displays the time things were resolved
      = render partial: "/organized/parking_notifications/table", locals: { parking_notifications: [], hide_status: @search_status == "current", render_sortable: true }

:javascript
  window.pageInfo = #{@page_data.to_json}
