-# Note: This should only ever render one alert - hence the elsif
-# The alerts are in priority from highest to lowest
-# We're manually rendering only the general alerts here


- if Flipper.enabled?(:phone_verification) && current_user.alert_slugs.include?("phone_waiting_confirmation")
  -# TODO: use existing user_alert to select correct phone
  - if current_user.phone_waiting_confirmation?
    - phone_number = current_user.user_phones.waiting_confirmation.reorder(:updated_at).last

    .confirm-phone-number-popover
      %a.less-strong{ href: "#", data: { toggle: "modal", target: "#confirmPhoneNumber" } }
        = t(".confirm_your_phone_number")

    - modal_title = t(".verify_number", phone_number: phone_display(phone_number.phone))
    - modal_body = capture_haml do
      .modal-body
        = form_tag user_phone_path(phone_number.to_param), method: :patch, action: "update", class: "form" do
          .form-group
            = label_tag :confirmation_code, t(".verification_code")
            = text_field_tag :confirmation_code, "", required: true, class: "form-control"
          .modal-btn-footer
            .form-submit-button
              = submit_tag modal_title, class: "btn btn-success btn-lg"

    = render partial: "shared/modal", locals: { title: modal_title, modal_body: modal_body, id: "confirmPhoneNumber" }
  - else
    -# enqueue job to update user (enqueuing doesn't write to DB, so can be performed by read replica)
    - current_user.skip_update = false # required for testing
    - current_user.perform_user_update_jobs

- elsif current_user.alert_slugs.include?("stolen_bike_without_location")
  -# TODO: use existing user_alert to select correct stolen bike
  - without_location_bikes = current_user.bikes.status_stolen.select { |bike| bike.current_stolen_record&.without_location? }
  - if without_location_bikes.present?

    - modal_body = capture_haml do
      .modal-body
        %p
          = t(".location_critical_html", bike_type: without_location_bikes.first.type)
        - without_location_bikes.each do |bike|
          %p
            = link_to t(".add_location_theft_bike_title_html", bike_title: bike.title_string), edit_bike_path(bike.to_param, edit_template: "theft_details", anchor: "where-theft-happened")
        %p
          %em.less-strong
            = t(".without_location_all_is_lost", bike_type: without_location_bikes.first.type)

    = render partial: "shared/modal", locals: { title: t(".stolen_missing_location_title"), modal_body: modal_body, id: "stolenMissingLocationModal", start_open: true }

- elsif current_user.alert_slugs.include?("theft_alert_without_photo")
  -# TODO: use existing user_alert to select correct theft alert
  - missing_photo_bikes = current_user.bikes.status_stolen.select { |bike| bike.current_stolen_record&.theft_alert_missing_photo? }
  - if missing_photo_bikes.present?

    - modal_body = capture_haml do
      .modal-body
        %p
          = t(".photo_critical_html", bike_type: missing_photo_bikes.first.type)
        - missing_photo_bikes.each do |bike|
          %p
            = link_to t(".add_photo_theft_bike_title_html", bike_title: bike.title_string), edit_bike_path(bike.to_param, edit_template: "photos")
        %p
          %em.less-strong
            = t(".without_photo_all_is_lost", bike_type: missing_photo_bikes.first.type)

    = render partial: "shared/modal", locals: { title: t(".missing_stolen_photo_title"), modal_body: modal_body, id: "stolenMissingLocationModal", start_open: true }
