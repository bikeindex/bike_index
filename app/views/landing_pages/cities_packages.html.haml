- lead_type = "city"

:ruby
  plans = {
    free: { cost: 0, subhead: nil },
    supporting: { cost: 499, subhead: t(".keep_us_pedaling")},
    small: { cost: 3999, subhead: t(".town") },
    medium: { cost: 5999, subhead: t(".small_city"), popular: true },
    large: { cost: 7999, subhead: t(".metropolis") },
  }
  plan_sizes = plans.keys
  plan_features = [
    { free: true, supporting: true, small: true, medium: true, large: true, title: t("plan_features.create_organization_account") },
    { free: true, supporting: true, small: true, medium: true, large: true,  title: t("plan_features.embed_a_registration_form") },
    { free: false, supporting: true, small: true, medium: true, large: true,  title: t("plan_features.search_bikes_in_organization") },
    { free: false, supporting: true, small: true, medium: true, large: true,  title: t("plan_features.import_csv_file") },
    { free: false, supporting: true, small: true, medium: true, large: true,  title: t("plan_features.organization_dashboard") },
    { free: "10", supporting: "10", small: "10", medium: "unlimited", large: "unlimited", title: t("plan_features.staff_accounts") },
    { free: false, supporting: false, small: true, medium: true, large: true,  title: t("plan_features.landing_page") },
    { free: false, supporting: false, small: true, medium: true, large: true,  title: t("plan_features.qr_sticker") },
    { free: false, supporting: false, small: true, medium: true, large: true,  title: t("plan_features.ongoing_programming") },
    { free: false, supporting: false, small: false, medium: true, large: true,  title: t("plan_features.contact_registrants") },
    { free: false, supporting: false, small: false, medium: true, large: true,  title: t("plan_features.add_logos") },
    { free: false, supporting: false, small: false, medium: true, large: true,  title: t("plan_features.export_custom_data") },
    { free: false, supporting: false, small: false, medium: false, large: true,  title: t("plan_features.add_form_fields") },
    { free: false, supporting: false, small: false, medium: false, large: true,  title: t("plan_features.mailing_stickers") },
    { free: false, supporting: false, small: false, medium: true, large: true,  title: t("plan_features.nest_organizations") },
  ]

.signup-landing-page.signup-landing-page-packages.signup-landing-page-cities-packages
  %header.banner-header
    .container
      .packages-main-title
        %h1
          = t(".bike_index_for_cities")
        %h2
          = t(".give_your_constituents_the_bike_registry_")
          %br
          = t(".all_plans_come_with_a_30day_free_trial")
      %ul.packages-price-list
        = render partial: "/landing_pages/packages_list", locals: { lead_type: lead_type, plan_features: plan_features, plans: plans, render_features: false }

  .container.main-compare-packages-container
    %h2.header-font-uncap
      = t(".compare_plans_and_features")
    %table.table.compare-packages-table.table-striped
      %thead
        %tr
          %th
          %th
            - plans.each do |plan, plan_data|
              - if plan == :free
                %h4= t(".free")
                %h3= number_to_currency(0, precision: 0)
                %p= t(".forever")
                = link_to t(".sign_up_now"), new_organization_path, class: "btn btn-primary"
              - else
                %th
                  %h4 #{plan.to_s.titleize} #{lead_type}
                  %h3= number_to_currency(plan_data[:cost], precision: 0)
                  %p
                    = default_currency
                    = "/"
                    = t(".year")
                  %a.btn.btn-primary.tryPaidButton{ href: "#", "data-plan" => plan.to_s }
                    = t(".try_for_free")

      %tbody
        - plan_features.each do |feature|
          %tr
            %td
              = feature[:title]
            - plan_sizes.each do |size|
              %td
                - if feature[size].is_a?(String)
                  = feature[size]
                - else
                  %span.feature-boolean
                    - if feature[size]
                      %span.included-feature
                        &#8226;
                    - else
                      &dash;


    %ul.packages-price-list-small-screens
      = render partial: "/landing_pages/packages_list", locals: { lead_type: lead_type, plan_features: plan_features, plans: plans, render_features: true }

    %p.mt-4
      = render partial: "landing_pages/find_out_more"

  .contact-us-callout-wrapper
    .contact-us-callout
      = t(".questions_want_to_get_started")
      = link_to t(".contact_us"), nil, class: "btn btn-primary tryPaidButton"

- modal_body = capture_haml do
  = form_for @feedback, html: { class: 'organized-form' } do |f|
    .modal-body
      .form-group.currently-hidden
        - package_opts = plan_sizes.map { |s| [t(".package_title", name: s.to_s.titleize), s] }
        = f.select(:package_size, package_opts, { prompt: t(".choose_a_package_size") }, { class: "form-control" })
      .form-group
        = f.label :name, lead_type.titleize, class: "form-label"
        = f.text_field :name, required: true, class: "form-control"
      .form-group
        = f.label :phone_number, class: "form-label"
        = f.text_field :phone_number, class: "form-control"
      .form-group
        = f.label :email, class: "form-label"
        = f.email_field :email, value: current_user&.email, required: true, class: "form-control"
      .form-group.additional-field
        = f.label :additional, t(".additional"), class: "form-label"
        = f.text_area :additional, class: "form-control"
      - if @feedback.errors.present?
        .form-group.additional-field
          = f.text_area :body,  class: "form-control", rows: 2, required: true
      - else
        = f.hidden_field :body
      = f.hidden_field :feedback_type, value: "lead_for_#{lead_type}"

      = f.submit t(".sign_up"), class: "btn btn-primary btn-lg"

= render partial: "/shared/modal",
locals: { title: t(".contact_us_for_trial"), id: "organizationSignupModal", modal_body: modal_body, start_open: @page_errors }
