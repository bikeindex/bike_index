- show_sticker_modal = false

.card.organized-access-panel
  .card-block
    .card-title
      .row
        .col-xs-6
          %h3.header-font-alt
            %span.hidden-sm-down
              = passive_organization.short_name
            = t(".access_panel")
        .col-xs-6
          - if @bike.unregistered_parking_notification?
            %p.strong.text-warning.text-right
              = t(".unregistered_parking_notification")
          - elsif @passive_organization_registered
            %p.text-success.text-right
              %span.hidden-md-down
                = t(".bike_is_registered", bike_type: @bike.type, org_name: passive_organization.short_name)
              %span.hidden-lg-up
                = t(".is_registered", org_name: passive_organization.short_name)
          - else
            %p.text-warning.text-right
              %span.hidden-md-down
                = t(".bike_is_not_registered_html", bike_type: @bike.type, org_name: passive_organization.short_name)
              %span.hidden-lg-up
                = t(".is_not_registered_html", org_name: passive_organization.short_name)
    .card-body
      .row
        - display_unstolen_notification_form = !@bike.stolen? && passive_organization.enabled?("unstolen_notifications")
        - if passive_organization.ambassador? && @bike.current_stolen_record.present?
          .col-xs-12.mb-2
            .text-right.less-strong
              = t(".as_a_bikeindex_ambassador_html")

              = link_to t(".mark_bike_recovered"), edit_bike_recovery_url(bike_id: @bike.id, token: @bike.current_stolen_record.find_or_create_recovery_link_token), class: "btn btn-success btn-sm"

        .mb-2{ class: display_unstolen_notification_form ? "col-md-7" : "col-sm-12" }
          %table.table-list
            %tbody
              %tr
                %td= t(".permission")
                %td
                  - if @passive_organization_authorized
                    = t(".org_can_edit_bike", org_name: passive_organization.short_name, bike_type: @bike.type)
                    - if @bike.can_edit_claimed_organizations.pluck(:id).include?(passive_organization.id)
                      %em.small
                        = t(".organization_can_edit_after_claimed", bike_type: @bike.type)
                    = link_to t(".edit"), edit_bike_path(@bike), class: "btn btn-success btn-sm float-right"
                  - else
                    %em.small.less-strong
                      = t(".org_cannot_edit", org_name: passive_organization.short_name)
              - if passive_organization.enabled?("bike_stickers") # Always display stickers if org has paid for them
                - show_sticker_modal = true
                %tr
                  %td
                    = t(".sticker")
                  %td
                    - stickers = @bike.bike_stickers.reorder(claimed_at: :desc)
                    - if stickers.any?
                      %ul
                        - stickers.each do |bike_sticker|
                          %li
                            - if bike_sticker.organization.present? && bike_sticker.organization == passive_organization
                              = link_to bike_sticker.code, edit_organization_sticker_path(id: bike_sticker.code, organization_id: bike_sticker.organization&.to_param)
                            - else
                              = bike_sticker.code
                            - if bike_sticker.claimed_at.present?
                              %small.less-strong
                                claimed
                                %em.convertTime.preciseTime
                                  = l bike_sticker.claimed_at, format: :convert_time
                    .small.text-right
                      %a.less-strong{ href: "#", style: "opacity: 0.8; text-align: right;", data: { toggle: "modal", target: "#assignStickerModal" } }
                        = t(".link_sticker")
              - if @bike.unregistered_parking_notification?
                %tr
                  %td{ colspan: 2, style: "text-align: center; font-size: 1rem;" }
                    = t(".added_to_track_parking_notification", bike_type: @bike.type)
              - elsif @passive_organization_registered # Only display information about the bike if bike is registered through org
                - if passive_organization.parent?
                  %tr
                    %td
                      = t(".organization_registered")
                    %td
                      - if @bike.creation_organization == passive_organization
                        %small= @bike.creation_organization.name
                      - else
                        %em.small= t(".organization_child")
                        = @bike.creation_organization&.name
                %tr
                  %td= t(".owner_name")
                  %td= @bike.owner_name
                %tr
                  %td= t(".owner_email")
                  %td= @bike.owner_email
                %tr
                  %td= t(".registered")
                  %td
                    %span.convertTime
                      = l @bike.created_at, format: :convert_time
                %tr
                  %td= t(".claimed")
                  %td= check_mark if @bike.claimed?
                %tr
                  %td= t(".creator")
                  %td
                    = @bike.creator&.display_name
                    %em.small.less-strong
                      = origin_display(@bike.creation_description)
                - passive_organization.additional_registration_fields.each do |reg_field|
                  - bike_attr = PaidFeature.reg_field_bike_attrs[reg_field.to_sym]
                  - if bike_attr == "registration_address"
                    %tr
                      %td= t(".address")
                      %td
                        - address = @bike.registration_address
                        - if @bike.valid_registration_address_present?
                          = address["street"]
                          %br
                          = [address['city'], address['state']].reject(&:blank?).join(", ")
                          = address['zipcode']
                        - else
                          - address.except("latitude", "longitude").each do |k, v|
                            %span.less-strong
                              #{k == "address" ? "street" : k}:
                            = v
                            %br
                          %span.text-warning
                            %small invalid address
                  - else
                    %tr
                      %td
                        = "#{(bike_attr || reg_field).humanize}"
                      %td
                        - if bike_attr == "organization_affiliation"
                          = @bike.organization_affiliation.humanize
                        - else
                          = @bike.send(bike_attr)

                - if passive_organization.enabled?("avery_export")
                  %tr
                    %td= t(".avery_exportable")
                    %td
                      - if Export.avery_export_bike?(@bike)
                        %span.text-success
                          = t(".is_true")
                      - else
                        %span.text-danger
                          = t(".is_false")
                        %small.em
                          - unless @bike.owner_name.present?
                            = t(".missing_owner_name")
                          - unless @bike.valid_registration_address_present?
                            = t(".missing_address")

          - if !@passive_organization_registered # Apologize, bike isn't organizations
            %p.less-strong.mt-4
              %em
                = t(".unable_to_display_additional_information", bike_type: @bike.type, org_name: passive_organization.name)
        - if display_unstolen_notification_form
          .col-md-5.unstolen-notification-box
            %p
              %em= t(".bike_not_marked_stolen", bike_type: @bike.type.titleize)
              %strong= t(".believe_it_is_anyway")
            - if @bike.contact_owner?(current_user)
              %h3= t(".contact_the_owner")
              - redirect = new_session_url(return_to: bike_path(@bike, params: {contact_owner: true})) unless current_user.present?
              #write_them_a_message.collapse{ class: ("in" unless @contact_owner_open), data: { redirect: redirect } }
                %a.btn.btn-primary.btn-lg{ href: '#new_stolen_message', 'aria-controls' => 'new_stolen_message', 'data-toggle' => 'collapse' }
                  = t(".write_them_a_message")

              .collapse#new_stolen_message{ class: ("in" if @contact_owner_open) }
                - @stolen_notification ||= StolenNotification.new(bike: @bike, sender: current_user)
                = form_for @stolen_notification do |f|
                  = f.hidden_field :bike_id, value: @bike.id
                  = f.text_field :reference_url, placeholder: t(".link_url_for_online_sighting"), class: "form-control additional-field"
                  - if current_user.ambassador?
                    = f.text_area :message, required: true, value: @stolen_notification.default_message, rows: 6, class: "form-control"
                  - else
                    = f.text_area :message, required: true, placeholder: t(".where_did_you_see_this_bike", bike_type: @bike.type), rows: 6, class: "form-control"

                  .send-message
                    = f.submit t(".send_message"), class: 'btn btn-primary btn-lg'

              - if @bike.phoneable_by?(current_user)
                %p.phoneable-by.mt-4
                  = t(".or_call_owner_html")
                  = phone_link(@bike.phone)
            - else
              %p
                = t(".user_revoked_permission_html")
              %p
                = support_link = link_to(t(".support_email"), "mailto:#{t('.support_email')}")
                = t(".email_to_deal_with_this_html", support_link: support_link)

      / Additional law enforcement information
      - if passive_organization.enabled?("additional_registrations_information")
        .row.law-enforcement-wrapper.mt-4
          .col-xs-12.mt-2
            %p.mt-2.mb-2
              = t(".additional_registrations_information")
              %em.less-strong.hidden-md-down
                = t(".additional_registrations_information_visible_because", org_name: passive_organization.short_name)

            %table.table.table-striped.table-bordered.table-sm.without-exterior-border
              %tbody
                %thead
                  %th
                    = t(".additional_registrations_registered_at")
                  %th

                -# If user isn't present, use email to search
                - other_user_bikes = @bike.user.present? ? @bike.user.rough_approx_bikes : Bike.where(owner_email: @bike.owner_email)
                - other_user_bikes.reorder(created_at: :desc).limit(25).each do |other_bike|
                  %tr
                    %td
                      %span.convertTime
                        = l other_bike.created_at, format: :convert_time
                    %td
                      - if other_bike.id == @bike.id
                        %em.less-strong= t(".additional_registrations_this_bike", bike_type: @bike.type)
                      - else
                        = link_to organized_bike_text(other_bike), bike_path(other_bike)

        - duplicate_bikes = @bike.duplicate_bikes.where.not(id: @bike.id)
        - if duplicate_bikes.any?
          %p.mt-2.mb-2
            = t(".additional_registrations_potential_duplicates")
            - @bike.normalized_serial_segments.considered_for_duplicate.each do |normalized_segment|
              %code= normalized_segment.segment
          %table.table.table-striped.table-bordered.table-sm.without-exterior-border
            %tbody
              - duplicate_bikes.reorder(created_at: :desc).limit(25).each do |duplicate_bike|
                %tr
                  %td
                    %span.convertTime
                      = l duplicate_bike.created_at, format: :convert_time
                  %td
                    = link_to organized_bike_text(duplicate_bike), bike_path(duplicate_bike)
                    %small.less-strong
                      = duplicate_bike.normalized_serial_segments.considered_for_duplicate.pluck(:segment).join(", ")
      - # TODO: add translations
      -# if the bike was initially an unregistered parking notification, but no longer is, show that information
      - if @bike.created_by_parking_notification && !@bike.unregistered_parking_notification? && @bike.parking_notifications.reorder(:created_at).first.organization_id == passive_organization.id
        - unregistered_parking_notification = @bike.parking_notifications.reorder(:created_at).first
        .small
          %em
            %span.text-warning
              Bike originally registered by an
              = link_to unregistered_parking_notification.kind_humanized.downcase, organization_parking_notification_path(unregistered_parking_notification, organization_id: unregistered_parking_notification.organization.to_param), class: "text-warning text-underline"
              notification
            - if @bike.status == "with_owner"
              but was sent to a new owner, so is now a standard #{@bike.type} on Bike Index.


      - if @bike.impound_records.resolved.where(organization_id: passive_organization.id).any?
        %p
          %strong Previously impounded
          \- #{link_to "view impound records", organization_impound_records_path(organization_id: passive_organization.to_param, search_bike_id: @bike.id, search_status: "all")}!

- # TODO: add translations
- if passive_organization.enabled?("graduated_notifications")
  - graduated_notifications = @bike.graduated_notifications(passive_organization).order(id: :desc)
  - if graduated_notifications.any?
    .parking-notifications-wrap
      %h3.mt-2.mb-2 Graduated notifications
      = render partial: "/organized/graduated_notifications/table", locals: { graduated_notifications: graduated_notifications, skip_email: true, render_remaining_at: true }


- if passive_organization.enabled?("parking_notifications")
  - parking_notifications = passive_organization.parking_notifications.where(bike_id: @bike.id).order(id: :desc)
  .parking-notifications-wrap
    .row.mt-2.mb-2
      .col-xs-8.col-md-6
        %h3.uncap
          Parking notifications
      .col-xs-4.col-md-6
        .text-right
          %em
            = link_to organization_parking_notifications_path(organization_id: passive_organization.to_param, search_bike_id: @bike.id, search_status: "all") do
              view map
              .d-none.d-md-inline
                of
                = "notifications".pluralize(parking_notifications.count)

    %p{ style: "margin-top: -12px;" }
      = pluralize number_with_delimiter(parking_notifications.current.count), "current notification"
      - if parking_notifications.resolved.count > 0
        \-
        %a{ href: "#resolvedParkingNotificationTable", "aria-controls" => "resolvedParkingNotificationTable", "data-toggle" => "collapse" }
          show
          = pluralize number_with_delimiter(parking_notifications.resolved.count), "resolved notification"
      for #{@bike.type}
    - if parking_notifications.current.any?
      = render partial: "/organized/parking_notifications/table", locals: { parking_notifications: parking_notifications.current, skip_bike: true, skip_map_cell: true, render_address: true, skip_resolved: true }

    - if parking_notifications.resolved.any?
      .collapse#resolvedParkingNotificationTable
        %p.mb-0
          %strong Resolved notifications
        = render partial: "/organized/parking_notifications/table", locals: { parking_notifications: parking_notifications.resolved.limit(10), skip_bike: true, skip_map_cell: true, render_address: true }

    - if @bike.status_impounded?
      %hr
      %h3.uncap.mt-4.text-center
        %span.text-warning
          #{@bike.type} is impounded!
        - if @bike.current_impound_record.present? && @bike.current_impound_record.organization_id == passive_organization.id
          = link_to "Impound record ##{@bike.current_impound_record.display_id}", organization_impound_record_path(@bike.current_impound_record.display_id, organization_id: passive_organization.to_param)

    - else
      - parking_notification_open = params[:parking_notification].present?

      .text-center#openNewParkingNotification.collapse{ class: (parking_notification_open ? "" : "in") }
        %a.btn.btn-primary.btn-lg{ href: "#newParkingNotificationFields" }
          New parking notification

      #newParkingNotificationFields.collapse{ class: (parking_notification_open ? "in" : "")  }
        %hr
        - parking_notification_present = @parking_notification.present?
        - @parking_notification ||= ParkingNotification.new(bike_id: @bike.id, organization: passive_organization, use_entered_address: false)
        - unless parking_notification_present
          / We only want to assign is_repeat if creating a new parking notification
          - @parking_notification.is_repeat = @parking_notification.likely_repeat?
          - @parking_notification.set_location_from_organization
        - @parking_notification.kind ||= @parking_notification.potential_initial_record&.kind || ParkingNotification.kinds.first

        = form_for @parking_notification, url: organization_parking_notifications_path(organization_id: passive_organization) do |f|
          = f.hidden_field :bike_id
          = f.hidden_field :latitude, class: "parkingLocation-latitude"
          = f.hidden_field :longitude, class: "parkingLocation-longitude"
          = f.hidden_field :accuracy, class: "parkingLocation-accuracy"
          .mt-4.text-center
            - if @parking_notification.can_be_repeat?
              .btn-group{ role: "group", "aria-label" => "Repeat notice", data: { toggle: "buttons" } }
                %label.btn.btn-secondary{ class: (@parking_notification.is_repeat ? "" : "active") }
                  = f.radio_button :is_repeat, false
                  First notice
                %label.btn.btn-secondary{ class: (@parking_notification.is_repeat ? "active" : ""), disabled: !@parking_notification.can_be_repeat? }
                  = f.radio_button :is_repeat, true
                  -# We have to add 1 on the repeat because this hasn't been created yet
                  Repeat ##{@parking_notification.earlier_bike_notifications.count} of earlier notification

          .row.mt-4
            .col-md-6
              .form-group
                = f.label :message, "Optional message to send to user"
                = f.text_area :message, placeholder: "Optional", class: 'form-control'
            .col-md-6
              .form-group
                %p{ style: "margin-bottom: 0;" } Notification because
                - ParkingNotification.kinds.each do |kind|
                  %label.radio-inline.mr-2
                    = f.radio_button :kind, kind
                    = ParkingNotification.kinds_humanized[kind.to_sym]

          .form-group.text-center.mt-4
            = submit_tag "Create parking notification!", class: "btn btn-success parkingLocation-submit-btn", disabled: true

          .row.mt-4
            .col-md-6#choseLocationMethod
              %span.less-strong.waitingOnLocationText.hideOnLocationFind.collapse.in
                = t(".waiting_on_device_location")
              .use-entered-address-radios.showOnLocationFind.collapse.mb-2
                .radio
                  %label
                    = f.radio_button :use_entered_address, false
                    Use current location
                .radio
                  %label
                    = f.radio_button :use_entered_address, true
                    Enter address manually

              .form-group.address-group.related-fields.collapse
                .ifManualRequired
                  = f.text_field :street, placeholder: t(".address_or_intersection"), class: "form-control"

                .ifManualRequired
                  = f.text_field :city, placeholder: t(".city"), class: "form-control"

                .row.countrystatezip
                  .col-sm-4.fancy-select.unfancy.no-restore-on-backspace.hidden-other{ class: (@parking_notification.country_id == Country.united_states.id ? "unhidden" : "") }
                    = f.collection_select(:state_id, State.all, :id, :name, { include_blank: true, prompt: t(".state") }, { class: "form-control" })
                  .col-sm-4
                    = f.text_field :zipcode, placeholder: t(".zipcode"), class: "form-control"
                  .col-sm-4.fancy-select.unfancy.no-restore-on-backspace.ifManualRequired#us_id_data{ data: { usid: Country.united_states.id } }
                    = f.select(:country_id, Country.select_options,
                      { prompt: t(".choose_country") },
                      { class: 'country-select-input form-control' } )
            .col-md-6
              .form-group.less-strong
                = f.label :internal_notes, t(".parking_notification_notes_html", org_name: passive_organization.short_name)
                = f.text_area :internal_notes, class: "form-control"

- if show_sticker_modal
  - sticker_modal_body = capture_haml do
    .modal-body
      = form_for BikeSticker.new, { url: organization_sticker_path(id: "code", organization_id: passive_organization.to_param), action: "update", method: "PUT" } do |f|
        = f.hidden_field :bike_id, value: @bike.id
        .form-group
          = f.label :code, t(".sticker_code"), class: "org-form-label"
          = f.text_field :code, required: true, class: "form-control"
        .modal-btn-footer
          .form-submit-button
            = f.submit t(".assign_sticker"), class: "btn btn-success btn-lg"

  = render partial: "shared/modal", locals: { title: t(".assign_sticker"), modal_body: sticker_modal_body, id: "assignStickerModal" }
