# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby20 < Parser::Base


  def version
    20
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-569,265,563,-488,265,-100,-101,-569,-569,-569,-286,563,-569,-569,-569',
'482,-569,265,214,605,-103,235,563,385,-481,-569,-569,-569,-569,607,584',
'-481,-102,-103,573,-98,-569,-569,-101,-569,-569,-569,-569,-569,563,563',
'-487,110,-100,574,-286,-102,109,232,211,212,-99,234,233,215,803,-106',
'569,-99,-105,260,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569',
'-569,-569,-569,965,684,-569,-569,-569,604,770,-569,264,-92,-569,264',
'-104,-569,-569,606,-569,-565,-569,-98,-569,511,-569,-569,264,-569,-569',
'-569,-569,-569,-289,-569,-569,-569,-91,-92,967,-289,-289,-289,110,713',
'713,-289,-289,109,-289,-569,-565,110,-569,-569,-569,-569,109,-569,583',
'-569,-103,-102,110,-93,-94,-103,-89,109,-289,-289,215,-289,-289,-289',
'-289,-289,-105,-92,-101,-566,-94,110,609,-101,110,110,109,837,-100,109',
'109,-102,-97,-100,-90,-96,-102,713,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,683,768,-289,-289,-289,-92,625,612',
'-92,-263,-289,-95,769,-289,-92,754,211,212,-289,110,-289,592,-289,-289',
'109,-289,-289,-289,-289,-289,-289,-289,969,-289,-94,110,110,-289,-289',
'-289,109,109,-289,-289,-289,642,-289,-289,211,212,-289,-289,642,-95',
'-101,-289,-289,-289,-289,-104,211,212,-91,265,614,-103,-289,-289,-100',
'-289,-289,-289,-289,-289,-94,-473,855,-94,511,215,641,592,-473,-94,642',
'594,593,641,-562,110,524,440,618,526,109,747,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,110,619,-289,-289,-289',
'109,771,-289,642,641,-289,-488,260,-289,-289,-96,-289,260,-289,-100',
'-289,-105,-289,-289,-563,-289,-289,-289,-289,-289,-473,-289,215,-289',
'-106,594,593,-473,592,215,264,629,-562,641,215,745,-473,-289,-569,592',
'-289,-289,-289,-289,-473,-289,575,-289,-90,-104,576,-473,-473,-473,-99',
'-562,-473,-473,-473,702,-473,542,541,540,632,543,-476,79,-473,-480,-473',
'-473,-473,-476,832,803,-480,-411,-563,80,-473,-473,-476,-473,-473,-473',
'-473,-473,257,81,-569,207,594,593,599,258,215,-569,208,973,969,-563',
'-565,594,593,595,-569,206,559,558,-473,-473,-473,-473,-473,-473,-473',
'-473,-473,-473,-473,-473,-473,-473,235,-569,-473,-473,-473,-411,-473',
'-473,592,-84,-473,620,-411,-473,-473,-70,-473,828,-473,235,-473,-411',
'-473,-473,-569,-473,-473,-473,-473,-473,235,-473,702,-473,542,541,540',
'592,543,-476,-411,592,-484,110,592,235,-476,-473,109,-484,-473,-473',
'-473,-473,-476,-473,215,-473,-92,-473,215,-476,-476,-476,-101,-487,-476',
'-476,-476,118,-476,215,594,593,597,-84,-569,257,-476,-479,-476,-476',
'-476,-569,258,660,-479,980,-565,215,-476,-476,-569,-476,-476,-476,-476',
'-476,621,110,517,594,593,603,109,594,593,608,594,593,590,-569,-89,929',
'950,542,541,540,-98,543,-476,-476,-476,-476,-476,-476,-476,-476,-476',
'-476,-476,-476,-476,-476,211,212,-476,-476,-476,571,-476,-476,579,235',
'-476,-94,572,-476,-476,932,-476,-103,-476,209,-476,570,-476,-476,580',
'-476,-476,-476,-476,-476,981,-476,671,-476,784,-478,542,541,540,785',
'543,232,-478,110,894,234,233,-476,109,551,-476,-476,-476,-476,-569,-476',
'894,-476,579,-476,894,-569,-569,-569,986,578,-97,-569,-569,-290,-569',
'547,-106,110,580,677,-290,-483,109,-569,556,555,559,558,-483,-290,524',
'552,678,523,-569,-569,-482,-569,-569,-569,-569,-569,524,-482,680,526',
'545,-289,542,541,540,549,543,524,-289,952,526,215,686,-566,689,551,690',
'-289,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569',
'-569,692,549,-569,-569,-569,547,626,211,212,694,-569,551,696,-569,556',
'555,559,558,-569,705,-569,552,-569,-569,785,-569,-569,-569,-569,-569',
'-290,-569,-569,-569,551,706,702,-290,542,541,540,-279,543,707,559,558',
'-290,-569,-279,552,-569,-569,313,-93,709,-569,569,-279,716,-102,286',
'69,70,71,9,57,106,559,558,63,64,744,552,698,67,748,65,66,68,30,31,72',
'73,113,114,115,116,117,29,28,27,98,97,99,100,749,702,19,542,541,540',
'-264,543,8,45,288,10,102,101,103,92,56,94,93,95,755,96,104,105,-566',
'90,91,42,43,41,702,473,542,541,540,-565,543,677,698,473,702,-485,542',
'541,540,393,543,701,-485,40,395,394,33,211,212,58,59,-485,969,60,929',
'35,542,541,540,44,543,698,312,702,215,542,541,540,20,543,899,698,773',
'89,79,82,83,254,84,86,85,87,314,315,832,803,80,88,286,69,70,71,9,57',
'62,484,81,63,64,486,698,796,67,671,65,66,68,30,31,72,73,113,114,115',
'116,117,29,28,27,98,97,99,100,235,702,19,542,541,540,215,543,8,45,288',
'10,102,101,103,92,56,94,93,95,260,96,104,105,260,90,91,42,43,41,235',
'671,232,235,-486,502,234,233,698,230,231,-486,503,506,507,235,803,701',
'215,40,-486,501,33,215,952,58,59,-279,826,60,215,35,232,803,-279,44',
'234,233,836,230,231,739,740,-279,20,741,104,105,215,89,79,82,83,215',
'84,86,85,87,254,1005,845,-265,80,88,286,69,70,71,9,57,62,1006,81,63',
'64,1007,854,969,67,969,65,66,68,30,31,72,73,113,114,115,116,117,29,28',
'27,98,97,99,100,969,702,19,542,541,540,215,543,8,45,288,10,102,101,103',
'92,56,94,93,95,857,96,104,105,689,90,91,42,43,41,235,702,978,542,541',
'540,860,543,698,979,862,864,866,215,514,868,249,250,977,40,869,515,33',
'872,874,58,59,875,671,60,438,35,232,877,238,44,234,233,698,230,231,210',
'-263,236,20,237,881,883,886,89,79,82,83,689,84,86,85,87,888,890,892',
'894,80,88,286,69,70,71,9,57,62,894,81,63,64,215,900,902,67,904,65,66',
'68,30,31,72,73,205,204,396,203,439,29,28,27,98,97,99,100,441,442,19',
'910,214,913,215,916,8,45,288,10,102,101,103,92,56,94,93,95,-266,96,104',
'105,894,90,91,42,43,41,235,-588,-588,-588,-588,241,243,-486,579,-588',
'-588,-485,952,926,-486,932,249,250,-485,40,933,934,33,-486,580,58,59',
'-485,943,60,944,35,232,473,238,44,234,233,569,230,231,242,240,236,20',
'237,484,486,952,89,79,82,83,954,84,86,85,87,493,-69,383,215,80,88,286',
'69,70,71,9,57,62,496,81,63,64,497,955,504,67,269,65,66,68,30,31,72,73',
'215,260,508,512,513,29,28,27,98,97,99,100,235,960,19,215,527,528,486',
'689,8,45,288,10,102,101,103,92,56,94,93,95,963,96,104,105,,90,91,42',
'43,41,235,-588,-588,-588,-588,241,243,-290,-289,-588,-588,436,,,-290',
'-289,249,250,437,40,-566,,290,-290,-289,58,59,438,,60,,35,232,,238,44',
'234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,235,-588,-588,-588,-588,241,243,-332',
'-289,-588,-588,,,,-332,-289,249,250,,40,-566,,290,-332,-289,58,59,,',
'60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235,239,244,245,246,241',
'243,251,,247,248,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44',
'234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,235,-588,-588,-588,-588,241,243,,,-588',
'-588,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230',
'231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69',
'70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35',
'232,,238,44,234,233,,230,231,,,236,20,237,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,42,43,41,235,239,244,245,246,241,243,251,252',
'247,248,,-588,-588,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234',
'233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
'286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,42,43,41,235,239,244,245,246,241,243,251,252,247,248',
',-588,-588,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,',
'230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69',
'70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,19,,,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,235,239,244,245,246,241,243,,,247,248,,,,,,249,250,',
'40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20',
'237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
'8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235',
'-588,-588,-588,-588,241,243,,,-588,-588,,,,,,249,250,,40,,,33,,,58,59',
',,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235,,,,,,,,,,,,,,,,249',
'250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,,,236,20',
'237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
'8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235',
',,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233',
',230,231,,,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,235,-588,-588,-588,-588,241,243,,,-588,-588,,,,,,249',
'250,,40,,,33,,,58,59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236',
'20,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,',
',,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
'235,,,,,,,,,,,,,,,,249,250,,40,,,290,,,58,59,,,60,,35,232,,238,44,234',
'233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,,,58,59,,,60,,35',
'232,,238,44,234,233,,230,231,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,235,,,,,,,,,,,,,,,,249,250,,40,,,33,',
',58,59,,,60,,35,232,,,44,234,233,,230,231,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95',
',96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,5,69,70,71,9,57,62,',
'81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288',
'10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,19,,,,,630,8,45,288,10,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,235,239,244,245,246,241,243,251',
'252,247,248,,228,229,,,249,250,,40,,,33,,,58,59,,,60,,35,232,,238,44',
'234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,253,-571,-240,,,62,,81,-571,-571,-571,,,-571,-571,-571,,-571',
',,,,,,,,-571,-571,-571,-571,,,,,,,,-571,-571,,-571,-571,-571,-571,-571',
',,,,,,,,,,,,,,,,,,,,,,-571,-571,-571,-571,-571,-571,-571,-571,-571,-571',
'-571,-571,-571,-571,,,-571,-571,-571,,,-571,,,-571,,,-571,-571,,-571',
',-571,,-571,,-571,-571,,-571,-571,-571,-571,-571,,-571,-571,-571,,,',
',,,,,,,,,,-571,,,-571,-571,-571,-571,-570,-571,,-571,,,,-570,-570,-570',
',,-570,-570,-570,,-570,,,,,,,,,-570,-570,-570,-570,,,,,,,,-570,-570',
',-570,-570,-570,-570,-570,,,,,,,,,,,,,,,,,,,,,,,-570,-570,-570,-570',
'-570,-570,-570,-570,-570,-570,-570,-570,-570,-570,,,-570,-570,-570,',
',-570,,,-570,,,-570,-570,,-570,,-570,,-570,,-570,-570,,-570,-570,-570',
'-570,-570,,-570,-570,-570,,,,,,,,,,,,,,-570,,,-570,-570,-570,-570,-280',
'-570,,-570,,,,-280,-280,-280,,,-280,-280,-280,,-280,,,,,,,,,,-280,-280',
'-280,,,,,,,,-280,-280,,-280,-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,',
',,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
',,-280,-280,-280,,,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280,-280',
',-280,-280,-280,-280,-280,,-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280',
'-280,-280,,-280,,-280,286,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,286,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,98,97,99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95',
',96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70',
'71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,8,45,288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,286,69,70,71,9,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45',
'288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,',
',,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,19,,,,,,8,45,7,10,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60',
',294,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,',
'57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,615,,303,,,102,101,103,92,56,94,93,95,,96,104,105,',
'90,91,,,309,235,239,244,245,246,241,243,251,252,247,248,,228,229,,,249',
'250,,299,,,226,,,58,59,,,60,,,232,,238,,234,233,,230,231,242,240,236',
',237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253,,311,,,62,,81,69,70',
'71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
'42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,',
',,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,',
',,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,278,,,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280',
'96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60',
',,,,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97',
'99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
'42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,',
',102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,',
',,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,630,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,235,239,244,245,246,241,243,251',
'252,247,248,,228,229,,,249,250,,220,,,226,,,58,59,,,60,,,232,,238,44',
'234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,110,253,,,,109,62,,81,69,70,71,,57,,,,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,345,,,33',
',,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,350,56,94,93,351,,96',
'104,105,,90,91,,,309,,,,,,,,,,,,,,,,,357,,,352,,,226,,,58,59,,,60,,',
',,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,303,,,102,101,103,350,56,94,93,351,,96,104,105,,90,91,,',
'309,,,,,,,,,,,,,,,,,,,,352,,,226,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,7,10,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235,239,244,245,246',
'241,243,251,252,247,248,,228,229,,,249,250,,40,,,33,,,58,59,,,60,,35',
'232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,253,,,,385,62,,81,69,70,71,,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,',
'81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,69,70,71,9,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,',
'29,28,27,98,97,99,100,,,19,,,,,,8,45,,10,102,101,103,92,56,94,93,95',
',96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71',
',57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
'69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,215,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,',
'58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,',
'58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,',
'58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,',
',,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,',
',220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,215,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45,,10,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73',
',,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,,,309,235,239,244,245,246,241,243,251,252,247',
'248,,228,229,,,249,250,,299,,,226,,,58,59,,,60,,,232,,238,,234,233,',
'230,231,242,240,236,,237,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,253',
',499,,,62,,81,69,70,71,,57,,,,63,64,,,,67,,65,66,68,305,306,72,73,,',
',,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57',
'62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,517,,58,59,,,60,,,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,',
',102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,',
',,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98',
'97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90',
'91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,',
',45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,',
',,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,',
',,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,',
',,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220',
',,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,',
',,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,',
'276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98',
'97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44',
',,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57',
'62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,9,57,62,,81,63,64,',
',,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,8,45',
'288,10,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,235,239',
'244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,40,,,33,,,58',
'59,,,60,,35,232,,238,44,234,233,,230,231,242,240,236,20,237,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,253,,,,385,62,,81,69,70,71,,57,,,,63,64',
',,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,',
',,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,309,,,,,,',
',,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,299,,,295,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98',
'97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90',
'91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,',
',,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98',
'97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,,,44',
',,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57',
'62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99',
'100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91',
'42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,281,,,',
',,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63',
'64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,278,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,280,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,278,,276,,44,,,281,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,752,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
'69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42',
'43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,276,,44,,,281',
',,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92',
'56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226',
',,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227',
',,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,',
',,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,',
'226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,',
',,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93',
'95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59',
',,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,,,309',
',,,,,,,,,,,,,,,,,,,299,,,295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68',
'305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101',
'103,92,56,94,93,95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,299,',
',295,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301',
'302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96',
'104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,401',
',,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,',
'57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97',
'99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91',
'42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,',
',102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,',
',,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94',
'93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69',
'70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308',
'98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,',
',,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,',
',,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,',
'58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302',
'308,98,97,99,100,,,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104',
'105,,90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44',
',,,,,,,,225,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62',
',81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100',
',,227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43',
'41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,',
',,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305',
'306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103',
'92,56,94,93,95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,871,,,226',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
'69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'98,97,99,100,,,19,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105',
',90,91,42,43,41,,,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81',
'63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,',
'227,,,,,,,45,,,102,101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41',
',,,,,,,,,,,,,,,,,,,220,,,226,,,58,59,,,60,,654,,,,44,,,,,,,,,225,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67',
',65,66,68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41,,,,,,,,',
',,,,,,,,,,,220,,,226,,,58,59,,,60,,,,276,,44,,,281,,,,,,225,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66',
'68,305,306,72,73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,45,,,102',
'101,103,92,56,94,93,95,,96,104,105,,90,91,42,43,41,,,,,,,,,,,,,,,,,',
',,220,,,226,,,58,59,,,60,,,,,,44,,,,,,,,,225,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72',
'73,,,,,,301,302,308,98,97,99,100,,,227,,,,,,,303,,,102,101,103,92,56',
'94,93,95,,96,104,105,,90,91,,,309,,,,,,,,,,,,,,,,,,,,871,,,226,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70',
'71,,57,62,,81,63,64,,,,67,,65,66,68,305,306,72,73,,,,,,301,302,308,98',
'97,99,100,,,227,,,,,,,303,,,102,101,103,92,56,94,93,95,,96,104,105,',
'90,91,,,309,,,,,,,,,,,,,,,,,,,,940,,,226,,,58,59,,,60,,,,,,,,,,,,,,',
',,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,69,70,71,,57,62,,81,63,64,',
',,67,,65,66,68,30,31,72,73,,,,,,29,28,27,98,97,99,100,,,227,,,,,,,45',
',,102,101,103,92,56,94,93,95,280,96,104,105,,90,91,42,43,41,235,239',
'244,245,246,241,243,251,252,247,248,,228,229,,,249,250,,220,,,226,,',
'58,59,,,60,,278,232,276,238,44,234,233,281,230,231,242,240,236,225,237',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,215,253,-246,,,,62,,81,-246,-246',
'-246,,,-246,-246,-246,,-246,,,,,,,,,-246,-246,-246,,,,,,,,,-246,-246',
',-246,-246,-246,-246,-246,,,,,,,,,,,,,,,,,,,,,,,-246,-246,-246,-246',
'-246,-246,-246,-246,-246,-246,-246,-246,-246,-246,,,-246,-246,-246,',
',-246,,260,-246,,,-246,-246,,-246,,-246,,-246,,-246,-246,,-246,-246',
'-246,-246,-246,,-246,-246,-246,,,,,,,,,,,,,,-246,,-246,-246,-246,,-246',
',-246,-246,-246,-246,,,-246,-246,-246,702,-246,542,541,540,785,543,',
',,-246,-246,,,,551,,,,,,-246,-246,,-246,-246,-246,-246,-246,,,,,,,,',
'547,,,,,,,,,,,559,558,,,,552,,,,,,,,,-246,,-410,,,,,-246,,-410,-410',
'-410,260,-246,-410,-410,-410,,-410,,,,,,,,,-410,-410,-410,,,,,,-246',
'-246,,-410,-410,,-410,-410,-410,-410,-410,,,,,-246,,,-246,,,,,-246,',
',,,,,,,,-410,-410,-410,-410,-410,-410,-410,-410,-410,-410,-410,-410',
'-410,-410,,,-410,-410,-410,,,-410,,260,-410,,,-410,-410,,-410,,-410',
',-410,,-410,-410,,-410,-410,-410,-410,-410,-296,-410,-410,-410,,,,-296',
'-296,-296,,,-296,-296,-296,,-296,-410,,,-410,-410,,-410,,-410,-296,-296',
',,,,,,,,-296,-296,,-296,-296,-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296',
'-296,-296,,,-296,,269,-296,,,-296,-296,,-296,,-296,,-296,,-296,-296',
',-296,-296,-296,-296,-296,,-296,,-296,,,,,,,,,,,,,,-296,,,-296,-296',
',-296,,-296,170,181,171,194,167,187,177,176,197,198,192,175,174,169',
'195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190,183,193,178',
'166,185,184,,,,,,165,172,163,164,160,161,162,121,123,120,,122,,,,,,',
',154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,',
',,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131',
',,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198,192',
'175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191,190',
'183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123,,,122',
',,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152',
'131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197,198',
'192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196,191',
'190,183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121,123',
',,122,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157',
'143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176,197',
'198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196',
'191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121',
'123,,,122,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156',
'157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138',
'130,152,131,,,159,89,,,,,,,,,,,,,,88,170,181,171,194,167,187,177,176',
'197,198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189',
'196,191,368,367,369,366,166,185,184,,,,,,165,172,163,164,363,364,365',
'361,123,94,93,362,,96,,,,,,154,155,,151,133,134,135,142,139,141,,,136',
'137,,,,156,157,143,144,,,,,,373,,,,,,,,148,147,,132,153,150,149,158',
'145,146,140,138,130,152,131,,,159,170,181,171,194,167,187,177,176,197',
'198,192,175,174,169,195,199,200,179,168,182,186,188,180,173,,,,189,196',
'191,190,183,193,178,166,185,184,,,,,,165,172,163,164,160,161,162,121',
'123,,,122,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156',
'157,143,144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138',
'130,152,131,,,159,235,239,244,245,246,241,243,251,252,247,248,,228,229',
',,249,250,,,,,,545,,542,541,540,549,543,,,232,,238,,234,233,551,230',
'231,242,240,236,,237,235,239,244,245,246,241,243,251,252,247,248,,228',
'229,547,734,249,250,,253,,,,556,555,559,558,,,,552,,232,,238,,234,233',
',230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252,247,248',
',228,229,,,249,250,,253,702,,542,541,540,785,543,,,,,,232,,238,551,234',
'233,,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252,247',
'248,547,228,229,,,249,250,,253,,,559,558,,,,552,,,,,232,,238,,234,233',
',230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252,247,248',
',228,229,,,249,250,,253,,,,545,,542,541,540,549,543,,,232,,238,,234',
'233,551,230,231,242,240,236,,237,235,239,244,245,246,241,243,251,252',
'247,248,,228,229,547,531,249,250,,253,,,,556,555,559,558,,,,552,,232',
',238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246,241,243',
'251,252,247,248,,228,229,,,249,250,,253,702,,542,541,540,785,543,,,',
',,232,,238,551,234,233,,230,231,242,240,236,,237,235,239,244,245,246',
'241,243,251,252,247,248,547,228,229,,,249,250,,253,,,559,558,,,,552',
',,,,232,,238,,234,233,,230,231,242,240,236,,237,235,239,244,245,246',
'241,243,251,252,247,248,,228,229,,,249,250,,253,784,,542,541,540,785',
'543,,,,,,232,,238,551,234,233,,230,231,242,240,236,,237,235,239,244',
'245,246,241,243,251,252,247,248,547,228,229,,,249,250,,253,556,555,559',
'558,,,,552,,,,,232,,238,,234,233,,230,231,242,240,236,,237,,,,,,719',
'413,,,720,,,,,,,,154,155,253,151,133,134,135,142,139,141,,,136,137,',
',,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146',
'140,138,130,152,131,664,413,159,,665,,,,,,,,154,155,,151,133,134,135',
'142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132',
'153,150,149,158,145,146,140,138,130,152,131,667,420,159,,668,,,,,,,',
'154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,',
',,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152,131',
'633,413,159,,634,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137',
',,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145',
'146,140,138,130,152,131,635,420,159,,636,,,,,,,,154,155,,151,133,134',
'135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147',
',132,153,150,149,158,145,146,140,138,130,152,131,409,413,159,,410,,',
',,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143,144',
',,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152',
'131,416,420,159,,415,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136',
'137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158',
'145,146,140,138,130,152,131,721,420,159,,722,,,,,,,,154,155,,151,133',
'134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148',
'147,,132,153,150,149,158,145,146,140,138,130,152,131,471,413,159,,472',
',,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130,152',
'131,724,420,159,,725,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136',
'137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158',
'145,146,140,138,130,152,131,471,413,159,,472,,,,,,,,154,155,,151,133',
'134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148',
'147,,132,153,150,149,158,145,146,140,138,130,152,131,633,413,159,,634',
',,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157,143',
'144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138,130',
'152,131,635,420,159,,636,,,,,,,,154,155,,151,133,134,135,142,139,141',
',,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149',
'158,145,146,140,138,130,152,131,975,420,159,,974,,,,,,,,154,155,,151',
'133,134,135,142,139,141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,',
',148,147,,132,153,150,149,158,145,146,140,138,130,152,131,998,413,159',
',999,,,,,,,,154,155,,151,133,134,135,142,139,141,,,136,137,,,,156,157',
'143,144,,,,,,260,,,,,,,,148,147,,132,153,150,149,158,145,146,140,138',
'130,152,131,1000,420,159,,1001,,,,,,,,154,155,,151,133,134,135,142,139',
'141,,,136,137,,,,156,157,143,144,,,,,,260,,,,,,,,148,147,,132,153,150',
'149,158,145,146,140,138,130,152,131,,702,159,542,541,540,785,543,,545',
',542,541,540,549,543,551,,,,,,,,551,,784,,542,541,540,785,543,,,,,,547',
',,551,,,,,547,,,559,558,,,,552,556,555,559,558,,,,552,547,,702,,542',
'541,540,785,543,556,555,559,558,,,,552,551,,784,,542,541,540,785,543',
'702,,542,541,540,549,543,,551,,,,,547,,551,,545,,542,541,540,549,543',
'559,558,,,,552,547,,551,,,,,547,,556,555,559,558,,,,552,,559,558,,,',
'552,547,,545,,542,541,540,549,543,556,555,559,558,,,,552,551,,545,,542',
'541,540,549,543,,545,,542,541,540,549,543,551,,,,,547,,,551,,,,,,556',
'555,559,558,,,,552,547,734,,,,,,,547,556,555,559,558,,,,552,556,555',
'559,558,,,702,552,542,541,540,549,543,702,,542,541,540,549,543,702,551',
'542,541,540,549,543,702,551,542,541,540,549,543,,551,,,,,,,551,547,',
',,,,,547,,,,559,558,,547,,552,,559,558,,547,,552,,559,558,,,,552,,559',
'558,,,,552' ]
        racc_action_table = arr = ::Array.new(24911, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'635,26,880,219,645,839,719,635,635,635,58,903,635,635,635,273,635,61',
'19,380,999,446,335,341,366,635,635,635,635,381,356,366,721,720,345,342',
'635,635,998,635,635,635,635,635,717,336,218,843,1012,347,58,1000,843',
'446,589,589,219,446,446,19,908,346,908,343,573,26,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,921,530,635,635,635,380,635,635',
'26,664,635,645,722,635,635,381,635,721,635,218,635,439,635,635,61,635',
'635,635,635,635,415,635,635,635,839,719,922,415,415,415,880,565,840',
'415,415,880,415,635,1000,903,635,635,635,635,903,635,356,635,999,635',
'335,721,720,999,342,335,415,415,589,415,415,415,415,415,439,664,998',
'722,665,356,391,998,717,336,356,717,1012,717,336,1000,346,1012,343,573',
'1000,566,415,415,415,415,415,415,415,415,415,415,415,415,415,415,530',
'633,415,415,415,664,415,397,664,399,415,722,634,415,664,616,585,585',
'415,584,415,602,415,415,584,415,415,415,415,415,636,415,923,415,665',
'565,840,636,636,636,565,840,636,636,636,477,636,415,675,675,415,415',
'646,415,633,415,636,636,636,415,433,433,616,304,402,634,636,636,616',
'636,636,636,636,636,665,361,772,665,313,405,477,600,361,665,478,602',
'602,646,350,566,326,221,407,326,566,602,636,636,636,636,636,636,636',
'636,636,636,636,636,636,636,585,408,636,636,636,585,636,636,469,478',
'636,39,417,636,636,313,636,304,636,772,636,313,636,636,351,636,636,636',
'636,636,350,636,675,636,221,600,600,350,378,45,304,425,350,469,433,600',
'350,636,724,376,636,636,636,636,92,636,352,636,39,636,352,92,92,92,39',
'350,92,92,92,701,92,701,701,701,435,701,351,77,92,369,92,92,92,351,708',
'708,369,798,351,77,92,92,351,92,92,92,92,92,371,77,724,14,378,378,378',
'371,927,724,14,927,925,351,724,376,376,376,724,14,689,689,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,447,724,92,92,92,798,92,92,377,659,92',
'409,798,92,92,659,92,701,92,448,92,798,92,92,667,92,92,92,92,92,449',
'92,899,92,899,899,899,379,899,362,798,382,365,3,375,450,362,92,3,365',
'92,92,92,92,95,92,475,92,409,92,479,95,95,95,409,38,95,95,95,7,95,494',
'377,377,377,495,667,24,95,368,95,95,95,667,24,498,368,940,667,500,95',
'95,667,95,95,95,95,95,410,735,505,379,379,379,735,382,382,382,375,375',
'375,667,38,973,899,973,973,973,38,973,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,17,17,95,95,95,344,95,95,870,445,95,410,344,95,95,870,95',
'410,95,15,95,344,95,95,870,95,95,95,95,95,945,95,509,95,641,367,641',
'641,641,641,641,445,367,339,946,445,445,95,339,641,95,95,95,95,416,95',
'947,95,354,95,948,416,416,416,949,354,15,416,416,576,416,641,15,284',
'354,518,576,363,284,416,641,641,641,641,363,576,325,641,519,325,416',
'416,364,416,416,416,416,416,681,364,521,681,690,1001,690,690,690,690',
'690,329,1001,951,329,641,533,1001,534,690,536,1001,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,537,686,416,416,416,690,416,520',
'520,538,416,686,545,416,690,690,690,690,416,553,416,690,416,416,857',
'416,416,416,416,416,504,416,416,416,857,557,828,504,828,828,828,941',
'828,560,686,686,504,416,941,686,416,416,40,416,562,416,567,941,568,416',
'959,959,959,959,959,959,1,857,857,959,959,597,857,828,959,605,959,959',
'959,959,959,959,959,287,287,287,287,287,959,959,959,959,959,959,959',
'607,547,959,547,547,547,613,547,959,959,959,959,959,959,959,959,959',
'959,959,959,617,959,959,959,974,959,959,959,959,959,826,622,826,826',
'826,975,826,976,547,627,950,296,950,950,950,120,950,547,296,959,120',
'120,959,334,334,959,959,296,1014,959,868,959,868,868,868,959,868,826',
'37,986,637,986,986,986,959,986,826,950,639,959,959,959,959,644,959,959',
'959,959,41,41,988,988,959,959,733,733,733,733,733,733,959,651,959,733',
'733,653,986,658,733,661,733,733,733,733,733,733,733,492,492,492,492',
'492,733,733,733,733,733,733,733,465,698,733,698,698,698,663,698,733',
'733,733,733,733,733,733,733,733,733,733,733,666,733,733,733,669,733',
'733,733,733,733,464,670,465,673,297,298,465,465,698,465,465,297,298',
'309,309,674,676,698,679,733,297,298,733,685,987,733,733,300,700,733',
'703,733,464,710,300,733,464,464,715,464,464,593,593,300,733,593,593',
'593,718,733,733,733,733,727,733,733,733,733,22,989,732,751,733,733,728',
'728,728,728,728,728,733,990,733,728,728,991,756,992,728,993,728,728',
'728,728,728,728,728,6,6,6,6,6,728,728,728,728,728,728,728,994,952,728',
'952,952,952,997,952,728,728,728,728,728,728,728,728,728,728,728,728',
'774,728,728,728,775,728,728,728,728,728,457,900,939,900,900,900,777',
'900,952,939,778,779,781,782,316,783,457,457,939,728,784,316,728,788',
'792,728,728,793,797,728,316,728,457,801,457,728,457,457,900,457,457',
'16,804,457,728,457,805,808,812,728,728,728,728,813,728,728,728,728,817',
'818,820,821,728,728,321,321,321,321,321,321,728,823,728,321,321,825',
'827,830,321,833,321,321,321,321,321,321,321,13,12,201,10,220,321,321',
'321,321,321,321,321,222,223,321,842,227,846,847,850,321,321,321,321',
'321,321,321,321,321,321,321,321,851,321,321,321,1002,321,321,321,321',
'321,459,459,459,459,459,459,459,938,931,459,459,937,1003,867,938,931',
'459,459,937,321,871,873,321,938,931,321,321,937,884,321,885,321,459',
'259,459,321,459,459,340,459,459,459,459,459,321,459,274,277,901,321',
'321,321,321,905,321,321,321,321,288,289,106,291,321,321,295,295,295',
'295,295,295,321,292,321,295,295,293,906,299,295,302,295,295,295,295',
'295,295,295,303,308,310,314,315,295,295,295,295,295,295,295,318,912',
'295,323,327,328,330,917,295,295,295,295,295,295,295,295,295,295,295',
'295,920,295,295,295,,295,295,295,295,295,461,461,461,461,461,461,461',
'980,725,461,461,217,,,980,725,461,461,217,295,725,,295,980,725,295,295',
'217,,295,,295,461,,461,295,461,461,,461,461,461,461,461,295,461,,,,295',
'295,295,295,,295,295,295,295,,,,,295,295,290,290,290,290,290,290,295',
',295,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290',
'290,290,290,,,290,,,,,,290,290,290,290,290,290,290,290,290,290,290,290',
',290,290,290,,290,290,290,290,290,463,463,463,463,463,463,463,46,668',
'463,463,,,,46,668,463,463,,290,668,,290,46,668,290,290,,,290,,290,463',
',463,290,463,463,,463,463,463,463,463,290,463,,,,290,290,290,290,,290',
'290,290,290,,,,,290,290,649,649,649,649,649,649,290,,290,649,649,,,',
'649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,',
'649,,,,,,649,649,649,649,649,649,649,649,649,649,649,649,,649,649,649',
',649,649,649,649,649,467,467,467,467,467,467,467,467,,467,467,,,,,,467',
'467,,649,,,649,,,649,649,,,649,,649,467,,467,649,467,467,,467,467,467',
'467,467,649,467,,,,649,649,649,649,,649,649,649,649,,,,,649,649,648',
'648,648,648,648,648,649,,649,648,648,,,,648,,648,648,648,648,648,648',
'648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,648,648,648,648,648',
'648,648,648,648,648,648,648,,648,648,648,,648,648,648,648,648,460,460',
'460,460,460,460,460,,,460,460,,,,,,460,460,,648,,,648,,,648,648,,,648',
',648,460,,460,648,460,460,,460,460,460,460,460,648,460,,,,648,648,648',
'648,,648,648,648,648,,,,,648,648,643,643,643,643,643,643,648,,648,643',
'643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643',
'643,,,643,,,,,,643,643,643,643,643,643,643,643,643,643,643,643,,643',
'643,643,,643,643,643,643,643,456,,,,,,,,,,,,,,,,456,456,,643,,,643,',
',643,643,,,643,,643,456,,456,643,456,456,,456,456,,,456,643,456,,,,643',
'643,643,643,,643,643,643,643,,,,,643,643,961,961,961,961,961,961,643',
',643,961,961,,,,961,,961,961,961,961,961,961,961,,,,,,961,961,961,961',
'961,961,961,,,961,,,,,,961,961,961,961,961,961,961,961,961,961,961,961',
',961,961,961,,961,961,961,961,961,443,443,443,443,443,443,443,443,443',
'443,443,,443,443,,,443,443,,961,,,961,,,961,961,,,961,,961,443,,443',
'961,443,443,,443,443,443,443,443,961,443,,,,961,961,961,961,,961,961',
'961,961,,,,,961,961,953,953,953,953,953,953,961,,961,953,953,,,,953',
',953,953,953,953,953,953,953,,,,,,953,953,953,953,953,953,953,,,953',
',,,,,953,953,953,953,953,953,953,953,953,953,953,953,,953,953,953,,953',
'953,953,953,953,444,444,444,444,444,444,444,444,444,444,444,,444,444',
',,444,444,,953,,,953,,,953,953,,,953,,953,444,,444,953,444,444,,444',
'444,444,444,444,953,444,,,,953,953,953,953,,953,953,953,953,,,,,953',
'953,118,118,118,118,118,118,953,,953,118,118,,,,118,,118,118,118,118',
'118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,118,118,118',
'118,118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118,118',
'466,466,466,466,466,466,466,,,466,466,,,,,,466,466,,118,,,118,,,118',
'118,,,118,,118,466,,466,118,466,466,,466,466,466,466,466,118,466,,,',
'118,118,118,118,,118,118,118,118,,,,,118,118,226,226,226,226,226,226',
'118,,118,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226',
'226,226,226,226,,,226,,,,,,226,226,226,226,226,226,226,226,226,226,226',
'226,,226,226,226,,226,226,226,226,226,462,462,462,462,462,462,462,,',
'462,462,,,,,,462,462,,226,,,226,,,226,226,,,226,,226,462,,462,226,462',
'462,,462,462,462,462,462,226,462,,,,226,226,226,226,,226,226,226,226',
',,,,226,226,0,0,0,0,0,0,226,,226,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0',
'0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,455,,,,,',
',,,,,,,,,,455,455,,0,,,0,,,0,0,,,0,,0,455,,455,0,455,455,,455,455,,',
'455,0,455,,,,0,0,0,0,,0,0,0,0,,,,,0,0,203,203,203,203,203,203,0,,0,203',
'203,,,,203,,203,203,203,203,203,203,203,,,,,,203,203,203,203,203,203',
'203,,,203,,,,,,203,203,203,203,203,203,203,203,203,203,203,203,,203',
'203,203,,203,203,203,203,203,458,,,,,,,,,,,,,,,,458,458,,203,,,203,',
',203,203,,,203,,203,458,,458,203,458,458,,458,458,,,458,203,458,,,,203',
'203,203,203,,203,203,203,203,,,,,203,203,936,936,936,936,936,936,203',
',203,936,936,,,,936,,936,936,936,936,936,936,936,,,,,,936,936,936,936',
'936,936,936,,,936,,,,,,936,936,936,936,936,936,936,936,936,936,936,936',
',936,936,936,,936,936,936,936,936,454,454,454,454,454,454,454,,,454',
'454,,,,,,454,454,,936,,,936,,,936,936,,,936,,936,454,,454,936,454,454',
',454,454,454,454,454,936,454,,,,936,936,936,936,,936,936,936,936,,,',
',936,936,33,33,33,33,33,33,936,,936,33,33,,,,33,,33,33,33,33,33,33,33',
',,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33',
'33,,33,33,33,,33,33,33,33,33,452,,,,,,,,,,,,,,,,452,452,,33,,,33,,,33',
'33,,,33,,33,452,,452,33,452,452,,452,452,,,,33,,,,,33,33,33,33,,33,33',
'33,33,,,,,33,33,877,877,877,877,877,877,33,,33,877,877,,,,877,,877,877',
'877,877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,877',
'877,877,877,877,877,877,877,877,877,877,877,,877,877,877,,877,877,877',
'877,877,451,,,,,,,,,,,,,,,,451,451,,877,,,877,,,877,877,,,877,,877,451',
',451,877,451,451,,451,451,,,,877,,,,,877,877,877,877,,877,877,877,877',
',,,,877,877,844,844,844,844,844,844,877,,877,844,844,,,,844,,844,844',
'844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844',
'844,844,844,844,844,844,844,844,844,844,844,,844,844,844,,844,844,844',
'844,844,453,,,,,,,,,,,,,,,,453,453,,844,,,844,,,844,844,,,844,,844,453',
',,844,453,453,,453,453,,,,844,,,,,844,844,844,844,,844,844,844,844,',
',,,844,844,586,586,586,586,586,586,844,,844,586,586,,,,586,,586,586',
'586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,586',
'586,586,586,586,586,586,586,586,586,586,586,,586,586,586,,586,586,586',
'586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586,,,,586,,,',
',,,,,586,,,,,586,586,586,586,,586,586,586,586,,,,,586,586,564,564,564',
'564,564,564,586,,586,564,564,,,,564,,564,564,564,564,564,564,564,,,',
',,564,564,564,564,564,564,564,,,564,,,,,,564,564,564,564,564,564,564',
'564,564,564,564,564,,564,564,564,,564,564,564,564,564,,,,,,,,,,,,,,',
',,,,,564,,,564,,,564,564,,,564,,564,,,,564,,,,,,,,,564,,,,,564,564,564',
'564,,564,564,564,564,,,,,564,564,561,561,561,561,561,561,564,,564,561',
'561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561',
'561,,,561,,,,,,561,561,561,561,561,561,561,561,561,561,561,561,,561',
'561,561,,561,561,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561',
',,561,,561,,,,561,,,,,,,,,561,,,,,561,561,561,561,,561,561,561,561,',
',,,561,561,493,493,493,493,493,493,561,,561,493,493,,,,493,,493,493',
'493,493,493,493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,,493',
'493,493,493,493,493,493,493,493,493,493,493,,493,493,493,,493,493,493',
'493,493,,,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,,493,,493,,,,493,,,',
',,,,,493,,,,,493,493,493,493,,493,493,493,493,,,,,493,493,838,838,838',
'838,838,838,493,,493,838,838,,,,838,,838,838,838,838,838,838,838,,,',
',,838,838,838,838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838',
'838,838,838,838,838,,838,838,838,,838,838,838,838,838,,,,,,,,,,,,,,',
',,,,,838,,,838,,,838,838,,,838,,838,,,,838,,,,,,,,,838,,,,,838,838,838',
'838,,838,838,838,838,,,,,838,838,835,835,835,835,835,835,838,,838,835',
'835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835,835,835,835',
'835,,,835,,,,,,835,835,835,835,835,835,835,835,835,835,835,835,,835',
'835,835,,835,835,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,,,835,835',
',,835,,835,,,,835,,,,,,,,,835,,,,,835,835,835,835,,835,835,835,835,',
',,,835,835,834,834,834,834,834,834,835,,835,834,834,,,,834,,834,834',
'834,834,834,834,834,,,,,,834,834,834,834,834,834,834,,,834,,,,,428,834',
'834,834,834,834,834,834,834,834,834,834,834,,834,834,834,,834,834,834',
'834,834,428,428,428,428,428,428,428,428,428,428,428,,428,428,,,428,428',
',834,,,834,,,834,834,,,834,,834,428,,428,834,428,428,,428,428,428,428',
'428,834,428,,,,834,834,834,834,,834,834,834,834,,,,,834,834,,428,421',
'428,,,834,,834,421,421,421,,,421,421,421,,421,,,,,,,,,421,421,421,421',
',,,,,,,421,421,,421,421,421,421,421,,,,,,,,,,,,,,,,,,,,,,,421,421,421',
'421,421,421,421,421,421,421,421,421,421,421,,,421,421,421,,,421,,,421',
',,421,421,,421,,421,,421,,421,421,,421,421,421,421,421,,421,421,421',
',,,,,,,,,,,,,421,,,421,421,421,421,420,421,,421,,,,420,420,420,,,420',
'420,420,,420,,,,,,,,,420,420,420,420,,,,,,,,420,420,,420,420,420,420',
'420,,,,,,,,,,,,,,,,,,,,,,,420,420,420,420,420,420,420,420,420,420,420',
'420,420,420,,,420,420,420,,,420,,,420,,,420,420,,420,,420,,420,,420',
'420,,420,420,420,420,420,,420,420,420,,,,,,,,,,,,,,420,,,420,420,420',
'420,56,420,,420,,,,56,56,56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,',
'56,56,,56,56,56,56,56,,,,,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56',
'56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56',
'56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56,56,56,,56,,56,811,811,811',
'811,811,811,,,,811,811,,,,811,,811,811,811,811,811,811,811,,,,,,811',
'811,811,811,811,811,811,,,811,,,,,,811,811,811,811,811,811,811,811,811',
'811,811,811,,811,811,811,,811,811,811,811,811,,,,,,,,,,,,,,,,,,,,811',
',,811,,,811,811,,,811,,811,,,,811,,,,,,,,,811,,,,,811,811,811,811,,811',
'811,811,811,,,,,811,811,810,810,810,810,810,810,811,,811,810,810,,,',
'810,,810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,,',
'810,,,,,,810,810,810,810,810,810,810,810,810,810,810,810,,810,810,810',
',810,810,810,810,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810,,810',
',,,810,,,,,,,,,810,,,,,810,810,810,810,,810,810,810,810,,,,,810,810',
'803,803,803,803,803,803,810,,810,803,803,,,,803,,803,803,803,803,803',
'803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,803,803,803,803',
'803,803,803,803,803,803,803,803,,803,803,803,,803,803,803,803,803,,',
',,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803,,803,,,,803,,,,,,,,,803,',
',,,803,803,803,803,,803,803,803,803,,,,,803,803,791,791,791,791,791',
'791,803,,803,791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791',
'791,791,791,791,791,,,791,,,,,,791,791,791,791,791,791,791,791,791,791',
'791,791,,791,791,791,,791,791,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791',
',,791,791,,,791,,791,,,,791,,,,,,,,,791,,,,,791,791,791,791,,791,791',
'791,791,,,,,791,791,743,743,743,743,743,743,791,,791,743,743,,,,743',
',743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743',
',,,,,743,743,743,743,743,743,743,743,743,743,743,743,,743,743,743,,743',
'743,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,743,,',
',743,,,,,,,,,743,,,,,743,743,743,743,,743,743,743,743,,,,,743,743,,211',
'211,211,,211,743,,743,211,211,,,,211,,211,211,211,211,211,211,211,,',
',,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211,211,,211',
'211,211,211,,,,,211,211,,5,5,5,5,5,211,,211,5,5,,,,5,,5,5,5,5,5,5,5',
',,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5',
'5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,',
'5,5,5,5,,,,,5,5,,20,20,20,,20,5,,5,20,20,,,,20,,20,20,20,20,20,20,20',
',,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20',
'20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20',
',,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,29,29,29,,29,20,',
'20,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29',
',,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,',
',,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29',
'29,29,,29,29,29,29,,,,,29,29,,30,30,30,,30,29,,29,30,30,,,,30,,30,30',
'30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30',
'30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,',
',30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,',
',,30,30,,31,31,31,,31,30,,30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,',
'31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31',
'31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,',
'31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,34,34,34,,34',
'31,,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,',
',34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,',
',,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34',
'34,34,34,,,,,34,34,,35,35,35,,35,34,,34,35,35,,,,35,,35,35,35,35,35',
'35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,404,,35,,,35,35,35,35,35,35',
'35,35,,35,35,35,,35,35,,,35,404,404,404,404,404,404,404,404,404,404',
'404,,404,404,,,404,404,,35,,,35,,,35,35,,,35,,,404,,404,,404,404,,404',
'404,404,404,404,,404,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,404,,35',
',,35,,35,42,42,42,,42,,,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42',
'42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42',
'42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,',
'42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,43,43,43,,43,42,,42,43,43',
',,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43',
',,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,',
',,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43',
'43,,,,,43,43,,44,44,44,,44,43,,43,44,44,,,,44,,44,44,44,44,44,44,44',
',,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44',
'44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44',
',,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,59,59,59,,59,44,',
'44,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59',
',,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59,,,,,',
',,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59,59',
'59,59,,59,59,59,59,,,,,59,59,,60,60,60,,60,59,,59,60,60,,,,60,,60,60',
'60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60',
'60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,',
',60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60',
'60,,63,63,63,,63,60,,60,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63',
'63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63',
'63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,',
'63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,64,64,64,,64,63,,63,64,64',
',,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64',
',,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,',
',,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64',
'64,,,,,64,64,,67,67,67,,67,64,,64,67,67,,,,67,,67,67,67,67,67,67,67',
',,,,,67,67,67,67,67,67,67,,,67,,,,,638,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,67,67,67,638,638,638,638,638,638,638,638,638,638,638',
',638,638,,,638,638,,67,,,67,,,67,67,,,67,,,638,,638,67,638,638,,638',
'638,638,638,638,67,638,,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,638',
',,,67,67,,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,',
'68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68',
'68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,',
',,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,69,69,69,,69,68,,68,69,69',
',,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69',
',,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,',
',69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,',
',,69,69,,70,70,70,,70,69,,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,',
'70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70',
'70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,',
',,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,108,108,108,108,108,70,,70',
'108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108',
'108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,',
'108,108,108,,108,108,108,108,108,760,760,760,760,760,760,760,760,760',
'760,760,,760,760,,,760,760,,108,,,108,,,108,108,,,108,,108,760,,760',
'108,760,760,,760,760,760,760,760,108,760,,,,108,108,108,108,,108,108',
'108,108,,,,,108,108,,760,,,,108,108,,108,113,113,113,,113,,,,113,113',
',,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113,113',
',,113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113,113,,113',
'113,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,,,,,113',
',,,,,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,114,114',
'114,,114,113,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114',
'114,114,114,114,114,114,,,114,,,,,,,114,,,114,114,114,114,114,114,114',
'114,,114,114,114,,114,114,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,',
',114,114,,,114,,,,,,114,,,,,,,,,114,,,,,114,114,114,114,,114,114,114',
'114,,,,,114,114,,115,115,115,,115,114,,114,115,115,,,,115,,115,115,115',
'115,115,115,115,,,,,,115,115,115,115,115,115,115,,,115,,,,,,,115,,,115',
'115,115,115,115,115,115,115,,115,115,115,,115,115,115,115,115,,,,,,',
',,,,,,,,,,,,,115,,,115,,,115,115,,,115,,,,,,115,,,,,,,,,115,,,,,115',
'115,115,115,,115,115,115,115,,,,,115,115,,116,116,116,,116,115,,115',
'116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116',
'116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116',
',116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,',
',,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116',
',117,117,117,117,117,116,,116,117,117,,,,117,,117,117,117,117,117,117',
'117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,117,117,,117,117,117',
'117,117,117,117,117,117,,117,117,117,,117,117,117,117,117,,,,,,,,,,',
',,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117,,,,,117,117',
'117,117,,117,117,117,117,,,,,117,117,,204,204,204,,204,117,,117,204',
'204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204',
'204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204,,204,204,204,',
'204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,204',
',,,204,,,,,,,,,204,,,,,204,204,204,204,,204,204,204,204,,,,,204,204',
',205,205,205,,205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205',
',,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205',
'205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,,,,,,,,,,,205',
',,205,,,205,205,,,205,,,,,,205,,,,,,,,,205,,,,,205,205,205,205,,205',
'205,205,205,,,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206',
'206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,',
',206,,,206,206,206,206,206,206,206,206,206,206,206,206,,206,206,206',
'206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,,206,,206',
',,206,,,,,,206,,,,,206,206,206,206,,206,206,206,206,,,,,206,206,,209',
'209,209,,209,206,,206,209,209,,,,209,,209,209,209,209,209,209,209,,',
',,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209',
'209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,,,,,209,,,,,,,,,209,,,,,209,209,209,209,,209',
'209,209,209,,,,,209,209,,210,210,210,,210,209,,209,210,210,,,,210,,210',
'210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,',
',210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210,210,210',
'210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,',
',210,,,,,210,210,210,210,,210,210,210,210,,,,,210,210,,212,212,212,',
'212,210,,210,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212',
'212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212',
',212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212',
'212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212',
',,,,212,212,,213,213,213,,213,212,,212,213,213,,,,213,,213,213,213,213',
'213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213',
'213,213,213,213,213,213,,213,213,213,,213,213,213,213,213,,,,,,,,,,',
',,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,,213,,,,,213,213',
'213,213,,213,213,213,213,,,,,213,213,,214,214,214,,214,213,,213,214',
'214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214',
'214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,',
'214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,',
',,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,214',
'225,225,225,,225,214,,214,225,225,,,,225,,225,225,225,225,225,225,225',
',,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225',
'225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225',
',,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225,225,225,,225',
'225,225,225,,,,,225,225,,228,228,228,,228,225,,225,228,228,,,,228,,228',
'228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,',
',228,,,228,228,228,228,228,228,228,228,,228,228,228,,228,228,228,228',
'228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,,228',
',,,,228,228,228,228,,228,228,228,228,,,,,228,228,,229,229,229,,229,228',
',228,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229',
'229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229',
'229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229',
',,,,,229,,,,,,,,,229,,,,,229,229,229,229,,229,229,229,229,,,,,229,229',
',230,230,230,,230,229,,229,230,230,,,,230,,230,230,230,230,230,230,230',
',,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230',
'230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230',
',,230,,,230,230,,,230,,,,,,230,,,,,,,,,230,,,,,230,230,230,230,,230',
'230,230,230,,,,,230,230,,231,231,231,,231,230,,230,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,,231',
',,,,231,231,231,231,,231,231,231,231,,,,,231,231,,232,232,232,,232,231',
',231,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232',
',,,,,232,,,,,,,,,232,,,,,232,232,232,232,,232,232,232,232,,,,,232,232',
',233,233,233,,233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233',
'233,233,233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233',
',,233,,,233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233',
'233,233,233,,,,,233,233,,234,234,234,,234,233,,233,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234',
',,,,234,234,234,234,,234,234,234,234,,,,,234,234,,235,235,235,,235,234',
',234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235',
'235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235',
'235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235',
',,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',236,236,236,,236,235,,235,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236',
'236,236,236,,,,,236,236,,237,237,237,,237,236,,236,237,237,,,,237,,237',
'237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,',
',237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237',
'237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237',
',,,,237,237,237,237,,237,237,237,237,,,,,237,237,,238,238,238,,238,237',
',237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238',
'238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238',
'238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238',
',,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239',
'239,239,239,,,,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240',
',,,,240,240,240,240,,240,240,240,240,,,,,240,240,,241,241,241,,241,240',
',240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241',
'241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241',
'241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241',
',,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242,242,242,242',
',,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242,,242',
'242,242,242,,,,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243',
',,,,243,243,243,243,,243,243,243,243,,,,,243,243,,244,244,244,,244,243',
',243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244',
',245,245,245,,245,244,,244,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245',
'245,245,245,,,,,245,245,,246,246,246,,246,245,,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246',
',,,,246,246,246,246,,246,246,246,246,,,,,246,246,,247,247,247,,247,246',
',246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247',
'247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247',
'247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247',
',,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',248,248,248,,248,247,,247,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248',
'248,248,248,,,,,248,248,,249,249,249,,249,248,,248,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249',
',,,,249,249,249,249,,249,249,249,249,,,,,249,249,,250,250,250,,250,249',
',249,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250',
'250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250',
'250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250',
',,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',251,251,251,,251,250,,250,251,251,,,,251,,251,251,251,251,251,251,251',
',,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251',
'251,251,251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251',
',,251,,,251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251',
'251,251,251,,,,,251,251,,252,252,252,,252,251,,251,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252',
',,,,252,252,252,252,,252,252,252,252,,,,,252,252,,253,253,253,,253,252',
',252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253',
'253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253',
'253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253',
',,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',260,260,260,,260,253,,253,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,260,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,',
'260,,,260,,,260,260,,,260,,260,,260,,260,,,260,,,,,,260,,,,,260,260',
'260,260,,260,260,260,260,,,,,260,260,,261,261,261,,261,260,,260,261',
'261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261',
'261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261,261,261,261',
',261,261,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,261',
',261,,261,,,261,,,,,,261,,,,,261,261,261,261,,261,261,261,261,,,,,261',
'261,,269,269,269,,269,261,,261,269,269,,,,269,,269,269,269,269,269,269',
'269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269',
'269,269,269,269,269,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,',
',,,,269,,,269,,,269,269,,,269,,269,,269,,269,,,269,,,,,,269,,,,,269',
'269,269,269,,269,269,269,269,,,,,269,269,269,276,276,276,,276,269,,269',
'276,276,,,,276,,276,276,276,276,276,276,276,,,,,,276,276,276,276,276',
'276,276,,,276,,,,,,,276,,,276,276,276,276,276,276,276,276,,276,276,276',
',276,276,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,',
',,,276,,,,,,,,,276,,,,,276,276,276,276,,276,276,276,276,,,,,276,276',
',278,278,278,,278,276,,276,278,278,,,,278,,278,278,278,278,278,278,278',
',,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278',
'278,278,278,,278,278,278,,278,278,278,278,278,,,,,,,,,,,,,,,,,,,,278',
',,278,,,278,278,,,278,,,,,,278,,,,,,,,,278,,,,,278,278,278,278,,278',
'278,278,278,,,,,278,278,,280,280,280,,280,278,,278,280,280,,,,280,,280',
'280,280,280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,',
',280,,,280,280,280,280,280,280,280,280,,280,280,280,,280,280,280,280',
'280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,,280',
',,,,280,280,280,280,,280,280,280,280,,,,,280,280,,281,281,281,,281,280',
',280,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281',
'281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281',
'281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281',
',,,,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',286,286,286,286,286,281,,281,286,286,,,,286,,286,286,286,286,286,286',
'286,,,,,,286,286,286,286,286,286,286,,,286,,,,,,286,286,,286,286,286',
'286,286,286,286,286,286,,286,286,286,,286,286,286,286,286,,,,,,,,,,',
',,,,,,,,,286,,,286,,,286,286,,,286,,286,,,,286,,,,,,,,,286,,,,,286,286',
'286,286,,286,286,286,286,,,,,286,286,,294,294,294,,294,286,,286,294',
'294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294,294,294',
'294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294,294,',
'294,294,,,294,271,271,271,271,271,271,271,271,271,271,271,,271,271,',
',271,271,,294,,,294,,,294,294,,,294,,,271,,271,,271,271,,271,271,271',
'271,271,,271,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,271,,294',
',,294,,294,311,311,311,,311,,,,311,311,,,,311,,311,311,311,311,311,311',
'311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311,311',
'311,311,311,311,,311,311,311,,311,311,,,311,,,,,,,,,,,,,,,,,,,,311,',
',311,,,311,311,,,311,,,,,,,,,,,,,,,,,,,,311,311,311,311,,311,311,311',
'311,,,,,311,311,,320,320,320,,320,311,,311,320,320,,,,320,,320,320,320',
'320,320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320',
'320,320,320,320,320,320,320,,320,320,320,,320,320,320,320,320,,,,,,',
',,,,,,,,,,,,,320,,,320,320,,320,320,,,320,,,,,,320,,,,,,,,,320,,,,,320',
'320,320,320,,320,320,320,320,,,,,320,320,,322,322,322,,322,320,,320',
'322,322,,,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322,322',
'322,322,,,322,,,,,,,322,,,322,322,322,322,322,322,322,322,,322,322,322',
',322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,',
',,,322,,,,,,,,,322,,,,,322,322,322,322,,322,322,322,322,,,,,322,322',
',337,337,337,,337,322,,322,337,337,,,,337,,337,337,337,337,337,337,337',
',,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337,337,337',
'337,337,337,,337,337,337,,337,337,337,337,337,,,,,,,,,,,,,,,,,,,,337',
',,337,,,337,337,,,337,,,,,,337,,,,,,,,,337,,,,,337,337,337,337,,337',
'337,337,337,,,,,337,337,,338,338,338,,338,337,,337,338,338,,,,338,,338',
'338,338,338,338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,',
',338,,,338,338,338,338,338,338,338,338,,338,338,338,,338,338,338,338',
'338,,,,,,,,,,,,,,,,,,,,338,,,338,,,338,338,,,338,,,,,,338,,,,,,,,,338',
',,,,338,338,338,338,,338,338,338,338,,,,,338,338,,357,357,357,,357,338',
',338,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357',
'357,357,357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357,357',
'357,,357,357,357,357,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357',
',,,,,357,,,,,,,,,357,,,,,357,357,357,357,,357,357,357,357,,,,,357,357',
',373,373,373,,373,357,,357,373,373,,,,373,,373,373,373,373,373,373,373',
',,,,,373,373,373,373,373,373,373,,,373,,,,,,,373,,,373,373,373,373,373',
'373,373,373,,373,373,373,,373,373,373,373,373,,,,,,,,,,,,,,,,,,,,373',
',,373,,,373,373,,,373,,,,,,373,,,,,,,,,373,,,,,373,373,373,373,,373',
'373,373,373,,,,,373,373,,401,401,401,,401,373,,373,401,401,,,,401,,401',
'401,401,401,401,401,401,,,,,,401,401,401,401,401,401,401,,,401,,,,,',
',401,,,401,401,401,401,401,401,401,401,,401,401,401,,401,401,401,401',
'401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,,401,,,,,,401,,,,,,,,,401',
',,,,401,401,401,401,,401,401,401,401,,,,,401,401,,438,438,438,,438,401',
',401,438,438,,,,438,,438,438,438,438,438,438,438,,,,,,438,438,438,438',
'438,438,438,,,438,,,,,,,438,,,438,438,438,438,438,438,438,438,438,438',
'438,438,,438,438,438,438,438,,,,,,,,,,,,,,,,,,,,438,,,438,,,438,438',
',,438,,438,,438,,438,,,438,,,,,,438,,,,,438,438,438,438,,438,438,438',
'438,,,,,438,438,,440,440,440,,440,438,,438,440,440,,,,440,,440,440,440',
'440,440,440,440,,,,,,440,440,440,440,440,440,440,,,440,,,,,,,440,,,440',
'440,440,440,440,440,440,440,,440,440,440,,440,440,440,440,440,,,,,,',
',,,,,,,,,,,,,440,,,440,,,440,440,,,440,,,,,,440,,,,,,,,,440,,,,,440',
'440,440,440,,440,440,440,440,,,,,440,440,,441,441,441,,441,440,,440',
'441,441,,,,441,,441,441,441,441,441,441,441,,,,,,441,441,441,441,441',
'441,441,,,441,,,,,,,441,,,441,441,441,441,441,441,441,441,,441,441,441',
',441,441,441,441,441,,,,,,,,,,,,,,,,,,,,441,,,441,,,441,441,,,441,,',
',,,441,,,,,,,,,441,,,,,441,441,441,441,,441,441,441,441,,,,,441,441',
',442,442,442,,442,441,,441,442,442,,,,442,,442,442,442,442,442,442,442',
',,,,,442,442,442,442,442,442,442,,,442,,,,,,,442,,,442,442,442,442,442',
'442,442,442,,442,442,442,,442,442,442,442,442,,,,,,,,,,,,,,,,,,,,442',
',,442,,,442,442,,,442,,,,,,442,,,,,,,,,442,,,,,442,442,442,442,,442',
'442,442,442,,,,,442,442,,482,482,482,,482,442,,442,482,482,,,,482,,482',
'482,482,482,482,482,482,,,,,,482,482,482,482,482,482,482,,,482,,,,,',
',482,,,482,482,482,482,482,482,482,482,482,482,482,482,,482,482,482',
'482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482,,,482,,482,,482,,482',
',,482,,,,,,482,,,,,482,482,482,482,,482,482,482,482,,,,,482,482,,484',
'484,484,,484,482,,482,484,484,,,,484,,484,484,484,484,484,484,484,,',
',,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484,484,484,484,484',
'484,484,484,484,484,484,484,,484,484,484,484,484,,,,,,,,,,,,,,,,,,,',
'484,,,484,,,484,484,,,484,,,,484,,484,,,484,,,,,,484,,,,,484,484,484',
'484,,484,484,484,484,,,,,484,484,,486,486,486,,486,484,,484,486,486',
',,,486,,486,486,486,486,486,486,486,,,,,,486,486,486,486,486,486,486',
',,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486,486,486,,486',
'486,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,486',
',,,,,,,,486,,,,,486,486,486,486,,486,486,486,486,,,,,486,486,,491,491',
'491,491,491,486,,486,491,491,,,,491,,491,491,491,491,491,491,491,,,',
',,491,491,491,491,491,491,491,,,491,,,,,,491,491,491,491,491,491,491',
'491,491,491,491,491,,491,491,491,,491,491,491,491,491,516,516,516,516',
'516,516,516,516,516,516,516,,516,516,,,516,516,,491,,,491,,,491,491',
',,491,,491,516,,516,491,516,516,,516,516,516,516,516,491,516,,,,491',
'491,491,491,,491,491,491,491,,,,,491,491,,516,,,,491,491,,491,499,499',
'499,,499,,,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499',
'499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499',
',499,499,499,,499,499,,,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,',
',499,,,,,,,,,,,,,,,,,,,,499,499,499,499,,499,499,499,499,,,,,499,499',
',501,501,501,,501,499,,499,501,501,,,,501,,501,501,501,501,501,501,501',
',,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501',
'501,501,501,501,501,501,501,,501,501,501,501,501,,,,,,,,,,,,,,,,,,,',
'501,,,501,,,501,501,,,501,,501,,501,,501,,,501,,,,,,501,,,,,501,501',
'501,501,,501,501,501,501,,,,,501,501,,508,508,508,,508,501,,501,508',
'508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508,508,508',
'508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508,,508,508,508,',
'508,508,,,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,,,,',
',,,,,,,,,,508,508,508,508,,508,508,508,508,,,,,508,508,,511,511,511',
',511,508,,508,511,511,,,,511,,511,511,511,511,511,511,511,,,,,,511,511',
'511,511,511,511,511,,,511,,,,,,,511,,,511,511,511,511,511,511,511,511',
',511,511,511,,511,511,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511',
'511,,,511,,,,,,511,,,,,,,,,511,,,,,511,511,511,511,,511,511,511,511',
',,,,511,511,,512,512,512,,512,511,,511,512,512,,,,512,,512,512,512,512',
'512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512',
'512,512,512,512,512,512,,512,512,512,,512,512,512,512,512,,,,,,,,,,',
',,,,,,,,,512,,,512,,,512,512,,,512,,,,,,512,,,,,,,,,512,,,,,512,512',
'512,512,,512,512,512,512,,,,,512,512,,513,513,513,,513,512,,512,513',
'513,,,,513,,513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513',
'513,,,513,,,,,,,513,,,513,513,513,513,513,513,513,513,,513,513,513,',
'513,513,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,,',
',,513,,,,,,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513,',
'517,517,517,,517,513,,513,517,517,,,,517,,517,517,517,517,517,517,517',
',,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517',
'517,517,517,,517,517,517,,517,517,517,517,517,,,,,,,,,,,,,,,,,,,,517',
',,517,,,517,517,,,517,,,,,,517,,,,,,,,,517,,,,,517,517,517,517,,517',
'517,517,517,,,,,517,517,,523,523,523,,523,517,,517,523,523,,,,523,,523',
'523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,',
',523,,,523,523,523,523,523,523,523,523,523,523,523,523,,523,523,523',
'523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,,,523,,,523',
',,,,,523,,,,,523,523,523,523,,523,523,523,523,,,,,523,523,,526,526,526',
',526,523,,523,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526',
'526,526,526,526,,526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,',
'526,526,,,526,,,,,,526,,,526,,,,,,526,,,,,526,526,526,526,,526,526,526',
'526,,,,,526,526,,549,549,549,,549,526,,526,549,549,,,,549,,549,549,549',
'549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549',
'549,549,549,549,549,549,549,,549,549,549,,549,549,549,549,549,,,,,,',
',,,,,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,,549,,,,,549',
'549,549,549,,549,549,549,549,,,,,549,549,,569,569,569,,569,549,,549',
'569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569,569,569,569',
'569,569,,,569,,,,,,,569,,,569,569,569,569,569,569,569,569,,569,569,569',
',569,569,569,569,569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569,,569',
',,,569,,,,,,,,,569,,,,,569,569,569,569,,569,569,569,569,,,,,569,569',
',570,570,570,,570,569,,569,570,570,,,,570,,570,570,570,570,570,570,570',
',,,,,570,570,570,570,570,570,570,,,570,,,,,,,570,,,570,570,570,570,570',
'570,570,570,570,570,570,570,,570,570,570,570,570,,,,,,,,,,,,,,,,,,,',
'570,,,570,,,570,570,,,570,,570,,570,,570,,,570,,,,,,570,,,,,570,570',
'570,570,,570,570,570,570,,,,,570,570,,580,580,580,,580,570,,570,580',
'580,,,,580,,580,580,580,580,580,580,580,,,,,,580,580,580,580,580,580',
'580,,,580,,,,,,,580,,,580,580,580,580,580,580,580,580,580,580,580,580',
',580,580,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580',
',580,,580,,,580,,,,,,580,,,,,580,580,580,580,,580,580,580,580,,,,,580',
'580,,614,614,614,,614,580,,580,614,614,,,,614,,614,614,614,614,614,614',
'614,,,,,,614,614,614,614,614,614,614,,,614,,,,,,,614,,,614,614,614,614',
'614,614,614,614,,614,614,614,,614,614,614,614,614,,,,,,,,,,,,,,,,,,',
',614,,,614,,,614,614,,,614,,614,,,,614,,,,,,,,,614,,,,,614,614,614,614',
',614,614,614,614,,,,,614,614,,615,615,615,,615,614,,614,615,615,,,,615',
',615,615,615,615,615,615,615,,,,,,615,615,615,615,615,615,615,,,615',
',,,,,,615,,,615,615,615,615,615,615,615,615,,615,615,615,,615,615,615',
'615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,,,,,615,,,,,,',
',,615,,,,,615,615,615,615,,615,615,615,615,,,,,615,615,,618,618,618',
',618,615,,615,618,618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618',
'618,618,618,618,618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618',
'618,618,618,618,,618,618,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,,',
'618,618,,,618,,618,,618,,618,,,618,,,,,,618,,,,,618,618,618,618,,618',
'618,618,618,,,,,618,618,,619,619,619,,619,618,,618,619,619,,,,619,,619',
'619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,',
',619,,,619,619,619,619,619,619,619,619,619,619,619,619,,619,619,619',
'619,619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,,,619,,619,,,619',
',,,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619,,620,620,620',
',620,619,,619,620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620',
'620,620,620,620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620',
',620,620,620,,620,620,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620',
'620,,,620,,,,,,620,,,,,,,,,620,,,,,620,620,620,620,,620,620,620,620',
',,,,620,620,,621,621,621,,621,620,,620,621,621,,,,621,,621,621,621,621',
'621,621,621,,,,,,621,621,621,621,621,621,621,,,621,,,,,,,621,,,621,621',
'621,621,621,621,621,621,,621,621,621,,621,621,621,621,621,,,,,,,,,,',
',,,,,,,,,621,,,621,,,621,621,,,621,,,,,,621,,,,,,,,,621,,,,,621,621',
'621,621,,621,621,621,621,,,,,621,621,,625,625,625,,625,621,,621,625',
'625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625',
'625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625,625,',
'625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,,',
',,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625,',
'626,626,626,,626,625,,625,626,626,,,,626,,626,626,626,626,626,626,626',
',,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626,626',
'626,626,626,,626,626,626,,626,626,626,626,626,,,,,,,,,,,,,,,,,,,,626',
',,626,,,626,626,,,626,,,,,,626,,,,,,,,,626,,,,,626,626,626,626,,626',
'626,626,626,,,,,626,626,,629,629,629,,629,626,,626,629,629,,,,629,,629',
'629,629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,',
',629,,,629,629,629,629,629,629,629,629,,629,629,629,,629,629,629,629',
'629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,,629',
',,,,629,629,629,629,,629,629,629,629,,,,,629,629,,630,630,630,,630,629',
',629,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630',
'630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630,630',
'630,,630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630',
',,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630,630,,,,,630,630',
',654,654,654,,654,630,,630,654,654,,,,654,,654,654,654,654,654,654,654',
',,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654,654,654',
'654,654,654,,654,654,654,,654,654,654,654,654,,,,,,,,,,,,,,,,,,,,654',
',,654,,,654,654,,,654,,,,,,654,,,,,,,,,654,,,,,654,654,654,654,,654',
'654,654,654,,,,,654,654,,660,660,660,,660,654,,654,660,660,,,,660,,660',
'660,660,660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,',
',660,,,660,660,660,660,660,660,660,660,,660,660,660,,660,660,,,660,',
',,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,,,,,,,,,,,,,,,,,,,,660,660',
'660,660,,660,660,660,660,,,,,660,660,,671,671,671,,671,660,,660,671',
'671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671',
'671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,',
'671,671,,,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,,,,,,,',
',,,,,,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,677,677,677',
',677,671,,671,677,677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677',
'677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677',
',677,677,677,,677,677,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677',
'677,,,677,,677,,,,677,,,,,,,,,677,,,,,677,677,677,677,,677,677,677,677',
',,,,677,677,,696,696,696,,696,677,,677,696,696,,,,696,,696,696,696,696',
'696,696,696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696',
'696,696,696,696,696,696,,696,696,696,,696,696,696,696,696,,,,,,,,,,',
',,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,,,,696,,,,,696,696',
'696,696,,696,696,696,696,,,,,696,696,,723,723,723,,723,696,,696,723',
'723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723',
'723,,,723,,,,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,',
'723,723,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,,',
',,723,,,,,,,,,723,,,,,723,723,723,723,,723,723,723,723,,,,,723,723,',
'729,729,729,,729,723,,723,729,729,,,,729,,729,729,729,729,729,729,729',
',,,,,729,729,729,729,729,729,729,,,729,,,,,,,729,,,729,729,729,729,729',
'729,729,729,,729,729,729,,729,729,729,729,729,,,,,,,,,,,,,,,,,,,,729',
',,729,,,729,729,,,729,,,,,,729,,,,,,,,,729,,,,,729,729,729,729,,729',
'729,729,729,,,,,729,729,,752,752,752,,752,729,,729,752,752,,,,752,,752',
'752,752,752,752,752,752,,,,,,752,752,752,752,752,752,752,,,752,,,,,',
',752,,,752,752,752,752,752,752,752,752,,752,752,752,,752,752,752,752',
'752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,,,,,752,,,,,,,,,752',
',,,,752,752,752,752,,752,752,752,752,,,,,752,752,,754,754,754,,754,752',
',752,754,754,,,,754,,754,754,754,754,754,754,754,,,,,,754,754,754,754',
'754,754,754,,,754,,,,,,,754,,,754,754,754,754,754,754,754,754,,754,754',
'754,,754,754,754,754,754,,,,,,,,,,,,,,,,,,,,754,,,754,,,754,754,,,754',
',,,,,754,,,,,,,,,754,,,,,754,754,754,754,,754,754,754,754,,,,,754,754',
',768,768,768,,768,754,,754,768,768,,,,768,,768,768,768,768,768,768,768',
',,,,,768,768,768,768,768,768,768,,,768,,,,,,,768,,,768,768,768,768,768',
'768,768,768,,768,768,768,,768,768,768,768,768,,,,,,,,,,,,,,,,,,,,768',
',,768,,,768,768,,,768,,,,,,768,,,,,,,,,768,,,,,768,768,768,768,,768',
'768,768,768,,,,,768,768,,769,769,769,,769,768,,768,769,769,,,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
',769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769,769,769',
'769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769',
',,,,769,769,769,769,,769,769,769,769,,,,,769,769,,770,770,770,,770,769',
',769,770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770,770,770,770',
'770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770,770,,770,770',
'770,,770,770,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,,770',
',,,,,770,,,,,,,,,770,,,,,770,770,770,770,,770,770,770,770,,,,,770,770',
',771,771,771,,771,770,,770,771,771,,,,771,,771,771,771,771,771,771,771',
',,,,,771,771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771,771,771',
'771,771,771,,771,771,771,,771,771,771,771,771,,,,,,,,,,,,,,,,,,,,771',
',,771,,,771,771,,,771,,,,,,771,,,,,,,,,771,,,,,771,771,771,771,,771',
'771,771,771,,,,,771,771,,773,773,773,,773,771,,771,773,773,,,,773,,773',
'773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,',
',773,,,773,773,773,773,773,773,773,773,,773,773,773,,773,773,773,773',
'773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,,,,,773,,,,,,,,,773',
',,,,773,773,773,773,,773,773,773,773,,,,,773,773,,785,785,785,,785,773',
',773,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785',
'785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785',
'785,,785,785,,,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,',
',,,,,,,,,,,,,,,785,785,785,785,,785,785,785,785,,,,,785,785,,832,832',
'832,,832,785,,785,832,832,,,,832,,832,832,832,832,832,832,832,,,,,,832',
'832,832,832,832,832,832,,,832,,,,,,,832,,,832,832,832,832,832,832,832',
'832,,832,832,832,,832,832,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,',
',832,832,,,832,,,,,,832,,,,,,,,,832,,,,,832,832,832,832,,832,832,832',
'832,,,,,832,832,,837,837,837,,837,832,,832,837,837,,,,837,,837,837,837',
'837,837,837,837,,,,,,837,837,837,837,837,837,837,,,837,,,,,,,837,,,837',
'837,837,837,837,837,837,837,,837,837,837,,837,837,837,837,837,,,,,,',
',,,,,,,,,,,,,837,,,837,,,837,837,,,837,,837,,,,837,,,,,,,,,837,,,,,837',
'837,837,837,,837,837,837,837,,,,,837,837,,854,854,854,,854,837,,837',
'854,854,,,,854,,854,854,854,854,854,854,854,,,,,,854,854,854,854,854',
'854,854,,,854,,,,,,,854,,,854,854,854,854,854,854,854,854,854,854,854',
'854,,854,854,854,854,854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854',
',,,854,,854,,,854,,,,,,854,,,,,854,854,854,854,,854,854,854,854,,,,',
'854,854,,855,855,855,,855,854,,854,855,855,,,,855,,855,855,855,855,855',
'855,855,,,,,,855,855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855',
'855,855,855,855,855,,855,855,855,,855,855,855,855,855,,,,,,,,,,,,,,',
',,,,,855,,,855,,,855,855,,,855,,,,,,855,,,,,,,,,855,,,,,855,855,855',
'855,,855,855,855,855,,,,,855,855,,869,869,869,,869,855,,855,869,869',
',,,869,,869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869,869',
',,869,,,,,,,869,,,869,869,869,869,869,869,869,869,,869,869,869,,869',
'869,,,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,,,,,,,,,,,,',
',,,,,,869,869,869,869,,869,869,869,869,,,,,869,869,,881,881,881,,881',
'869,,869,881,881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881,881',
'881,881,881,881,,,881,,,,,,,881,,,881,881,881,881,881,881,881,881,,881',
'881,881,,881,881,,,881,,,,,,,,,,,,,,,,,,,,881,,,881,,,881,881,,,881',
',,,,,,,,,,,,,,,,,,,881,881,881,881,,881,881,881,881,,,,,881,881,,977',
'977,977,,977,881,,881,977,977,,,,977,,977,977,977,977,977,977,977,,',
',,,977,977,977,977,977,977,977,,,977,,,,,,,977,,,977,977,977,977,977',
'977,977,977,977,977,977,977,,977,977,977,977,977,468,468,468,468,468',
'468,468,468,468,468,468,,468,468,,,468,468,,977,,,977,,,977,977,,,977',
',977,468,977,468,977,468,468,977,468,468,468,468,468,977,468,,,,977',
'977,977,977,,977,977,977,977,,,,,977,977,468,468,411,,,,977,,977,411',
'411,411,,,411,411,411,,411,,,,,,,,,411,411,411,,,,,,,,,411,411,,411',
'411,411,411,411,,,,,,,,,,,,,,,,,,,,,,,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,,,411,411,411,,,411,,411,411,,,411,411,,411',
',411,,411,,411,411,,411,411,411,411,411,,411,411,411,,,,,,,,,,,,,,411',
',470,411,411,,411,,411,470,470,470,,,470,470,470,969,470,969,969,969',
'969,969,,,,470,470,,,,969,,,,,,470,470,,470,470,470,470,470,,,,,,,,',
'969,,,,,,,,,,,969,969,,,,969,,,,,,,,,470,,27,,,,,470,,27,27,27,470,470',
'27,27,27,,27,,,,,,,,,27,27,27,,,,,,470,470,,27,27,,27,27,27,27,27,,',
',,470,,,470,,,,,470,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27',
'27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27',
'28,27,27,27,,,,28,28,28,,,28,28,28,,28,27,,,27,27,,27,,27,28,28,,,,',
',,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28',
'28,,28,28,28,28,28,,28,,28,,,,,,,,,,,,,,28,,,28,28,,28,,28,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,',
',,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9',
'9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,',
',,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,392,392,392',
'392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392',
'392,392,392,392,,,,392,392,392,392,392,392,392,392,392,392,,,,,,392',
'392,392,392,392,392,392,392,392,,,392,,,,,,,,392,392,,392,392,392,392',
'392,392,392,,,392,392,,,,392,392,392,392,,,,,,,,,,,,,,392,392,,392,392',
'392,392,392,392,392,392,392,392,392,392,,,392,392,,,,,,,,,,,,,,392,611',
'611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,611,611,611,611,,,,611,611,611,611,611,611,611,611,611,611,',
',,,,611,611,611,611,611,611,611,611,611,,,611,,,,,,,,611,611,,611,611',
'611,611,611,611,611,,,611,611,,,,611,611,611,611,,,,,,,,,,,,,,611,611',
',611,611,611,611,611,611,611,611,611,611,611,611,,,611,611,,,,,,,,,',
',,,,611,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71',
'71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,',
',71,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736,736',
'736,736,736,736,736,736,736,736,,,,736,736,736,736,736,736,736,736,736',
'736,,,,,,736,736,736,736,736,736,736,736,736,,,736,,,,,,,,736,736,,736',
'736,736,736,736,736,736,,,736,736,,,,736,736,736,736,,,,,,,,,,,,,,736',
'736,,736,736,736,736,736,736,736,736,736,736,736,736,,,736,423,423,423',
'423,423,423,423,423,423,423,423,,423,423,,,423,423,,,,,,915,,915,915',
'915,915,915,,,423,,423,,423,423,915,423,423,423,423,423,,423,853,853',
'853,853,853,853,853,853,853,853,853,,853,853,915,915,853,853,,423,,',
',915,915,915,915,,,,915,,853,,853,,853,853,,853,853,853,853,853,,853',
'856,856,856,856,856,856,856,856,856,856,856,,856,856,,,856,856,,853',
'864,,864,864,864,864,864,,,,,,856,,856,864,856,856,,856,856,856,856',
'856,,856,753,753,753,753,753,753,753,753,753,753,753,864,753,753,,,753',
'753,,856,,,864,864,,,,864,,,,,753,,753,,753,753,,753,753,753,753,753',
',753,672,672,672,672,672,672,672,672,672,672,672,,672,672,,,672,672',
',753,,,,333,,333,333,333,333,333,,,672,,672,,672,672,333,672,672,672',
'672,672,,672,763,763,763,763,763,763,763,763,763,763,763,,763,763,333',
'333,763,763,,672,,,,333,333,333,333,,,,333,,763,,763,,763,763,,763,763',
'763,763,763,,763,765,765,765,765,765,765,765,765,765,765,765,,765,765',
',,765,765,,763,967,,967,967,967,967,967,,,,,,765,,765,967,765,765,,765',
'765,765,765,765,,765,767,767,767,767,767,767,767,767,767,767,767,967',
'767,767,,,767,767,,765,,,967,967,,,,967,,,,,767,,767,,767,767,,767,767',
'767,767,767,,767,758,758,758,758,758,758,758,758,758,758,758,,758,758',
',,758,758,,767,862,,862,862,862,862,862,,,,,,758,,758,862,758,758,,758',
'758,758,758,758,,758,21,21,21,21,21,21,21,21,21,21,21,862,21,21,,,21',
'21,,758,862,862,862,862,,,,862,,,,,21,,21,,21,21,,21,21,21,21,21,,21',
',,,,,571,571,,,571,,,,,,,,571,571,21,571,571,571,571,571,571,571,,,571',
'571,,,,571,571,571,571,,,,,,571,,,,,,,,571,571,,571,571,571,571,571',
'571,571,571,571,571,571,571,502,502,571,,502,,,,,,,,502,502,,502,502',
'502,502,502,502,502,,,502,502,,,,502,502,502,502,,,,,,502,,,,,,,,502',
'502,,502,502,502,502,502,502,502,502,502,502,502,502,503,503,502,,503',
',,,,,,,503,503,,503,503,503,503,503,503,503,,,503,503,,,,503,503,503',
'503,,,,,,503,,,,,,,,503,503,,503,503,503,503,503,503,503,503,503,503',
'503,503,514,514,503,,514,,,,,,,,514,514,,514,514,514,514,514,514,514',
',,514,514,,,,514,514,514,514,,,,,,514,,,,,,,,514,514,,514,514,514,514',
'514,514,514,514,514,514,514,514,515,515,514,,515,,,,,,,,515,515,,515',
'515,515,515,515,515,515,,,515,515,,,,515,515,515,515,,,,,,515,,,,,,',
',515,515,,515,515,515,515,515,515,515,515,515,515,515,515,207,207,515',
',207,,,,,,,,207,207,,207,207,207,207,207,207,207,,,207,207,,,,207,207',
'207,207,,,,,,207,,,,,,,,207,207,,207,207,207,207,207,207,207,207,207',
'207,207,207,208,208,207,,208,,,,,,,,208,208,,208,208,208,208,208,208',
'208,,,208,208,,,,208,208,208,208,,,,,,208,,,,,,,,208,208,,208,208,208',
'208,208,208,208,208,208,208,208,208,572,572,208,,572,,,,,,,,572,572',
',572,572,572,572,572,572,572,,,572,572,,,,572,572,572,572,,,,,,572,',
',,,,,,572,572,,572,572,572,572,572,572,572,572,572,572,572,572,256,256',
'572,,256,,,,,,,,256,256,,256,256,256,256,256,256,256,,,256,256,,,,256',
'256,256,256,,,,,,,,,,,,,,256,256,,256,256,256,256,256,256,256,256,256',
'256,256,256,578,578,256,,578,,,,,,,,578,578,,578,578,578,578,578,578',
'578,,,578,578,,,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578,578',
'578,578,578,578,578,578,578,578,578,579,579,578,,579,,,,,,,,579,579',
',579,579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579,',
',,,,,,579,579,,579,579,579,579,579,579,579,579,579,579,579,579,436,436',
'579,,436,,,,,,,,436,436,,436,436,436,436,436,436,436,,,436,436,,,,436',
'436,436,436,,,,,,436,,,,,,,,436,436,,436,436,436,436,436,436,436,436',
'436,436,436,436,437,437,436,,437,,,,,,,,437,437,,437,437,437,437,437',
'437,437,,,437,437,,,,437,437,437,437,,,,,,437,,,,,,,,437,437,,437,437',
'437,437,437,437,437,437,437,437,437,437,932,932,437,,932,,,,,,,,932',
'932,,932,932,932,932,932,932,932,,,932,932,,,,932,932,932,932,,,,,,932',
',,,,,,,932,932,,932,932,932,932,932,932,932,932,932,932,932,932,978',
'978,932,,978,,,,,,,,978,978,,978,978,978,978,978,978,978,,,978,978,',
',,978,978,978,978,,,,,,978,,,,,,,,978,978,,978,978,978,978,978,978,978',
'978,978,978,978,978,979,979,978,,979,,,,,,,,979,979,,979,979,979,979',
'979,979,979,,,979,979,,,,979,979,979,979,,,,,,979,,,,,,,,979,979,,979',
'979,979,979,979,979,979,979,979,979,979,979,,965,979,965,965,965,965',
'965,,734,,734,734,734,734,734,965,,,,,,,,734,,963,,963,963,963,963,963',
',,,,,965,,,963,,,,,734,,,965,965,,,,965,734,734,734,734,,,,734,963,',
'1007,,1007,1007,1007,1007,1007,963,963,963,963,,,,963,1007,,860,,860',
'860,860,860,860,694,,694,694,694,694,694,,860,,,,,1007,,694,,531,,531',
'531,531,531,531,1007,1007,,,,1007,860,,531,,,,,694,,860,860,860,860',
',,,860,,694,694,,,,694,531,,692,,692,692,692,692,692,531,531,531,531',
',,,531,692,,587,,587,587,587,587,587,,888,,888,888,888,888,888,587,',
',,,692,,,888,,,,,,692,692,692,692,,,,692,587,587,,,,,,,888,587,587,587',
'587,,,,587,888,888,888,888,,,890,888,890,890,890,890,890,892,,892,892',
'892,892,892,894,890,894,894,894,894,894,981,892,981,981,981,981,981',
',894,,,,,,,981,890,,,,,,,892,,,,890,890,,894,,890,,892,892,,981,,892',
',894,894,,,,894,,981,981,,,,981' ]
        racc_action_check = arr = ::Array.new(24911, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2438,   768,   nil,   347,   nil,  5297,  1004,   391, 22433, 22561,
  1063,   nil,  1034,  1086,   324,   501,   987,   532,   nil,   -71,
  5426, 23521,   987,   nil,   434,   nil,   -24, 22189, 22299,  5555,
  5684,  5813,   nil,  2825,  5942,  6071,   nil,   732,   413,   225,
   699,   824,  6208,  6337,  6466,   209,  1402,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4386,   nil,   -80,  6595,
  6724,    -8,   nil,  6853,  6982,   nil,   nil,  7111,  7248,  7377,
  7506, 22945,   nil,   nil,   nil,   nil,   nil,   261,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   354,   nil,   nil,   488,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1274,   nil,  7635,   nil,
   nil,   nil,   nil,  7772,  7901,  8030,  8159,  8288,  2180,   nil,
   789,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1041,   nil,  2567,  8417,  8546,  8675, 23892, 23953,  8804,
  8933,  5168,  9062,  9191,  9320,   nil,   nil,  1277,   -40,   -83,
  1121,   195,  1045,  1099,   nil,  9449,  2309,  1099,  9578,  9707,
  9836,  9965, 10094, 10223, 10352, 10481, 10610, 10739, 10868, 10997,
 11126, 11255, 11384, 11513, 11642, 11771, 11900, 12029, 12158, 12287,
 12416, 12545, 12674, 12803,   nil,   nil, 24075,   nil,   nil,  1151,
 12932, 13061,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 13190,
   nil, 13964,   nil,  -118,  1127,   nil, 13319,  1174, 13448,   nil,
 13577, 13706,   nil,   nil,   511,   nil, 13835,   746,  1160,  1134,
  1406,  1145,  1195,  1156, 13964,  1277,   761,   883,   884,  1236,
   906,   nil,  1204,  1171,   228,   nil,   nil,   nil,  1213,   908,
  1170, 14101,   nil,   182,  1238,  1239,  1022,   nil,  1247,   nil,
 14230,  1148, 14359,  1186,   nil,   524,   150,  1223,  1205,   547,
  1232,   nil,   nil, 23329,   814,    10,    33, 14488, 14617,   481,
  1236,  -112,    11,    39,   496,   -21,    37,    25,   nil,   nil,
   253,   299,   305,   nil,   549,   nil,    29, 14746,   nil,   nil,
   nil,   188,   396,   568,   583,   399,   -53,   526,   436,   302,
   nil,   321,   nil, 14875,   nil,   418,   289,   382,   278,   411,
   -41,   -31,   415,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47, 22689,   nil,   nil,   nil,   nil,    84,   nil,    66,
   nil, 15004,   121,   nil,  6071,   139,   nil,   149,   168,   359,
   446, 21981,   nil,   nil,   nil,   110,   622,   223,   nil,   nil,
  4252,  4118,   nil, 23107,   nil,   202,   nil,   nil,  3986,   nil,
   nil,   nil,   nil,   214,   nil,   284, 24258, 24319, 15133,    15,
 15262, 15391, 15520,  1922,  2051,   511,   -45,   368,   387,   398,
   413,  2954,  2825,  3083,  2696,  2438,  1793,  1019,  2567,  1148,
  1664,  1277,  2309,  1406,   890,   860,  2180,  1535, 21849,   234,
 22110,   nil,   nil,   nil,   nil,   360,   nil,   161,   200,   364,
   nil,   nil, 15649,   nil, 15778,   nil, 15907,   nil,   nil,   nil,
   nil, 16036,   875,  3599,   375,   376,   nil,   nil,   386, 16173,
   393, 16302, 23648, 23709,   655,   445,   nil,   nil, 16431,   467,
   nil, 16560, 16689, 16818, 23770, 23831, 16036, 16947,   636,   647,
   673,   578,   nil, 17076,   nil,   nil, 17205,   nil,   nil,   nil,
    53, 24669,   nil,   549,   551,   nil,   553,   569,   578,   nil,
   nil,   nil,   nil,   nil,   nil,   575,   nil,   747,   nil, 17334,
   nil,   nil,   nil,   670,   nil,   nil,   nil,   686,   nil,   nil,
   694,  3470,   744,   nil,  3341,    95,   149,   742,   751, 17463,
 17592, 23587, 24014,    40,   nil,   nil,   560,   nil, 24136, 24197,
 17721,   nil,   nil,   nil,    79,   170,  3212, 24725,   nil,    18,
   nil,   nil,   nil,   944,   nil,   nil,   nil,   654,   nil,   nil,
   211,   nil,   151,   nil,   nil,   643,   nil,   663,   nil,   nil,
   nil, 22817,   nil,   670, 17850, 17979,   119,   723, 18108, 18237,
 18366, 18495,   732,   nil,   nil, 18624, 18753,   740,   nil, 18882,
 19011,   nil,   nil,   105,   116,     0,   220,   737,  7111,   743,
   nil,   551,   nil,  1793,   853,   -21,   168,   nil,  1664,  1535,
   nil,   765,   nil,   815, 19140,   nil,   nil,   nil,   791,   310,
 19269,   773,   nil,   802,    65,   134,   857,   433,  1403,   861,
   824, 19398, 23291,   893,   905,   202,   958, 19527,   nil,   844,
   nil,   536,   nil,   nil,   nil,   849,   647,   nil,   nil,   319,
   619,   nil, 24708,   nil, 24652,   nil, 19656,   nil,   876,   nil,
   851,   318,   nil,   856,   nil,   nil,   nil,   nil,   371,   nil,
   975,   nil,   nil,   nil,   nil,   985,   nil,    32,   874,   -18,
     9,     8,    68, 19785,   323,  1274,   nil,   879,  1019, 19914,
   nil,   nil,  1007,   890, 24572,   403, 23058,   nil,   nil,   nil,
   nil,   nil,   nil,  5039,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   884, 20043, 23245, 20172,   nil,   899,   nil, 23475,   nil,
  7635,   nil,   nil, 23337,   nil, 23383,   nil, 23429, 20301, 20430,
 20559, 20688,   180, 20817,   942,   946,   nil,   958,   962,   963,
   nil,   988,   968,   965,   966, 20946,   nil,   nil,  1099,   nil,
   nil,  4910,   996,  1103,   nil,   nil,   nil,   980,   362,   nil,
   nil,  1110,   nil,  4781,   994,  1044,   nil,   nil,  1042,   nil,
  4652,  4523,  1043,  1005,   nil,   nil,   nil,  1010,  1011,   nil,
  1012,  1013,   nil,  1023,   nil,  1030,   776,  1028,   687,   nil,
  1153,   nil, 21075,  1155,  3986,  3857,   nil, 21204,  3728,   -19,
    96,   nil,  1178,   -83,  3083,   nil,  1180,  1060,   nil,   nil,
  1064,  1071,   nil, 23153, 21333, 21462, 23199,   670,   nil,   nil,
 24645,   nil, 23510,   nil, 23234,   nil,   nil,  1118,   806, 21591,
   499,  1179,   nil,  1122,   nil,   nil,   nil,  2954,   nil,   nil,
   -10, 21720,   nil,   nil,  1129,  1235,   nil,   nil, 24733,   nil,
 24785,   nil, 24792,   nil, 24799,   nil,   nil,   nil,   nil,   415,
  1035,  1129,   nil,    -1,   nil,  1258,  1281,   nil,    46,   nil,
   nil,   nil,  1305,   nil,   nil, 23145,   nil,  1187,   nil,   nil,
  1200,   -53,   -17,    89,   nil,   277,   nil,   276,   nil,   nil,
   nil,  1145, 24380,   nil,   nil,   nil,  2696,  1148,  1144,  1010,
   466,   666,   nil,   nil,   nil,   465,   479,   491,   495,   499,
   786,   546,  1005,  2051,   nil,   nil,   nil,   nil,   nil,   761,
   nil,  1922,   nil, 24589,   nil, 24564,   nil, 23418,   nil, 22074,
   nil,   nil,   nil,   496,   732,   743,   827, 21849, 24441, 24502,
  1273, 24806,   nil,   nil,   nil,   nil,   815,   847,   874,  1006,
  1018,   898,   900,   902,   922,   nil,   nil,   931,    26,     8,
    39,   594,  1075,  1093,   nil,   nil,   nil, 24628,   nil,   nil,
   nil,   nil,    36,   nil,   722,   nil ]

racc_action_default = [
    -3,  -588,    -1,  -574,    -4,  -588,    -7,  -588,  -588,  -588,
  -588,   -29,  -588,  -588,  -588,  -279,  -588,   -41,   -44,  -576,
  -588,   -49,   -51,   -52,   -53,   -57,  -258,  -258,  -258,  -293,
  -328,  -329,   -69,   -11,   -73,   -81,   -83,  -588,  -485,  -486,
  -588,  -588,  -588,  -588,  -588,  -576,  -239,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -564,  -281,  -283,  -587,
  -555,  -301,  -389,  -588,  -588,  -306,  -309,  -574,  -588,  -588,
  -588,  -588,  -330,  -331,  -428,  -429,  -430,  -431,  -432,  -453,
  -435,  -436,  -455,  -457,  -440,  -445,  -449,  -451,  -467,  -455,
  -469,  -470,  -562,  -474,  -475,  -563,  -477,  -478,  -479,  -480,
  -481,  -482,  -483,  -484,  -489,  -490,  -588,    -2,  -575,  -583,
  -584,  -585,    -6,  -588,  -588,  -588,  -588,  -588,    -3,   -17,
  -588,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,   -22,  -121,   -11,  -588,  -588,  -248,  -588,  -588,  -588,
  -588,  -588,  -588,  -588,  -576,  -577,   -48,  -588,  -485,  -486,
  -588,  -279,  -588,  -588,  -231,  -588,   -11,  -588,  -588,  -588,
  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
  -588,  -588,  -588,  -588,  -397,  -399,  -588,  -572,  -573,   -58,
  -248,  -588,  -300,  -403,  -412,  -414,   -64,  -409,   -65,  -576,
   -66,  -240,  -253,  -262,  -262,  -257,  -588,  -263,  -588,  -557,
  -588,  -588,   -67,   -68,  -574,   -12,  -588,   -15,  -588,   -71,
   -11,  -576,  -588,   -74,   -77,   -11,   -89,   -90,  -588,  -588,
   -97,  -293,  -296,  -576,  -588,  -328,  -329,  -332,  -410,  -588,
   -79,  -588,   -85,  -290,  -471,  -472,  -588,  -216,  -217,  -232,
  -588,   -11,  -588,  -576,  -241,  -580,  -580,  -588,  -588,  -580,
  -588,  -302,  -303,  -517,   -50,  -588,  -588,  -588,  -588,  -574,
  -588,  -575,  -485,  -486,  -588,  -588,  -279,  -588,  -342,  -343,
  -107,  -108,  -588,  -110,  -588,  -279,  -588,  -588,  -485,  -486,
  -321,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,
  -323,  -588,  -553,  -588,  -433,  -588,  -588,  -588,  -588,  -588,
  -588,  -588,  -588,  1016,    -5,  -586,   -23,   -24,   -25,   -26,
   -27,  -588,  -588,   -19,   -20,   -21,  -122,  -588,   -30,   -39,
   -40,  -588,  -588,   -31,  -197,  -576,  -249,  -262,  -262,  -565,
  -566,  -258,  -407,  -567,  -568,  -566,  -565,  -258,  -406,  -408,
  -567,  -568,   -37,  -205,   -38,  -588,   -42,   -43,  -195,  -263,
   -45,   -46,   -47,  -576,  -299,  -588,  -588,  -588,  -248,  -290,
  -588,  -588,  -588,  -206,  -207,  -208,  -209,  -210,  -211,  -212,
  -213,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -576,  -378,
  -258,  -565,  -566,   -55,   -59,  -576,  -259,  -378,  -378,  -576,
  -295,  -254,  -588,  -255,  -588,  -260,  -588,  -264,  -560,  -561,
   -10,  -575,   -14,    -3,  -576,   -70,  -288,   -86,   -75,  -588,
  -576,  -248,  -588,  -588,   -96,  -588,  -471,  -472,  -588,   -82,
   -87,  -588,  -588,  -588,  -588,  -588,  -237,  -588,  -420,  -588,
  -284,  -588,  -242,  -582,  -581,  -244,  -582,  -291,  -292,  -556,
  -588,  -517,  -392,  -552,  -552,  -500,  -502,  -502,  -502,  -516,
  -518,  -519,  -520,  -521,  -522,  -523,  -524,  -588,  -526,  -588,
  -532,  -534,  -535,  -537,  -542,  -544,  -545,  -547,  -548,  -549,
  -588,   -11,  -333,  -334,   -11,  -588,  -588,  -588,  -588,  -588,
  -248,  -588,  -588,  -290,  -314,  -107,  -108,  -109,  -588,  -588,
  -248,  -317,  -491,  -492,  -588,  -588,   -11,  -517,  -325,  -576,
  -434,  -454,  -459,  -588,  -461,  -437,  -456,  -588,  -458,  -439,
  -588,  -442,  -588,  -444,  -447,  -588,  -448,  -588,  -468,    -8,
   -18,  -588,   -28,  -269,  -588,  -588,  -411,  -588,  -250,  -252,
  -588,  -588,   -60,  -247,  -404,  -588,  -588,   -62,  -405,  -588,
  -588,  -298,  -578,  -565,  -566,  -565,  -566,  -576,  -195,  -588,
  -379,  -576,  -381,   -11,   -54,  -400,  -378,  -245,   -11,   -11,
  -294,  -262,  -261,  -265,  -588,  -558,  -559,   -13,  -588,   -72,
  -588,   -78,   -84,  -576,  -565,  -566,  -246,   -93,   -95,  -588,
   -80,  -588,  -204,  -214,  -215,  -576,  -587,  -587,  -282,  -576,
  -287,  -580,  -390,  -393,  -395,  -576,  -588,  -498,  -499,  -588,
  -588,  -509,  -588,  -512,  -588,  -514,  -588,  -344,  -588,  -346,
  -348,  -355,  -523,  -576,  -528,  -536,  -546,  -550,  -587,  -335,
  -587,  -307,  -336,  -337,  -310,  -588,  -313,  -588,  -576,  -565,
  -566,  -569,  -289,  -588,  -107,  -108,  -111,  -576,   -11,  -588,
  -494,  -319,  -588,   -11,  -517,  -588,  -588,  -554,  -460,  -463,
  -464,  -465,  -466,   -11,  -438,  -441,  -443,  -446,  -450,  -452,
  -123,  -267,  -588,  -198,  -588,  -579,  -262,   -33,  -200,   -34,
  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -588,  -588,
  -588,  -588,  -411,  -588,  -552,  -552,  -360,  -362,  -362,  -362,
  -377,  -588,  -576,  -383,  -523,  -588,  -530,  -540,  -588,  -402,
  -401,   -11,  -588,  -588,  -256,  -266,   -16,   -76,   -91,   -88,
  -297,  -587,  -340,   -11,  -421,  -587,  -422,  -423,  -588,  -243,
   -11,   -11,  -588,  -552,  -533,  -551,  -501,  -502,  -502,  -527,
  -502,  -502,  -543,  -502,  -538,  -576,  -588,  -353,  -588,  -525,
  -588,  -338,  -588,  -588,   -11,   -11,  -312,  -588,   -11,  -411,
  -588,  -411,  -588,  -588,   -11,  -322,  -588,  -576,  -496,  -326,
  -588,  -268,   -32,  -199,  -251,  -588,  -238,  -588,  -358,  -359,
  -368,  -370,  -588,  -373,  -588,  -375,  -380,  -588,  -588,  -588,
  -529,  -588,  -398,  -588,  -413,  -415,    -9,   -11,  -427,  -341,
  -588,  -588,  -425,  -285,  -588,  -588,  -391,  -497,  -588,  -505,
  -588,  -507,  -588,  -510,  -588,  -513,  -515,  -345,  -347,  -351,
  -588,  -356,  -304,  -588,  -305,  -588,  -588,  -265,  -587,  -315,
  -318,  -493,  -588,  -324,  -495,  -517,  -462,  -552,  -531,  -361,
  -362,  -362,  -362,  -362,  -541,  -362,  -382,  -576,  -385,  -387,
  -388,  -539,  -588,  -290,   -56,  -426,   -11,   -98,   -99,  -588,
  -588,  -106,  -424,  -394,  -396,  -502,  -502,  -502,  -502,  -349,
  -588,  -354,  -588,   -11,  -308,  -311,  -416,  -417,  -418,   -11,
  -320,   -11,  -357,  -588,  -365,  -588,  -367,  -588,  -371,  -588,
  -374,  -376,  -384,  -588,  -289,  -569,  -420,  -248,  -588,  -588,
  -105,  -588,  -503,  -506,  -508,  -511,  -588,  -352,  -587,  -588,
  -588,  -362,  -362,  -362,  -362,  -386,  -419,  -576,  -565,  -566,
  -569,  -104,  -502,  -350,  -339,  -316,  -327,  -588,  -363,  -366,
  -369,  -372,  -411,  -504,  -362,  -364 ]

clist = [
'213,293,324,26,216,124,124,405,26,272,272,272,370,411,417,111,331,519',
'119,202,255,539,2,26,568,400,320,127,127,427,676,424,26,26,26,483,26',
'652,532,652,263,267,129,129,256,6,655,273,273,273,6,616,434,259,266',
'268,307,307,107,522,525,475,470,529,733,108,26,26,124,474,26,310,711',
'714,335,336,830,325,339,111,561,564,778,703,577,687,688,819,655,801',
'307,307,307,509,898,928,270,282,283,822,291,112,924,901,334,334,930',
'480,334,959,289,26,728,274,274,274,26,26,26,26,26,26,340,833,386,387',
'388,389,781,495,600,602,376,779,591,844,598,601,601,382,391,586,643',
'326,329,356,360,587,736,697,648,649,915,6,334,334,334,334,679,322,321',
'371,390,6,780,581,347,332,328,483,782,372,812,652,652,951,645,327,611',
'927,1,655,818,530,820,682,272,333,398,403,646,810,811,422,426,469,477',
'15,478,956,995,805,15,924,384,421,26,26,26,26,880,930,26,26,26,26,26',
'26,374,539,898,412,402,375,377,987,378,392,402,26,15,300,300,379,825',
'775,685,380,381,637,272,272,411,417,738,743,729,349,201,272,817,715',
'430,431,432,433,657,819,814,918,876,1003,337,26,26,346,355,355,323,867',
'834,631,26,338,835,539,723,,510,273,813,661,732,772,505,,,273,,26,670',
'819,,26,,822,111,,26,,697,920,663,827,521,15,,,666,798,726,,,647,15',
'15,307,650,263,791,666,957,267,,26,26,858,859,476,,498,492,659,307,',
',479,,662,490,26,26,,,,274,491,909,565,566,,111,921,274,922,,1004,494',
',746,26,746,500,520,839,887,819,289,582,,,718,289,841,,,26,666,334,334',
'945,727,,,,666,617,,,124,,588,961,,567,,,,585,,15,,610,,,,,,,652,,127',
'794,,589,809,655,,272,691,693,695,539,15,842,623,129,737,697,846,697',
'628,761,,421,,,766,622,847,,26,797,,627,,,,427,639,412,917,,,775,991',
'775,,775,,,,838,,,,510,,,962,,,,,,510,,,,,,272,,15,623,,,15,996,,,300',
'15,,26,,26,644,806,,421,949,697,,26,,,,300,,,,421,800,,658,412,794,15',
',26,307,,,,,,,412,,307,,,,,,,,6,,912,829,,,,,,,,,272,,697,,697,,,775',
'675,775,272,775,,775,26,,651,26,,421,,,,26,,421,,712,712,,,,,26,,412',
',717,697,26,,,958,412,,,730,731,,292,790,775,,539,757,759,14,681,124',
'762,764,14,,426,,,,,617,,807,750,783,26,26,936,217,510,26,26,127,,26',
',,217,217,217,799,14,298,298,789,1012,617,129,26,,953,,,26,26,,,,,990',
',,808,,,897,,,783,,,217,217,,,217,344,354,354,849,,,623,,307,628,,914',
',,15,,15,,,307,,402,300,,,617,889,891,756,893,895,300,896,,617,,,,,',
'14,,,,,217,217,217,217,14,14,,26,,,,,26,26,124,840,,26,,852,,843,,,',
'878,,26,848,882,,,776,,,,,,26,15,,,15,,783,334,,,,,397,334,,,,,,,,997',
',,,,15,666,,,,,,742,,292,,26,,815,,,815,,,,16,,,26,307,16,14,217,217',
'217,26,26,217,217,217,217,217,217,,,,,,,,982,983,984,985,14,,,26,16',
'26,26,,15,26,,903,,15,15,26,,,,,712,,,911,292,300,,,,292,,,,,217,217',
'300,,,348,,334,,217,,,,,26,,,,,1013,,,,,,307,14,,,,14,777,,,298,14,',
'307,,,,,972,,,16,,,,,,298,,,16,16,,,,15,,14,217,421,15,,,,,,,,,26,15',
',,217,217,,,,821,,823,,,,,,26,272,,,,,26,217,26,,,815,,,776,,776,,776',
',421,,617,217,26,,355,,,,38,,15,,,38,412,,,,,,,,15,,,,,,16,15,15,,,',
',425,,,,,,38,296,296,,,,,,,,16,,15,15,,,15,,,,,,15,,,217,,,13,,,,,13',
',342,358,358,358,,,,,,,,,355,,,,,,,776,15,776,,776,941,776,13,,,,,,',
',,16,,,,16,38,,,14,16,14,,,,38,38,298,,217,,,,,,,298,,,776,923,,925',
',,217,16,,,708,,,710,,,15,,,,,,,,,,,946,,947,,948,,15,,,,,13,15,,15',
',,,,,13,13,,14,,,14,861,863,865,,,217,,,,,,,,,,217,,,38,,,14,,,,,,,',
',,,,,,,,,788,,,38,,792,793,,,,992,,993,,994,,,217,217,,,,217,217,,,217',
',1002,,,,,,,,,,,,14,13,,,,14,14,,,,,,,,1014,,,298,,,,,,38,13,,,38,298',
',,296,38,,330,,,,,,,,,,,16,,16,296,,,,,,,,,,38,,850,,,,,964,966,968',
'970,,971,,,,,,,,,,217,,,,13,14,217,,13,,14,,,13,,,,,,,14,,,,,,,,873',
',,217,,,,16,,,16,13,879,,,,,,,884,885,,,,,,,,1008,1009,1010,1011,16',
',870,,,,,,14,,,905,906,,,908,,,,1015,14,,,,,,,14,14,,,,,,,,,,399,,,',
',425,429,,,,,217,,14,14,,935,14,,16,,,,14,16,16,,,,,,,,,,,,,,,,,,,,',
',,931,,38,,38,,,,14,,296,,939,,,,,,,296,,,,,485,,487,976,488,489,,,',
',,,,,,,,,,,988,,,39,,,989,,39,,,,16,,,,,16,,13,,13,,14,,,,16,38,,,38',
',,,,39,297,297,,14,,,,,,14,,14,,,,,38,,,,,,,,,,,217,,,,,,,343,359,359',
'359,16,,,,,,,,,,,,16,,13,,,13,,16,16,,,,,,,,,,613,,,,,38,39,,,13,38',
'38,,16,16,39,39,16,,,,,296,16,,,,,,,,,,296,,,,,,,,,,,,,,,,,,,,,,,16',
',,,942,,,,,,13,,,,,13,13,,,,,,,,,653,,330,,656,,,,,38,,,,,38,,,,,,39',
',,,38,,,,,,,,,,16,,,,,,,653,,39,330,,,,,,,16,,,,,,16,,16,,,,,,,358,704',
',,13,,38,,,13,,,,,,,,,38,13,,429,,,,38,38,,,,,,,,,,,39,,,,39,,,,297',
'39,,,38,38,,,38,,,,,,38,,,297,,,,751,13,,,653,330,39,,,,,,,13,,,,,358',
',13,13,,,,,38,,,,937,,,,,,,,,,795,,,,13,13,,,13,,,,,,13,,,,,,,,,804',
',,,,,,,,,,,,,,,,,,824,224,,38,,13,,,,,271,271,271,,,,,,,,38,,,317,318',
'319,38,,38,,,,,,,,,,,,271,271,,,,,,,,,,,,,,,851,,,,,,,,13,,,,,,,,,,',
',,,,,,13,,,,,,13,,13,,,,,39,,39,,,,,,297,,,,,,,,,297,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,907,,,,,,,,,,,,,,,,,330,,,,,,39,,,39,,,,,,,,,,,,,,,,,',
'271,404,271,,39,423,428,,,,,,,,,,,,,,,224,,,443,444,445,446,447,448',
'449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465',
'466,467,468,,,,,,,271,271,,,,39,,,,271,39,39,,,,,271,,271,,271,271,297',
',,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,516,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,39,,,,,39,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,',
',,,359,,,,,,39,,,,,,,,,,,,39,,,,,,,39,39,,,,,271,,423,638,404,,,,,,',
',,,,,,,39,39,,,39,,,,,,39,,,,,,,,,,,,,,,,271,,271,,271,,,,,359,,,,,',
',,39,,271,,938,,,,,,,,672,673,674,,,,,,,,,,271,,,271,,,,,,,,,,,,,,,',
',,,,,,,271,,,,,,,,,39,,,,,,,,,,,271,271,,,,,39,,,,,271,39,,39,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,271,753,,,271,271,758,760,,,,763,765,,,638,767',
',,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,',
',,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,853',
',,,,,,,,,,,,,758,760,765,763,,856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,271,853,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271' ]
        racc_goto_table = arr = ::Array.new(2878, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,49,65,41,20,57,57,23,41,33,33,33,56,37,37,93,84,8,15,15,135,160,2',
'41,90,27,31,60,60,18,10,27,41,41,41,71,41,72,134,72,69,69,61,61,36,7',
'172,66,66,66,7,24,47,38,38,38,63,63,4,67,67,23,37,67,94,6,41,41,57,39',
'41,50,89,89,17,17,88,66,17,93,87,87,124,114,54,119,119,164,172,11,63',
'63,63,51,112,129,44,44,44,168,46,5,169,115,29,29,130,47,29,105,45,41',
'106,68,68,68,41,41,41,41,41,41,4,11,17,17,17,17,127,47,152,152,149,125',
'153,107,153,153,153,149,2,108,40,68,68,55,55,109,110,113,40,40,111,7',
'29,29,29,29,98,97,96,95,7,7,116,92,91,86,83,71,122,82,127,72,72,115',
'70,64,62,128,1,172,125,131,125,132,33,133,20,20,42,136,137,20,20,138',
'140,25,141,142,129,143,25,169,5,57,41,41,41,41,144,130,41,41,41,41,41',
'41,147,160,112,69,66,148,150,115,151,30,66,41,25,25,25,154,114,118,134',
'155,156,23,33,33,37,37,157,158,159,19,16,33,163,90,29,29,29,29,14,164',
'165,166,12,115,100,41,41,25,25,25,99,127,101,47,41,102,103,160,104,',
'49,66,118,51,8,24,31,,,66,,41,51,164,,41,,168,93,,41,,113,124,23,113',
'31,25,,,37,24,54,,,47,25,25,63,47,69,40,37,11,69,,41,41,119,119,44,',
'50,7,47,63,,,44,,47,4,41,41,,,,68,6,89,17,17,,93,125,68,125,,88,46,',
'153,41,153,46,29,24,119,164,45,93,,,23,45,24,,,41,37,29,29,125,23,,',
',37,31,,,57,,36,94,,4,,,,29,,25,,15,,,,,,,72,,60,71,,29,67,172,,33,162',
'162,162,160,25,8,69,61,47,113,8,113,69,39,,57,,,39,38,134,,41,51,,38',
',,,18,31,69,118,,,118,125,118,,118,,,,87,,,,49,,,119,,,,,,49,,,,,,33',
',25,69,,,25,10,,,25,25,,41,,41,38,27,,57,113,113,,41,,,,25,,,,57,47',
',2,69,71,25,,41,63,,,,,,,69,,63,,,,,,,,7,,8,47,,,,,,,,,33,,113,,113',
',,118,29,118,33,118,,118,41,,68,41,,57,,,,41,,57,,93,93,,,,,41,,69,',
'66,113,41,,,90,69,,,93,93,,9,84,118,,160,20,20,22,68,57,20,20,22,,20',
',,,,31,,65,15,31,41,41,87,22,49,41,41,60,,41,,,22,22,22,49,22,22,22',
'135,24,31,61,41,,87,,,41,41,,,,,8,,,31,,,47,,,31,,,22,22,,,22,22,22',
'22,56,,,69,,63,69,,47,,,25,,25,,,63,,66,25,,,31,162,162,68,162,162,25',
'162,,31,,,,,,22,,,,,22,22,22,22,22,22,,41,,,,,41,41,57,17,,41,,20,,17',
',,,65,,41,93,65,,,120,,,,,,41,25,,,25,,31,29,,,,,9,29,,,,,,,,23,,,,',
'25,37,,,,,,25,,9,,41,,120,,,120,,,,26,,,41,63,26,22,22,22,22,41,41,22',
'22,22,22,22,22,,,,,,,,162,162,162,162,22,,,41,26,41,41,,25,41,,17,,25',
'25,41,,,,,93,,,93,9,25,,,,9,,,,,22,22,25,,,26,,29,,22,,,,,41,,,,,162',
',,,,,63,22,,,,22,123,,,22,22,,63,,,,,31,,,26,,,,,,22,,,26,26,,,,25,',
'22,22,57,25,,,,,,,,,41,25,,,22,22,,,,123,,123,,,,,,41,33,,,,,41,22,41',
',,120,,,120,,120,,120,,57,,31,22,41,,25,,,,52,,25,,,52,69,,,,,,,,25',
',,,,,26,25,25,,,,,26,,,,,,52,52,52,,,,,,,,26,,25,25,,,25,,,,,,25,,,22',
',,21,,,,,21,,52,52,52,52,,,,,,,,,25,,,,,,,120,25,120,,120,25,120,21',
',,,,,,,,26,,,,26,52,,,22,26,22,,,,52,52,22,,22,,,,,,,22,,,120,123,,123',
',,22,26,,,9,,,9,,,25,,,,,,,,,,,123,,123,,123,,25,,,,,21,25,,25,,,,,',
'21,21,,22,,,22,121,121,121,,,22,,,,,,,,,,22,,,52,,,22,,,,,,,,,,,,,,',
',,9,,,52,,9,9,,,,123,,123,,123,,,22,22,,,,22,22,,,22,,123,,,,,,,,,,',
',22,21,,,,22,22,,,,,,,,123,,,22,,,,,,52,21,,,52,22,,,52,52,,28,,,,,',
',,,,,26,,26,52,,,,,,,,,,52,,9,,,,,121,121,121,121,,121,,,,,,,,,,22,',
',,21,22,22,,21,,22,,,21,,,,,,,22,,,,,,,,9,,,22,,,,26,,,26,21,9,,,,,',
',9,9,,,,,,,,121,121,121,121,26,,22,,,,,,22,,,9,9,,,9,,,,121,22,,,,,',
',22,22,,,,,,,,,,28,,,,,26,28,,,,,22,,22,22,,9,22,,26,,,,22,26,26,,,',
',,,,,,,,,,,,,,,,,,,22,,52,,52,,,,22,,52,,22,,,,,,,52,,,,,28,,28,9,28',
'28,,,,,,,,,,,,,,,9,,,53,,,9,,53,,,,26,,,,,26,,21,,21,,22,,,,26,52,,',
'52,,,,,53,53,53,,22,,,,,,22,,22,,,,,52,,,,,,,,,,,22,,,,,,,53,53,53,53',
'26,,,,,,,,,,,,26,,21,,,21,,26,26,,,,,,,,,,28,,,,,52,53,,,21,52,52,,26',
'26,53,53,26,,,,,52,26,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,26,,,,26,,,',
',,21,,,,,21,21,,,,,,,,,28,,28,,28,,,,,52,,,,,52,,,,,,53,,,,52,,,,,,',
',,,26,,,,,,,28,,53,28,,,,,,,26,,,,,,26,,26,,,,,,,52,28,,,21,,52,,,21',
',,,,,,,,52,21,,28,,,,52,52,,,,,,,,,,,53,,,,53,,,,53,53,,,52,52,,,52',
',,,,,52,,,53,,,,28,21,,,28,28,53,,,,,,,21,,,,,52,,21,21,,,,,52,,,,52',
',,,,,,,,,28,,,,21,21,,,21,,,,,,21,,,,,,,,,28,,,,,,,,,,,,,,,,,,,28,32',
',52,,21,,,,,32,32,32,,,,,,,,52,,,32,32,32,52,,52,,,,,,,,,,,,32,32,,',
',,,,,,,,,,,,28,,,,,,,,21,,,,,,,,,,,,,,,,,21,,,,,,21,,21,,,,,53,,53,',
',,,,53,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,28',
',,,,,53,,,53,,,,,,,,,,,,,,,,,,32,32,32,,53,32,32,,,,,,,,,,,,,,,32,,',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,,,,,,,32,32,,,,53,,,,32,53,53,,,,,32,,32,,32,32,53,,,,,,,,',
',,53,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,',
',,53,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,53,,,,,',
'53,,,,,,,,,,,,53,,,,,,,53,53,,,,,32,,32,32,32,,,,,,,,,,,,,,53,53,,,53',
',,,,,53,,,,,,,,,,,,,,,,32,,32,,32,,,,,53,,,,,,,,53,,32,,53,,,,,,,,32',
'32,32,,,,,,,,,,32,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,53,,,,,,,,,',
',32,32,,,,,53,,,,,32,53,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32',
'32,32,32,,,,32,32,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,',
',,,,,,32,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,32,,32,,,,,,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32',
'32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(2878, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   180,    22,   nil,    55,    96,    62,    45,  -304,   566,
  -488,  -587,  -541,   nil,  -235,    10,   239,    11,  -181,   179,
   -16,  1047,   606,  -199,  -354,   197,   803,  -179,  1223,    41,
   108,   -19,  1900,   -20,   nil,   nil,    20,  -194,    27,  -190,
  -327,     3,  -283,   nil,    67,    77,    67,  -162,   nil,   -33,
    36,  -218,   986,  1522,  -268,    76,   -59,    -3,   nil,   nil,
    19,    34,  -218,    22,   118,   -57,    18,  -266,    84,    14,
  -294,  -239,  -445,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   100,   108,   -45,   nil,   105,  -255,  -632,  -493,
  -316,    98,  -191,    12,  -523,    90,   103,   101,  -362,   210,
   197,  -441,   207,  -440,  -298,  -800,  -469,  -596,  -219,  -223,
  -440,  -697,  -732,  -398,  -464,  -725,  -477,   nil,  -406,  -448,
   110,   394,  -471,   256,  -559,  -508,   nil,  -513,  -689,  -773,
  -762,  -150,  -345,   125,  -295,    -2,  -492,  -492,   -59,   nil,
   -68,   -67,  -709,  -476,  -595,   nil,   nil,   141,   144,    50,
   141,   142,  -248,  -241,   148,   151,   151,  -349,  -349,  -337,
  -312,   nil,  -117,  -440,  -603,  -428,  -598,   nil,  -593,  -760,
   nil,   nil,  -438 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   341,   287,   nil,   518,
   nil,   831,   nil,   284,   285,   nil,   nil,   nil,    11,    12,
    18,   223,   316,   nil,   nil,   221,   222,   nil,   277,    17,
   nil,   435,    21,    22,    23,    24,   nil,   669,   nil,   nil,
   nil,   304,   nil,    25,   406,    32,   nil,   nil,    34,    37,
    36,   nil,   218,   219,   353,   nil,   126,   414,   125,   128,
    75,    76,   nil,    46,   nil,   802,   407,   nil,   408,   419,
   624,   481,   275,   261,    47,    48,    49,    50,    51,    52,
    53,    54,    55,   nil,   262,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   562,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   699,   546,   nil,   700,   919,   774,   534,   nil,
   535,   nil,   nil,   536,   nil,   538,   640,   nil,   nil,   nil,
   544,   nil,   nil,   nil,   735,   nil,   nil,   nil,   nil,   418,
   nil,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,   nil,
   nil,   nil,   nil,   596,   nil,   nil,   nil,   nil,   nil,   nil,
   816,   533,   nil,   537,   548,   550,   786,   553,   554,   787,
   557,   560,   279 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 142, :_reduce_none,
  2, 143, :_reduce_2,
  0, 144, :_reduce_3,
  1, 144, :_reduce_4,
  3, 144, :_reduce_5,
  2, 144, :_reduce_6,
  1, 146, :_reduce_none,
  4, 146, :_reduce_8,
  4, 149, :_reduce_9,
  2, 150, :_reduce_10,
  0, 154, :_reduce_11,
  1, 154, :_reduce_12,
  3, 154, :_reduce_13,
  2, 154, :_reduce_14,
  1, 155, :_reduce_none,
  4, 155, :_reduce_16,
  0, 171, :_reduce_17,
  4, 148, :_reduce_18,
  3, 148, :_reduce_19,
  3, 148, :_reduce_20,
  3, 148, :_reduce_21,
  2, 148, :_reduce_22,
  3, 148, :_reduce_23,
  3, 148, :_reduce_24,
  3, 148, :_reduce_25,
  3, 148, :_reduce_26,
  3, 148, :_reduce_27,
  4, 148, :_reduce_28,
  1, 148, :_reduce_none,
  3, 148, :_reduce_30,
  3, 148, :_reduce_31,
  6, 148, :_reduce_32,
  5, 148, :_reduce_33,
  5, 148, :_reduce_34,
  5, 148, :_reduce_35,
  5, 148, :_reduce_36,
  3, 148, :_reduce_37,
  3, 148, :_reduce_38,
  3, 148, :_reduce_39,
  3, 148, :_reduce_40,
  1, 148, :_reduce_none,
  3, 159, :_reduce_42,
  3, 159, :_reduce_43,
  1, 170, :_reduce_none,
  3, 170, :_reduce_45,
  3, 170, :_reduce_46,
  3, 170, :_reduce_47,
  2, 170, :_reduce_48,
  1, 170, :_reduce_none,
  1, 158, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 175, :_reduce_none,
  4, 175, :_reduce_54,
  0, 183, :_reduce_55,
  5, 180, :_reduce_56,
  1, 182, :_reduce_none,
  2, 174, :_reduce_58,
  3, 174, :_reduce_59,
  4, 174, :_reduce_60,
  5, 174, :_reduce_61,
  4, 174, :_reduce_62,
  5, 174, :_reduce_63,
  2, 174, :_reduce_64,
  2, 174, :_reduce_65,
  2, 174, :_reduce_66,
  2, 174, :_reduce_67,
  2, 174, :_reduce_68,
  1, 160, :_reduce_69,
  3, 160, :_reduce_70,
  1, 187, :_reduce_71,
  3, 187, :_reduce_72,
  1, 186, :_reduce_none,
  2, 186, :_reduce_74,
  3, 186, :_reduce_75,
  5, 186, :_reduce_76,
  2, 186, :_reduce_77,
  4, 186, :_reduce_78,
  2, 186, :_reduce_79,
  4, 186, :_reduce_80,
  1, 186, :_reduce_81,
  3, 186, :_reduce_82,
  1, 190, :_reduce_none,
  3, 190, :_reduce_84,
  2, 189, :_reduce_85,
  3, 189, :_reduce_86,
  1, 192, :_reduce_87,
  3, 192, :_reduce_88,
  1, 191, :_reduce_89,
  1, 191, :_reduce_90,
  4, 191, :_reduce_91,
  3, 191, :_reduce_92,
  3, 191, :_reduce_93,
  3, 191, :_reduce_94,
  3, 191, :_reduce_95,
  2, 191, :_reduce_96,
  1, 191, :_reduce_97,
  1, 167, :_reduce_98,
  1, 167, :_reduce_99,
  4, 167, :_reduce_100,
  3, 167, :_reduce_101,
  3, 167, :_reduce_102,
  3, 167, :_reduce_103,
  3, 167, :_reduce_104,
  2, 167, :_reduce_105,
  1, 167, :_reduce_106,
  1, 195, :_reduce_107,
  1, 195, :_reduce_none,
  2, 196, :_reduce_109,
  1, 196, :_reduce_110,
  3, 196, :_reduce_111,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 200, :_reduce_117,
  1, 200, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 157, :_reduce_121,
  0, 203, :_reduce_122,
  4, 157, :_reduce_123,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  3, 173, :_reduce_195,
  5, 173, :_reduce_196,
  3, 173, :_reduce_197,
  5, 173, :_reduce_198,
  6, 173, :_reduce_199,
  5, 173, :_reduce_200,
  5, 173, :_reduce_201,
  5, 173, :_reduce_202,
  5, 173, :_reduce_203,
  4, 173, :_reduce_204,
  3, 173, :_reduce_205,
  3, 173, :_reduce_206,
  3, 173, :_reduce_207,
  3, 173, :_reduce_208,
  3, 173, :_reduce_209,
  3, 173, :_reduce_210,
  3, 173, :_reduce_211,
  3, 173, :_reduce_212,
  3, 173, :_reduce_213,
  4, 173, :_reduce_214,
  4, 173, :_reduce_215,
  2, 173, :_reduce_216,
  2, 173, :_reduce_217,
  3, 173, :_reduce_218,
  3, 173, :_reduce_219,
  3, 173, :_reduce_220,
  3, 173, :_reduce_221,
  3, 173, :_reduce_222,
  3, 173, :_reduce_223,
  3, 173, :_reduce_224,
  3, 173, :_reduce_225,
  3, 173, :_reduce_226,
  3, 173, :_reduce_227,
  3, 173, :_reduce_228,
  3, 173, :_reduce_229,
  3, 173, :_reduce_230,
  2, 173, :_reduce_231,
  2, 173, :_reduce_232,
  3, 173, :_reduce_233,
  3, 173, :_reduce_234,
  3, 173, :_reduce_235,
  3, 173, :_reduce_236,
  3, 173, :_reduce_237,
  6, 173, :_reduce_238,
  1, 173, :_reduce_none,
  1, 169, :_reduce_none,
  1, 205, :_reduce_none,
  2, 205, :_reduce_none,
  4, 205, :_reduce_243,
  2, 205, :_reduce_244,
  3, 210, :_reduce_245,
  0, 211, :_reduce_246,
  1, 211, :_reduce_none,
  0, 164, :_reduce_248,
  1, 164, :_reduce_none,
  2, 164, :_reduce_none,
  4, 164, :_reduce_251,
  2, 164, :_reduce_252,
  1, 185, :_reduce_253,
  2, 185, :_reduce_254,
  2, 185, :_reduce_255,
  4, 185, :_reduce_256,
  1, 185, :_reduce_257,
  0, 214, :_reduce_258,
  2, 179, :_reduce_259,
  2, 213, :_reduce_260,
  2, 212, :_reduce_261,
  0, 212, :_reduce_262,
  1, 207, :_reduce_263,
  2, 207, :_reduce_264,
  3, 207, :_reduce_265,
  4, 207, :_reduce_266,
  3, 168, :_reduce_267,
  4, 168, :_reduce_268,
  2, 168, :_reduce_269,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_280,
  0, 237, :_reduce_281,
  4, 204, :_reduce_282,
  0, 238, :_reduce_283,
  0, 239, :_reduce_284,
  6, 204, :_reduce_285,
  0, 240, :_reduce_286,
  4, 204, :_reduce_287,
  3, 204, :_reduce_288,
  3, 204, :_reduce_289,
  2, 204, :_reduce_290,
  3, 204, :_reduce_291,
  3, 204, :_reduce_292,
  1, 204, :_reduce_293,
  4, 204, :_reduce_294,
  3, 204, :_reduce_295,
  1, 204, :_reduce_296,
  5, 204, :_reduce_297,
  4, 204, :_reduce_298,
  3, 204, :_reduce_299,
  2, 204, :_reduce_300,
  1, 204, :_reduce_none,
  2, 204, :_reduce_302,
  2, 204, :_reduce_303,
  6, 204, :_reduce_304,
  6, 204, :_reduce_305,
  0, 241, :_reduce_306,
  0, 242, :_reduce_307,
  7, 204, :_reduce_308,
  0, 243, :_reduce_309,
  0, 244, :_reduce_310,
  7, 204, :_reduce_311,
  5, 204, :_reduce_312,
  4, 204, :_reduce_313,
  0, 245, :_reduce_314,
  0, 246, :_reduce_315,
  9, 204, :_reduce_316,
  0, 247, :_reduce_317,
  6, 204, :_reduce_318,
  0, 248, :_reduce_319,
  7, 204, :_reduce_320,
  0, 249, :_reduce_321,
  5, 204, :_reduce_322,
  0, 250, :_reduce_323,
  6, 204, :_reduce_324,
  0, 251, :_reduce_325,
  0, 252, :_reduce_326,
  9, 204, :_reduce_327,
  1, 204, :_reduce_328,
  1, 204, :_reduce_329,
  1, 204, :_reduce_330,
  1, 204, :_reduce_331,
  1, 163, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  2, 228, :_reduce_335,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 229, :_reduce_none,
  5, 229, :_reduce_339,
  1, 152, :_reduce_none,
  2, 152, :_reduce_341,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 253, :_reduce_344,
  3, 253, :_reduce_345,
  1, 256, :_reduce_346,
  3, 256, :_reduce_347,
  1, 255, :_reduce_none,
  4, 255, :_reduce_349,
  6, 255, :_reduce_350,
  3, 255, :_reduce_351,
  5, 255, :_reduce_352,
  2, 255, :_reduce_353,
  4, 255, :_reduce_354,
  1, 255, :_reduce_355,
  3, 255, :_reduce_356,
  4, 257, :_reduce_357,
  2, 257, :_reduce_358,
  2, 257, :_reduce_359,
  1, 257, :_reduce_360,
  2, 262, :_reduce_361,
  0, 262, :_reduce_362,
  6, 263, :_reduce_363,
  8, 263, :_reduce_364,
  4, 263, :_reduce_365,
  6, 263, :_reduce_366,
  4, 263, :_reduce_367,
  2, 263, :_reduce_none,
  6, 263, :_reduce_369,
  2, 263, :_reduce_370,
  4, 263, :_reduce_371,
  6, 263, :_reduce_372,
  2, 263, :_reduce_373,
  4, 263, :_reduce_374,
  2, 263, :_reduce_375,
  4, 263, :_reduce_376,
  1, 263, :_reduce_none,
  0, 181, :_reduce_378,
  1, 181, :_reduce_379,
  3, 267, :_reduce_380,
  1, 267, :_reduce_381,
  4, 267, :_reduce_382,
  1, 268, :_reduce_383,
  4, 268, :_reduce_384,
  1, 269, :_reduce_385,
  3, 269, :_reduce_386,
  1, 270, :_reduce_387,
  1, 270, :_reduce_none,
  0, 274, :_reduce_389,
  3, 227, :_reduce_390,
  4, 272, :_reduce_391,
  1, 272, :_reduce_392,
  0, 277, :_reduce_393,
  4, 273, :_reduce_394,
  0, 278, :_reduce_395,
  4, 273, :_reduce_396,
  0, 279, :_reduce_397,
  5, 276, :_reduce_398,
  2, 176, :_reduce_399,
  4, 176, :_reduce_400,
  5, 176, :_reduce_401,
  5, 176, :_reduce_402,
  2, 226, :_reduce_403,
  4, 226, :_reduce_404,
  4, 226, :_reduce_405,
  3, 226, :_reduce_406,
  3, 226, :_reduce_407,
  3, 226, :_reduce_408,
  2, 226, :_reduce_409,
  1, 226, :_reduce_410,
  4, 226, :_reduce_411,
  0, 281, :_reduce_412,
  5, 225, :_reduce_413,
  0, 282, :_reduce_414,
  5, 225, :_reduce_415,
  5, 231, :_reduce_416,
  1, 283, :_reduce_417,
  1, 283, :_reduce_none,
  6, 151, :_reduce_419,
  0, 151, :_reduce_420,
  1, 284, :_reduce_421,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  2, 285, :_reduce_424,
  1, 285, :_reduce_none,
  2, 153, :_reduce_426,
  1, 153, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 216, :_reduce_431,
  1, 287, :_reduce_432,
  2, 287, :_reduce_433,
  3, 288, :_reduce_434,
  1, 288, :_reduce_435,
  1, 288, :_reduce_436,
  3, 217, :_reduce_437,
  4, 218, :_reduce_438,
  3, 219, :_reduce_439,
  0, 292, :_reduce_440,
  3, 292, :_reduce_441,
  1, 293, :_reduce_442,
  2, 293, :_reduce_443,
  3, 221, :_reduce_444,
  0, 295, :_reduce_445,
  3, 295, :_reduce_446,
  3, 220, :_reduce_447,
  3, 222, :_reduce_448,
  0, 296, :_reduce_449,
  3, 296, :_reduce_450,
  0, 297, :_reduce_451,
  3, 297, :_reduce_452,
  0, 289, :_reduce_453,
  2, 289, :_reduce_454,
  0, 290, :_reduce_455,
  2, 290, :_reduce_456,
  0, 291, :_reduce_457,
  2, 291, :_reduce_458,
  1, 294, :_reduce_459,
  2, 294, :_reduce_460,
  0, 299, :_reduce_461,
  4, 294, :_reduce_462,
  1, 298, :_reduce_463,
  1, 298, :_reduce_464,
  1, 298, :_reduce_465,
  1, 298, :_reduce_none,
  1, 201, :_reduce_467,
  3, 202, :_reduce_468,
  1, 286, :_reduce_469,
  1, 286, :_reduce_470,
  2, 286, :_reduce_471,
  2, 286, :_reduce_472,
  1, 193, :_reduce_473,
  1, 193, :_reduce_474,
  1, 193, :_reduce_475,
  1, 193, :_reduce_476,
  1, 193, :_reduce_477,
  1, 194, :_reduce_478,
  1, 194, :_reduce_479,
  1, 194, :_reduce_480,
  1, 194, :_reduce_481,
  1, 194, :_reduce_482,
  1, 194, :_reduce_483,
  1, 194, :_reduce_484,
  1, 223, :_reduce_485,
  1, 223, :_reduce_486,
  1, 162, :_reduce_487,
  1, 162, :_reduce_488,
  1, 166, :_reduce_489,
  1, 166, :_reduce_490,
  1, 233, :_reduce_491,
  0, 300, :_reduce_492,
  4, 233, :_reduce_493,
  2, 233, :_reduce_494,
  3, 235, :_reduce_495,
  2, 235, :_reduce_496,
  4, 301, :_reduce_497,
  2, 301, :_reduce_498,
  2, 301, :_reduce_499,
  1, 301, :_reduce_500,
  2, 303, :_reduce_501,
  0, 303, :_reduce_502,
  6, 275, :_reduce_503,
  8, 275, :_reduce_504,
  4, 275, :_reduce_505,
  6, 275, :_reduce_506,
  4, 275, :_reduce_507,
  6, 275, :_reduce_508,
  2, 275, :_reduce_509,
  4, 275, :_reduce_510,
  6, 275, :_reduce_511,
  2, 275, :_reduce_512,
  4, 275, :_reduce_513,
  2, 275, :_reduce_514,
  4, 275, :_reduce_515,
  1, 275, :_reduce_516,
  0, 275, :_reduce_517,
  1, 271, :_reduce_518,
  1, 271, :_reduce_519,
  1, 271, :_reduce_520,
  1, 271, :_reduce_521,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 305, :_reduce_524,
  3, 305, :_reduce_525,
  1, 264, :_reduce_526,
  3, 264, :_reduce_527,
  2, 306, :_reduce_528,
  2, 307, :_reduce_529,
  1, 258, :_reduce_530,
  3, 258, :_reduce_531,
  1, 302, :_reduce_532,
  3, 302, :_reduce_533,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 259, :_reduce_536,
  1, 259, :_reduce_537,
  3, 309, :_reduce_538,
  3, 310, :_reduce_539,
  1, 265, :_reduce_540,
  3, 265, :_reduce_541,
  1, 304, :_reduce_542,
  3, 304, :_reduce_543,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 266, :_reduce_546,
  1, 266, :_reduce_547,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 261, :_reduce_550,
  2, 260, :_reduce_551,
  0, 260, :_reduce_552,
  1, 236, :_reduce_none,
  3, 236, :_reduce_554,
  0, 224, :_reduce_555,
  2, 224, :_reduce_none,
  1, 209, :_reduce_557,
  3, 209, :_reduce_558,
  3, 313, :_reduce_559,
  2, 313, :_reduce_560,
  2, 313, :_reduce_561,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 280, :_reduce_none,
  1, 280, :_reduce_none,
  1, 280, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 172, :_reduce_none,
  1, 172, :_reduce_none,
  2, 188, :_reduce_578,
  2, 165, :_reduce_579,
  0, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 234, :_reduce_583,
  1, 234, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  0, 206, :_reduce_587 ]

racc_reduce_n = 588

racc_shift_n = 1016

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tEQL => 139,
  :tLOWEST => 140 }

racc_nt_base = 141

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "f_args",
  "do_block",
  "@22",
  "@23",
  "@24",
  "operation3",
  "@25",
  "@26",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@27",
  "@28",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      if @context.indirectly_in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_55(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_122(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val
                    
    result
end

def _reduce_246(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = []
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_257(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_259(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = []
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_312(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_317(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_318(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_319(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_350(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_353(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_354(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = []
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_379(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = []
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_387(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_393(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_394(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_395(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_397(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_400(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_412(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_414(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = []
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_436(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_438(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = []
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = []
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = []
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = []
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_462(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_472(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_492(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_494(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = []
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = []
                    
    result
end

def _reduce_518(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_520(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_521(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 522 omitted

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_528(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_529(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 534 omitted

# reduce 535 omitted

def _reduce_536(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_538(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_539(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 548 omitted

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = []
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_579(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby20
  end   # module Parser
