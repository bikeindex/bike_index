# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class MacRuby < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-286,-97,203,204,609,-95,-99,-286,-286,-286,739,726,-286,-286,-286,255',
'-286,577,535,467,634,206,535,561,-94,535,-286,-286,-286,556,562,203',
'204,669,796,652,-286,-286,608,-286,-286,-286,-286,-286,535,103,738,535',
'661,247,102,-93,-94,-96,-86,686,248,-100,207,-97,-94,755,300,301,-97',
'-95,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,576,670,-286,-286,-286,-80,741,-286,-80,686,-286,-66,103,-286,-286',
'-95,-286,102,-286,-89,-286,254,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,-91,-286,203,204,-97,-286,-286,-286,-95,-97,207,-286,-286,-95,-286',
'-286,-286,-286,-286,-531,-286,103,-286,555,-98,103,102,-94,103,-87,102',
'669,-94,102,-286,-286,686,-286,-286,-286,-286,-286,660,103,103,-85,-86',
'103,102,102,103,-92,102,801,-89,102,-96,-98,-89,-87,490,-96,207,-96',
'-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'103,832,-286,-286,-286,102,594,609,-401,-465,-286,476,-89,-286,207,-89',
'-465,-87,-286,809,-286,-89,-286,-286,-286,-286,-286,-286,-286,-535,-286',
'-99,-286,203,204,475,-535,-535,-535,590,-470,608,-535,-535,-532,-535',
'-286,-286,207,-90,-531,-286,609,-87,-535,-98,-87,-528,103,652,-401,541',
'-87,102,255,-535,-535,-401,-535,-535,-535,-535,-535,485,486,677,-401',
'518,517,516,522,519,-89,255,-90,-462,608,547,-97,-93,-88,548,-462,418',
'-401,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535',
'-535,-457,566,-535,-535,-535,-65,595,-457,609,-268,-535,467,-528,-535',
'207,-529,-457,818,-535,250,-535,465,-535,-535,-535,-535,-535,-535,-535',
'-463,-535,-535,-535,-100,-528,566,-463,463,250,-535,-535,254,608,-457',
'792,-535,-535,-535,859,-88,-457,-535,-535,-535,-535,-96,74,-535,-535',
'-535,254,-535,568,567,564,75,-94,-460,99,-460,-535,-535,-535,-535,-460',
'76,-460,503,452,-529,505,-535,-535,-460,-535,-535,-535,-535,-535,103',
'820,-535,-535,202,102,-464,568,567,-535,-535,822,-529,-464,-531,-531',
'718,566,-535,-535,203,204,-535,-535,-535,-535,-535,-535,-535,-535,-535',
'-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-287,740,-535,-467',
'825,-535,-92,-287,-535,-535,-467,-535,-100,-535,826,-535,-287,-535,-535',
'-535,-535,-535,-535,-535,750,-535,-535,-535,751,-466,518,517,516,522',
'519,566,-466,568,567,578,566,-535,-535,-535,-535,-460,-535,833,-535',
'-468,-96,206,-460,-460,-460,103,-468,-460,-460,-460,102,-460,103,-287',
'420,524,207,102,226,-460,-287,-460,-460,-460,528,527,531,530,103,-287',
'839,-460,-460,102,-460,-460,-460,-460,-460,677,840,518,517,516,522,519',
'568,567,573,566,223,568,567,571,225,224,221,222,750,203,204,-460,-460',
'-460,-460,-460,-460,-460,-460,-460,-460,-460,-460,-460,-460,796,652',
'-460,-460,-460,-287,-460,-460,226,419,-460,589,-287,-460,-460,645,-460',
'-531,-460,417,-460,-287,-460,-460,-460,-460,-460,-460,-460,103,-460',
'-532,-460,207,102,568,567,569,503,-470,223,502,908,226,225,224,-460',
'-460,-460,-460,-457,-460,490,-460,-87,-460,378,-457,-457,-457,-95,207',
'-457,-457,-457,521,-457,518,517,516,522,519,203,204,-457,223,-457,-457',
'-457,225,224,503,-85,852,505,855,-457,-457,-93,-457,-457,-457,-457,-457',
'677,-91,518,517,516,522,519,-99,524,510,677,857,518,517,516,522,519',
'528,527,531,530,859,-457,-457,-457,-457,-457,-457,-457,-457,-457,-457',
'-457,-457,-457,-457,859,673,-457,-457,-457,551,-457,-457,207,864,-457',
'673,550,-457,-457,866,-457,365,-457,868,-457,552,-457,-457,-457,-457',
'-457,-457,-457,689,-457,677,-457,518,517,516,522,519,543,106,107,108',
'109,110,207,544,-457,-457,-457,-457,299,-457,541,-457,542,-457,275,64',
'65,66,9,52,874,298,503,58,59,505,524,876,62,207,60,61,63,28,29,67,68',
'531,530,879,-269,579,27,26,25,91,90,92,93,582,677,18,518,517,516,522',
'519,8,42,682,10,95,94,96,85,51,87,86,88,585,89,97,98,886,83,84,39,40',
'38,677,887,518,517,516,522,519,677,673,518,517,516,522,519,493,245,-286',
'676,890,37,892,494,31,-286,465,53,54,895,-532,55,416,33,-286,680,226',
'41,677,673,518,517,516,522,519,19,524,226,676,900,82,74,77,78,226,79',
'80,531,530,901,75,81,5,64,65,66,9,52,57,902,76,58,59,679,671,524,62',
'668,60,61,63,28,29,67,68,665,531,530,663,-266,27,26,25,91,90,92,93,910',
'677,18,518,517,516,522,519,8,42,7,10,95,94,96,85,51,87,86,88,912,89',
'97,98,913,83,84,39,40,38,677,918,518,517,516,522,519,677,673,518,517',
'516,522,519,-280,207,481,863,920,37,923,-280,31,482,925,53,54,859,375',
'55,-280,33,480,377,376,41,677,673,518,517,516,522,519,19,524,859,207',
'930,82,74,77,78,207,79,80,531,530,226,75,81,275,64,65,66,9,52,57,498',
'76,58,59,198,910,524,62,652,60,61,63,28,29,67,68,250,531,530,939,859',
'27,26,25,91,90,92,93,859,677,18,518,517,516,522,519,8,42,859,10,95,94',
'96,85,51,87,86,88,943,89,97,98,859,83,84,39,40,38,677,910,518,517,516',
'522,519,677,673,518,517,516,522,519,-469,859,-286,414,197,37,196,-469',
'31,-286,415,53,54,195,-532,55,-469,33,-286,416,599,41,677,673,518,517',
'516,522,519,19,524,645,496,859,82,74,77,78,465,79,80,531,530,207,75',
'81,275,64,65,66,9,52,57,111,76,58,59,207,859,524,62,962,60,61,63,28',
'29,67,68,910,531,530,452,541,27,26,25,91,90,92,93,452,830,18,518,517',
'516,367,519,8,42,207,10,95,94,96,85,51,87,86,88,467,89,97,98,743,83',
'84,39,40,38,830,-329,518,517,516,507,519,677,-329,518,517,516,522,519',
'-469,727,898,-329,506,37,465,-469,31,899,545,53,54,207,762,55,-469,33',
'897,467,499,41,677,645,518,517,516,522,519,19,524,207,498,226,82,74',
'77,78,250,79,80,531,530,959,75,81,275,64,65,66,9,52,57,250,76,58,59',
'645,492,524,62,546,60,61,63,28,29,67,68,226,531,530,226,491,27,26,25',
'91,90,92,93,769,-267,18,-266,773,226,750,720,8,42,787,10,95,94,96,85',
'51,87,86,88,487,89,97,98,717,83,84,39,40,38,226,-554,-554,-554,-554',
'232,234,223,-280,-554,-554,225,224,221,222,-280,240,241,790,37,669,207',
'31,652,-280,53,54,800,250,55,207,33,223,207,229,41,225,224,221,222,233',
'231,227,19,228,259,960,483,82,74,77,78,207,79,80,,,,75,81,275,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,106,107,108,109,110',
'27,26,25,91,90,92,93,712,713,18,,714,97,98,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,551,83,84,39,40,38,226,929,200,106,107,108,109,110',
'-286,201,552,,,,,-286,240,241,199,37,-532,,31,,-286,53,54,,,55,,33,223',
',229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78,,79,80,,,,75,81',
'275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,106,107,108',
'109,110,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53',
'54,,,55,,33,223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78',
',79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,583,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,,244,-281',
'-233,,,57,,76,-281,-281,-281,,,-281,-281,-281,751,-281,518,517,516,522',
'519,,,,,-281,-281,-281,,,,,,,,-281,-281,,-281,-281,-281,-281,-281,,',
',,,,,,524,,,,,,,,,528,527,531,530,,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,,,-281,-281,-281,,,-281,,,-281,,',
'-281,-281,,-281,,-281,,-281,,-281,-281,-281,-281,-281,-281,-281,,-281',
',-281,,,,,,,,,,,,,,-281,-281,-281,-281,,-281,,-281,5,64,65,66,9,52,',
',,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,',
',,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226',
'-554,-554,-554,-554,232,234,,,-554,-554,,,,,,240,241,,37,,,31,,,53,54',
',,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,-554,-554,-554,-554,232,234,',
',-554,-554,,,,,,240,241,,37,,,277,,,53,54,,,55,,33,223,,229,41,225,224',
'221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,226,-554,-554,-554,-554,232,234,,,-554,-554,,,,,,240,241,,37,',
',31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,-554,-554,-554,-554',
'232,234,,,-554,-554,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229',
'41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81',
'275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98',
',83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78,,79,80,,,,75',
'81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,226,230,235,236,237,232,234,242,,238,239,,,,,,240',
'241,,37,,,277,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227',
'19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42',
',10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236',
'237,232,234,242,243,238,239,,-554,-554,,,240,241,,37,,,31,,,53,54,,',
'55,,33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78',
',79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,-554,-554,-554,-554,232,234,,,-554',
'-554,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221',
'222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9',
'52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
'226,230,235,236,237,232,234,242,243,238,239,,-554,-554,,,240,241,,37',
',,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240',
'241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,,,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,583,8,42,,10',
'95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237',
'232,234,242,243,238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80',
',,,75,81,,244,-537,,,,57,,76,-537,-537,-537,,,-537,-537,-537,521,-537',
'518,517,516,522,519,,,,-537,-537,-537,-537,,,,,,,,-537,-537,,-537,-537',
'-537,-537,-537,,,,,,,,,524,707,,,,,,,,528,527,531,530,,-537,-537,-537',
'-537,-537,-537,-537,-537,-537,-537,-537,-537,-537,-537,,,-537,-537,-537',
',,-537,,,-537,,,-537,-537,,-537,,-537,,-537,,-537,-537,-537,-537,-537',
'-537,-537,-536,-537,-537,-537,,,,-536,-536,-536,,,-536,-536,-536,226',
'-536,-537,-537,-537,-537,,-537,,-537,-536,-536,-536,-536,,,240,241,',
',,-536,-536,,-536,-536,-536,-536,-536,,,,223,,229,,225,224,221,222,',
',,,,,,,,,,-536,-536,-536,-536,-536,-536,-536,-536,-536,-536,-536,-536',
'-536,-536,,,-536,-536,-536,,,-536,,,-536,,,-536,-536,,-536,,-536,,-536',
',-536,-536,-536,-536,-536,-536,-536,,-536,-536,-536,,,,,,,,,,,,,,-536',
'-536,-536,-536,,-536,,-536,275,64,65,66,9,52,,,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,,',
'238,239,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221',
'222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9',
'52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
'226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,,41,225,224',
'221,222,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226',
',,,,,,,,,,,,,,,240,241,,37,,,277,,,53,54,,,55,,33,223,,229,41,225,224',
'221,222,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54',
',,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66',
'9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275',
'64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,',
',19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42',
',10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,',
',,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33',
',,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295',
'518,517,516,522,519,,,,,,,,,,,,,,,846,,,217,,,53,54,,,55,,,,,,524,,',
',,,,,,528,527,531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,',
',211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42',
'7,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,',
',,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',457,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,586,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,,244,',
',,367,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,291,292,67,68,,,',
',,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270',
'89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,',
',,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,',
',217,,,53,54,,,55,,,,266,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75',
'81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98',
',83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266',
',41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,629,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295,518,517,516,522,519,',
',,,,,,,,,,,,,889,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,',
',217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,',
',,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
'270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66',
',52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90',
'92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,751',
'295,518,517,516,522,519,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,281,,',
',524,,,,,,,,,528,527,531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,',
'52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90',
'92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295',
'226,230,235,236,237,232,234,242,243,238,239,,219,220,,,240,241,,285',
',,217,,,53,54,,,55,,,223,,229,,225,224,221,222,233,231,227,,228,,,,82',
'74,77,78,,79,80,,,,75,81,,244,,297,,,57,,76,64,65,66,,52,,,,58,59,,',
',62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,',
',42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,',
',,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,629,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75',
'81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287',
'288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,',
'42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236',
'237,232,234,242,243,238,239,,219,220,,,240,241,,211,,-233,217,,,53,54',
',,55,,,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78',
',79,80,,,,75,81,103,244,,-233,,102,57,,76,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,751,295,518,517,516,522',
'519,,,,,,,,,,,,,,,330,,,31,,,53,54,,,55,,33,,,,524,,,,,,,,,528,527,531',
'530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,335,51,87,86,336,,89,97,98,,83,84,,521,295,518,517,516,522,519',
',,,,,,,,,,,342,,,337,,,217,,,53,54,,,55,,,,,,524,707,,,,,,,,528,527',
'531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289',
',,95,94,96,335,51,87,86,336,,89,97,98,,83,84,,521,295,518,517,516,522',
'519,,,,,,,,,,,,,,,337,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531',
'530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,226,230,235,236,237,232,234,242,243,238,239,,219,220,,,240,241',
',37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19',
'228,,,,82,74,77,78,,79,80,,,,75,81,,244,,,,367,57,,76,64,65,66,,52,',
',,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,',
',,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,',
',,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,384,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,',
'52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66',
',52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,,,295,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,,240,241,,285,,,217,,,53,54,,,55,,,223',
',229,,225,224,221,222,233,231,227,,228,,,,82,74,77,78,,79,80,,,,75,81',
',244,,478,,,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,,521,295,518,517,516,522,519,,,,,,,,,,,,,,,285',
',,282,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,,521,295,518,517,516,522,519,,,,,,,,,,,,,,,285,',
',282,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,496,,53,54,,',
'55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295',
',,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292',
'67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54',
',,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,724,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,',
',216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
',,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98',
',83,84,,,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,',
',,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,,240,241,,211,,,217,,,53,54,,,55,,,223',
',229,41,225,224,221,222,233,231,227,216,228,,,,82,74,77,78,,79,80,,',
',75,81,,244,-239,,,,57,,76,-239,-239,-239,,,-239,-239,-239,,-239,,,',
',,,,,-239,-239,-239,,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,,,',
',,,,,,,,,,,,,,,,,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
'-239,-239,-239,-239,,,-239,-239,-239,,,-239,,250,-239,,,-239,-239,,-239',
',-239,,-239,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
',,,-239,-239,-239,,,-239,-239,-239,,-239,-239,-239,,-239,,-239,,,,-239',
',,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,,,,,,,,,,,,,,,,,,,,,,-400',
',,,,,,-400,-400,-400,,-239,-400,-400,-400,,-400,,-239,,,,,250,-239,-400',
'-400,-400,,,,,,,,,-400,-400,,-400,-400,-400,-400,-400,,,-239,,,,,,,',
',,,,,,-239,,,,,-239,-400,-400,-400,-400,-400,-400,-400,-400,-400,-400',
'-400,-400,-400,-400,,,-400,-400,-400,,,-400,,250,-400,,,-400,-400,,-400',
',-400,,-400,,-400,-400,-400,-400,-400,-400,-400,-293,-400,-400,-400',
',,,-293,-293,-293,,,-293,-293,-293,,-293,-400,-400,,-400,,-400,,,,-293',
'-293,,,,,,,,,-293,-293,,-293,-293,-293,-293,-293,,,,,,,,,,,,,,,,,,,',
',,,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293',
'-293,,,-293,-293,-293,,,-293,,259,-293,,,-293,-293,,-293,,-293,,-293',
',-293,-293,-293,-293,-293,-293,-293,-239,-293,,-293,,,,-239,-239,-239',
',,-239,-239,-239,,-239,-293,-293,,-293,,-293,,,,-239,,,,,,,,,,-239,-239',
',-239,-239,-239,-239,-239,,,,,,393,397,,,394,,,,,,,,147,148,,144,126',
'127,128,135,132,134,,,129,130,,,-239,149,150,136,137,,,-239,,,250,,250',
'-239,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,,,151',
'-239,,,,,,,,,,,,,,-239,,,,,-239,162,173,163,186,159,179,169,168,189',
'190,184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188',
'183,182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114',
'116,,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
'113,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
',,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184',
'167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182',
'175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184,167',
'166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,352,351',
'353,350,158,177,176,,,,,,157,164,155,156,347,348,349,345,116,87,86,346',
',89,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,357,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,162,173,163,186,159,179,169,168,189,190,184,167,166,161,187',
'191,192,171,160,174,178,180,172,165,,,,181,188,183,182,175,185,170,158',
'177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115,,,,,,,,147,148',
',144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,',
',,,141,140,,125,146,143,142,138,139,133,131,123,145,124,400,404,151',
',399,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127,128,135,132,134',
',,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138',
'139,133,131,123,145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127',
'128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,600,397,151,,601,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,602,404',
'151,,603,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,638,397,151,,639,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,641,404,151,,642,,,,,,,,147,148,,144',
'126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,',
',141,140,,125,146,143,142,138,139,133,131,123,145,124,600,397,151,,601',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,602,404,151,,603,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129',
'130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138',
'139,133,131,123,145,124,692,397,151,,693,,,,,,,,147,148,,144,126,127',
'128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140',
',125,146,143,142,138,139,133,131,123,145,124,694,404,151,,695,,,,,,',
',147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,',
',,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'697,404,151,,698,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139',
'133,131,123,145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127,128',
'135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,934,397,151,,935,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,936,404',
'151,,937,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,953,404,151,,952,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,,,151,226,230,235,236,237,232,234,242',
'243,238,239,,219,220,,,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222',
'233,231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220',
'207,244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227',
',228,,226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240',
'241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230',
'235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,',
',,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230,235,236,237',
'232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229',
',225,224,221,222,233,231,227,,228,,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222',
'233,231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220',
',244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228',
',226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,',
',,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230,235',
'236,237,232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,',
'223,,229,,225,224,221,222,233,231,227,,228,,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225',
'224,221,222,233,231,227,,228,,,,,,,,,,,,,,,,,244' ]
        racc_action_table = arr = ::Array.new(23593, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'603,935,557,557,459,934,545,603,603,603,601,587,603,603,603,56,603,363',
'867,618,477,18,321,355,955,772,603,603,603,341,355,411,411,521,681,681',
'603,603,459,603,603,603,603,603,322,273,600,690,509,23,273,328,803,936',
'587,537,23,331,18,601,587,618,38,38,693,692,603,603,603,603,603,603',
'603,603,603,603,603,603,603,603,363,521,603,603,603,633,603,603,474',
'804,603,633,557,603,603,600,603,557,603,639,603,56,603,603,603,603,603',
'603,603,399,603,545,603,563,563,935,399,399,399,934,935,411,399,399',
'934,399,603,603,603,603,936,603,867,603,341,603,321,867,955,772,638',
'321,751,955,772,399,399,538,399,399,399,399,399,509,341,537,328,803',
'322,341,537,690,331,322,690,639,690,936,695,693,692,417,936,700,694',
'399,399,399,399,399,399,399,399,399,399,399,399,399,399,804,751,399',
'399,399,804,399,615,765,350,399,280,639,399,563,639,350,638,399,705',
'399,639,399,399,399,399,399,399,399,400,399,417,399,649,649,279,400',
'400,400,394,210,615,400,400,695,400,399,399,278,399,694,399,447,638',
'400,399,638,335,538,872,765,872,638,538,24,400,400,765,400,400,400,400',
'400,295,295,676,765,676,676,676,676,676,394,290,695,351,447,337,394',
'210,694,337,351,212,765,400,400,400,400,400,400,400,400,400,400,400',
'400,400,400,335,359,400,400,400,276,400,335,458,723,400,267,335,400',
'649,336,335,742,400,24,400,264,400,400,400,400,400,400,400,352,400,400',
'400,212,335,574,352,263,290,697,641,24,458,345,676,602,400,400,956,400',
'345,400,602,602,602,400,72,602,602,602,290,602,359,359,359,72,742,336',
'1,346,602,602,602,602,336,72,346,658,249,336,658,602,602,336,602,602',
'602,602,602,3,744,697,641,15,3,353,574,574,697,641,745,336,353,697,641',
'574,364,697,641,309,309,602,602,602,602,602,602,602,602,602,602,602',
'602,602,602,697,641,602,602,602,900,602,602,347,746,602,15,900,602,602',
'347,602,15,602,748,602,900,602,602,602,602,602,602,602,749,602,602,602',
'608,348,608,608,608,608,608,362,348,364,364,364,361,602,602,602,602',
'88,602,753,602,349,602,218,88,88,88,556,349,88,88,88,556,88,708,483',
'214,608,758,708,443,88,483,88,88,88,608,608,608,608,325,483,759,88,88',
'325,88,88,88,88,88,863,760,863,863,863,863,863,362,362,362,360,443,361',
'361,361,443,443,443,443,608,320,320,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,945,945,88,88,88,548,88,88,424,213,88,393,548,88,88,764,88',
'953,88,211,88,548,88,88,88,88,88,88,88,702,88,952,88,473,702,360,360',
'360,311,36,424,311,863,423,424,424,88,88,88,88,85,88,299,88,393,88,193',
'85,85,85,393,778,85,85,85,319,85,319,319,319,319,319,16,16,85,423,85',
'85,85,423,423,312,36,779,312,780,85,85,36,85,85,85,85,85,864,299,864',
'864,864,864,864,299,319,319,908,783,908,908,908,908,908,319,319,319',
'319,784,85,85,85,85,85,85,85,85,85,85,85,85,85,85,786,864,85,85,85,339',
'85,85,789,791,85,908,339,85,85,794,85,99,85,797,85,339,85,85,85,85,85',
'85,85,540,85,939,85,939,939,939,939,939,329,632,632,632,632,632,42,329',
'85,85,85,85,37,85,539,85,329,85,536,536,536,536,536,536,806,35,315,536',
'536,315,939,810,536,811,536,536,536,536,536,536,536,939,939,814,815',
'373,536,536,536,536,536,536,536,379,524,536,524,524,524,524,524,536',
'536,534,536,536,536,536,536,536,536,536,536,385,536,536,536,827,536',
'536,536,536,536,673,828,673,673,673,673,673,925,524,925,925,925,925',
'925,302,21,642,524,834,536,835,302,536,642,837,536,536,841,642,536,302',
'536,642,532,425,536,923,673,923,923,923,923,923,536,925,426,673,846',
'536,536,536,536,427,536,536,925,925,849,536,536,111,111,111,111,111',
'111,536,850,536,111,111,529,522,923,111,514,111,111,111,111,111,111',
'111,513,923,923,512,387,111,111,111,111,111,111,111,865,790,111,790',
'790,790,790,790,111,111,111,111,111,111,111,111,111,111,111,111,869',
'111,111,111,870,111,111,111,111,111,943,875,943,943,943,943,943,962',
'790,962,962,962,962,962,286,391,284,790,880,111,881,286,111,284,882',
'111,111,883,113,111,286,111,284,113,113,111,859,943,859,859,859,859',
'859,111,962,885,460,889,111,111,111,111,500,111,111,962,962,428,111',
'111,777,777,777,777,777,777,111,896,111,777,777,13,957,859,777,497,777',
'777,777,777,777,777,777,401,859,859,903,904,777,777,777,777,777,777',
'777,905,792,777,792,792,792,792,792,777,777,906,777,777,777,777,777',
'777,777,777,777,907,777,777,777,951,777,777,777,777,777,910,909,910',
'910,910,910,910,857,792,857,857,857,857,857,283,950,698,209,12,777,11',
'283,777,698,209,777,777,10,698,777,283,777,698,209,413,777,855,910,855',
'855,855,855,855,777,857,488,484,967,777,777,777,777,931,777,777,857',
'857,933,777,777,776,776,776,776,776,776,777,7,777,776,776,454,949,855',
'776,948,776,776,776,776,776,776,776,944,855,855,596,326,776,776,776',
'776,776,776,776,591,887,776,887,887,887,327,887,776,776,604,776,776',
'776,776,776,776,776,776,776,316,776,776,776,606,776,776,776,776,776',
'750,43,750,750,750,314,750,825,43,825,825,825,825,825,844,588,845,43',
'313,776,619,844,776,845,330,776,776,621,626,776,844,776,845,628,308',
'776,668,635,668,668,668,668,668,776,825,637,307,304,776,776,776,776',
'640,776,776,825,825,946,776,776,195,195,195,195,195,195,776,643,776',
'195,195,644,301,668,195,332,195,195,195,195,195,195,195,647,668,668',
'648,300,195,195,195,195,195,195,195,650,584,195,653,654,442,662,577',
'195,195,669,195,195,195,195,195,195,195,195,195,296,195,195,195,571',
'195,195,195,195,195,437,437,437,437,437,437,437,442,847,437,437,442',
'442,442,442,847,437,437,675,195,677,678,195,683,847,195,195,688,294',
'195,691,195,437,289,437,195,437,437,437,437,437,437,437,195,437,288',
'947,285,195,195,195,195,479,195,195,,,,195,195,843,843,843,843,843,843',
'195,,195,843,843,,,,843,,843,843,843,843,843,843,843,472,472,472,472',
'472,843,843,843,843,843,843,843,567,567,843,,567,567,567,,843,843,,843',
'843,843,843,843,843,843,843,843,,843,843,843,888,843,843,843,843,843',
'434,888,14,274,274,274,274,274,937,14,888,,,,,937,434,434,14,843,937',
',843,,937,843,843,,,843,,843,434,,434,843,434,434,434,434,,,434,843',
'434,,,,843,843,843,843,,843,843,,,,843,843,919,919,919,919,919,919,843',
',843,919,919,,,,919,,919,919,919,919,919,919,919,6,6,6,6,6,919,919,919',
'919,919,919,919,,,919,,,,,,919,919,,919,919,919,919,919,919,919,919',
'919,,919,919,919,,919,919,919,919,919,433,,,,,,,,,,,,,,,,433,433,,919',
',,919,,,919,919,,,919,,919,433,,433,919,433,433,433,433,,,433,919,433',
',,,919,919,919,919,,919,919,,,,919,919,799,799,799,799,799,799,919,',
'919,799,799,,,,799,,799,799,799,799,799,799,799,,,,,,799,799,799,799',
'799,799,799,,,799,,,,,382,799,799,,799,799,799,799,799,799,799,799,799',
',799,799,799,,799,799,799,799,799,382,382,382,382,382,382,382,382,382',
'382,382,,382,382,,,382,382,,799,,,799,,,799,799,,,799,,799,382,,382',
'799,382,382,382,382,382,382,382,799,382,,,,799,799,799,799,,799,799',
',,,799,799,,382,51,382,,,799,,799,51,51,51,,,51,51,51,920,51,920,920',
'920,920,920,,,,,51,51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,,,,920,,',
',,,,,,920,920,920,920,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,,,51',
'51,51,,,51,,,51,,,51,51,,51,,51,,51,,51,51,51,51,51,51,51,,51,,51,,',
',,,,,,,,,,,51,51,51,51,,51,,51,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0',
'0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0',
'0,0,432,432,432,432,432,432,432,,,432,432,,,,,,432,432,,0,,,0,,,0,0',
',,0,,0,432,,432,0,432,432,432,432,432,432,432,0,432,,,,0,0,0,0,,0,0',
',,,0,0,282,282,282,282,282,282,0,,0,282,282,,,,282,,282,282,282,282',
'282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,282,282,,282',
'282,282,282,282,282,282,282,282,,282,282,282,,282,282,282,282,282,440',
'440,440,440,440,440,440,,,440,440,,,,,,440,440,,282,,,282,,,282,282',
',,282,,282,440,,440,282,440,440,440,440,440,440,440,282,440,,,,282,282',
'282,282,,282,282,,,,282,282,52,52,52,52,52,52,282,,282,52,52,,,,52,',
'52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,,52,52,,52,52',
'52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,439,439,439,439,439,439',
'439,,,439,439,,,,,,439,439,,52,,,52,,,52,52,,,52,,52,439,,439,52,439',
'439,439,439,439,439,439,52,439,,,,52,52,52,52,,52,52,,,,52,52,917,917',
'917,917,917,917,52,,52,917,917,,,,917,,917,917,917,917,917,917,917,',
',,,,917,917,917,917,917,917,917,,,917,,,,,,917,917,,917,917,917,917',
'917,917,917,917,917,,917,917,917,,917,917,917,917,917,441,441,441,441',
'441,441,441,,,441,441,,,,,,441,441,,917,,,917,,,917,917,,,917,,917,441',
',441,917,441,441,441,441,441,441,441,917,441,,,,917,917,917,917,,917',
'917,,,,917,917,558,558,558,558,558,558,917,,917,558,558,,,,558,,558',
'558,558,558,558,558,558,,,,,,558,558,558,558,558,558,558,,,558,,,,,',
'558,558,,558,558,558,558,558,558,558,558,558,,558,558,558,,558,558,558',
'558,558,436,,,,,,,,,,,,,,,,436,436,,558,,,558,,,558,558,,,558,,558,436',
',436,558,436,436,436,436,,,436,558,436,,,,558,558,558,558,,558,558,',
',,558,558,277,277,277,277,277,277,558,,558,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,277,277',
',277,277,277,277,277,277,277,277,277,,277,277,277,,277,277,277,277,277',
'445,445,445,445,445,445,445,445,,445,445,,,,,,445,445,,277,,,277,,,277',
'277,,,277,,277,445,,445,277,445,445,445,445,445,445,445,277,445,,,,277',
'277,277,277,,277,277,,,,277,277,624,624,624,624,624,624,277,,277,624',
'624,,,,624,,624,624,624,624,624,624,624,,,,,,624,624,624,624,624,624',
'624,,,624,,,,,,624,624,,624,624,624,624,624,624,624,624,624,,624,624',
'624,,624,624,624,624,624,422,422,422,422,422,422,422,422,422,422,422',
',422,422,,,422,422,,624,,,624,,,624,624,,,624,,624,422,,422,624,422',
'422,422,422,422,422,422,624,422,,,,624,624,624,624,,624,624,,,,624,624',
'701,701,701,701,701,701,624,,624,701,701,,,,701,,701,701,701,701,701',
'701,701,,,,,,701,701,701,701,701,701,701,,,701,,,,,,701,701,,701,701',
'701,701,701,701,701,701,701,,701,701,701,,701,701,701,701,701,438,438',
'438,438,438,438,438,,,438,438,,,,,,438,438,,701,,,701,,,701,701,,,701',
',701,438,,438,701,438,438,438,438,438,438,438,701,438,,,,701,701,701',
'701,,701,701,,,,701,701,769,769,769,769,769,769,701,,701,769,769,,,',
'769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,',
'769,,,,,,769,769,,769,769,769,769,769,769,769,769,769,,769,769,769,',
'769,769,769,769,769,421,421,421,421,421,421,421,421,421,421,421,,421',
'421,,,421,421,,769,,,769,,,769,769,,,769,,769,421,,421,769,421,421,421',
'421,421,421,421,769,421,,,,769,769,769,769,,769,769,,,,769,769,706,706',
'706,706,706,706,769,,769,706,706,,,,706,,706,706,706,706,706,706,706',
',,,,,706,706,706,706,706,706,706,,,706,,,,,,706,706,,706,706,706,706',
'706,706,706,706,706,,706,706,706,,706,706,706,706,706,435,,,,,,,,,,',
',,,,,435,435,,706,,,706,,,706,706,,,706,,706,435,,435,706,435,435,435',
'435,,,435,706,435,,,,706,706,706,706,,706,706,,,,706,706,911,911,911',
'911,911,911,706,,706,911,911,,,,911,,911,911,911,911,911,911,911,,,',
',,911,911,911,911,911,911,911,,,911,,,,,605,911,911,,911,911,911,911',
'911,911,911,911,911,,911,911,911,,911,911,911,911,911,605,605,605,605',
'605,605,605,605,605,605,605,,605,605,,,605,605,,911,,,911,,,911,911',
',,911,,911,605,,605,911,605,605,605,605,605,605,605,911,605,,,,911,911',
'911,911,,911,911,,,,911,911,,605,405,,,,911,,911,405,405,405,,,405,405',
'405,878,405,878,878,878,878,878,,,,405,405,405,405,,,,,,,,405,405,,405',
'405,405,405,405,,,,,,,,,878,878,,,,,,,,878,878,878,878,,405,405,405',
'405,405,405,405,405,405,405,405,405,405,405,,,405,405,405,,,405,,,405',
',,405,405,,405,,405,,405,,405,405,405,405,405,405,405,404,405,405,405',
',,,404,404,404,,,404,404,404,429,404,405,405,405,405,,405,,405,404,404',
'404,404,,,429,429,,,,404,404,,404,404,404,404,404,,,,429,,429,,429,429',
'429,429,,,,,,,,,,,,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,,,404,404,404,,,404,,,404,,,404,404,,404,,404,,404,,404,404,404',
'404,404,404,404,,404,404,404,,,,,,,,,,,,,,404,404,404,404,,404,,404',
'217,217,217,217,217,217,,,,217,217,,,,217,,217,217,217,217,217,217,217',
',,,,,217,217,217,217,217,217,217,,,217,,,,,,217,217,,217,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,217,217,217,444,444,444,444',
'444,444,444,,,444,444,,,,,,444,444,,217,,,217,,,217,217,,,217,,217,444',
',444,217,444,444,444,444,444,444,444,217,444,,,,217,217,217,217,,217',
'217,,,,217,217,754,754,754,754,754,754,217,,217,754,754,,,,754,,754',
'754,754,754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,',
'754,754,,754,754,754,754,754,754,754,754,754,,754,754,754,,754,754,754',
'754,754,431,,,,,,,,,,,,,,,,431,431,,754,,,754,,,754,754,,,754,,754,431',
',,754,431,431,431,431,,,,754,,,,,754,754,754,754,,754,754,,,,754,754',
'31,31,31,31,31,31,754,,754,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31',
'31,31,31,31,31,31,,,31,,,,,,31,31,,31,31,31,31,31,31,31,31,31,,31,31',
'31,,31,31,31,31,31,430,,,,,,,,,,,,,,,,430,430,,31,,,31,,,31,31,,,31',
',31,430,,430,31,430,430,430,430,,,,31,,,,,31,31,31,31,,31,31,,,,31,31',
'652,652,652,652,652,652,31,,31,652,652,,,,652,,652,652,652,652,652,652',
'652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,652,652,,652,652,652',
'652,652,652,652,652,652,,652,652,652,,652,652,652,652,652,,,,,,,,,,',
',,,,,,,,,652,,,652,,,652,652,,,652,,652,,,,652,,,,,,,,652,,,,,652,652',
'652,652,,652,652,,,,652,652,798,798,798,798,798,798,652,,652,798,798',
',,,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798,798,798,798',
',,798,,,,,,798,798,,798,798,798,798,798,798,798,798,798,,798,798,798',
',798,798,798,798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798,,798',
',,,798,,,,,,,,798,,,,,798,798,798,798,,798,798,,,,798,798,716,716,716',
'716,716,716,798,,798,716,716,,,,716,,716,716,716,716,716,716,716,,,',
',,716,716,716,716,716,716,716,,,716,,,,,,716,716,,716,716,716,716,716',
'716,716,716,716,,716,716,716,,716,716,716,716,716,,,,,,,,,,,,,,,,,,',
',716,,,716,,,716,716,,,716,,716,,,,716,,,,,,,,716,,,,,716,716,716,716',
',716,716,,,,716,716,533,533,533,533,533,533,716,,716,533,533,,,,533',
',533,533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533',
',,,,,533,533,,533,533,533,533,533,533,533,533,533,,533,533,533,,533',
'533,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,533,,',
',533,,,,,,,,533,,,,,533,533,533,533,,533,533,,,,533,533,808,808,808',
'808,808,808,533,,533,808,808,,,,808,,808,808,808,808,808,808,808,,,',
',,808,808,808,808,808,808,808,,,808,,,,,,808,808,,808,808,808,808,808',
'808,808,808,808,,808,808,808,,808,808,808,808,808,,,,,,,,,,,,,,,,,,',
',808,,,808,,,808,808,,,808,,808,,,,808,,,,,,,,808,,,,,808,808,808,808',
',808,808,,,,808,808,610,610,610,610,610,610,808,,808,610,610,,,,610',
',610,610,610,610,610,610,610,,,,,,610,610,610,610,610,610,610,,,610',
',,,,,610,610,,610,610,610,610,610,610,610,610,610,,610,610,610,,610',
'610,610,610,610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,,610,,610,,',
',610,,,,,,,,610,,,,,610,610,610,610,,610,610,,,,610,610,623,623,623',
'623,623,623,610,,610,623,623,,,,623,,623,623,623,623,623,623,623,,,',
',,623,623,623,623,623,623,623,,,623,,,,,,623,623,,623,623,623,623,623',
'623,623,623,623,,623,623,623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,',
',623,,,623,,,623,623,,,623,,623,,,,623,,,,,,,,623,,,,,623,623,623,623',
',623,623,,,,623,623,802,802,802,802,802,802,623,,623,802,802,,,,802',
',802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,,802',
',,,,,802,802,,802,802,802,802,802,802,802,802,802,,802,802,802,,802',
'802,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,802,,',
',802,,,,,,,,802,,,,,802,802,802,802,,802,802,,,,802,802,,202,202,202',
',202,802,,802,202,202,,,,202,,202,202,202,202,202,202,202,,,,,,202,202',
'202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202,202,202,202,202',
',202,202,202,,202,202,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,,202',
'202,,,202,,,,,,202,,,,,,,,202,,,,,202,202,202,202,,202,202,,,,202,202',
',203,203,203,,203,202,,202,203,203,,,,203,,203,203,203,203,203,203,203',
',,,,,203,203,203,203,203,203,203,,,203,,,,,,,203,,,203,203,203,203,203',
'203,203,203,,203,203,203,,203,203,203,203,203,,,,,,,,,,,,,,,,,,,,203',
',,203,,,203,203,,,203,,,,,,203,,,,,,,,203,,,,,203,203,203,203,,203,203',
',,,203,203,,204,204,204,,204,203,,203,204,204,,,,204,,204,204,204,204',
'204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204',
'204,204,204,204,204,204,,204,204,204,,204,204,204,204,204,,,,,,,,,,',
',,,,,,,,,204,,,204,,,204,204,,,204,,,,,,204,,,,,,,,204,,,,,204,204,204',
'204,,204,204,,,,204,204,,205,205,205,,205,204,,204,205,205,,,,205,,205',
'205,205,205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,',
',205,,,205,205,205,205,205,205,205,205,,205,205,205,,205,205,205,205',
'205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205',
',,,,205,205,205,205,,205,205,,,,205,205,,206,206,206,,206,205,,205,206',
'206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206',
'206,,,206,,,,,,,206,,,206,206,206,206,206,206,206,206,,206,206,206,',
'206,206,206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,,',
',,206,,,,,,,,206,,,,,206,206,206,206,,206,206,,,,206,206,206,773,773',
'773,,773,206,,206,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773',
'773,773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773',
'773,,773,773,773,,773,773,,510,773,510,510,510,510,510,,,,,,,,,,,,,',
',773,,,773,,,773,773,,,773,,,,,,510,,,,,,,,,510,510,510,510,773,773',
'773,773,,773,773,,,,773,773,,762,762,762,,762,773,,773,762,762,,,,762',
',762,762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,,,762',
',,,,,,762,,,762,762,762,762,762,762,762,762,762,762,762,762,,762,762',
'762,762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,762,,762,',
'762,,,,,,,,762,,,,,762,762,762,762,,762,762,,,,762,762,,755,755,755',
',755,762,,762,755,755,,,,755,,755,755,755,755,755,755,755,,,,,,755,755',
'755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755,755,755,755',
'755,755,755,755,,755,755,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,,',
'755,755,,,755,,755,,755,,755,,,,,,,,755,,,,,755,755,755,755,,755,755',
',,,755,755,,216,216,216,,216,755,,755,216,216,,,,216,,216,216,216,216',
'216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216',
'216,216,216,216,216,216,,216,216,216,,216,216,216,216,216,,,,,,,,,,',
',,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216',
'216,,216,216,,,,216,216,,219,219,219,,219,216,,216,219,219,,,,219,,219',
'219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,',
',219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,219,219',
'219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219',
',,,,219,219,219,219,,219,219,,,,219,219,,220,220,220,,220,219,,219,220',
'220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220',
'220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,',
'220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,',
',,220,,,,,,,,220,,,,,220,220,220,220,,220,220,,,,220,220,,221,221,221',
',221,220,,220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221',
',221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221',
'221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,,221,221,,,,221,221',
',222,222,222,,222,221,,221,222,222,,,,222,,222,222,222,222,222,222,222',
',,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222',
'222,222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222',
',,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,,222,222',
',,,222,222,,223,223,223,,223,222,,222,223,223,,,,223,,223,223,223,223',
'223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223',
'223,223,223,223,223,223,,223,223,223,,223,223,223,223,223,,,,,,,,,,',
',,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223',
'223,,223,223,,,,223,223,,224,224,224,,224,223,,223,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,',
',224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,224,224',
'224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224',
',,,,224,224,224,224,,224,224,,,,224,224,,225,225,225,,225,224,,224,225',
'225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225',
'225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,',
'225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,',
',,225,,,,,,,,225,,,,,225,225,225,225,,225,225,,,,225,225,,226,226,226',
',226,225,,225,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226',
'226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226',
',226,226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226',
'226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,,226,226,,,,226,226',
',227,227,227,,227,226,,226,227,227,,,,227,,227,227,227,227,227,227,227',
',,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227',
'227,227,227,,227,227,227,,227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227',
',,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,,227,227',
',,,227,227,,228,228,228,,228,227,,227,228,228,,,,228,,228,228,228,228',
'228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228',
'228,228,228,228,228,228,,228,228,228,,228,228,228,228,228,,,,,,,,,,',
',,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228',
'228,,228,228,,,,228,228,,229,229,229,,229,228,,228,229,229,,,,229,,229',
'229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,',
',229,,,229,229,229,229,229,229,229,229,,229,229,229,,229,229,229,229',
'229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229',
',,,,229,229,229,229,,229,229,,,,229,229,,230,230,230,,230,229,,229,230',
'230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230',
'230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,',
'230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,',
',,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230,230,,231,231,231',
',231,230,,230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231',
',231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231',
'231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,,231,231,,,,231,231',
',232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,,232,232',
',,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233,233,233,233',
'233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233',
'233,233,233,233,233,233,,233,233,233,,233,233,233,233,233,,,,,,,,,,',
',,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233',
'233,,233,233,,,,233,233,,234,234,234,,234,233,,233,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234',
',,,,234,234,234,234,,234,234,,,,234,234,,235,235,235,,235,234,,234,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,',
',,235,,,,,,,,235,,,,,235,235,235,235,,235,235,,,,235,235,,236,236,236',
',236,235,,235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236',
'236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236',
',236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236',
'236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236,,,,236,236',
',237,237,237,,237,236,,236,237,237,,,,237,,237,237,237,237,237,237,237',
',,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237',
'237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237',
',,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,,237,237',
',,,237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238,238,238,238',
'238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238',
'238,238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,',
',,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238',
'238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239,239,,,,239,,239',
'239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,',
',239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,239,239',
'239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239',
',,,,239,239,239,239,,239,239,,,,239,239,,240,240,240,,240,239,,239,240',
'240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240',
'240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,',
'240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,',
',,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240,,241,241,241',
',241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241,,,,241,241',
',242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242,242,242,242',
',,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,,242,242',
',,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243,243,243,243',
'243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243',
'243,243,243,243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,',
',,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243',
'243,,243,243,,,,243,243,,244,244,244,,244,243,,243,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,,244,244,,,,244,244,,5,5,5,5,5,244,,244,5,5,,,,5',
',5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,',
'5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5',
',,,,5,5,5,5,,5,5,,,,5,5,,743,743,743,,743,5,,5,743,743,,,,743,,743,743',
'743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743,,,,,,,743',
',,743,743,743,743,743,743,743,743,,743,743,743,,743,743,743,743,743',
',,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,,,,,743,,,,,,,,743,,,',
',743,743,743,743,,743,743,,,,743,743,,250,250,250,,250,743,,743,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,250,250,250,250',
',250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,250',
',250,,250,,,,,,,,250,,,,,250,250,250,250,,250,250,,,,250,250,,251,251',
'251,,251,250,,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,251,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251',
',,251,251,,,251,,251,,251,,251,,,,,,,,251,,,,,251,251,251,251,,251,251',
',,,251,251,,259,259,259,,259,251,,251,259,259,,,,259,,259,259,259,259',
'259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259',
'259,259,259,259,259,259,259,259,259,259,,259,259,259,259,259,,,,,,,',
',,,,,,,,,,,,259,,,259,,,259,259,,,259,,259,,259,,259,,,,,,,,259,,,,',
'259,259,259,259,,259,259,,,,259,259,259,741,741,741,,741,259,,259,741',
'741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741,741,741',
'741,,,741,,,,,,,741,,,741,741,741,741,741,741,741,741,,741,741,741,',
'741,741,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,,741,,,',
',,741,,,,,,,,741,,,,,741,741,741,741,,741,741,,,,741,741,,740,740,740',
',740,741,,741,740,740,,,,740,,740,740,740,740,740,740,740,,,,,,740,740',
'740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740,740,740',
',740,740,740,,740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740',
'740,,,740,,,,,,740,,,,,,,,740,,,,,740,740,740,740,,740,740,,,,740,740',
',739,739,739,,739,740,,740,739,739,,,,739,,739,739,739,739,739,739,739',
',,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739,739,739,739',
'739,739,739,,739,739,739,,739,739,739,739,739,,,,,,,,,,,,,,,,,,,,739',
',,739,,,739,739,,,739,,,,,,739,,,,,,,,739,,,,,739,739,739,739,,739,739',
',,,739,739,,266,266,266,,266,739,,739,266,266,,,,266,,266,266,266,266',
'266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266',
'266,266,266,266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,',
',,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266',
'266,,266,266,,,,266,266,,738,738,738,,738,266,,266,738,738,,,,738,,738',
'738,738,738,738,738,738,,,,,,738,738,738,738,738,738,738,,,738,,,,,',
',738,,,738,738,738,738,738,738,738,738,,738,738,738,,738,738,738,738',
'738,,,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738,,,,,,738,,,,,,,,738',
',,,,738,738,738,738,,738,738,,,,738,738,,268,268,268,,268,738,,738,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,',
'268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,',
',,268,,,,,,,,268,,,,,268,268,268,268,,268,268,,,,268,268,,270,270,270',
',270,268,,268,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270',
',270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270',
'270,,,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,,270,270,,,,270,270',
',726,726,726,,726,270,,270,726,726,,,,726,,726,726,726,726,726,726,726',
',,,,,726,726,726,726,726,726,726,,,726,,,,,,,726,,,726,726,726,726,726',
'726,726,726,,726,726,726,,726,726,726,726,726,,,,,,,,,,,,,,,,,,,,726',
',,726,,,726,726,,,726,,,,,,726,,,,,,,,726,,,,,726,726,726,726,,726,726',
',,,726,726,,724,724,724,,724,726,,726,724,724,,,,724,,724,724,724,724',
'724,724,724,,,,,,724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724',
'724,724,724,724,724,724,,724,724,724,,724,724,724,724,724,,,,,,,,,,',
',,,,,,,,,724,,,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724',
'724,,724,724,,,,724,724,,275,275,275,275,275,724,,724,275,275,,,,275',
',275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275',
',,,,,275,275,,275,275,275,275,275,275,275,275,275,,275,275,275,,275',
'275,275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,275,,',
',275,,,,,,,,275,,,,,275,275,275,275,,275,275,,,,275,275,,471,471,471',
'471,471,275,,275,471,471,,,,471,,471,471,471,471,471,471,471,,,,,,471',
'471,471,471,471,471,471,,,471,,,,,390,471,471,,471,471,471,471,471,471',
'471,471,471,,471,471,471,,471,471,471,471,471,390,390,390,390,390,390',
'390,390,390,390,390,,390,390,,,390,390,,471,,,471,,,471,471,,,471,,471',
'390,,390,471,390,390,390,390,390,390,390,471,390,,,,471,471,471,471',
',471,471,,,,471,471,,390,,,,471,471,,471,465,465,465,,465,,,,465,465',
',,,465,,465,465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465',
',,465,,,,,,,465,,,465,465,465,465,465,465,465,465,465,465,465,465,,465',
'465,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,,,,465',
',465,,,,,,,,465,,,,,465,465,465,465,,465,465,,,,465,465,,463,463,463',
',463,465,,465,463,463,,,,463,,463,463,463,463,463,463,463,,,,,,463,463',
'463,463,463,463,463,,,463,,,,,,,463,,,463,463,463,463,463,463,463,463',
'463,463,463,463,,463,463,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463,,',
'463,463,,,463,,463,,463,,463,,,,,,,,463,,,,,463,463,463,463,,463,463',
',,,463,463,,457,457,457,,457,463,,463,457,457,,,,457,,457,457,457,457',
'457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457',
'457,457,457,457,457,457,457,457,457,457,,457,457,457,457,457,,,,,,,',
',,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,457,,457,,,,,,,,457,,,,,457',
'457,457,457,,457,457,,,,457,457,,897,897,897,,897,457,,457,897,897,',
',,897,,897,897,897,897,897,897,897,,,,,,897,897,897,897,897,897,897',
',,897,,,,,,,897,,,897,897,897,897,897,897,897,897,897,897,897,897,,897',
'897,897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897,,,897,897,,,897,,897,,897',
',897,,,,,,,,897,,,,,897,897,897,897,,897,897,,,,897,897,,895,895,895',
',895,897,,897,895,895,,,,895,,895,895,895,895,895,895,895,,,,,,895,895',
'895,895,895,895,895,,,895,,,,,,,895,,,895,895,895,895,895,895,895,895',
',895,895,895,,895,895,895,895,895,,,,,,,,,,,,,,,,,,,,895,,,895,,,895',
'895,,,895,,895,,895,,895,,,,,,,,895,,,,,895,895,895,895,,895,895,,,',
'895,895,,892,892,892,,892,895,,895,892,892,,,,892,,892,892,892,892,892',
'892,892,,,,,,892,892,892,892,892,892,892,,,892,,,,,,,892,,,892,892,892',
'892,892,892,892,892,892,892,892,892,,892,892,892,892,892,,,,,,,,,,,',
',,,,,,,,892,,,892,,,892,892,,,892,,892,,892,,892,,,,,,,,892,,,,,892',
'892,892,892,,892,892,,,,892,892,,19,19,19,,19,892,,892,19,19,,,,19,',
'19,19,19,19,19,19,19,,,,,,19,19,19,19,19,19,19,,,19,,,,,,,19,,,19,19',
'19,19,19,19,19,19,,19,19,19,,19,19,19,19,19,,,,,,,,,,,,,,,,,,,,19,,',
'19,,,19,19,,,19,,,,,,19,,,,,,,,19,,,,,19,19,19,19,,19,19,,,,19,19,,832',
'832,832,,832,19,,19,832,832,,,,832,,832,832,832,832,832,832,832,,,,',
',832,832,832,832,832,832,832,,,832,,,,,,,832,,,832,832,832,832,832,832',
'832,832,,832,832,832,,832,832,,852,832,852,852,852,852,852,,,,,,,,,',
',,,,,832,,,832,,,832,832,,,832,,,,,,852,,,,,,,,,852,852,852,852,832',
'832,832,832,,832,832,,,,832,832,,818,818,818,,818,832,,832,818,818,',
',,818,,818,818,818,818,818,818,818,,,,,,818,818,818,818,818,818,818',
',,818,,,,,,,818,,,818,818,818,818,818,818,818,818,,818,818,818,,818',
'818,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,,,,,818',
',,,,,,,818,,,,,818,818,818,818,,818,818,,,,818,818,,27,27,27,,27,818',
',818,27,27,,,,27,,27,27,27,27,27,27,27,,,,,,27,27,27,27,27,27,27,,,27',
',,,,,,27,,,27,27,27,27,27,27,27,27,27,27,27,27,,27,27,27,27,27,,,,,',
',,,,,,,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27',
'27,,27,27,,,,27,27,,28,28,28,,28,27,,27,28,28,,,,28,,28,28,28,28,28',
'28,28,,,,,,28,28,28,28,28,28,28,,,28,,,,,,,28,,,28,28,28,28,28,28,28',
'28,28,28,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,28,,,28,,,28,28,,',
'28,,28,,28,,28,,,,,,,,28,,,,,28,28,28,28,,28,28,,,,28,28,,29,29,29,',
'29,28,,28,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29',
',,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29',
',,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,,,,,,29,,,,,29',
'29,29,29,,29,29,,,,29,29,,32,32,32,,32,29,,29,32,32,,,,32,,32,32,32',
'32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32',
'32,32,32,,32,32,32,,32,32,,822,32,822,822,822,822,822,,,,,,,,,,,,,,',
'32,,,32,,,32,32,,,32,,32,,,,822,,,,,,,,,822,822,822,822,32,32,32,32',
',32,32,,,,32,32,,33,33,33,,33,32,,32,33,33,,,,33,,33,33,33,33,33,33',
'33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33',
',33,33,33,,33,33,,,33,817,817,817,817,817,817,817,817,817,817,817,,817',
'817,,,817,817,,33,,,33,,,33,33,,,33,,,817,,817,,817,817,817,817,817',
'817,817,,817,,,,33,33,33,33,,33,33,,,,33,33,,817,,33,,,33,,33,39,39',
'39,,39,,,,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39,39',
',,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,39,39,39,,',
',,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39,,,,,39,39,39',
'39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40,,,,40,,40,40,40,40,40',
'40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40,40',
'40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40',
',,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,,40,40,,41,41,41,,41,40,',
'40,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41',
',,,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,',
',,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,',
'41,41,,,,41,41,,801,801,801,,801,41,,41,801,801,,,,801,,801,801,801',
'801,801,801,801,,,,,,801,801,801,801,801,801,801,,,801,,,,,,,801,,,801',
'801,801,801,801,801,801,801,,801,801,801,,801,801,801,801,801,,,,,,',
',,,,,,,,,,,,,801,,,801,,,801,801,,,801,,801,,,,801,,,,,,,,801,,,,,801',
'801,801,801,,801,801,,,,801,801,,53,53,53,,53,801,,801,53,53,,,,53,',
'53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53',
'53,53,53,53,53,53,,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,',
'53,,,53,53,,,53,,,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54',
'54,54,,54,53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54',
'54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54,54',
'54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,54,,,,54,,,,,,,,54',
',,,,54,54,54,54,,54,54,,,,54,54,,55,55,55,,55,54,,54,55,55,,,,55,,55',
'55,55,55,55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55',
'55,55,55,55,55,55,55,55,55,,55,55,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55',
',,55,55,,,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,,55,55,,,,55,55,,58,58',
'58,,58,55,,55,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58',
'58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58',
'58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58',
'58,58,58,,58,58,,,,58,58,,59,59,59,,59,58,,58,59,59,,,,59,,59,59,59',
'59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59',
'59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59',
',,59,,,,,,59,,,,,,,,59,,,,,59,59,59,59,,59,59,,,,59,59,,62,62,62,,62',
'59,,59,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62,,62,62,62,62,62,617',
'617,617,617,617,617,617,617,617,617,617,,617,617,,,617,617,,62,,617',
'62,,,62,62,,,62,,,617,,617,62,617,617,617,617,617,617,617,62,617,,,',
'62,62,62,62,,62,62,,,,62,62,62,617,,617,,62,62,,62,63,63,63,,63,,,,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,820,63,820,820,820,820',
'820,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,820,,,,,,,,,820,820,820',
'820,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64,,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,64,,64,64,64,,64,64,,559,64,559,559,559,559,559,,,,,,,,',
',,,64,,,64,,,64,,,64,64,,,64,,,,,,559,559,,,,,,,,559,559,559,559,64',
'64,64,64,,64,64,,,,64,64,,65,65,65,,65,64,,64,65,65,,,,65,,65,65,65',
'65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65',
'65,65,65,,65,65,65,,65,65,,707,65,707,707,707,707,707,,,,,,,,,,,,,,',
'65,,,65,,,65,65,,,65,,,,,,707,,,,,,,,,707,707,707,707,65,65,65,65,,65',
'65,,,,65,65,,796,796,796,,796,65,,65,796,796,,,,796,,796,796,796,796',
'796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796',
'796,796,796,796,796,796,,796,796,796,,796,796,796,796,796,,,,,,,,,,',
',,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796,796,796',
'796,,796,796,,,,796,796,,101,101,101,101,101,796,,796,101,101,,,,101',
',101,101,101,101,101,101,101,,,,,,101,101,101,101,101,101,101,,,101',
',,,,,101,101,101,101,101,101,101,101,101,101,101,101,,101,101,101,,101',
'101,101,101,101,20,20,20,20,20,20,20,20,20,20,20,,20,20,,,20,20,,101',
',,101,,,101,101,,,101,,101,20,,20,101,20,20,20,20,20,20,20,101,20,,',
',101,101,101,101,,101,101,,,,101,101,,20,,,,101,101,,101,106,106,106',
',106,,,,106,106,,,,106,,106,106,106,106,106,106,106,,,,,,106,106,106',
'106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,,106',
'106,106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106',
',,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106,,106,106,,,,106,106,,107',
'107,107,,107,106,,106,107,107,,,,107,,107,107,107,107,107,107,107,,',
',,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107',
'107,107,107,,107,107,107,,107,107,107,107,107,,,,,,,,,,,,,,,,,,,,107',
',,107,,,107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107,107,,107,107',
',,,107,107,,108,108,108,,108,107,,107,108,108,,,,108,,108,108,108,108',
'108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,,,108,,,108,108',
'108,108,108,108,108,108,,108,108,108,,108,108,108,108,108,,,,,,,,,,',
',,,,,,,,,108,,,108,,,108,108,,,108,,,,,,108,,,,,,,,108,,,,,108,108,108',
'108,,108,108,,,,108,108,,109,109,109,,109,108,,108,109,109,,,,109,,109',
'109,109,109,109,109,109,,,,,,109,109,109,109,109,109,109,,,109,,,,,',
',109,,,109,109,109,109,109,109,109,109,,109,109,109,,109,109,109,109',
'109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109,109,,,109,,,,,,109,,,,,,,,109',
',,,,109,109,109,109,,109,109,,,,109,109,,110,110,110,110,110,109,,109',
'110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110,110',
'110,110,,,110,,,,,,110,110,,110,110,110,110,110,110,110,110,110,,110',
'110,110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110,,,110,110',
',,110,,110,,,,110,,,,,,,,110,,,,,110,110,110,110,,110,110,,,,110,110',
',196,196,196,,196,110,,110,196,196,,,,196,,196,196,196,196,196,196,196',
',,,,,196,196,196,196,196,196,196,,,196,,,,,,,196,,,196,196,196,196,196',
'196,196,196,,196,196,196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,,,196',
',,196,,,196,196,,,196,,196,,,,196,,,,,,,,196,,,,,196,196,196,196,,196',
'196,,,,196,196,,197,197,197,,197,196,,196,197,197,,,,197,,197,197,197',
'197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197',
'197,197,197,197,197,197,197,,197,197,197,,197,197,197,197,197,,,,,,',
',,,,,,,,,,,,,197,,,197,,,197,197,,,197,,197,,,,197,,,,,,,,197,,,,,197',
'197,197,197,,197,197,,,,197,197,,198,198,198,,198,197,,197,198,198,',
',,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198,198',
',,198,,,,,,,198,,,198,198,198,198,198,198,198,198,,198,198,198,,198',
'198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198,,,,,,198',
',,,,,,,198,,,,,198,198,198,198,,198,198,,,,198,198,,199,199,199,,199',
'198,,198,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199,199',
'199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199,199',
'199,199,199,,199,199,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199',
'199,,,199,,199,,199,,199,,,,,,,,199,,,,,199,199,199,199,,199,199,,,',
'199,199,,281,281,281,,281,199,,199,281,281,,,,281,,281,281,281,281,281',
'281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281',
'281,281,281,281,281,,281,281,281,,281,281,,,281,495,495,495,495,495',
'495,495,495,495,495,495,,495,495,,,495,495,,281,,,281,,,281,281,,,281',
',,495,,495,,495,495,495,495,495,495,495,,495,,,,281,281,281,281,,281',
'281,,,,281,281,,495,,281,,,281,,281,696,696,696,,696,,,,696,696,,,,696',
',696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696',
',,,,,,696,,,696,696,696,696,696,696,696,696,,696,696,696,,696,696,696',
'696,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,',
',696,,,,,696,696,696,696,,696,696,,,,696,696,,670,670,670,,670,696,',
'696,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670,670,670',
'670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670,,670,670',
'670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670',
',,,,,670,,,,,,,,670,,,,,670,670,670,670,,670,670,,,,670,670,,297,297',
'297,,297,670,,670,297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297',
'297,297,297,297,297,297,,,297,,,,,,,297,,,297,297,297,297,297,297,297',
'297,,297,297,297,,297,297,,665,297,665,665,665,665,665,,,,,,,,,,,,,',
',297,,,297,,,297,297,,,297,,,,,,665,,,,,,,,,665,665,665,665,297,297',
'297,297,,297,297,,,,297,297,,645,645,645,,645,297,,297,645,645,,,,645',
',645,645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645',
',,,,,,645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,,663',
'645,663,663,663,663,663,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,',
',663,,,,,,,,,663,663,663,663,645,645,645,645,,645,645,,,,645,645,,306',
'306,306,,306,645,,645,306,306,,,,306,,306,306,306,306,306,306,306,,',
',,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306',
'306,306,306,,306,306,306,,306,306,306,306,306,,,,,,,,,,,,,,,,,,,,306',
',,306,306,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,,306',
'306,,,,306,306,,634,634,634,,634,306,,306,634,634,,,,634,,634,634,634',
'634,634,634,634,,,,,,634,634,634,634,634,634,634,,,634,,,,,,,634,,,634',
'634,634,634,634,634,634,634,,634,634,634,,634,634,,,634,,,,,,,,,,,,',
',,,,,,,634,,,634,,,634,634,,,634,,,,,,,,,,,,,,,,,,,634,634,634,634,',
'634,634,,,,634,634,,629,629,629,,629,634,,634,629,629,,,,629,,629,629',
'629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629',
',,629,629,629,629,629,629,629,629,,629,629,629,,629,629,629,629,629',
',,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,629,,,',
',629,629,629,629,,629,629,,,,629,629,,323,323,323,,323,629,,629,323',
'323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323',
'323,,,323,,,,,,,323,,,323,323,323,323,323,323,323,323,,323,323,323,',
'323,323,323,323,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,',
',,323,,,,,,,,323,,,,,323,323,323,323,,323,323,,,,323,323,,324,324,324',
',324,323,,323,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324',
'324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324',
',324,324,324,,324,324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324',
'324,,,324,,,,,,324,,,,,,,,324,,,,,324,324,324,324,,324,324,,,,324,324',
',595,595,595,,595,324,,324,595,595,,,,595,,595,595,595,595,595,595,595',
',,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595',
'595,595,595,,595,595,595,,595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595',
',,595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,,595,595',
',,,595,595,,594,594,594,,594,595,,595,594,594,,,,594,,594,594,594,594',
'594,594,594,,,,,,594,594,594,594,594,594,594,,,594,,,,,,,594,,,594,594',
'594,594,594,594,594,594,,594,594,594,,594,594,594,594,594,,,,,,,,,,',
',,,,,,,,,594,,,594,,,594,594,,,594,,,,,,594,,,,,,,,594,,,,,594,594,594',
'594,,594,594,,,,594,594,,590,590,590,,590,594,,594,590,590,,,,590,,590',
'590,590,590,590,590,590,,,,,,590,590,590,590,590,590,590,,,590,,,,,',
',590,,,590,590,590,590,590,590,590,590,,590,590,590,,590,590,590,590',
'590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,,,,,590,,,,,,,,590',
',,,,590,590,590,590,,590,590,,,,590,590,,589,589,589,,589,590,,590,589',
'589,,,,589,,589,589,589,589,589,589,589,,,,,,589,589,589,589,589,589',
'589,,,589,,,,,,,589,,,589,589,589,589,589,589,589,589,,589,589,589,',
'589,589,589,589,589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,',
',,589,,,,,,,,589,,,,,589,589,589,589,,589,589,,,,589,589,,586,586,586',
',586,589,,589,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586',
'586,586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586',
',586,586,586,,586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586',
'586,,,586,,,,,,586,,,,,,,,586,,,,,586,586,586,586,,586,586,,,,586,586',
',585,585,585,,585,586,,586,585,585,,,,585,,585,585,585,585,585,585,585',
',,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585',
'585,585,585,,585,585,585,,585,585,585,585,585,,,,,,,,,,,,,,,,,,,,585',
',,585,,,585,585,,,585,,585,,,,585,,,,,,,,585,,,,,585,585,585,585,,585',
'585,,,,585,585,,583,583,583,,583,585,,585,583,583,,,,583,,583,583,583',
'583,583,583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,,583,,,583',
'583,583,583,583,583,583,583,,583,583,583,,583,583,583,583,583,,,,,,',
',,,,,,,,,,,,,583,,,583,,,583,583,,,583,,,,,,583,,,,,,,,583,,,,,583,583',
'583,583,,583,583,,,,583,583,,342,342,342,,342,583,,583,342,342,,,,342',
',342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342',
',,,,,,342,,,342,342,342,342,342,342,342,342,,342,342,342,,342,342,342',
'342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,',
',342,,,,,342,342,342,342,,342,342,,,,342,342,,555,555,555,,555,342,',
'342,555,555,,,,555,,555,555,555,555,555,555,555,,,,,,555,555,555,555',
'555,555,555,,,555,,,,,,,555,,,555,555,555,555,555,555,555,555,,555,555',
'555,,555,555,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,,555',
',,,,,555,,,,,,,,555,,,,,555,555,555,555,,555,555,,,,555,555,,552,552',
'552,,552,555,,555,552,552,,,,552,,552,552,552,552,552,552,552,,,,,,552',
'552,552,552,552,552,552,,,552,,,,,,,552,,,552,552,552,552,552,552,552',
'552,552,552,552,552,,552,552,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552',
',,552,552,,,552,,552,,552,,552,,,,,,,,552,,,,,552,552,552,552,,552,552',
',,,552,552,,542,542,542,,542,552,,552,542,542,,,,542,,542,542,542,542',
'542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,542,542,542,,,,,,,',
',,,,,,,,,,,,542,,,542,,,542,542,,,542,,542,,542,,542,,,,,,,,542,,,,',
'542,542,542,542,,542,542,,,,542,542,,541,541,541,,541,542,,542,541,541',
',,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541,541',
',,541,,,,,,,541,,,541,541,541,541,541,541,541,541,,541,541,541,,541',
'541,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,541,,',
',541,,,,,,,,541,,,,,541,541,541,541,,541,541,,,,541,541,,357,357,357',
',357,541,,541,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357',
'357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357',
',357,357,357,,357,357,357,357,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357',
'357,,,357,,,,,,357,,,,,,,,357,,,,,357,357,357,357,,357,357,,,,357,357',
',384,384,384,,384,357,,357,384,384,,,,384,,384,384,384,384,384,384,384',
',,,,,384,384,384,384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384',
'384,384,384,,384,384,384,,384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384',
',,384,,,384,384,,,384,,,,,,384,,,,,,,,384,,,,,384,384,384,384,,384,384',
',,,384,384,,505,505,505,,505,384,,384,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,505,505,505,,,,,,,',
',,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,,,505,505',
'505,505,,505,505,,,,505,505,,502,502,502,,502,505,,505,502,502,,,,502',
',502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502',
',,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,502,,502,502',
'502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,502,,,,502',
',,,,,,,502,,,,,502,502,502,502,,502,502,,,,502,502,,498,498,498,,498',
'502,,502,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498,498',
'498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498,,498',
'498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498',
',,498,,498,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,,498,498',
',496,496,496,,496,498,,498,496,496,,,,496,,496,496,496,496,496,496,496',
',,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496,496,496,496',
'496,496,496,,496,496,496,,496,496,496,496,496,,,,,,,,,,,,,,,,,,,,496',
',,496,,,496,496,,,496,,,,,,496,,,,,,,,496,,,,,496,496,496,496,,496,496',
',,,496,496,,492,492,492,,492,496,,496,492,492,,,,492,,492,492,492,492',
'492,492,492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492',
'492,492,492,492,492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,',
',,,,,,,,,492,,,492,,,492,492,,,492,,,,,,492,,,,,,,,492,,,,,492,492,492',
'492,,492,492,,,,492,492,,491,491,491,,491,492,,492,491,491,,,,491,,491',
'491,491,491,491,491,491,,,,,,491,491,491,491,491,491,491,,,491,,,,,',
',491,,,491,491,491,491,491,491,491,491,,491,491,491,,491,491,491,491',
'491,,,,,,,,,,,,,,,,,,,,491,,,491,,,491,491,,,491,,,,,,491,,,,,,,,491',
',,,,491,491,491,491,,491,491,,,,491,491,,416,416,416,,416,491,,491,416',
'416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416',
'416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,416,416,416,416',
',416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,416',
',416,,416,,,,,,,,416,,,,,416,416,416,416,,416,416,,,,416,416,,490,490',
'490,,490,416,,416,490,490,,,,490,,490,490,490,490,490,490,490,,,,,,490',
'490,490,490,490,490,490,,,490,,,,,,,490,,,490,490,490,490,490,490,490',
'490,,490,490,490,,490,490,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,',
',490,490,,,490,,,,,,490,,,,,,,,490,,,,,490,490,490,490,,490,490,,,,490',
'490,,418,418,418,,418,490,,490,418,418,,,,418,,418,418,418,418,418,418',
'418,,,,,,418,418,418,418,418,418,418,,,418,,,,,,,418,,,418,418,418,418',
'418,418,418,418,,418,418,418,,418,418,418,418,418,,,,,,,,,,,,,,,,,,',
',418,,,418,,,418,418,,,418,,,,,,418,,,,,,,,418,,,,,418,418,418,418,',
'418,418,,,,418,418,,419,419,419,,419,418,,418,419,419,,,,419,,419,419',
'419,419,419,419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419',
',,419,419,419,419,419,419,419,419,,419,419,419,,419,419,419,419,419',
',,,,,,,,,,,,,,,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,',
',419,419,419,419,,419,419,,,,419,419,,420,420,420,,420,419,,419,420',
'420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420,420',
'420,,,420,,,,,,,420,,,420,420,420,420,420,420,420,420,,420,420,420,',
'420,420,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420,420,,,420,,,',
',,420,,,,,,,,420,,,,,420,420,420,420,,420,420,,,,420,420,,487,487,487',
',487,420,,420,487,487,,,,487,,487,487,487,487,487,487,487,,,,,,487,487',
'487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487,487,487',
',487,487,487,,487,487,,,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,',
',487,,,,,,,,,,,,,,,,,,,487,487,487,487,,487,487,,,,487,487,,480,480',
'480,,480,487,,487,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480',
'480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480',
'480,480,480,480,480,,480,480,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480',
',,480,480,,,480,,480,,480,,480,,,,,,,,480,,,,,480,480,480,480,,480,480',
',,,480,480,,478,478,478,,478,480,,480,478,478,,,,478,,478,478,478,478',
'478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478',
'478,478,478,478,478,478,,478,478,478,,478,478,,,478,,,,,,,,,,,,,,,,',
',,,478,,,478,,,478,478,,,478,,,,,,,,,,,,,,,,,,,478,478,478,478,,478',
'478,,,,478,478,,467,467,467,,467,478,,478,467,467,,,,467,,467,467,467',
'467,467,467,467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467',
'467,467,467,467,467,467,467,,467,467,467,,467,467,467,467,467,407,407',
'407,407,407,407,407,407,407,407,407,,407,407,,,407,407,,467,,,467,,',
'467,467,,,467,,,407,,407,467,407,407,407,407,407,407,407,467,407,,,',
'467,467,467,467,,467,467,,,,467,467,,407,395,,,,467,,467,395,395,395',
',,395,395,395,,395,,,,,,,,,395,395,395,,,,,,,,,395,395,,395,395,395',
'395,395,,,,,,,,,,,,,,,,,,,,,,,395,395,395,395,395,395,395,395,395,395',
'395,395,395,395,,,395,395,395,,,395,,395,395,,,395,395,,395,,395,,395',
',395,395,395,395,395,395,395,448,395,395,395,,,,448,448,448,,,448,448',
'448,,448,395,395,,395,,395,,,,448,,,,,,,,,,448,448,,448,448,448,448',
'448,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,25,25,25,,448,25,25,25,,25,,448,',
',,,448,448,25,25,25,,,,,,,,,25,25,,25,25,25,25,25,,,448,,,,,,,,,,,,',
',448,,,,,448,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,25,25,25,,',
'25,,25,25,,,25,25,,25,,25,,25,,25,25,25,25,25,25,25,26,25,25,25,,,,26',
'26,26,,,26,26,26,,26,25,25,,25,,25,,,,26,26,,,,,,,,,26,26,,26,26,26',
'26,26,,,,,,,,,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
',,26,26,26,,,26,,26,26,,,26,26,,26,,26,,26,,26,26,26,26,26,26,26,451',
'26,,26,,,,451,451,451,,,451,451,451,,451,26,26,,26,,26,,,,451,,,,,,',
',,,451,451,,451,451,451,451,451,,,,,,200,200,,,200,,,,,,,,200,200,,200',
'200,200,200,200,200,200,,,200,200,,,451,200,200,200,200,,,451,,,200',
',451,451,,,,,200,200,,200,200,200,200,200,200,200,200,200,200,200,,',
'200,451,,,,,,,,,,,,,,451,,,,,451,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,',
',9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9',
'9,9,9,9,,,9,9,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8',
',8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8',
'8,8,,,8,8,,,,,,,,,,,8,581,581,581,581,581,581,581,581,581,581,581,581',
'581,581,581,581,581,581,581,581,581,581,581,581,,,,581,581,581,581,581',
'581,581,581,581,581,,,,,,581,581,581,581,581,581,581,581,581,,,581,',
',,,,,,581,581,,581,581,581,581,581,581,581,,,581,581,,,,581,581,581',
'581,,,,,,,,,,,,,,581,581,,581,581,581,581,581,581,581,581,581,581,581',
',,581,581,,,,,,,,,,,581,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,,,,374,374,374,374',
'374,374,374,374,374,374,,,,,,374,374,374,374,374,374,374,374,374,,,374',
',,,,,,,374,374,,374,374,374,374,374,374,374,,,374,374,,,,374,374,374',
'374,,,,,,,,,,,,,,374,374,,374,374,374,374,374,374,374,374,374,374,374',
',,374,374,,,,,,,,,,,374,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,,,,66,66,66,66,66,66,66,66,66,66,,,,,,66',
'66,66,66,66,66,66,66,66,66,66,66,,66,,,,,,66,66,,66,66,66,66,66,66,66',
',,66,66,,,,66,66,66,66,,,,,,66,,,,,,,,66,66,,66,66,66,66,66,66,66,66',
'66,66,66,,,66,709,709,709,709,709,709,709,709,709,709,709,709,709,709',
'709,709,709,709,709,709,709,709,709,709,,,,709,709,709,709,709,709,709',
'709,709,709,,,,,,709,709,709,709,709,709,709,709,709,,,709,,,,,,,,709',
'709,,709,709,709,709,709,709,709,,,709,709,,,,709,709,709,709,,,,,,',
',,,,,,,709,709,,709,709,709,709,709,709,709,709,709,709,709,201,201',
'709,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,,,201,201,,,,201',
'201,201,201,,,,,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,201',
'201,201,201,247,247,201,,247,,,,,,,,247,247,,247,247,247,247,247,247',
'247,,,247,247,,,,247,247,247,247,,,,,,,,,,,,,,247,247,,247,247,247,247',
'247,247,247,247,247,247,247,248,248,247,,248,,,,,,,,248,248,,248,248',
'248,248,248,248,248,,,248,248,,,,248,248,248,248,,,,,,,,,,,,,,248,248',
',248,248,248,248,248,248,248,248,248,248,248,414,414,248,,414,,,,,,',
',414,414,,414,414,414,414,414,414,414,,,414,414,,,,414,414,414,414,',
',,,,414,,,,,,,,414,414,,414,414,414,414,414,414,414,414,414,414,414',
'415,415,414,,415,,,,,,,,415,415,,415,415,415,415,415,415,415,,,415,415',
',,,415,415,415,415,,,,,,415,,,,,,,,415,415,,415,415,415,415,415,415',
'415,415,415,415,415,481,481,415,,481,,,,,,,,481,481,,481,481,481,481',
'481,481,481,,,481,481,,,,481,481,481,481,,,,,,481,,,,,,,,481,481,,481',
'481,481,481,481,481,481,481,481,481,481,482,482,481,,482,,,,,,,,482',
'482,,482,482,482,482,482,482,482,,,482,482,,,,482,482,482,482,,,,,,482',
',,,,,,,482,482,,482,482,482,482,482,482,482,482,482,482,482,493,493',
'482,,493,,,,,,,,493,493,,493,493,493,493,493,493,493,,,493,493,,,,493',
'493,493,493,,,,,,493,,,,,,,,493,493,,493,493,493,493,493,493,493,493',
'493,493,493,494,494,493,,494,,,,,,,,494,494,,494,494,494,494,494,494',
'494,,,494,494,,,,494,494,494,494,,,,,,494,,,,,,,,494,494,,494,494,494',
'494,494,494,494,494,494,494,494,543,543,494,,543,,,,,,,,543,543,,543',
'543,543,543,543,543,543,,,543,543,,,,543,543,543,543,,,,,,543,,,,,,',
',543,543,,543,543,543,543,543,543,543,543,543,543,543,544,544,543,,544',
',,,,,,,544,544,,544,544,544,544,544,544,544,,,544,544,,,,544,544,544',
'544,,,,,,544,,,,,,,,544,544,,544,544,544,544,544,544,544,544,544,544',
'544,550,550,544,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,,,550',
'550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550,550',
'550,550,550,550,550,550,551,551,550,,551,,,,,,,,551,551,,551,551,551',
'551,551,551,551,,,551,551,,,,551,551,551,551,,,,,,551,,,,,,,,551,551',
',551,551,551,551,551,551,551,551,551,551,551,898,898,551,,898,,,,,,',
',898,898,,898,898,898,898,898,898,898,,,898,898,,,,898,898,898,898,',
',,,,898,,,,,,,,898,898,,898,898,898,898,898,898,898,898,898,898,898',
'899,899,898,,899,,,,,,,,899,899,,899,899,899,899,899,899,899,,,899,899',
',,,899,899,899,899,,,,,,899,,,,,,,,899,899,,899,899,899,899,899,899',
'899,899,899,899,899,929,929,899,,929,,,,,,,,929,929,,929,929,929,929',
'929,929,929,,,929,929,,,,929,929,929,929,,,,,,929,,,,,,,,929,929,,929',
'929,929,929,929,929,929,929,929,929,929,,,929,446,446,446,446,446,446',
'446,446,446,446,446,,446,446,,,446,446,,,,,,,,,,,,,,,446,,446,,446,446',
'446,446,446,446,446,,446,,646,646,646,646,646,646,646,646,646,646,646',
',646,646,446,446,646,646,,,,,,,,,,,,,,,646,,646,,646,646,646,646,646',
'646,646,,646,,722,722,722,722,722,722,722,722,722,722,722,,722,722,',
'646,722,722,,,,,,,,,,,,,,,722,,722,,722,722,722,722,722,722,722,,722',
',725,725,725,725,725,725,725,725,725,725,725,,725,725,,722,725,725,',
',,,,,,,,,,,,,725,,725,,725,725,725,725,725,725,725,,725,,729,729,729',
'729,729,729,729,729,729,729,729,,729,729,,725,729,729,,,,,,,,,,,,,,',
'729,,729,,729,729,729,729,729,729,729,,729,,731,731,731,731,731,731',
'731,731,731,731,731,,731,731,,729,731,731,,,,,,,,,,,,,,,731,,731,,731',
'731,731,731,731,731,731,,731,,734,734,734,734,734,734,734,734,734,734',
'734,,734,734,,731,734,734,,,,,,,,,,,,,,,734,,734,,734,734,734,734,734',
'734,734,,734,,736,736,736,736,736,736,736,736,736,736,736,,736,736,',
'734,736,736,,,,,,,,,,,,,,,736,,736,,736,736,736,736,736,736,736,,736',
',261,261,261,261,261,261,261,261,261,261,261,,261,261,,736,261,261,',
',,,,,,,,,,,,,261,,261,,261,261,261,261,261,261,261,,261,,819,819,819',
'819,819,819,819,819,819,819,819,,819,819,,261,819,819,,,,,,,,,,,,,,',
'819,,819,,819,819,819,819,819,819,819,,819,,,,,,,,,,,,,,,,,819' ]
        racc_action_check = arr = ::Array.new(23593, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1874,   366,   nil,   261,   nil,  9244,  1473,  1010, 21559, 21435,
   970,   939,   937,   914,  1354,   305,   589,   nil,   -68, 12002,
 14768,   792,   nil,   -28,   228, 21087, 21196, 12377, 12502, 12627,
   nil,  3744, 12752, 12877,   nil,   617,   506,   678,     1, 13010,
 13135, 13260,   601,  1103,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1741,  2124, 13510, 13635, 13760,   -10,   nil, 13885, 14010,
   nil,   nil, 14135, 14268, 14393, 14518, 21931,   nil,   nil,   nil,
   nil,   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   603,   nil,   nil,   473,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   700,
   nil, 14768,   nil,   nil,   nil,   nil, 14901, 15026, 15151, 15276,
 15401,   863,   nil,   904,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   480,   nil,  1238, 15526, 15651, 15776, 15901,
 21303, 22103,  4869,  4994,  5119,  5244,  5369,   nil,   nil,   994,
   143,   517,   196,   427,   406,   nil,  5869,  3494,   390,  5994,
  6119,  6244,  6369,  6494,  6619,  6744,  6869,  6994,  7119,  7244,
  7369,  7494,  7619,  7744,  7869,  7994,  8119,  8244,  8369,  8494,
  8619,  8744,  8869,  8994,  9119,   nil,   nil, 22163, 22223,   280,
  9494,  9619,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  9744,
   nil, 23419,   nil,   206,   190,   nil, 10244,   222, 10494,   nil,
 10619,   nil,   nil,   -81,  1393, 10994,   168,  2499,   111,   134,
    71, 16026,  1999,   991,   868,  1296,   866,   nil,  1260,  1211,
   247,   nil,   nil,   nil,  1243,   201,  1165, 16409,   nil,   519,
  1200,  1185,   741,   nil,  1160,   nil, 16659,  1218,  1204,   371,
   nil,   465,   508,  1103,  1072,   621,  1082,   nil,   nil,   567,
   501,    10,    32, 17034, 17159,   380,  1125,  1024,    27,   644,
  1148,    33,  1230,   nil,   nil,   221,   288,   225,   nil,   611,
   nil,    28, 18159,   nil,   nil,   264,   290,   354,   380,   400,
   121,   197,   250,   316,   nil,   -54,   nil, 18784,   nil,   239,
   467,   408,   403,   -43,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   654, 21807,   nil,   nil,   nil,   nil,   662,
   nil,   nil,  1613,   nil, 18909,   665,   nil,   762,   nil,   nil,
 11119,   818,   nil,   478,   142, 20912,   nil,   nil,   nil,   109,
   218,   923,   nil,   nil,  3361,  3252,   nil, 20784,   nil,   nil,
   nil,    -5,   nil,   998, 22283, 22343, 19784,    85, 20034, 20159,
 20284,  2874,  2624,   530,   495,   772,   783,   790,   920,  3310,
  3744,  3619,  1874,  1488,  1363,  2999,  2374,  1238,  2749,  2124,
  1999,  2249,  1213,   430,  3494,  2499, 23051,   167, 21021,   nil,
   nil, 21305,   nil,   nil,   999,   nil,   nil, 11502,   232,   -70,
   849,   nil,   nil, 11377,   nil, 11252,   nil, 20784,   nil,   nil,
   nil, 11119,  1348,   460,   -41,   nil,   nil,  -109, 20659,  1230,
 20534, 22403, 22463,   414,  1011,   nil,   nil, 20409,   970,   nil,
 19909, 19659, 19534, 22523, 22583, 16026, 19409,   990, 19284,   nil,
   855,   nil, 19159,   nil,   nil, 19034,   nil,   nil,   nil,    20,
  5507,   nil,   761,   758,   750,   nil,   nil,   nil,   nil,   nil,
   nil,   -54,   825,   nil,   724,   nil,   nil,   nil,   nil,   824,
   nil,   nil,   786,  4244,   772,   nil,   738,    29,   121,   719,
   703, 18659, 18534, 22643, 22703,   -18,   nil,   nil,   481,   nil,
 22763, 22823, 18409,   nil,   nil, 18284,   357,   -34,  2374, 14406,
   nil,   nil,   nil,    77,   nil,   nil,   nil,  1346,   nil,   nil,
   nil,  1180,   nil,   nil,   273,   nil,   nil,  1151,   nil,   nil,
   nil, 21683,   nil, 18034,  1146, 17909, 17784,   -75,  1100, 17659,
 17534,  1053,   nil,   nil, 17409, 17284,  1044,   nil,   nil,   nil,
   -40,   -76,   343,     0,  1033,  3124,  1045,   nil,   405,   nil,
  4494,   nil,   nil,   nil,   nil,   122,   nil, 14135,   -68,  1070,
   nil,  1080,   nil,  4619,  2624,   nil,  1078,   nil,  1125, 16909,
   nil,   nil,   683,   -44, 16784,  1087,   nil,  1098,   116,    75,
  1142,   313,   743,  1157,  1121, 16534, 23097,  1196,  1199,   186,
  1266,   nil,  3869,  1148,  1191,   nil,   nil,   nil,   249,   nil,
   nil,   nil,  1149, 16547,   nil, 16422,   nil,   nil,  1164,  1233,
 16284,   nil,   nil,   753,   nil,  1193,   213,  1237,  1199,   nil,
   nil,    21,   nil,  1313,   nil,   nil,   nil,   nil,  1322,   nil,
    35,  1208,    41,    40,   150,   144, 16159,   312,   993,   nil,
    47,  2749,   456,   nil,   nil,   199,  2999, 14531,   364, 22043,
   nil,   nil,   nil,   nil,   nil,   nil,  4119,   nil,   nil,   nil,
   nil,   nil, 23143,   178, 10869, 23189, 10744,   nil,   nil, 23235,
   nil, 23281,   nil,   nil, 23327,   nil, 23373,   nil, 10369, 10119,
  9994,  9869,   229,  9369,   259,   269,   303,   nil,   334,   321,
  1128,    55,   nil,   466,  3619,  5744,   nil,   nil,   368,   396,
   509,   nil,  5619,   nil,   439,   172,   nil,   nil,   nil,  2874,
   nil,   nil,    13,  5494,   nil,   nil,  1113,   988,   488,   507,
   509,   nil,   nil,   529,   539,   nil,   554,   nil,   nil,   565,
   849,   563,   974,   nil,   689,   nil, 14643,   693,  3994,  1613,
   nil, 13385,  4744,    28,    63,   nil,   736,   nil,  4369,   nil,
   743,   628,   nil,   nil,   652,   636,   nil, 12877, 12252, 23465,
 14281,   nil, 12765,   nil,   nil,  1135,   nil,   690,   676,   nil,
   nil,   nil, 12127,   nil,   710,   695,   nil,   699,   nil,   nil,
   nil,   702,   nil,  1363,  1116,  1118,   796,  1235,   nil,   749,
   862,   nil, 12140,   nil,   nil,  1039,   nil,  1010,   nil,   914,
   nil,   nil,   nil,   466,   596,   770,   nil,     6,   nil,   910,
   914,   nil,   234,   nil,   nil,   921,   nil,   nil,  3216,   nil,
   818,   820,   824,   827,   nil,   845,   nil,  1099,  1346,   921,
   nil,   nil, 11877,   nil,   nil, 11752,   989, 11627, 22883, 22943,
   351,   nil,   nil,   886,   887,   895,   905,   915,   606,   926,
  1003,  3124,   nil,   nil,   nil,   nil,   nil,  2249,   nil,  1488,
  1705,   nil,   nil,   789,   nil,   760,   nil,   nil,   nil, 23003,
   nil,   977,   nil,   985,    -7,   -11,    41,  1360,   nil,   663,
   nil,   nil,   nil,   878,  1008,   540,  1227,  1341,  1000,   997,
   940,   919,   495,   481,   nil,    12,   217,   872,   nil,   nil,
   nil,   nil,   885,   nil,   nil,   nil,   nil,   972,   nil ]

racc_action_default = [
    -3,  -554,    -1,  -540,    -4,  -554,    -7,  -554,  -554,  -554,
  -554,  -554,  -554,  -554,  -554,  -280,   -39,   -40,  -542,  -554,
   -45,   -47,   -48,   -49,  -255,  -255,  -255,  -290,  -325,  -326,
   -65,   -11,   -69,   -77,   -79,  -554,  -469,  -554,  -554,  -554,
  -554,  -554,  -542,  -232,  -273,  -274,  -275,  -276,  -277,  -278,
  -279,  -530,   -11,  -554,  -553,  -522,  -298,  -380,  -554,  -554,
  -303,  -306,  -540,  -554,  -554,  -554,  -554,  -327,  -328,  -418,
  -419,  -420,  -421,  -422,  -437,  -425,  -426,  -439,  -441,  -430,
  -435,  -451,  -439,  -453,  -454,  -528,  -458,  -459,  -529,  -461,
  -462,  -463,  -464,  -465,  -466,  -467,  -468,  -471,  -472,  -554,
    -2,  -541,  -549,  -550,  -551,    -6,  -554,  -554,  -554,  -554,
  -554,    -3,   -15,  -554,  -106,  -107,  -108,  -109,  -110,  -111,
  -112,  -113,  -114,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,   -20,  -115,   -11,  -554,  -554,  -554,  -241,
  -554,  -554,  -554,  -554,  -554,  -554,  -542,  -543,   -44,  -554,
  -469,  -554,  -280,  -554,  -554,  -224,  -554,   -11,  -554,  -554,
  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
  -554,  -554,  -554,  -554,  -554,  -388,  -390,  -554,  -554,   -54,
  -241,  -554,  -297,  -393,  -402,  -404,   -60,  -399,   -61,  -542,
   -62,  -233,  -243,  -265,  -265,  -248,  -554,  -266,  -554,  -524,
  -554,   -63,   -64,  -540,   -12,  -554,   -67,   -11,  -542,  -554,
   -70,   -73,   -11,   -85,  -554,  -554,   -92,  -290,  -293,  -542,
  -554,  -325,  -326,  -329,  -400,  -554,   -75,  -554,   -81,  -287,
  -455,  -456,  -554,  -209,  -210,  -225,  -554,  -410,  -554,  -283,
  -234,  -546,  -546,  -554,  -554,  -546,  -554,  -299,  -300,  -492,
   -46,  -554,  -554,  -554,  -554,  -540,  -554,  -541,  -469,  -554,
  -554,  -280,  -554,  -339,  -340,  -101,  -102,  -554,  -104,  -554,
  -280,  -554,  -554,  -469,  -318,  -106,  -107,  -147,  -148,  -149,
  -165,  -170,  -177,  -180,  -320,  -554,  -520,  -554,  -423,  -554,
  -554,  -554,  -554,  -554,  -554,   969,    -5,  -552,   -21,   -22,
   -23,   -24,   -25,  -554,  -554,   -17,   -18,   -19,  -116,  -554,
   -27,   -36,  -188,  -266,  -554,  -554,   -28,   -37,   -38,   -29,
  -190,  -542,  -242,  -531,  -532,  -255,  -397,  -533,  -534,  -532,
  -531,  -255,  -396,  -398,  -533,  -534,   -35,  -198,   -41,   -42,
   -43,  -542,  -296,  -554,  -554,  -554,  -241,  -287,  -554,  -554,
  -554,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -211,
  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -226,  -227,  -228,  -229,  -542,  -369,  -255,  -531,
  -532,  -255,   -52,   -55,  -542,  -256,  -257,  -258,  -369,  -369,
  -542,  -292,  -244,  -264,  -245,  -264,  -262,  -554,  -267,  -527,
   -10,  -541,   -14,  -542,   -66,  -285,   -82,   -71,  -554,  -542,
  -241,  -554,  -554,   -91,  -554,  -455,  -456,  -554,   -78,   -83,
  -554,  -554,  -554,  -554,  -554,  -230,  -554,  -553,  -553,  -282,
  -542,  -235,  -548,  -547,  -237,  -548,  -288,  -289,  -523,  -554,
  -492,  -383,  -519,  -519,  -519,  -491,  -493,  -494,  -495,  -496,
  -497,  -498,  -554,  -501,  -554,  -503,  -509,  -511,  -512,  -514,
  -515,  -516,  -554,   -11,  -330,  -331,   -11,  -554,  -554,  -554,
  -554,  -554,  -241,  -554,  -554,  -287,  -311,  -101,  -102,  -103,
  -554,  -554,  -241,  -314,  -473,  -554,  -554,  -554,   -11,  -492,
  -322,  -538,  -539,  -542,  -424,  -438,  -443,  -554,  -445,  -427,
  -440,  -554,  -442,  -429,  -554,  -432,  -434,  -554,  -452,    -8,
   -16,  -554,   -26,  -554,  -272,  -554,  -554,  -401,  -554,  -554,
  -554,   -56,  -240,  -394,  -554,  -554,   -58,  -395,  -295,  -544,
  -531,  -532,  -531,  -532,  -542,  -188,  -554,  -370,  -374,  -372,
   -11,   -50,  -391,   -51,  -392,  -369,  -238,   -45,  -554,  -265,
  -254,  -542,  -260,   -11,   -11,  -291,  -265,  -263,  -268,  -554,
  -525,  -526,   -13,   -68,  -554,   -74,   -80,  -542,  -531,  -532,
  -239,   -88,   -90,  -554,   -76,  -554,  -197,  -207,  -208,  -542,
  -553,  -337,   -11,  -411,  -553,  -412,  -413,  -284,  -546,  -381,
  -384,  -386,  -374,  -554,  -484,  -554,  -487,  -489,  -554,  -554,
  -554,  -500,  -341,  -554,  -343,  -345,  -352,  -498,  -542,  -513,
  -517,  -553,  -332,  -553,  -304,  -333,  -334,  -307,  -554,  -310,
  -554,  -542,  -531,  -532,  -535,  -286,  -554,  -101,  -102,  -105,
  -542,   -11,  -554,  -475,  -316,  -554,   -11,  -492,  -554,  -554,
  -521,  -444,  -447,  -448,  -449,  -450,   -11,  -428,  -431,  -433,
  -436,  -117,  -189,  -270,  -554,  -191,  -554,  -545,   -31,  -193,
   -32,  -194,   -57,   -33,  -196,   -34,  -195,   -59,  -554,  -554,
  -554,  -554,  -401,  -554,  -519,  -519,  -519,  -368,  -554,  -374,
  -554,  -498,  -507,  -554,   -11,  -554,  -251,  -259,  -542,  -554,
  -554,  -246,  -264,  -269,   -72,   -86,   -84,  -294,    -9,   -11,
  -417,  -338,  -554,  -554,  -415,  -236,   -11,   -11,  -542,  -519,
  -519,  -504,  -518,  -519,  -519,  -510,  -519,  -499,  -505,  -542,
  -554,  -350,  -554,  -502,  -554,  -335,  -554,  -554,   -11,   -11,
  -309,  -554,   -11,  -401,  -554,  -401,  -554,  -474,   -11,  -319,
  -554,  -542,  -477,  -323,  -554,  -271,   -30,  -192,  -554,  -231,
  -359,  -361,  -554,  -364,  -366,  -554,  -371,  -554,  -375,  -376,
  -378,  -379,  -554,  -389,  -554,  -265,  -250,  -265,  -261,  -403,
  -405,  -265,  -416,   -11,   -93,  -554,  -554,  -100,  -414,  -554,
  -554,  -382,  -554,  -480,  -482,  -554,  -485,  -554,  -488,  -554,
  -490,  -342,  -344,  -348,  -554,  -353,  -301,  -554,  -302,  -554,
  -554,  -268,  -553,  -312,  -315,  -554,  -321,  -476,  -492,  -446,
  -519,  -519,  -519,  -519,  -508,  -519,  -373,  -554,  -506,  -554,
   -53,  -249,  -264,  -252,  -247,  -264,  -410,  -241,  -554,  -554,
   -99,  -385,  -387,  -519,  -519,  -519,  -519,  -346,  -554,  -351,
  -554,   -11,  -305,  -308,  -406,  -407,  -408,   -11,  -317,   -11,
  -554,  -356,  -358,  -554,  -362,  -554,  -365,  -367,  -377,  -554,
  -287,  -265,  -409,  -542,  -531,  -532,  -535,   -98,  -478,  -554,
  -481,  -483,  -486,  -554,  -349,  -553,  -554,  -554,  -519,  -519,
  -519,  -519,  -286,  -535,  -253,  -401,  -519,  -347,  -336,  -313,
  -324,  -354,  -554,  -357,  -360,  -363,  -479,  -519,  -355 ]

clist = [
'117,117,253,257,205,354,308,24,262,262,262,311,24,321,322,312,315,325',
'497,15,280,453,293,293,15,540,24,794,306,104,276,395,401,706,24,24,24',
'309,24,208,310,650,320,320,101,296,320,120,120,488,15,286,286,293,293',
'293,391,515,117,24,24,368,369,370,371,24,24,533,536,24,511,15,462,464',
'122,122,112,194,448,451,745,630,331,340,340,381,388,785,104,100,320',
'320,320,320,684,687,587,6,549,501,504,678,6,508,865,829,781,454,24,278',
'831,748,2,24,24,24,24,24,24,105,15,630,799,249,256,258,746,884,768,15',
'15,862,565,13,572,575,360,612,13,193,614,364,341,344,334,374,615,581',
'326,620,313,610,622,385,385,627,455,627,621,260,271,272,623,624,13,778',
'758,356,314,317,318,332,553,355,560,500,909,323,396,798,262,780,324',
'783,1,13,696,408,409,410,411,917,701,405,808,558,559,709,6,878,749,828',
'24,24,24,24,24,372,6,24,24,24,24,24,15,366,380,386,389,509,944,659,406',
'373,24,884,319,797,246,776,635,262,262,777,13,447,15,458,688,644,262',
'459,928,13,13,395,401,831,515,914,789,862,827,654,772,957,358,24,24',
'359,361,662,362,781,574,363,24,711,253,716,779,293,257,604,785,484,276',
',537,538,,276,24,,24,489,,293,,24,,958,880,477,15,,15,515,,104,286,15',
'781,,,,,320,320,742,,699,640,,471,,286,,,754,,,,,640,,557,,13,,24,24',
',,,,,637,881,,882,563,765,,,,747,719,,24,13,104,919,,,473,,,,470,479',
'873,,732,24,,117,554,737,,903,,472,592,640,,,588,630,597,,,640,456,',
',764,655,,,,460,396,,,,803,262,,691,,,,,,805,279,405,13,700,13,539,',
'120,,13,915,,619,,,,,24,626,,592,,756,592,,,606,,,761,802,,948,672,122',
'309,580,,,515,775,836,,,,,,,627,385,,,811,396,,262,,658,24,,489,,293',
',,396,,,405,489,,293,24,,649,,,,656,,405,24,,,15,,,,591,,,286,690,,596',
',,24,,,286,,,,702,,705,,,,,,843,,,396,,262,,,,,,396,,,,262,,,405,,,320',
'24,,405,24,,,,611,,24,613,,15,,,15,,,,24,,,24,685,685,24,,,632,,379',
'916,,117,,,316,15,,,,,703,704,627,,715,627,672,,588,791,279,,,,24,24',
',,,24,24,,13,,,932,,728,730,,,911,733,735,515,24,592,,120,597,489,588',
'293,,,,,15,24,24,,766,,293,770,,955,,774,,15,15,891,,893,122,813,721',
'894,804,279,286,,806,,279,,24,810,,,,286,,13,,,13,,15,,,,,,588,,,320',
',,,,,588,,,,,13,,,,,,,,,,117,,24,,672,,672,24,,,,835,24,,,837,383,387',
'841,15,,,24,,15,,,807,640,,,,24,812,15,,,,,954,,,13,,,816,,,,,867,,',
'933,,13,13,,,,24,875,293,,,,,,,,,,15,,,24,,907,672,320,,,24,24,13,,466',
'15,468,,469,847,,,15,15,,,,,,,24,,24,24,,,24,,,,,,24,,15,15,,,15,293',
'672,,672,,15,,,685,,,,13,,14,,,13,,14,,,,,,,,13,24,340,,931,,209,,,672',
',,,15,209,209,209,,14,284,284,,,,947,,,396,,262,,,,,,,,,13,14,209,,405',
',,209,209,,,209,329,339,339,13,,24,584,,,681,13,13,683,,,,,,,24,588',
',405,,,24,,24,,,,15,13,13,,,13,15,14,15,,,13,209,209,209,209,14,14,744',
',36,,,,,36,,,,,,,,,,,,,,,,,,,,,13,,618,,,36,283,283,628,753,316,,631',
',,,,,,412,,,759,760,,,36,,,784,,,786,,,,,328,343,343,343,,,653,,,,628',
',,316,771,,,,14,209,209,209,209,,,209,209,209,209,209,,13,,,,461,,13',
'36,13,14,,,,,,,36,36,383,,,,,474,,,,,,,,,,,11,,,,,11,,,209,209,,,,814',
',,,209,,,,,,,,,,,723,,,11,,14,,14,,,,284,14,,,,,,,,,,,834,11,,,284,',
',,,,,,333,,,842,36,,,,,763,849,850,,,,,,,209,209,,883,,,885,,36,,,,',
',869,870,,,872,209,11,,,,,,,,,11,11,,788,904,209,,905,,906,,,598,,,',
',,,,,,,,,,,,,,896,,,,,,,36,,36,,,,283,36,,,,,,,,,,,616,,815,,283,,625',
',,209,,,,,,,,949,,633,950,,951,,,636,,,,,11,,,,,,956,,,,,,,945,,,657',
',,946,209,,11,,,,,,,967,,,,,14,,,,,,,284,,209,,,,,,871,284,,,,,,,,,209',
',,,,,,,,,,,,,,,,,,,710,11,,11,,,,,11,,,,,,,,,14,,,14,,,,,,209,,,,,,',
',,,209,,,209,,,14,,,,,,,,,,,,,,,,757,,,628,,,871,,,,,36,,,,209,209,',
'283,,209,209,,,,,,283,767,,,,,,,,14,,,,,,,,,,,,,14,14,,,,,,,793,,,284',
',,,,,,,,,,284,,36,,,36,,14,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,',
',,,,209,,,,,14,,,,,14,,,,,838,,11,,,14,,,,,,,,36,,209,,,,,851,,,,,,36',
'36,,,,861,,,,,,283,,,,,,14,,,,,283,,,,,877,,36,,,14,,,,845,,11,14,14',
'11,,,,,,,,,,,,,,,,,,209,,14,14,11,,14,664,666,667,,,14,,,,,,,36,,,,',
'36,,,,,,,,,,36,,888,,,,,,,,,,,14,,,,,,,,,11,,,,,,,,,,,,,11,11,,36,,',
',,,,,,,,,,,,36,,,,844,,,36,36,,,11,,,209,,,,,,,,,,,,,,14,36,36,,215',
'36,14,,14,,,36,261,261,261,,,,,,,,,,303,304,305,,,,,,11,,,343,,11,,261',
'261,,,,,,36,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,',
',11,,,,848,,,11,11,,,,,,36,,,,,,36,,36,,821,823,824,,,11,11,,,11,,,',
',,11,,,,,,,,,,,,,,,,,,,,853,854,,,856,858,,860,,,,,,,,11,,,,,,,382,261',
'390,261,,,407,,,,,,,,,,,,,,215,,,421,422,423,424,425,426,427,428,429',
'430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446',
',,,,,261,261,,,,,,11,,261,,,,11,,11,261,,261,,261,,,,,921,922,924,926',
',927,,,,,,,,,,,,,,,,,,938,940,941,942,,,,,495,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,961,963,964,965,,,,,966,,,,,,,,,,,968,,,,,,,,,,,,,,,,',
',,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,407,605,390,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,617,,,,,,261,,261,,261,,,,,,,,,,,,,261,,,,',
',,,,,646,647,648,,,,,,261,,,,261,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,261,261,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,722,,261,725',
',,729,731,,,,734,736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,261,,817,,,,,,,,,,,,729,731,736,734,,819,,,,,,,,',
',,,261,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,',
',,,,,,,817,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,261,,,261,,261' ]
        racc_goto_table = arr = ::Array.new(2630, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'52,52,64,64,29,51,8,39,31,31,31,61,39,16,16,63,63,16,10,24,45,36,58',
'58,24,87,39,85,29,90,41,34,34,91,39,39,39,27,39,18,60,11,27,27,6,46',
'27,55,55,47,24,24,24,58,58,58,22,116,52,39,39,16,16,16,16,39,39,84,84',
'39,125,24,66,66,56,56,14,14,34,34,113,154,24,24,24,25,25,150,90,4,27',
'27,27,27,86,86,23,7,49,62,62,109,7,62,110,120,149,22,39,42,121,118,2',
'39,39,39,39,39,39,5,24,154,98,35,35,35,114,151,12,24,24,107,144,20,144',
'144,140,65,20,15,65,140,50,50,19,28,38,57,4,67,59,37,68,61,61,67,69',
'67,71,40,40,40,37,37,20,118,72,79,80,81,83,88,89,92,93,94,110,95,64',
'96,31,114,97,114,1,20,99,27,27,27,27,100,101,52,102,103,104,105,7,106',
'111,119,39,39,39,39,39,7,7,39,39,39,39,39,24,5,18,18,18,122,110,123',
'18,2,39,151,124,11,126,127,47,31,31,128,20,129,24,131,87,47,31,132,120',
'20,20,34,34,121,116,133,109,107,118,134,135,110,138,39,39,139,141,125',
'142,149,143,145,39,146,64,147,148,58,64,22,150,29,41,,16,16,,41,39,',
'39,45,,58,,39,,85,113,46,24,,24,116,,90,24,24,149,,,,,27,27,23,,49,34',
',6,,24,,,37,,,,,34,,27,,20,,39,39,,,,,,22,114,,114,27,23,,,,116,144',
',39,20,90,91,,,42,,,,4,42,86,,36,39,,52,90,36,,114,,7,64,34,,,29,154',
'64,,,34,40,,,47,25,,,,40,64,,,,23,31,,22,,,,,,23,9,52,20,22,20,4,,55',
',20,11,,63,,,,,39,63,,64,,66,64,,,29,,,66,84,,114,108,56,27,14,,,116',
'62,67,,,,,,,67,61,,,125,64,,31,,63,39,,45,,58,,,64,,,52,45,,58,39,,27',
',,,60,,52,39,,,24,,,,35,,,24,61,,35,,,39,,,24,,,,16,,8,,,,,,84,,,64',
',31,,,,,,64,,,,31,,,52,,,27,39,,52,39,,,,35,,39,35,,24,,,24,,,,39,,',
'39,90,90,39,,,7,,9,87,,52,,,26,24,,,,,90,90,67,,24,67,108,,29,108,9',
',,,39,39,,,,39,39,,20,,,10,,18,18,,,84,18,18,116,39,64,,55,64,45,29',
'58,,,,,24,39,39,,45,,58,60,,23,,60,,24,24,66,,66,56,51,14,66,16,9,24',
',8,,9,,39,8,,,,24,,20,,,20,,24,,,,,,29,,,27,,,,,,29,,,,,20,,,,,,,,,',
'52,,39,,108,,108,39,,,,61,39,,,63,26,26,61,24,,,39,,24,,,90,34,,,,39',
'90,24,,,,,66,,,20,,,18,,,,,16,,,22,,20,20,,,,39,8,58,,,,,,,,,,24,,,39',
',108,108,27,,,39,39,20,,26,24,26,,26,24,,,24,24,,,,,,,39,,39,39,,,39',
',,,,,39,,24,24,,,24,58,108,,108,,24,,,90,,,,20,,21,,,20,,21,,,,,,,,20',
'39,24,,63,,21,,,108,,,,24,21,21,21,,21,21,21,,,,8,,,64,,31,,,,,,,,,20',
'21,21,,52,,,21,21,,,21,21,21,21,20,,39,26,,,9,20,20,9,,,,,,,39,29,,52',
',,39,,39,,,,24,20,20,,,20,24,21,24,,,20,21,21,21,21,21,21,112,,48,,',
',,48,,,,,,,,,,,,,,,,,,,,,20,,26,,,48,48,48,26,9,26,,26,,,,,,,43,,,9',
'9,,,48,,,112,,,112,,,,,48,48,48,48,,,26,,,,26,,,26,9,,,,21,21,21,21',
'21,,,21,21,21,21,21,,20,,,,43,,20,48,20,21,,,,,,,48,48,26,,,,,43,,,',
',,,,,,,17,,,,,17,,,21,21,,,,9,,,,21,,,,,,,,,,,26,,,17,,21,,21,,,,21',
'21,,,,,,,,,,,9,17,,,21,,,,,,,,17,,,9,48,,,,,26,9,9,,,,,,,21,21,,112',
',,112,,48,,,,,,9,9,,,9,21,17,,,,,,,,,17,17,,26,112,21,,112,,112,,,43',
',,,,,,,,,,,,,,,,,9,,,,,,,48,,48,,,,48,48,,,,,,,,,,,43,,26,,48,,43,,',
'21,,,,,,,,112,,43,112,,112,,,43,,,,,17,,,,,,112,,,,,,,9,,,43,,,9,21',
',17,,,,,,,112,,,,,21,,,,,,,21,,21,,,,,,26,21,,,,,,,,,21,,,,,,,,,,,,',
',,,,,,,43,17,,17,,,,,17,,,,,,,,,21,,,21,,,,,,21,,,,,,,,,,21,,,21,,,21',
',,,,,,,,,,,,,,,43,,,26,,,26,,,,,48,,,,21,21,,48,,21,21,,,,,,48,43,,',
',,,,,21,,,,,,,,,,,,,21,21,,,,,,,43,,,21,,,,,,,,,,,21,,48,,,48,,21,,',
',,,,,,,,,,,,,,,,,48,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,21,,,,,21,,,,,43,',
'17,,,21,,,,,,,,48,,21,,,,,43,,,,,,48,48,,,,43,,,,,,48,,,,,,21,,,,,48',
',,,,43,,48,,,21,,,,21,,17,21,21,17,,,,,,,,,,,,,,,,,,21,,21,21,17,,21',
'115,115,115,,,21,,,,,,,48,,,,,48,,,,,,,,,,48,,21,,,,,,,,,,,21,,,,,,',
',,17,,,,,,,,,,,,,17,17,,48,,,,,,,,,,,,,,,48,,,,48,,,48,48,,,17,,,21',
',,,,,,,,,,,,,21,48,48,,30,48,21,,21,,,48,30,30,30,,,,,,,,,,30,30,30',
',,,,,17,,,48,,17,,30,30,,,,,,48,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,17,,,,,,,,,,,,,,,17,,,,17,,,17,17,,,,,,48,,,,,,48,,48,,115,115,115',
',,17,17,,,17,,,,,,17,,,,,,,,,,,,,,,,,,,,115,115,,,115,115,,115,,,,,',
',,17,,,,,,,30,30,30,30,,,30,,,,,,,,,,,,,,30,,,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,,,,30,30,,,',
',,17,,30,,,,17,,17,30,,30,,30,,,,,115,115,115,115,,115,,,,,,,,,,,,,',
',,,,115,115,115,115,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115',
'115,115,,,,,115,,,,,,,,,,,115,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,30,,30,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
',,,,,30,,30,,30,,,,,,,,,,,,,30,,,,,,,,,,30,30,30,,,,,,30,,,,30,,,30',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,30,,,,,,,,,,30,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,30,,30,30,,,30,30,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,30,,,,,,,,,,,,30,30,30,30',
',30,,,,,,,,,,,,30,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
',,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,30,,,30,,30' ]
        racc_goto_check = arr = ::Array.new(2630, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   184,   112,   nil,    86,   114,    41,    97,   -46,   375,
  -289,  -456,  -522,   nil,    68,   130,   -45,  1078,    20,    81,
   133,   836,  -143,  -295,    19,  -111,   521,   -16,    33,   -14,
  1732,   -19,   nil,   nil,  -169,    99,  -228,  -296,  -306,     7,
   132,    -1,    78,   789,   nil,   -12,    12,  -248,   950,  -239,
    78,   -61,    -8,   nil,   nil,    39,    66,  -231,   -10,    96,
   -14,   -43,  -212,   -39,   -22,  -311,  -191,  -308,  -305,   -95,
   nil,  -299,  -456,   nil,   nil,   nil,   nil,   nil,   nil,   101,
   113,   113,   nil,   113,  -254,  -654,  -443,  -301,   108,  -169,
    26,  -526,   107,  -181,  -134,   117,  -505,   121,  -565,  -360,
  -682,  -361,  -510,  -149,  -158,  -363,  -614,  -659,   -85,  -423,
  -688,  -408,   340,  -528,  -482,  1127,  -262,   nil,  -497,  -549,
  -645,  -640,  -100,  -288,   169,  -249,   207,  -431,  -428,   -10,
   nil,   -17,   -14,  -623,  -245,  -400,   nil,   nil,   184,   185,
    59,   182,   183,   -98,  -227,   185,  -300,  -299,  -393,  -557,
  -578,  -695,   nil,   nil,  -384 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   327,   274,   nil,   307,
   nil,   795,   nil,   273,   nil,   nil,   nil,   213,    17,    12,
   214,   302,   nil,   nil,   212,   nil,   267,    16,   nil,   413,
    20,    21,    22,    23,   643,   nil,   nil,   nil,   nil,   290,
   392,    30,   nil,   nil,    32,    35,    34,   nil,   210,   338,
   nil,   119,   398,   118,   121,    70,    71,   nil,    43,   nil,
   651,   263,   nil,   264,   403,   593,   nil,   265,   nil,   nil,
   251,   nil,   nil,    44,    45,    46,    47,    48,    49,    50,
   nil,   252,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   534,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   674,   523,   nil,
   675,   nil,   512,   nil,   514,   nil,   782,   607,   nil,   nil,
   nil,   520,   nil,   nil,   nil,   708,   nil,   nil,   nil,   nil,
   402,   nil,   nil,   nil,   nil,   nil,    69,    72,    73,   nil,
   nil,   nil,   nil,   nil,   570,   nil,   nil,   nil,   513,   525,
   526,   752,   529,   532,   269 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 165, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  3, 144, :_reduce_27,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  3, 164, :_reduce_43,
  2, 164, :_reduce_44,
  1, 164, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_50,
  4, 169, :_reduce_51,
  0, 175, :_reduce_52,
  5, 173, :_reduce_53,
  2, 168, :_reduce_54,
  3, 168, :_reduce_55,
  4, 168, :_reduce_56,
  5, 168, :_reduce_57,
  4, 168, :_reduce_58,
  5, 168, :_reduce_59,
  2, 168, :_reduce_60,
  2, 168, :_reduce_61,
  2, 168, :_reduce_62,
  2, 168, :_reduce_63,
  2, 168, :_reduce_64,
  1, 156, :_reduce_65,
  3, 156, :_reduce_66,
  1, 179, :_reduce_67,
  3, 179, :_reduce_68,
  1, 178, :_reduce_none,
  2, 178, :_reduce_70,
  3, 178, :_reduce_71,
  5, 178, :_reduce_72,
  2, 178, :_reduce_73,
  4, 178, :_reduce_74,
  2, 178, :_reduce_75,
  4, 178, :_reduce_76,
  1, 178, :_reduce_77,
  3, 178, :_reduce_78,
  1, 182, :_reduce_none,
  3, 182, :_reduce_80,
  2, 181, :_reduce_81,
  3, 181, :_reduce_82,
  1, 184, :_reduce_83,
  3, 184, :_reduce_84,
  1, 183, :_reduce_85,
  4, 183, :_reduce_86,
  3, 183, :_reduce_87,
  3, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_90,
  2, 183, :_reduce_91,
  1, 183, :_reduce_92,
  1, 154, :_reduce_93,
  4, 154, :_reduce_94,
  3, 154, :_reduce_95,
  3, 154, :_reduce_96,
  3, 154, :_reduce_97,
  3, 154, :_reduce_98,
  2, 154, :_reduce_99,
  1, 154, :_reduce_100,
  1, 186, :_reduce_101,
  1, 186, :_reduce_none,
  2, 187, :_reduce_103,
  1, 187, :_reduce_104,
  3, 187, :_reduce_105,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 191, :_reduce_111,
  1, 191, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_115,
  0, 194, :_reduce_116,
  4, 152, :_reduce_117,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 167, :_reduce_188,
  5, 167, :_reduce_189,
  3, 167, :_reduce_190,
  5, 167, :_reduce_191,
  6, 167, :_reduce_192,
  5, 167, :_reduce_193,
  5, 167, :_reduce_194,
  5, 167, :_reduce_195,
  5, 167, :_reduce_196,
  4, 167, :_reduce_197,
  3, 167, :_reduce_198,
  3, 167, :_reduce_199,
  3, 167, :_reduce_200,
  3, 167, :_reduce_201,
  3, 167, :_reduce_202,
  3, 167, :_reduce_203,
  3, 167, :_reduce_204,
  3, 167, :_reduce_205,
  3, 167, :_reduce_206,
  4, 167, :_reduce_207,
  4, 167, :_reduce_208,
  2, 167, :_reduce_209,
  2, 167, :_reduce_210,
  3, 167, :_reduce_211,
  3, 167, :_reduce_212,
  3, 167, :_reduce_213,
  3, 167, :_reduce_214,
  3, 167, :_reduce_215,
  3, 167, :_reduce_216,
  3, 167, :_reduce_217,
  3, 167, :_reduce_218,
  3, 167, :_reduce_219,
  3, 167, :_reduce_220,
  3, 167, :_reduce_221,
  3, 167, :_reduce_222,
  3, 167, :_reduce_223,
  2, 167, :_reduce_224,
  2, 167, :_reduce_225,
  3, 167, :_reduce_226,
  3, 167, :_reduce_227,
  3, 167, :_reduce_228,
  3, 167, :_reduce_229,
  3, 167, :_reduce_230,
  6, 167, :_reduce_231,
  1, 167, :_reduce_none,
  1, 163, :_reduce_none,
  1, 196, :_reduce_none,
  2, 196, :_reduce_none,
  4, 196, :_reduce_236,
  2, 196, :_reduce_237,
  3, 201, :_reduce_238,
  0, 202, :_reduce_239,
  1, 202, :_reduce_none,
  0, 159, :_reduce_241,
  1, 159, :_reduce_none,
  1, 177, :_reduce_243,
  2, 177, :_reduce_244,
  2, 177, :_reduce_245,
  4, 177, :_reduce_246,
  6, 177, :_reduce_247,
  1, 177, :_reduce_248,
  4, 205, :_reduce_249,
  3, 205, :_reduce_250,
  2, 205, :_reduce_251,
  4, 205, :_reduce_252,
  6, 205, :_reduce_253,
  1, 205, :_reduce_254,
  0, 207, :_reduce_255,
  2, 172, :_reduce_256,
  1, 206, :_reduce_257,
  0, 208, :_reduce_258,
  3, 206, :_reduce_259,
  0, 209, :_reduce_260,
  4, 206, :_reduce_261,
  2, 204, :_reduce_262,
  2, 203, :_reduce_263,
  1, 203, :_reduce_264,
  0, 203, :_reduce_265,
  1, 198, :_reduce_266,
  2, 198, :_reduce_267,
  3, 198, :_reduce_268,
  4, 198, :_reduce_269,
  3, 162, :_reduce_270,
  4, 162, :_reduce_271,
  2, 162, :_reduce_272,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_281,
  3, 195, :_reduce_282,
  0, 231, :_reduce_283,
  4, 195, :_reduce_284,
  3, 195, :_reduce_285,
  3, 195, :_reduce_286,
  2, 195, :_reduce_287,
  3, 195, :_reduce_288,
  3, 195, :_reduce_289,
  1, 195, :_reduce_290,
  4, 195, :_reduce_291,
  3, 195, :_reduce_292,
  1, 195, :_reduce_293,
  5, 195, :_reduce_294,
  4, 195, :_reduce_295,
  3, 195, :_reduce_296,
  2, 195, :_reduce_297,
  1, 195, :_reduce_none,
  2, 195, :_reduce_299,
  2, 195, :_reduce_300,
  6, 195, :_reduce_301,
  6, 195, :_reduce_302,
  0, 232, :_reduce_303,
  0, 233, :_reduce_304,
  7, 195, :_reduce_305,
  0, 234, :_reduce_306,
  0, 235, :_reduce_307,
  7, 195, :_reduce_308,
  5, 195, :_reduce_309,
  4, 195, :_reduce_310,
  0, 236, :_reduce_311,
  0, 237, :_reduce_312,
  9, 195, :_reduce_313,
  0, 238, :_reduce_314,
  6, 195, :_reduce_315,
  0, 239, :_reduce_316,
  7, 195, :_reduce_317,
  0, 240, :_reduce_318,
  5, 195, :_reduce_319,
  0, 241, :_reduce_320,
  6, 195, :_reduce_321,
  0, 242, :_reduce_322,
  0, 243, :_reduce_323,
  9, 195, :_reduce_324,
  1, 195, :_reduce_325,
  1, 195, :_reduce_326,
  1, 195, :_reduce_327,
  1, 195, :_reduce_328,
  1, 158, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_332,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 222, :_reduce_none,
  5, 222, :_reduce_336,
  1, 148, :_reduce_none,
  2, 148, :_reduce_338,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 244, :_reduce_none,
  3, 244, :_reduce_342,
  1, 247, :_reduce_343,
  3, 247, :_reduce_344,
  1, 246, :_reduce_none,
  4, 246, :_reduce_346,
  6, 246, :_reduce_347,
  3, 246, :_reduce_348,
  5, 246, :_reduce_349,
  2, 246, :_reduce_350,
  4, 246, :_reduce_351,
  1, 246, :_reduce_352,
  3, 246, :_reduce_353,
  6, 248, :_reduce_354,
  8, 248, :_reduce_355,
  4, 248, :_reduce_356,
  6, 248, :_reduce_357,
  4, 248, :_reduce_358,
  2, 248, :_reduce_none,
  6, 248, :_reduce_360,
  2, 248, :_reduce_361,
  4, 248, :_reduce_362,
  6, 248, :_reduce_363,
  2, 248, :_reduce_364,
  4, 248, :_reduce_365,
  2, 248, :_reduce_366,
  4, 248, :_reduce_367,
  1, 248, :_reduce_368,
  0, 174, :_reduce_369,
  1, 174, :_reduce_370,
  3, 254, :_reduce_371,
  1, 254, :_reduce_372,
  4, 254, :_reduce_373,
  0, 255, :_reduce_374,
  2, 255, :_reduce_375,
  1, 256, :_reduce_376,
  3, 256, :_reduce_377,
  1, 257, :_reduce_378,
  1, 257, :_reduce_none,
  0, 261, :_reduce_380,
  3, 220, :_reduce_381,
  4, 259, :_reduce_382,
  1, 259, :_reduce_383,
  0, 264, :_reduce_384,
  4, 260, :_reduce_385,
  0, 265, :_reduce_386,
  4, 260, :_reduce_387,
  0, 266, :_reduce_388,
  5, 263, :_reduce_389,
  2, 170, :_reduce_390,
  4, 170, :_reduce_391,
  4, 170, :_reduce_392,
  2, 219, :_reduce_393,
  4, 219, :_reduce_394,
  4, 219, :_reduce_395,
  3, 219, :_reduce_396,
  3, 219, :_reduce_397,
  3, 219, :_reduce_398,
  2, 219, :_reduce_399,
  1, 219, :_reduce_400,
  4, 219, :_reduce_401,
  0, 268, :_reduce_402,
  5, 218, :_reduce_403,
  0, 269, :_reduce_404,
  5, 218, :_reduce_405,
  5, 224, :_reduce_406,
  1, 270, :_reduce_407,
  1, 270, :_reduce_none,
  6, 147, :_reduce_409,
  0, 147, :_reduce_410,
  1, 271, :_reduce_411,
  1, 271, :_reduce_none,
  1, 271, :_reduce_none,
  2, 272, :_reduce_414,
  1, 272, :_reduce_none,
  2, 149, :_reduce_416,
  1, 149, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_421,
  1, 274, :_reduce_422,
  2, 274, :_reduce_423,
  3, 275, :_reduce_424,
  1, 275, :_reduce_425,
  1, 275, :_reduce_426,
  3, 212, :_reduce_427,
  4, 213, :_reduce_428,
  3, 214, :_reduce_429,
  0, 279, :_reduce_430,
  3, 279, :_reduce_431,
  1, 280, :_reduce_432,
  2, 280, :_reduce_433,
  3, 215, :_reduce_434,
  0, 282, :_reduce_435,
  3, 282, :_reduce_436,
  0, 276, :_reduce_437,
  2, 276, :_reduce_438,
  0, 277, :_reduce_439,
  2, 277, :_reduce_440,
  0, 278, :_reduce_441,
  2, 278, :_reduce_442,
  1, 281, :_reduce_443,
  2, 281, :_reduce_444,
  0, 284, :_reduce_445,
  4, 281, :_reduce_446,
  1, 283, :_reduce_447,
  1, 283, :_reduce_448,
  1, 283, :_reduce_449,
  1, 283, :_reduce_none,
  1, 192, :_reduce_451,
  3, 193, :_reduce_452,
  1, 273, :_reduce_453,
  1, 273, :_reduce_454,
  2, 273, :_reduce_455,
  2, 273, :_reduce_456,
  1, 185, :_reduce_457,
  1, 185, :_reduce_458,
  1, 185, :_reduce_459,
  1, 185, :_reduce_460,
  1, 185, :_reduce_461,
  1, 185, :_reduce_462,
  1, 185, :_reduce_463,
  1, 185, :_reduce_464,
  1, 185, :_reduce_465,
  1, 185, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 216, :_reduce_469,
  1, 157, :_reduce_470,
  1, 161, :_reduce_471,
  1, 161, :_reduce_472,
  1, 226, :_reduce_473,
  3, 226, :_reduce_474,
  2, 226, :_reduce_475,
  3, 228, :_reduce_476,
  2, 228, :_reduce_477,
  6, 262, :_reduce_478,
  8, 262, :_reduce_479,
  4, 262, :_reduce_480,
  6, 262, :_reduce_481,
  4, 262, :_reduce_482,
  6, 262, :_reduce_483,
  2, 262, :_reduce_484,
  4, 262, :_reduce_485,
  6, 262, :_reduce_486,
  2, 262, :_reduce_487,
  4, 262, :_reduce_488,
  2, 262, :_reduce_489,
  4, 262, :_reduce_490,
  1, 262, :_reduce_491,
  0, 262, :_reduce_492,
  1, 258, :_reduce_493,
  1, 258, :_reduce_494,
  1, 258, :_reduce_495,
  1, 258, :_reduce_496,
  1, 245, :_reduce_none,
  1, 245, :_reduce_498,
  3, 245, :_reduce_499,
  2, 245, :_reduce_500,
  1, 286, :_reduce_none,
  3, 286, :_reduce_502,
  1, 249, :_reduce_503,
  3, 249, :_reduce_504,
  3, 287, :_reduce_505,
  3, 288, :_reduce_506,
  1, 250, :_reduce_507,
  3, 250, :_reduce_508,
  1, 285, :_reduce_509,
  3, 285, :_reduce_510,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  2, 251, :_reduce_513,
  1, 251, :_reduce_514,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 253, :_reduce_517,
  2, 252, :_reduce_518,
  0, 252, :_reduce_519,
  1, 229, :_reduce_none,
  3, 229, :_reduce_521,
  0, 217, :_reduce_522,
  2, 217, :_reduce_none,
  1, 200, :_reduce_524,
  3, 200, :_reduce_525,
  3, 291, :_reduce_526,
  2, 291, :_reduce_527,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 166, :_reduce_none,
  1, 166, :_reduce_none,
  2, 180, :_reduce_544,
  2, 160, :_reduce_545,
  0, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 227, :_reduce_549,
  1, 227, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 197, :_reduce_553 ]

racc_reduce_n = 554

racc_shift_n = 969

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "@22",
  "@23",
  "operation3",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@26",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_19(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_33(val, _values, result)
                      diagnostic :error, :const_reassignment, nil, val[3]
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 39 omitted

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_52(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_53(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_57(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_101(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 102 omitted

def _reduce_103(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_116(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_117(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

def _reduce_188(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_190(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_196(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_197(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_237(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = val
                    
    result
end

def _reduce_239(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = []
                    
    result
end

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_246(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_247(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_248(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_256(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_258(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = []
                    
    result
end

def _reduce_265(val, _values, result)
                      result = []
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 298 omitted

def _reduce_299(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_300(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_301(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_302(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_303(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_304(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_309(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_310(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_314(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_315(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_319(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

def _reduce_332(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_344(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 345 omitted

def _reduce_346(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_361(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_370(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_371(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = []
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_376(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_378(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_381(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_384(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_386(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_387(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_388(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_390(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_392(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_393(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_394(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_395(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_397(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_398(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_399(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_402(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_404(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = []
                    
    result
end

def _reduce_411(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 412 omitted

# reduce 413 omitted

def _reduce_414(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 417 omitted

# reduce 418 omitted

# reduce 419 omitted

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_428(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = []
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = []
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = []
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = []
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_446(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_456(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_474(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_475(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = []
                    
    result
end

def _reduce_493(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_494(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_495(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_500(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 501 omitted

def _reduce_502(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_505(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_506(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 511 omitted

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 515 omitted

# reduce 516 omitted

def _reduce_517(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = []
                    
    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = []
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_526(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

def _reduce_544(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 546 omitted

# reduce 547 omitted

# reduce 548 omitted

def _reduce_549(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 550 omitted

# reduce 551 omitted

# reduce 552 omitted

def _reduce_553(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class MacRuby
  end   # module Parser
