# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby24 < Parser::Base


  def version
    24
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-290,-107,209,210,781,-102,-104,-290,-290,-290,270,587,270,-290,-290',
'588,-290,219,575,1007,794,615,-102,209,210,-101,617,794,398,-106,109',
'270,780,400,399,-100,-290,-290,575,-290,-290,-290,-290,-290,-106,-105',
'-103,-101,-107,-85,-103,-105,209,210,575,793,209,210,220,-71,534,-104',
'793,536,815,-104,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,121,575,-290,-290,-290,575,640,614,-99,-102,-290,-99',
'616,-290,206,265,113,269,-290,269,-290,112,-290,-290,-100,-290,-290',
'-290,-290,-290,-98,-290,-583,-290,-93,-579,-580,220,269,-583,-583,-583',
'-580,-579,-104,-583,-583,-290,-583,-104,-290,-290,721,-290,-92,-290',
'113,-583,-97,843,-102,112,-290,-105,-91,-102,220,207,-583,-583,220,-583',
'-583,-583,-583,-583,113,721,721,-94,-96,112,-106,-105,-103,-101,-107',
'-106,-105,-103,-101,-107,113,814,-95,767,270,112,-583,-583,-583,-583',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,862,636,-583,-583',
'-583,208,641,113,-90,240,-583,113,112,-583,-99,451,112,602,-583,-99',
'-583,602,-583,-583,211,-583,-583,-583,-583,-583,-100,-583,-583,-583',
'-93,-100,838,807,113,602,-101,237,635,112,113,239,238,-583,265,112,-583',
'-583,-583,-583,807,-583,581,-101,-104,-583,-583,-583,-583,-103,-583',
'-583,-583,-94,-583,113,113,269,-107,534,112,112,533,-583,-583,-583,-583',
'604,603,600,217,604,603,605,-583,-583,636,-583,-583,-583,-583,-583,91',
'92,668,-102,-93,-92,-95,604,603,600,555,602,552,551,550,555,553,552',
'551,550,259,553,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583',
'-583,-583,-583,-579,-94,-583,-583,-583,-95,782,-583,-93,-107,-583,-93',
'215,-583,-583,-104,-583,318,-583,263,-583,-93,-583,-583,319,-583,-583',
'-583,-583,-583,-496,-583,-583,-583,635,-92,-95,91,92,604,603,-94,93',
'94,-94,602,-496,-583,602,752,-583,-583,-583,-583,-94,-583,834,-583,-485',
'220,522,956,-583,-103,767,-485,-485,-485,571,570,-485,-485,-485,-482',
'-485,-92,-95,216,-92,-95,-482,-93,-485,388,-485,-485,-485,-99,-92,-95',
'522,-102,401,-90,-485,-485,450,-485,-485,-485,-485,-485,220,-99,452',
'989,453,-97,602,604,603,-92,604,603,613,93,94,-106,219,754,484,-101',
'-497,217,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,-482,493,-485,-485,-485,534,-485,-485,536,-106,-485,602,495',
'-485,-485,602,-485,-485,-485,497,-485,-497,-485,-485,-485,-485,-485',
'-485,-485,-485,-290,-485,-98,-485,604,603,609,-290,-290,-290,113,-100',
'-107,-290,-290,112,-290,-485,209,210,-485,-485,-485,-485,-492,-485,505',
'-485,-577,113,113,-492,-485,-485,112,112,-290,-290,-91,-290,-290,-290',
'-290,-290,-70,604,603,607,-100,604,603,618,-485,746,747,-491,-493,748',
'107,108,113,534,-491,-493,536,112,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-290,-290,-485,220,-290,-290,-290,508,640,-485',
'509,-492,-290,516,-577,-290,838,807,-485,274,-290,220,-290,265,-290',
'-290,519,-290,-290,-290,-290,-290,-482,-290,523,-290,240,-577,220,-482',
'-482,-482,-491,-493,-482,-482,-482,215,-482,-290,209,210,-290,-290,979',
'-96,-482,-290,-482,-482,-482,537,538,592,-290,-105,497,-485,-482,-482',
'79,-482,-482,-482,-482,-482,581,-290,390,-494,585,-495,80,-490,-290',
'586,-494,-487,-495,-580,-490,594,81,-290,-487,-494,619,-495,-482,-482',
'-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,216,622',
'-482,-482,-482,-488,-482,-482,-263,624,-482,625,-488,-482,-482,629,-482',
'-489,-482,220,-482,-583,-482,-482,-489,-482,-482,-482,-482,-482,-290',
'-482,-494,-482,-495,633,-490,215,215,634,-487,265,645,240,263,515,240',
'-482,240,240,-482,-482,-482,-482,513,-482,240,-482,-583,220,220,220',
'-482,-482,-85,-583,-583,-583,560,672,-488,-583,-583,-583,-583,220,527',
'683,563,688,-583,240,-489,-583,689,-579,220,691,237,-583,695,698,239',
'238,-583,-583,699,-583,-583,-583,-583,-583,216,216,701,703,705,-281',
'-583,560,713,571,570,237,-281,714,564,239,238,563,235,236,715,-281,-583',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583',
'717,-583,-583,-583,949,641,552,551,550,-583,553,581,-583,571,570,724',
'741,-583,564,-583,751,-583,-583,755,-583,-583,-583,-583,-583,-290,-583',
'-583,-583,-281,756,-264,-290,-290,-290,768,484,-290,-290,-290,215,-290',
'-583,484,220,-583,-583,525,-94,785,-583,-290,-290,-290,786,259,449,-583',
'-103,791,796,-290,-290,495,-290,-290,-290,-290,-290,497,215,800,215',
'683,-333,220,265,979,265,984,683,-333,240,807,220,832,592,220,982,807',
'-333,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,216,842,-290,-290,-290,220,783,-290,215,220,-290,851,-265,-290',
'-290,584,-290,220,-290,861,-290,865,-290,-290,582,-290,-290,-290,-290',
'-290,216,-290,216,-290,-333,683,881,949,215,552,551,550,-263,553,885',
'590,889,-290,890,698,-290,-290,-290,-290,592,-290,892,-290,-585,894',
'896,898,-290,-105,898,-585,-585,-585,220,904,-585,-585,-585,216,-585',
'555,906,552,551,550,908,553,914,-585,-585,-585,-585,116,117,118,119',
'120,917,220,-585,-585,921,-585,-585,-585,-585,-585,-266,216,923,698',
'926,215,928,930,932,220,707,555,628,552,551,550,934,553,958,903,960',
'626,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585',
'-585,961,-291,-585,-585,-585,966,741,-585,-291,977,-585,980,707,-585',
'-585,985,-585,-291,-585,986,-585,710,-585,-585,987,-585,-585,-585,-585',
'-585,990,-585,-585,-585,216,898,898,898,215,240,555,995,552,551,550',
'448,553,-585,958,-576,-585,-585,-585,-585,449,-585,-412,-585,698,1001',
'1003,1005,-585,-412,-412,-412,-291,1007,-412,-412,-412,237,-412,1007',
'688,239,238,707,235,236,958,-412,-412,-412,1022,1023,710,116,117,118',
'119,120,-412,-412,-580,-412,-412,-412,-412,-412,-579,-482,220,216,898',
'958,1030,1007,-482,1007,1007,,,-576,,,,-482,,,,,-412,-412,-412,-412',
'-412,-412,-412,-412,-412,-412,-412,-412,-412,-412,-576,,-412,-412,-412',
'215,,-412,-291,265,-412,,214,-412,-412,-291,-412,,-412,,-412,212,-412',
'-412,-291,-412,-412,-412,-412,-412,-482,-412,-412,-412,555,,552,551',
'550,560,553,116,117,118,119,120,,-412,,563,-412,-412,-246,-412,,-412',
',,,-246,-246,-246,-412,,-246,-246,-246,,-246,240,216,558,,-291,,,,-246',
'-246,-246,568,567,571,570,,254,255,564,-246,-246,,-246,-246,-246,-246',
'-246,555,,552,551,550,237,553,243,,239,238,,235,236,,,241,220,242,,',
',-246,-246,-246,-246,-246,-246,-246,-246,-246,-246,-246,-246,-246,-246',
',707,-246,-246,-246,,,-246,,265,-246,,,-246,-246,,-246,,-246,,-246,',
'-246,-246,,-246,-246,-246,-246,-246,-297,-246,-246,-246,,,,-297,-297',
'-297,,,-297,-297,-297,,-297,-246,,,-246,-246,,-246,,-246,-297,-297,',
',,,-246,,,,-297,-297,,-297,-297,-297,-297,-297,555,-290,552,551,550',
',553,,-290,,,,,-580,,,,-290,,,,,-297,-297,-297,-297,-297,-297,-297,-297',
'-297,-297,-297,-297,-297,-297,,707,-297,-297,-297,,,-297,,274,-297,',
',-297,-297,,-297,,-297,,-297,,-297,-297,,-297,-297,-297,-297,-297,-290',
'-297,-584,-297,116,117,118,119,120,-584,-584,-584,,,-584,-584,-584,-297',
'-584,240,-297,-297,,-297,,-297,,-584,-584,-584,-584,,-297,,,254,255',
',-584,-584,,-584,-584,-584,-584,-584,555,,552,551,550,237,553,243,,239',
'238,,235,236,,,241,,242,,,,-584,-584,-584,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,-584,-584,,707,-584,-584,-584,,,-584,,,-584,,,-584,-584',
',-584,,-584,,-584,,-584,-584,,-584,-584,-584,-584,-584,,-584,-584,-584',
',,,,,,,,555,,552,551,550,-584,553,,-584,-584,-584,-584,,-584,-246,-584',
',,,,-584,-246,-246,-246,,,-246,-246,-246,555,-246,552,551,550,560,553',
',707,,-246,-246,,,,563,,,240,,,-246,-246,,-246,-246,-246,-246,-246,',
',,,,254,255,,558,,,,,,,,,568,567,571,570,237,,243,564,239,238,,235,236',
',,241,-246,242,-282,,,,,-246,,-282,-282,-282,265,-246,-282,-282,-282',
'555,-282,552,551,550,,553,,,,,-282,-282,-282,,,,,-246,-246,,-282,-282',
',-282,-282,-282,-282,-282,,,,,-246,,,-246,707,,,,-246,,,,,,,-246,,,-282',
'-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,,,-282',
'-282,-282,,,-282,,,-282,,,-282,-282,,-282,,-282,,-282,,-282,-282,,-282',
'-282,-282,-282,-282,,-282,,-282,,,,,,,,,,,,,,-282,,,-282,-282,-282,-282',
',-282,,-282,,,,,-282,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,630,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,-238,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,630',
'8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
'244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,296',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,220,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,,,252,253,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,-604,-604',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252',
'253,,-604,-604,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,,252,253,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-604,-604,-604,-604,246',
'248,,,-604,-604,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-604,-604,-604,-604,246',
'248,,,-604,-604,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-604,-604,-604,-604,246',
'248,,,-604,-604,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255',
',40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,5,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,5,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,,44,239,238,,235,236,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,240,,,,,,,,,,,,,,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,',
'62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,665,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305',
',,231,,,58,59,,,60,,,555,,552,551,550,560,553,,,,,,,,,563,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,511,,558,62,,81,93,94,69,70,71,,57,571',
'570,,63,64,564,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,300,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,',
',,,305,,,231,,,58,59,,,60,,,555,,552,551,550,560,553,,,,,,,,,563,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,317,,558,62,,81,93,94,69,70,71,9',
'57,571,570,,63,64,564,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,',
',,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,936,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,',
',,,,,,,,,,,,,942,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,',
',301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,936,,,231,,,58,59,,,60,,,555,,552',
'551,550,560,553,,,,,,,,,563,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,',
',558,62,,81,93,94,69,70,71,9,57,571,570,,63,64,564,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,665,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,',
'58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283',
',281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,555',
',552,551,550,560,553,,,,,,,,,563,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,558,62,,81,93,94,69,70,71,9,57,571,570,,63,64,564,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,665,,281,,44,,,287,,,',
',,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71',
',57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,',
',,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,527,,58,59,,,60,,,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,',
'89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,665,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,759,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,113,,,,,112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,350',
',,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56',
'97,96,356,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,362,,,357,,,231,',
',58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56,97,96,356',
',99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,357,,,231,,,58,59,,,60,',
',,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,',
',,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,',
',62,,81,93,94,173,184,174,197,170,190,180,179,200,201,195,178,177,172',
'198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181',
'169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162',
'89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,',
',,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193',
'186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201',
'195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194',
'193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126',
'123,,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179',
'200,201,195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192',
'199,194,193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165',
'124,126,,,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,373',
'372,374,371,169,188,187,,,,,,168,175,166,167,368,369,370,366,126,97',
'96,367,,99,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,378,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,676,432,162,,677,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,646,432,162,,647,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,482',
'432,162,,483,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,428,432,162,,429,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,435,439,162,,434,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'679,439,162,,680,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,1011,439,162,,1010,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,482,432,162,,483,,',
',,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,732,439,162,,733,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,648,439,162,,649,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,764,439,162,,763',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,761,432,162,,762,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,1014,432,162,,1015,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,1016,439,162',
',1017,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,648,439,162,,649,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,646,432,162,,647,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,729,439',
'162,,730,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,727,432,162,,728,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,,555,162,552,551,550,560,553',
',555,,552,551,550,560,553,563,,,,,,,,563,,555,,552,551,550,560,553,',
',,,,558,,,563,,,,,558,568,567,571,570,,,,564,568,567,571,570,,,,564',
'558,,555,,552,551,550,560,553,568,567,571,570,,,,564,563,,555,,552,551',
'550,560,553,,555,,552,551,550,560,553,563,,,,,558,,,563,,,,,,,,571,570',
',,,564,558,,,,,,,,558,568,567,571,570,,,,564,568,567,571,570,,,555,564',
'552,551,550,560,553,555,,552,551,550,560,553,,563,,,,,,555,563,552,551',
'550,560,553,,,,,,,,,563,558,,,,,,,558,,568,567,571,570,,,,564,,571,570',
',558,541,564,,,,,,,568,567,571,570,,,555,564,552,551,550,560,553,555',
',552,551,550,560,553,555,563,552,551,550,560,553,555,563,552,551,550',
'560,553,555,563,552,551,550,560,553,,563,558,,,,,,563,558,,568,567,571',
'570,,558,,564,,571,570,,558,,564,,571,570,,558,,564,,571,570,,,,564',
',571,570,,,555,564,552,551,550,560,553,,,,,,,,,563,,,,,,,,,,,,,,,,,',
',,,,558,,,,,,,,,568,567,571,570,,,,564' ]
        racc_action_table = arr = ::Array.new(25327, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'763,351,595,595,647,727,1015,763,763,763,61,357,655,763,763,357,763',
'19,725,1035,659,385,1014,444,444,845,386,787,123,585,1,310,646,123,123',
'348,763,763,884,763,763,763,763,763,985,1017,1016,1028,943,671,729,730',
'599,599,907,659,686,686,19,671,331,647,787,331,693,728,763,763,763,763',
'763,763,763,763,763,763,763,763,763,763,7,341,763,763,763,340,763,385',
'939,646,763,347,386,763,10,310,595,61,763,655,763,595,763,763,940,763',
'763,763,763,763,351,763,764,763,727,729,730,444,310,764,764,764,1017',
'1016,1015,764,764,763,764,1015,763,763,846,763,845,763,725,764,585,725',
'1014,725,763,763,348,1014,599,12,764,764,686,764,764,764,764,764,884',
'578,577,729,730,884,985,1017,1016,1028,943,985,1017,1016,1028,943,907',
'693,728,858,26,907,764,764,764,764,764,764,764,764,764,764,764,764,764',
'764,784,762,764,764,764,13,764,341,347,457,764,340,341,764,939,226,340',
'499,764,939,764,381,764,764,15,764,764,764,764,764,940,764,764,764,676',
'940,716,716,290,380,858,457,761,290,846,457,457,764,26,846,764,764,648',
'764,912,764,912,784,762,648,648,648,764,764,648,648,648,679,648,578',
'577,26,226,330,578,577,330,648,648,648,648,499,499,499,413,381,381,381',
'648,648,429,648,648,648,648,648,41,41,499,761,676,802,677,380,380,380',
'710,610,710,710,710,903,710,903,903,903,22,903,648,648,648,648,648,648',
'648,648,648,648,648,648,648,648,679,679,648,648,648,429,648,648,676',
'413,648,676,24,648,648,429,648,37,648,24,648,676,648,648,40,648,648',
'648,648,648,223,648,648,648,428,802,677,315,315,610,610,679,41,41,679',
'612,38,648,384,610,648,648,648,648,679,648,710,648,98,45,319,903,648',
'648,631,98,98,98,698,698,98,98,98,366,98,802,677,24,802,677,366,428',
'98,109,98,98,98,223,802,677,450,428,204,38,98,98,225,98,98,98,98,98',
'947,38,227,947,228,319,383,612,612,631,384,384,384,315,315,319,232,612',
'264,631,224,17,98,98,98,98,98,98,98,98,98,98,98,98,98,98,366,278,98',
'98,98,692,98,98,692,450,98,382,279,98,98,387,98,367,98,282,98,39,98',
'98,367,98,98,98,98,98,434,98,17,98,383,383,383,434,434,434,854,224,17',
'434,434,854,434,98,339,339,98,98,98,98,368,98,294,98,356,849,344,368',
'98,98,849,344,434,434,39,434,434,434,434,434,295,382,382,382,39,387',
'387,387,367,603,603,369,370,603,603,603,3,334,369,370,334,3,434,434',
'434,434,434,434,434,434,434,434,434,434,434,434,356,297,434,434,434',
'298,434,356,299,368,434,305,356,434,997,997,356,308,434,309,434,314',
'434,434,316,434,434,434,434,434,95,434,320,434,323,356,328,95,95,95',
'369,370,95,95,95,978,95,434,14,14,434,434,978,434,95,434,95,95,95,332',
'333,978,434,434,335,356,95,95,77,95,95,95,95,95,345,733,346,302,350',
'303,77,371,733,352,302,372,303,733,371,361,77,733,372,302,396,303,95',
'95,95,95,95,95,95,95,95,95,95,95,95,95,978,402,95,95,95,373,95,95,405',
'407,95,410,373,95,95,414,95,374,95,424,95,732,95,95,374,95,95,95,95',
'95,733,95,302,95,303,426,371,376,304,427,372,436,446,458,376,304,459',
'95,460,461,95,95,95,95,304,95,456,95,435,486,490,506,95,95,507,435,435',
'435,923,510,373,435,435,732,435,512,517,520,923,528,732,476,374,435',
'529,732,530,531,456,732,543,544,456,456,435,435,546,435,435,435,435',
'435,376,304,547,548,557,306,732,695,565,923,923,476,306,569,923,476',
'476,695,476,476,572,306,435,435,435,435,435,435,435,435,435,435,435',
'435,435,435,732,574,435,435,435,889,435,889,889,889,435,889,579,435',
'695,695,580,597,435,695,435,607,435,435,615,435,435,435,435,435,649',
'435,435,435,306,617,623,649,649,649,632,637,649,649,649,321,649,435',
'642,650,435,435,321,435,651,435,649,649,649,652,654,321,435,435,658',
'660,649,649,662,649,649,649,649,649,664,935,670,941,673,46,675,678,935',
'681,941,682,46,685,687,694,709,935,711,941,718,46,649,649,649,649,649',
'649,649,649,649,649,649,649,649,649,321,723,649,649,649,726,649,649',
'349,735,649,739,758,649,649,349,649,760,649,769,649,790,649,649,349',
'649,649,649,649,649,935,649,941,649,46,801,805,989,359,989,989,989,808',
'989,809,359,816,649,817,818,649,649,649,649,359,649,822,649,440,823',
'825,826,649,649,828,440,440,440,831,833,440,440,440,349,440,832,836',
'832,832,832,839,832,848,440,440,440,440,327,327,327,327,327,852,853',
'440,440,856,440,440,440,440,440,857,359,866,867,869,412,870,871,873',
'874,832,558,412,558,558,558,875,558,905,832,909,412,440,440,440,440',
'440,440,440,440,440,440,440,440,440,440,910,516,440,440,440,916,920',
'440,516,933,440,936,558,440,440,942,440,516,440,945,440,558,440,440',
'946,440,440,440,440,440,951,440,440,440,412,952,953,954,222,475,707',
'955,707,707,707,222,707,440,957,355,440,440,440,440,222,440,27,440,968',
'971,972,973,440,27,27,27,516,974,27,27,27,475,27,976,981,475,475,707',
'475,475,996,27,27,27,998,999,707,293,293,293,293,293,27,27,1010,27,27',
'27,27,27,1011,355,1013,222,1019,1020,1024,1025,355,1026,1027,,,355,',
',,355,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,355,,27,27,27,16',
',27,588,27,27,,16,27,27,588,27,,27,,27,16,27,27,588,27,27,27,27,27,355',
'27,27,27,793,,793,793,793,793,793,6,6,6,6,6,,27,,793,27,27,430,27,,27',
',,,430,430,430,27,,430,430,430,,430,468,16,793,,588,,,,430,430,430,793',
'793,793,793,,468,468,793,430,430,,430,430,430,430,430,904,,904,904,904',
'468,904,468,,468,468,,468,468,,,468,793,468,,,,430,430,430,430,430,430',
'430,430,430,430,430,430,430,430,,904,430,430,430,,,430,,430,430,,,430',
'430,,430,,430,,430,,430,430,,430,430,430,430,430,28,430,430,430,,,,28',
'28,28,,,28,28,28,,28,430,,,430,430,,430,,430,28,28,,,,,430,,,,28,28',
',28,28,28,28,28,995,680,995,995,995,,995,,680,,,,,680,,,,680,,,,,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,,995,28,28,28,,,28,,28,28,,,28',
'28,,28,,28,,28,,28,28,,28,28,28,28,28,680,28,439,28,504,504,504,504',
'504,439,439,439,,,439,439,439,28,439,469,28,28,,28,,28,,439,439,439',
'439,,28,,,469,469,,439,439,,439,439,439,439,439,958,,958,958,958,469',
'958,469,,469,469,,469,469,,,469,,469,,,,439,439,439,439,439,439,439',
'439,439,439,439,439,439,439,,958,439,439,439,,,439,,,439,,,439,439,',
'439,,439,,439,,439,439,,439,439,439,439,439,,439,439,439,,,,,,,,,956',
',956,956,956,439,956,,439,439,439,439,,439,481,439,,,,,439,481,481,481',
',,481,481,481,928,481,928,928,928,928,928,,956,,481,481,,,,928,,,466',
',,481,481,,481,481,481,481,481,,,,,,466,466,,928,,,,,,,,,928,928,928',
'928,466,,466,928,466,466,,466,466,,,466,481,466,56,,,,,481,,56,56,56',
'481,481,56,56,56,834,56,834,834,834,,834,,,,,56,56,56,,,,,481,481,,56',
'56,,56,56,56,56,56,,,,,481,,,481,834,,,,481,,,,,,,481,,,56,56,56,56',
'56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56,56,,56,,56,',
'56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56,56,56,,56',
',56,,,,,56,888,888,888,888,888,888,,,,888,888,,,,888,,888,888,888,888',
'888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,417,888,888,888',
'888,888,888,888,888,888,888,888,888,,888,888,888,,888,888,888,888,888',
'417,417,417,417,417,417,417,417,417,417,417,,417,417,,,417,417,,888',
',,888,,,888,888,,,888,,888,417,,417,888,417,417,,417,417,417,417,417',
'888,417,,,,888,888,888,888,,888,888,888,888,,,,,888,888,,417,,417,,',
'888,,888,888,888,296,296,296,296,296,296,,,,296,296,,,,296,,296,296',
'296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,423,296',
'296,296,296,296,296,296,296,296,296,296,296,,296,296,296,,296,296,296',
'296,296,423,423,423,423,423,423,423,423,423,423,423,,423,423,,,423,423',
',296,,,296,,,296,296,,,296,,296,423,,423,296,423,423,,423,423,423,423',
'423,296,423,,,,296,296,296,296,,296,296,296,296,,,,,296,296,,423,,,',
',296,,296,296,296,795,795,795,795,795,795,,,,795,795,,,,795,,795,795',
'795,795,795,795,795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,795',
'795,795,795,795,795,795,795,795,795,795,795,,795,795,795,,795,795,795',
'795,795,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,795,,,795,',
',795,795,,,795,,795,21,,21,795,21,21,,21,21,21,21,21,795,21,,,,795,795',
'795,795,,795,795,795,795,,,,,795,795,,21,,,,,795,,795,795,795,573,573',
'573,573,573,573,,,,573,573,,,,573,,573,573,573,573,573,573,573,,,,,',
'573,573,573,573,573,573,573,,,573,,,,,,573,573,573,573,573,573,573,573',
'573,573,573,573,,573,573,573,,573,573,573,573,573,766,766,766,766,766',
'766,766,766,766,766,766,,766,766,,,766,766,,573,,,573,,,573,573,,,573',
',573,766,,766,573,766,766,,766,766,766,766,766,573,766,,,,573,573,573',
'573,,573,573,573,573,,,,,573,573,,766,,,,,573,,573,573,573,959,959,959',
'959,959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959,,,,,,959',
'959,959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959,959,959,959',
'959,959,959,,959,959,959,,959,959,959,959,959,276,276,276,276,276,276',
'276,276,276,276,276,,276,276,,,276,276,,959,,,959,,,959,959,,,959,,959',
'276,,276,959,276,276,,276,276,276,276,276,959,276,,,,959,959,959,959',
',959,959,959,959,,,,,959,959,,276,,,,,959,,959,959,959,840,840,840,840',
'840,840,,,,840,840,,,,840,,840,840,840,840,840,840,840,,,,,,840,840',
'840,840,840,840,840,,,840,,,,,,840,840,840,840,840,840,840,840,840,840',
'840,840,,840,840,840,,840,840,840,840,840,863,863,863,863,863,863,863',
'863,863,863,863,,863,863,,,863,863,,840,,,840,,,840,840,,,840,,840,863',
',863,840,863,863,,863,863,863,863,863,840,863,,,,840,840,840,840,,840',
'840,840,840,,,,,840,840,,863,,,,,840,,840,840,840,841,841,841,841,841',
'841,,,,841,841,,,,841,,841,841,841,841,841,841,841,,,,,,841,841,841',
'841,841,841,841,,,841,,,,,,841,841,841,841,841,841,841,841,841,841,841',
'841,,841,841,841,,841,841,841,841,841,479,479,479,479,479,479,479,479',
'479,479,479,,479,479,,,479,479,,841,,,841,,,841,841,,,841,,841,479,',
'479,841,479,479,,479,479,479,479,479,841,479,,,,841,841,841,841,,841',
'841,841,841,,,,,841,841,479,479,,,,,841,,841,841,841,844,844,844,844',
'844,844,,,,844,844,,,,844,,844,844,844,844,844,844,844,,,,,,844,844',
'844,844,844,844,844,,,844,,,,,,844,844,844,844,844,844,844,844,844,844',
'844,844,,844,844,844,,844,844,844,844,844,526,526,526,526,526,526,526',
'526,526,526,526,,526,526,,,526,526,,844,,,844,,,844,844,,,844,,844,526',
',526,844,526,526,,526,526,526,526,526,844,526,,,,844,844,844,844,,844',
'844,844,844,,,,,844,844,,526,,,,,844,,844,844,844,326,326,326,326,326',
'326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326',
'326,326,326,326,,,326,,,,,,326,326,326,326,326,326,326,326,326,326,326',
'326,,326,326,326,,326,326,326,326,326,477,477,477,477,477,477,477,,',
'477,477,,,,,,477,477,,326,,,326,,,326,326,,,326,,326,477,,477,326,477',
'477,,477,477,477,477,477,326,477,,,,326,326,326,326,,326,326,326,326',
',,,,326,326,,,,,,,326,,326,326,326,938,938,938,938,938,938,,,,938,938',
',,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938',
',,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938',
'938,,938,938,938,938,938,454,454,454,454,454,454,454,454,454,454,454',
',454,454,,,454,454,,938,,,938,,,938,938,,,938,,938,454,,454,938,454',
'454,,454,454,454,454,454,938,454,,,,938,938,938,938,,938,938,938,938',
',,,,938,938,,,,,,,938,,938,938,938,750,750,750,750,750,750,,,,750,750',
',,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750',
',,750,,,,,,750,750,750,750,750,750,750,750,750,750,750,750,,750,750',
'750,,750,750,750,750,750,455,455,455,455,455,455,455,455,455,455,455',
',455,455,,,455,455,,750,,,750,,,750,750,,,750,,750,455,,455,750,455',
'455,,455,455,455,455,455,750,455,,,,750,750,750,750,,750,750,750,750',
',,,,750,750,,,,,,,750,,750,750,750,807,807,807,807,807,807,,,,807,807',
',,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807',
',,807,,,,,,807,807,807,807,807,807,807,807,807,807,807,807,,807,807',
'807,,807,807,807,807,807,478,478,478,478,478,478,478,478,,478,478,,',
',,,478,478,,807,,,807,,,807,807,,,807,,807,478,,478,807,478,478,,478',
'478,478,478,478,807,478,,,,807,807,807,807,,807,807,807,807,,,,,807',
'807,,,,,,,807,,807,807,807,740,740,740,740,740,740,,,,740,740,,,,740',
',740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740,,,740',
',,,,,740,740,740,740,740,740,740,740,740,740,740,740,,740,740,740,,740',
'740,740,740,740,470,470,470,470,470,470,470,,,470,470,,,,,,470,470,',
'740,,,740,,,740,740,,,740,,740,470,,470,740,470,470,,470,470,470,470',
'470,740,470,,,,740,740,740,740,,740,740,740,740,,,,,740,740,,,,,,,740',
',740,740,740,206,206,206,206,206,206,,,,206,206,,,,206,,206,206,206',
'206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,206,206',
'206,206,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206',
'206,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,,206,,,206,,',
'206,206,,,206,,206,471,,471,206,471,471,,471,471,471,471,471,206,471',
',,,206,206,206,206,,206,206,206,206,,,,,206,206,,,,,,,206,,206,206,206',
'850,850,850,850,850,850,,,,850,850,,,,850,,850,850,850,850,850,850,850',
',,,,,850,850,850,850,850,850,850,,,850,,,,,,850,850,850,850,850,850',
'850,850,850,850,850,850,,850,850,850,,850,850,850,850,850,465,465,465',
'465,465,465,465,,,465,465,,,,,,465,465,,850,,,850,,,850,850,,,850,,850',
'465,,465,850,465,465,,465,465,465,465,465,850,465,,,,850,850,850,850',
',850,850,850,850,,,,,850,850,,,,,,,850,,850,850,850,301,301,301,301',
'301,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301',
'301,301,301,301,301,,,301,,,,,,301,301,301,301,301,301,301,301,301,301',
'301,301,,301,301,301,,301,301,301,301,301,467,,,,,,,,,,,,,,,,467,467',
',301,,,301,,,301,301,,,301,,301,467,,467,301,467,467,,467,467,,,467',
'301,467,,,,301,301,301,301,,301,301,301,301,,,,,301,301,,,,,,,301,,301',
'301,301,736,736,736,736,736,736,,,,736,736,,,,736,,736,736,736,736,736',
'736,736,,,,,,736,736,736,736,736,736,736,,,736,,,,,,736,736,736,736',
'736,736,736,736,736,736,736,736,,736,736,736,,736,736,736,736,736,473',
'473,473,473,473,473,473,,,473,473,,,,,,473,473,,736,,,736,,,736,736',
',,736,,736,473,,473,736,473,473,,473,473,473,473,473,736,473,,,,736',
'736,736,736,,736,736,736,736,,,,,736,736,,,,,,,736,,736,736,736,0,0',
'0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0',
'0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,472,472,472,472,472,472,472,,,472',
'472,,,,,,472,472,,0,,,0,,,0,0,,,0,,0,472,,472,0,472,472,,472,472,472',
'472,472,0,472,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0,0,505,505,505',
'505,505,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505',
'505,505,505,505,505,505,,,505,,,,,,505,505,505,505,505,505,505,505,505',
'505,505,505,,505,505,505,,505,505,505,505,505,474,474,474,474,474,474',
'474,,,474,474,,,,,,474,474,,505,,,505,,,505,505,,,505,,505,474,,474',
'505,474,474,,474,474,474,474,474,505,474,,,,505,505,505,505,,505,505',
'505,505,,,,,505,505,,,,,,,505,,505,505,505,576,576,576,576,576,576,',
',,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576',
'576,576,,,576,,,,,,576,576,576,576,576,576,576,576,576,576,576,576,',
'576,576,576,,576,576,576,576,576,462,,,,,,,,,,,,,,,,462,462,,576,,,576',
',,576,576,,,576,,576,462,,462,576,462,462,,462,462,,,,576,,,,,576,576',
'576,576,,576,576,576,576,,,,,576,576,,,,,,,576,,576,576,576,864,864',
'864,864,864,864,,,,864,864,,,,864,,864,864,864,864,864,864,864,,,,,',
'864,864,864,864,864,864,864,,,864,,,,,,864,864,864,864,864,864,864,864',
'864,864,864,864,,864,864,864,,864,864,864,864,864,464,,,,,,,,,,,,,,',
',464,464,,864,,,864,,,864,864,,,864,,864,464,,,864,464,464,,464,464',
',,,864,,,,,864,864,864,864,,864,864,864,864,,,,,864,864,,,,,,,864,,864',
'864,864,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,',
'33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,33,,33,33,33,33,33,463,,,,,,,,,,,,,,,,463,463,,33,,,33,,,33,33',
',,33,,33,463,,463,33,463,463,,463,463,,,,33,,,,,33,33,33,33,,33,33,33',
'33,,,,,33,33,,,,,,,33,,33,33,33,596,596,596,596,596,596,,,,596,596,',
',,596,,596,596,596,596,596,596,596,,,,,,596,596,596,596,596,596,596',
',,596,,,,,,596,596,596,596,596,596,596,596,596,596,596,596,,596,596',
'596,,596,596,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596,,,596,596,,,596',
',596,,,,596,,,,,,,,,596,,,,,596,596,596,596,,596,596,596,596,,,,,596',
'596,,,,,,,596,,596,596,596,231,231,231,231,231,231,,,,231,231,,,,231',
',231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231',
',,,,,231,231,231,231,231,231,231,231,231,231,231,231,,231,231,231,,231',
'231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,231,,',
',231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231,,',
',,,,231,,231,231,231,121,121,121,121,121,121,,,,121,121,,,,121,,121',
'121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,',
'121,121,121,121,121,121,121,121,121,121,121,121,,121,121,121,,121,121',
'121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,121,,,,121',
',,,,,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,,,,121',
',121,121,121,967,967,967,967,967,967,,,,967,967,,,,967,,967,967,967',
'967,967,967,967,,,,,,967,967,967,967,967,967,967,,,967,,,,,,967,967',
'967,967,967,967,967,967,967,967,967,967,,967,967,967,,967,967,967,967',
'967,,,,,,,,,,,,,,,,,,,,967,,,967,,,967,967,,,967,,967,,,,967,,,,,,,',
',967,,,,,967,967,967,967,,967,967,967,967,,,,,967,967,,,,,,,967,,967',
'967,967,881,881,881,881,881,881,,,,881,881,,,,881,,881,881,881,881,881',
'881,881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,881,881,881,881',
'881,881,881,881,881,881,881,881,,881,881,881,,881,881,881,881,881,,',
',,,,,,,,,,,,,,,,,881,,,881,,,881,881,,,881,,881,,,,881,,,,,,,,,881,',
',,,881,881,881,881,,881,881,881,881,,,,,881,881,,,,,,,881,,881,881,881',
'965,965,965,965,965,965,,,,965,965,,,,965,,965,965,965,965,965,965,965',
',,,,,965,965,965,965,965,965,965,,,965,,,,,,965,965,965,965,965,965',
'965,965,965,965,965,965,,965,965,965,,965,965,965,965,965,,,,,,,,,,',
',,,,,,,,,965,,,965,,,965,965,,,965,,965,,,,965,,,,,,,,,965,,,,,965,965',
'965,965,,965,965,965,965,,,,,965,965,,,,,,,965,,965,965,965,887,887',
'887,887,887,887,,,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,',
'887,887,887,887,887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887',
'887,887,887,887,,887,887,887,,887,887,887,887,887,,,,,,,,,,,,,,,,,,',
',887,,,887,,,887,887,,,887,,887,,,,887,,,,,,,,,887,,,,,887,887,887,887',
',887,887,887,887,,,,,887,887,,,,29,29,29,887,29,887,887,887,29,29,,',
',29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,',
'29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,',
',,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29',
'29,29,29,,,,,29,29,,,,838,838,838,29,838,29,29,29,838,838,,,,838,,838',
'838,838,838,838,838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,',
',838,,,838,838,838,838,838,838,838,838,,838,838,838,,838,838,838,838',
'838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838,,,,,,838,,,,,,,,,838',
',,,,838,838,838,838,,838,838,838,838,,,,,838,838,,,,30,30,30,838,30',
'838,838,838,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30',
'30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30',
'30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30',
',,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,843,843,843,30,843,30,30,30',
'843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843,843,843,843,843',
'843,843,,,843,,,,,,,843,,,843,843,843,843,843,843,843,843,,843,843,843',
',843,843,843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843,843,,,843,,843',
',,,843,,,,,,,,,843,,,,,843,843,843,843,,843,843,843,843,,,,,843,843',
',,,31,31,31,843,31,843,843,843,31,31,,,,31,,31,31,31,31,31,31,31,,,',
',,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31',
'31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31',
',31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,300,300,300',
'31,300,31,31,31,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300',
'300,300,300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300',
'300,,300,300,300,,300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300',
',,300,,,703,,703,703,703,703,703,,,,,,,,,703,,300,300,300,300,,300,300',
'300,300,,,,,300,300,,,,300,,703,300,,300,300,300,256,256,256,,256,703',
'703,,256,256,703,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,',
'256,256,,,,246,246,246,256,246,256,256,256,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,',
',,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246',
'246,246,246,,246,246,246,246,,,,,246,246,,,,861,861,861,246,861,246',
'246,246,861,861,,,,861,,861,861,861,861,861,861,861,,,,,,861,861,861',
'861,861,861,861,,,861,,,,,,,861,,,861,861,861,861,861,861,861,861,861',
'861,861,861,,861,861,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861',
'861,,,861,,,,861,,861,,,861,,,,,,861,,,,,861,861,861,861,,861,861,861',
'861,,,,,861,861,,,,862,862,862,861,862,861,861,861,862,862,,,,862,,862',
'862,862,862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,',
',862,,,862,862,862,862,862,862,862,862,,862,862,862,,862,862,862,862',
'862,,,,,,,,,,,,,,,,,,,,862,,,862,,,862,862,,,862,,,,,,862,,,,,,,,,862',
',,,,862,862,862,862,,862,862,862,862,,,,,862,862,,,,257,257,257,862',
'257,862,862,862,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257',
'257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257',
'257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,',
',257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257',
'257,,,,,257,257,,,,34,34,34,257,34,257,257,257,34,34,,,,34,,34,34,34',
'34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34',
'34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,',
'34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35,35',
'35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35',
'35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,',
'35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,1030,,1030,1030,1030,1030',
'1030,,,,,,,,,1030,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,1030,35',
',35,35,35,5,5,5,5,5,1030,1030,,5,5,1030,,,5,,5,5,5,5,5,5,5,,,,,,5,5',
'5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,',
',,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,',
',,,5,5,,,,876,876,876,5,876,5,5,5,876,876,,,,876,,876,876,876,876,876',
'876,876,,,,,,876,876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876',
'876,876,876,876,876,,876,876,876,,876,876,,,876,,,,,,,,,,,,,,,,,,,,876',
',,876,,,876,876,,,876,,,,,,,,,,,,,,,,,,,,876,876,876,876,,876,876,876',
'876,,,,,876,876,,,,885,885,885,876,885,876,876,876,885,885,,,,885,,885',
'885,885,885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,',
',885,,,885,885,885,885,885,885,885,885,,885,885,885,,885,885,,,885,',
',,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,,,,,,,,,,,,,,,885,885',
'885,885,,885,885,885,885,,,,,885,885,,,,245,245,245,885,245,885,885',
'885,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245',
'245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245',
'245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245',
',,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,672,672,672,245,672,245,245,245,672,672,,,,672,,672,672,672,672,672',
'672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672,672',
'672,672,672,672,672,,672,672,672,,672,672,,,672,,,,,,,,,,,,,,,,,,,,672',
',,672,,,672,672,,,672,,,,,,,,,,,,,,,,,,,,672,672,672,672,,672,672,672',
'672,,,,,672,672,,,,244,244,244,672,244,672,672,672,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244',
',,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,668,668,668,244',
'668,244,244,244,668,668,,,,668,,668,668,668,668,668,668,668,,,,,,668',
'668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668',
'668,,668,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,',
',668,668,,,668,,,,,,668,,,,,,,,,668,,,,,668,668,668,668,,668,668,668',
'668,,,,,668,668,,,,665,665,665,668,665,668,668,668,665,665,,,,665,,665',
'665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,',
',665,,,665,665,665,665,665,665,665,665,,665,665,665,,665,665,665,665',
'665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,,,,,665,,,,,,,,,665',
',,,,665,665,665,665,,665,665,665,665,,,,,665,665,,,,243,243,243,665',
'243,665,665,665,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243',
'243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243',
'243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,',
',243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243',
'243,,,,,243,243,,,,242,242,242,243,242,243,243,243,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,317,317,317,242',
'317,242,242,242,317,317,,,,317,,317,317,317,317,317,317,317,,,,,,317',
'317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317,317,317,317',
'317,,317,317,317,,317,317,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317',
',,317,,,,,,,,,,,,,,,,,,,,317,317,317,317,,317,317,317,317,,,,,317,317',
',,,241,241,241,317,241,317,317,317,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,',
',,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241',
'241,,241,241,241,241,,,,,241,241,,,,240,240,240,241,240,241,241,241',
'240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240',
'240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240',
',240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240',
',,,239,239,239,240,239,240,240,240,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,',
',,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239',
'239,,239,239,239,239,,,,,239,239,,,,238,238,238,239,238,239,239,239',
'238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238',
',,,237,237,237,238,237,238,238,238,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,',
',,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237',
'237,,237,237,237,237,,,,,237,237,,,,236,236,236,237,236,237,237,237',
'236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236',
'236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236',
',236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236',
',,,934,934,934,236,934,236,236,236,934,934,,,,934,,934,934,934,934,934',
'934,934,,,,,,934,934,934,934,934,934,934,,,934,,,,,,,934,,,934,934,934',
'934,934,934,934,934,,934,934,934,,934,934,,,934,,,,,,,,,,,,,,,,,,,,934',
',,934,,,934,934,,,934,,,1007,,1007,1007,1007,1007,1007,,,,,,,,,1007',
',934,934,934,934,,934,934,934,934,,,,,934,934,,,,,,1007,934,,934,934',
'934,111,111,111,111,111,1007,1007,,111,111,1007,,,111,,111,111,111,111',
'111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111',
'111,111,111,111,111,111,111,111,111,,111,111,111,,111,111,111,111,111',
',,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111',
',,,,111,111,111,111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111',
'111,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211,211,,211',
'211,211,211,,,,,211,211,,,,536,536,536,211,536,211,211,211,536,536,',
',,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536,536,536',
',,536,,,,,,,536,,,536,536,536,536,536,536,536,536,536,536,536,536,,536',
'536,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,,,,536',
',,536,,,,,,536,,,,,536,536,536,536,,536,536,536,536,,,,,536,536,,,,533',
'533,533,536,533,536,536,536,533,533,,,,533,,533,533,533,533,533,533',
'533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533,533,533',
'533,533,533,533,533,533,533,533,,533,533,533,533,533,,,,,,,,,,,,,,,',
',,,,533,,,533,,,533,533,,,533,,533,,,,533,,,533,,,,,,533,,,,,533,533',
'533,533,,533,533,533,533,,,,,533,533,,,,210,210,210,533,210,533,533',
'533,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210,,,,,210,210',
',,,209,209,209,210,209,210,210,210,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,',
',,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,,209,,,,,209,209,209',
'209,,209,209,209,209,,,,,209,209,,,,208,208,208,209,208,209,209,209',
'208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208',
'208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208',
',208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208',
',,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208',
',,,207,207,207,208,207,208,208,208,207,207,,,,207,,207,207,207,207,207',
'207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207',
'207,207,207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,',
',,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207',
'207,,207,207,207,207,,,,,207,207,,,,527,527,527,207,527,207,207,207',
'527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527',
'527,527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527,,527,527,527',
',527,527,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,',
',,,527,,,,,,,,,527,,,,,527,527,527,527,,527,527,527,527,,,,,527,527',
',,,523,523,523,527,523,527,527,527,523,523,,,,523,,523,523,523,523,523',
'523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523',
'523,523,523,523,523,,523,523,523,,523,523,523,523,523,,,,,,,,,,,,,,',
',,,,,523,,,523,,,523,523,,,523,,,,,,523,,,,,,,,,523,,,,,523,523,523',
'523,,523,523,523,523,,,,,523,523,,,,522,522,522,523,522,523,523,523',
'522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522',
',522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,',
',,,522,,,,,,,,,522,,,,,522,522,522,522,,522,522,522,522,,,,,522,522',
',,,519,519,519,522,519,522,522,522,519,519,,,,519,,519,519,519,519,519',
'519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519,,,519,519,519',
'519,519,519,519,519,,519,519,519,,519,519,,,519,,,,,,,,,,,,,,,,,,,,519',
',,519,,,519,519,,,519,,,,,,,,,,,,,,,,,,,,519,519,519,519,,519,519,519',
'519,,,,,519,519,,,,513,513,513,519,513,519,519,519,513,513,,,,513,,513',
'513,513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,',
',513,,,513,513,513,513,513,513,513,513,513,513,513,513,,513,513,513',
'513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,513,,513,,513',
',,513,,,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513,,,,511',
'511,511,513,511,513,513,513,511,511,,,,511,,511,511,511,511,511,511',
'511,,,,,,511,511,511,511,511,511,511,,,511,,,,,,,511,,,511,511,511,511',
'511,511,511,511,,511,511,511,,511,511,,,511,,,,,,,,,,,,,,,,,,,,511,',
',511,,,511,511,,,511,,,1005,,1005,1005,1005,1005,1005,,,,,,,,,1005,',
'511,511,511,511,,511,511,511,511,,,,,511,511,,,,,,1005,511,,511,511',
'511,120,120,120,120,120,1005,1005,,120,120,1005,,,120,,120,120,120,120',
'120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120,120,,120',
'120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120,120,,',
',,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,,120,',
',,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,251,251,251,120,251',
'120,120,120,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251',
',,,,251,251,,,,117,117,117,251,117,251,251,251,117,117,,,,117,,117,117',
'117,117,117,117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,,117',
',,117,117,117,117,117,117,117,117,,117,117,117,,117,117,117,117,117',
',,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,',
',,117,117,117,117,,117,117,117,117,,,,,117,117,,,,118,118,118,117,118',
'117,117,117,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118',
'118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118',
',118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118',
'118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118',
',,,,118,118,,,,493,493,493,118,493,118,118,118,493,493,,,,493,,493,493',
'493,493,493,493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,,,493',
',,493,493,493,493,493,493,493,493,493,493,493,493,,493,493,493,493,493',
',,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,,493,,493,,493,,493,,,493,,',
',,,493,,,,,493,493,493,493,,493,493,493,493,,,,,493,493,,,,495,495,495',
'493,495,493,493,493,495,495,,,,495,,495,495,495,495,495,495,495,,,,',
',495,495,495,495,495,495,495,,,495,,,,,,,495,,,495,495,495,495,495,495',
'495,495,495,495,495,495,,495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495',
',,495,,,495,495,,,495,,,,495,,495,,,495,,,,,,495,,,,,495,495,495,495',
',495,495,495,495,,,,,495,495,,,,497,497,497,495,497,495,495,495,497',
'497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497',
'497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,497,,497,497,497,',
'497,497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,',
',,497,,,,,,,,,497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497,',
',,,,,497,,497,497,497,503,503,503,503,503,,,,503,503,,,,503,,503,503',
'503,503,503,503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,503',
'503,503,503,503,503,503,503,503,503,503,503,,503,503,503,,503,503,503',
'503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,,,503,,,',
',,,,,503,,,,,503,503,503,503,,503,503,503,503,,,,,503,503,,,,,,503,503',
',503,503,503,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119',
'119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119',
'119,119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,',
',,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119',
'119,,119,119,119,119,,,,,119,119,,,,254,254,254,119,254,119,119,119',
'254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254',
'254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254',
',254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254',
',,,767,767,767,254,767,254,254,254,767,767,,,,767,,767,767,767,767,767',
'767,767,,,,,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767',
'767,767,767,767,767,,767,767,767,,767,767,767,767,767,,,,,,,,,,,,,,',
',,,,,767,,,767,,,767,767,,,767,,,,,,767,,,,,,,,,767,,,,,767,767,767',
'767,,767,767,767,767,,,,,767,767,,,,266,266,266,767,266,767,767,767',
'266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266',
'266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266,266',
'266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266',
',266,,266,,266,,,266,,,,,,266,,,,,266,266,266,266,,266,266,266,266,',
',,,266,266,,,,780,780,780,266,780,266,266,266,780,780,,,,780,,780,780',
'780,780,780,780,780,,,,,,780,780,780,780,780,780,780,,,780,,,,,,,780',
',,780,780,780,780,780,780,780,780,,780,780,780,,780,780,780,780,780',
',,,,,,,,,,,,,,,,,,,780,,,780,,,780,780,,,780,,,,,,780,,,,,,,,,780,,',
',,780,780,780,780,,780,780,780,780,,,,,780,780,,,,781,781,781,780,781',
'780,780,780,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781',
'781,781,781,781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,781',
',781,781,781,,781,781,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781',
'781,,,781,,,,,,781,,,,,,,,,781,,,,,781,781,781,781,,781,781,781,781',
',,,,781,781,,,,782,782,782,781,782,781,781,781,782,782,,,,782,,782,782',
'782,782,782,782,782,,,,,,782,782,782,782,782,782,782,,,782,,,,,,,782',
',,782,782,782,782,782,782,782,782,,782,782,782,,782,782,782,782,782',
',,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,,,,,,782,,,,,,,,,782,,',
',,782,782,782,782,,782,782,782,782,,,,,782,782,,,,783,783,783,782,783',
'782,782,782,783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783,783',
'783,783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783,783,783,783',
',783,783,783,,783,783,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783',
'783,,,783,,,,,,783,,,,,,,,,783,,,,,783,783,783,783,,783,783,783,783',
',,,,783,783,,,,250,250,250,783,250,783,783,783,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,',
',,250,250,250,250,,250,250,250,250,,,,,250,250,,,,785,785,785,250,785',
'250,250,250,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785',
'785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785',
',785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785',
'785,,,785,,,,,,785,,,,,,,,,785,,,,,785,785,785,785,,785,785,785,785',
',,,,785,785,,,,683,683,683,785,683,785,785,785,683,683,,,,683,,683,683',
'683,683,683,683,683,,,,,,683,683,683,683,683,683,683,,,683,,,,,,,683',
',,683,683,683,683,683,683,683,683,,683,683,683,,683,683,,,683,,,,,,',
',,,,,,,,,,,,,683,,,683,,,683,683,,,683,,,,,,,,,,,,,,,,,,,,683,683,683',
'683,,683,683,683,683,,,,,683,683,,,,274,274,274,683,274,683,683,683',
'274,274,,,,274,,274,274,274,274,274,274,274,,,,,,274,274,274,274,274',
'274,274,,,274,,,,,,,274,,,274,274,274,274,274,274,274,274,274,274,274',
'274,,274,274,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274',
',274,,274,,274,,,274,,,,,,274,,,,,274,274,274,274,,274,274,274,274,',
',,,274,274,274,,,705,705,705,274,705,274,274,274,705,705,,,,705,,705',
'705,705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,',
',705,,,705,705,705,705,705,705,705,705,,705,705,705,,705,705,705,705',
'705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,,705',
',,,,705,705,705,705,,705,705,705,705,,,,,705,705,,,,255,255,255,705',
'255,705,705,705,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,',
',255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255',
'255,,,,,255,255,,,,281,281,281,255,281,255,255,255,281,281,,,,281,,281',
'281,281,281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,',
',281,,,281,281,281,281,281,281,281,281,,281,281,281,,281,281,281,281',
'281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,,,,,281,,,,,,,,,281',
',,,,281,281,281,281,,281,281,281,281,,,,,281,281,,,,283,283,283,281',
'283,281,281,281,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283',
'283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283',
'283,,283,283,283,,283,283,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,',
',283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283,283,283,,283,283,283',
'283,,,,,283,283,,,,286,286,286,283,286,283,283,283,286,286,,,,286,,286',
'286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,',
',286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286,286,286',
'286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,,286',
',,,,286,286,286,286,,286,286,286,286,,,,,286,286,,,,287,287,287,286',
'287,286,286,286,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287',
'287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287',
'287,,287,287,287,,287,287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,',
',287,287,,,287,,,,,,287,,,,,,,,,287,,,,,287,287,287,287,,287,287,287',
'287,,,,,287,287,,,,249,249,249,287,249,287,287,287,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249',
',,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,,,,249,,249,249',
'249,292,292,292,292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,,292,292,292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292',
'292,292,292,292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,',
',,,,,292,,,292,,,292,292,,,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292',
'292,,292,292,292,292,,,,,292,292,,,,248,248,248,292,248,292,292,292',
'248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248',
'248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248',
',248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248',
',,,247,247,247,248,247,248,248,248,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,',
',,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247',
'247,,247,247,247,247,,,,,247,247,,,,325,325,325,247,325,247,247,247',
'325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325',
'325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325,325,325',
',325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325,,,325',
',,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325,325,,,,,325,325',
',,,731,731,731,325,731,325,325,325,731,731,,,,731,,731,731,731,731,731',
'731,731,,,,,,731,731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731',
'731,731,731,731,731,,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,',
',,,,,731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731',
'731,,731,731,731,731,,,,,731,731,,,,235,235,235,731,235,731,731,731',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,641,641,641,235,641,235,235,235,641,641,,,,641,,641,641,641,641,641',
'641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641',
'641,641,641,641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,',
',,,,,641,,,641,,,641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641',
'641,,641,641,641,641,,,,,641,641,,,,640,640,640,641,640,641,641,641',
'640,640,,,,640,,640,640,640,640,640,640,640,,,,,,640,640,640,640,640',
'640,640,,,640,,,,,,,640,,,640,640,640,640,640,640,640,640,,640,640,640',
',640,640,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,',
',,,640,,,,,,,,,640,,,,,640,640,640,640,,640,640,640,640,,,,,640,640',
',,,42,42,42,640,42,640,640,640,42,42,,,,42,,42,42,42,42,42,42,42,,,',
',,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42',
'42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,',
',,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43,42',
'42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,',
'43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,',
',,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43',
'43,,43,43,43,43,,,,,43,43,,,,234,234,234,43,234,43,43,43,234,234,,,',
'234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,',
'234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234',
'234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,',
',,,,,,234,,,,,234,234,234,234,,234,234,234,234,,,,,234,234,,,,636,636',
'636,234,636,234,234,234,636,636,,,,636,,636,636,636,636,636,636,636',
',,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636',
'636,636,636,,636,636,636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636',
',,636,,,636,636,,,636,,,,,,636,,,,,,,,,636,,,,,636,636,636,636,,636',
'636,636,636,,,,,636,636,,,,44,44,44,636,44,636,636,636,44,44,,,,44,',
'44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44',
'44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,',
'44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,',
'44,44,,,,635,635,635,44,635,44,44,44,635,635,,,,635,,635,635,635,635',
'635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635',
'635,635,635,635,635,635,,635,635,635,,635,635,635,635,635,,,,,,,,,,',
',,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635,,,,,635,635',
'635,635,,635,635,635,635,,,,,635,635,,,,634,634,634,635,634,635,635',
'635,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634,634,634',
'634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634,634,634',
'634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,634',
',,634,,,,634,,634,,,634,,,,,,634,,,,,634,634,634,634,,634,634,634,634',
',,,,634,634,,,,633,633,633,634,633,634,634,634,633,633,,,,633,,633,633',
'633,633,633,633,633,,,,,,633,633,633,633,633,633,633,,,633,,,,,,,633',
',,633,633,633,633,633,633,633,633,633,633,633,633,,633,633,633,633,633',
',,,,,,,,,,,,,,,,,,,633,,,633,,,633,633,,,633,,633,,633,,633,,,633,,',
',,,633,,,,,633,633,633,633,,633,633,633,633,,,,,633,633,,,,342,342,342',
'633,342,633,633,633,342,342,,,,342,,342,342,342,342,342,342,342,,,,',
',342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342',
'342,342,,342,342,342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342',
',,342,342,,,342,,,,,,342,,,,,,,,,342,,,,,342,342,342,342,,342,342,342',
'342,,,,,342,342,,,,343,343,343,342,343,342,342,342,343,343,,,,343,,343',
'343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,',
',343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343,343,343',
'343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,,343',
',,,,343,343,343,343,,343,343,343,343,,,,,343,343,,,,233,233,233,343',
'233,343,343,343,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233',
'233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233',
'233,,,,,233,233,,,,630,630,630,233,630,233,233,233,630,630,,,,630,,630',
'630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,',
',630,,,630,630,630,630,630,630,630,630,,630,630,630,,630,630,630,630',
'630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,,630',
',,,,630,630,630,630,,630,630,630,630,,,,,630,630,,,,,,,630,,630,630',
'630,629,629,629,629,629,,,,629,629,,,,629,,629,629,629,629,629,629,629',
',,,,,629,629,629,629,629,629,629,,,629,,,,,,629,629,,629,629,629,629',
'629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,',
',,,,,629,,,629,,,629,629,,,629,,629,,,,629,,,,,,,,,629,,,,,629,629,629',
'629,,629,629,629,629,,,,,629,629,,,,982,982,982,629,982,629,629,629',
'982,982,,,,982,,982,982,982,982,982,982,982,,,,,,982,982,982,982,982',
'982,982,,,982,,,,,,,982,,,982,982,982,982,982,982,982,982,982,982,982',
'982,,982,982,982,982,982,,,,,,,,,,,,,,,,,,,,982,,,982,,,982,982,,,982',
',982,,982,,982,,,982,,,,,,982,,,,,982,982,982,982,,982,982,982,982,',
',,,982,982,,,,626,626,626,982,626,982,982,982,626,626,,,,626,,626,626',
'626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626',
',,626,626,626,626,626,626,626,626,626,626,626,626,,626,626,626,626,626',
',,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,626,,626,,626,,,626,,',
',,,626,,,,,626,626,626,626,,626,626,626,626,,,,,626,626,,,,625,625,625',
'626,625,626,626,626,625,625,,,,625,,625,625,625,625,625,625,625,,,,',
',625,625,625,625,625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625',
'625,625,,625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625',
',,625,625,,,625,,,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625',
'625,,,,,625,625,,,,624,624,624,625,624,625,625,625,624,624,,,,624,,624',
'624,624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,',
',624,,,624,624,624,624,624,624,624,624,,624,624,624,,624,624,624,624',
'624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,624,,,,624,,,,,,,',
',624,,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,20,20,20,624',
'20,624,624,624,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20',
'20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20',
'20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20',
'20,20,20,,20,20,20,20,,,,,20,20,,,,230,230,230,20,230,20,20,20,230,230',
',,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230',
',,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,,230',
'230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230',
',,,,,,,,230,,,,,230,230,230,230,,230,230,230,230,,,,,230,230,,,,253',
'253,253,230,253,230,230,230,253,253,,,,253,,253,253,253,253,253,253',
'253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253',
'253,253,253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,',
',253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253',
',253,253,253,253,,,,,253,253,,,,,,,253,,253,253,253,58,58,58,58,58,',
',,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58,',
',,,,58,58,,58,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58,58,,,,',
',,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,58,,,,58,,,,,,,,,58,,,,,58,58,58',
'58,,58,58,58,58,,,,,58,58,,,,258,258,258,58,258,58,58,58,258,258,,,',
'258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,',
'258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258',
'258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,',
',,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,592,592',
'592,258,592,258,258,258,592,592,,,,592,,592,592,592,592,592,592,592',
',,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592',
'592,592,592,592,592,592,592,,592,592,592,592,592,,,,,,,,,,,,,,,,,,,',
'592,,,592,,,592,592,,,592,,592,,592,,592,,,592,,,,,,592,,,,,592,592',
'592,592,,592,592,592,592,,,,,592,592,,,,59,59,59,592,59,592,592,592',
'59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,',
',,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59,,,,,,,,',
',,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59,59,59',
'59,,59,59,59,59,,,,,59,59,,,,362,362,362,59,362,59,59,59,362,362,,,',
'362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,,',
'362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362',
'362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,,',
',,,,,,362,,,,,362,362,362,362,,362,362,362,362,,,,,362,362,,,,737,737',
'737,362,737,362,362,362,737,737,,,,737,,737,737,737,737,737,737,737',
',,,,,737,737,737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737,737',
'737,737,737,,737,737,737,,737,737,737,737,737,,,,,,,,,,,,,,,,,,,,737',
',,737,,,737,737,,,737,,,,,,737,,,,,,,,,737,,,,,737,737,737,737,,737',
'737,737,737,,,,,737,737,,,,252,252,252,737,252,737,737,737,252,252,',
',,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252',
',,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252',
'252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252',
',,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,688',
'688,688,252,688,252,252,252,688,688,,,,688,,688,688,688,688,688,688',
'688,,,,,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688',
'688,688,688,688,,688,688,688,,688,688,688,688,688,,,,,,,,,,,,,,,,,,',
',688,,,688,,,688,688,,,688,,688,,,,688,,,,,,,,,688,,,,,688,688,688,688',
',688,688,688,688,,,,,688,688,,,,759,759,759,688,759,688,688,688,759',
'759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759',
'759,,,759,,,,,,,759,,,759,759,759,759,759,759,759,759,,759,759,759,',
'759,759,759,759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,,,759,,,',
',,759,,,,,,,,,759,,,,,759,759,759,759,,759,759,759,759,,,,,759,759,',
',,378,378,378,759,378,759,759,759,378,378,,,,378,,378,378,378,378,378',
'378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,,,378,,,378,378,378',
'378,378,378,378,378,,378,378,378,,378,378,378,378,378,,,,,,,,,,,,,,',
',,,,,378,,,378,,,378,378,,,378,,,,,,378,,,,,,,,,378,,,,,378,378,378',
'378,,378,378,378,378,,,,,378,378,,,,60,60,60,378,60,378,378,378,60,60',
',,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60',
',,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,',
',,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60',
'60,60,,,,,60,60,,,,63,63,63,60,63,60,60,60,63,63,,,,63,,63,63,63,63',
'63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63',
'63,63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,',
',63,,,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,406',
'406,406,63,406,63,63,63,406,406,,,,406,,406,406,406,406,406,406,406',
',,,,,406,406,406,406,406,406,406,,,406,,,,,,,406,,,406,406,406,406,406',
'406,406,406,,406,406,406,,406,406,406,406,406,,,,,,,,,,,,,,,,,,,,406',
',,406,,,406,406,,,406,,,,,,406,,,,,,,,,406,,,,,406,406,406,406,,406',
'406,406,406,,,,,406,406,,,,64,64,64,406,64,406,406,406,64,64,,,,64,',
'64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64',
'64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,',
'64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,',
'64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67,,67,67,67,67,67,67,67,',
',,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,,,,,67,67,,67,67',
'67,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,',
',,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,',
'265,,,265,,,265,265,,,265,,265,,265,,265,,,265,,,,,,265,,,,,265,265',
'265,265,,265,265,265,265,,,,,265,265,,,,68,68,68,265,68,265,265,265',
'68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,',
',,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,',
',,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68',
'68,,,,,68,68,,,,69,69,69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69',
'69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69',
'69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,',
',,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69',
'70,69,69,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70',
'70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,',
',,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70',
',70,70,70,70,,,,,70,70,,,,582,582,582,70,582,70,70,70,582,582,,,,582',
',582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582,,,582',
',,,,,,582,,,582,582,582,582,582,582,582,582,582,582,582,582,,582,582',
'582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,582,,582,',
'582,,,582,,,,,,582,,,,,582,582,582,582,,582,582,582,582,,,,,582,582',
',,,581,581,581,582,581,582,582,582,581,581,,,,581,,581,581,581,581,581',
'581,581,,,,,,581,581,581,581,581,581,581,,,581,,,,,,,581,,,581,581,581',
'581,581,581,581,581,,581,581,581,,581,581,581,581,581,,,,,,,,,,,,,,',
',,,,,581,,,581,,,581,581,,,581,,581,,,,581,,,,,,,,,581,,,,,581,581,581',
'581,,581,581,581,581,,,,,581,581,,,,449,449,449,581,449,581,581,581',
'449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449,449,449,449,449',
'449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449,449,449,449',
'449,,449,449,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449,,,449,449,,,449',
',449,,449,,449,,,449,,,,,,449,,,,,449,449,449,449,,449,449,449,449,',
',,,449,449,,,,451,451,451,449,451,449,449,449,451,451,,,,451,,451,451',
'451,451,451,451,451,,,,,,451,451,451,451,451,451,451,,,451,,,,,,,451',
',,451,451,451,451,451,451,451,451,,451,451,451,,451,451,451,451,451',
',,,,,,,,,,,,,,,,,,,451,,,451,,,451,451,,,451,,,,,,451,,,,,,,,,451,,',
',,451,451,451,451,,451,451,451,451,,,,,451,451,,,,452,452,452,451,452',
'451,451,451,452,452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452',
'452,452,452,452,452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452',
',452,452,452,,452,452,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452',
'452,,,452,,,,,,452,,,,,,,,,452,,,,,452,452,452,452,,452,452,452,452',
',,,,452,452,,,,453,453,453,452,453,452,452,452,453,453,,,,453,,453,453',
'453,453,453,453,453,,,,,,453,453,453,453,453,453,453,,,453,,,,,,,453',
',,453,453,453,453,453,453,453,453,,453,453,453,,453,453,453,453,453',
',,,,,,,,,,,,,,,,,,,453,,,453,,,453,453,,,453,,,,,,453,,,,,,,,,453,,',
',,453,453,453,453,,453,453,453,453,,,,,453,453,,,,219,219,219,453,219',
'453,453,453,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219',
',,,,219,219,219,,,561,561,561,219,561,219,219,219,561,561,,,,561,,561',
'561,561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561,,,,,',
',561,,,561,561,561,561,561,561,561,561,,561,561,561,,561,561,561,561',
'561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,,,,,,561,,,,,,,,,561',
',,,,561,561,561,561,,561,561,561,561,,,,,561,561,,,,218,218,218,561',
'218,561,561,561,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218',
'218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218',
'218,,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,',
',218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218,218,218,218,,218,218,218',
'218,,,,,218,218,,,,217,217,217,218,217,218,218,218,217,217,,,,217,,217',
'217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,',
',217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217,217',
'217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217',
',,,,217,217,217,217,,217,217,217,217,,,,,217,217,,,,212,212,212,217',
'212,217,217,217,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212',
'212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212',
'212,212,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212',
',,212,212,,,212,,212,,212,,212,,,212,,,,,,212,,,,,212,212,212,212,,212',
'212,212,212,,,,,212,212,,,,116,116,116,212,116,212,212,212,116,116,',
',,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116,116,116',
',,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116,,116',
'116,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116',
',,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116,,,,,,,116',
',116,116,116,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'397,397,397,397,397,397,397,397,397,397,,,,397,397,397,397,397,397,397',
'397,397,397,,,,,,397,397,397,397,397,397,397,397,397,,,397,,,,,,,,397',
'397,,397,397,397,397,397,397,397,,,397,397,,,,397,397,397,397,,,,,,',
',,,,,,,397,397,,397,397,397,397,397,397,397,397,397,397,397,397,,,397',
'397,,,,,,,,,,,,,,397,621,621,621,621,621,621,621,621,621,621,621,621',
'621,621,621,621,621,621,621,621,621,621,621,621,,,,621,621,621,621,621',
'621,621,621,621,621,,,,,,621,621,621,621,621,621,621,621,621,,,621,',
',,,,,,621,621,,621,621,621,621,621,621,621,,,621,621,,,,621,621,621',
'621,,,,,,,,,,,,,,621,621,,621,621,621,621,621,621,621,621,621,621,621',
'621,,,621,621,,,,,,,,,,,,,,621,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9',
'9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9',
'9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8',
'8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8',
'8,8,8,8,,,8,8,,,,,,,,,,,,,,8,743,743,743,743,743,743,743,743,743,743',
'743,743,743,743,743,743,743,743,743,743,743,743,743,743,,,,743,743,743',
'743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,743,743',
',,743,,,,,,,,743,743,,743,743,743,743,743,743,743,,,743,743,,,,743,743',
'743,743,,,,,,,,,,,,,,743,743,,743,743,743,743,743,743,743,743,743,743',
'743,743,,,743,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71',
'71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71',
',,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71',
'71,514,514,71,,514,,,,,,,,514,514,,514,514,514,514,514,514,514,,,514',
'514,,,,514,514,514,514,,,,,,514,,,,,,,,514,514,,514,514,514,514,514',
'514,514,514,514,514,514,514,524,524,514,,524,,,,,,,,524,524,,524,524',
'524,524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,,,,,,,,524',
'524,,524,524,524,524,524,524,524,524,524,524,524,524,261,261,524,,261',
',,,,,,,261,261,,261,261,261,261,261,261,261,,,261,261,,,,261,261,261',
'261,,,,,,,,,,,,,,261,261,,261,261,261,261,261,261,261,261,261,261,261',
'261,213,213,261,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,,,213',
'213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213,213',
'213,213,213,213,213,213,213,214,214,213,,214,,,,,,,,214,214,,214,214',
'214,214,214,214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214',
'214,,214,214,214,214,214,214,214,214,214,214,214,214,515,515,214,,515',
',,,,,,,515,515,,515,515,515,515,515,515,515,,,515,515,,,,515,515,515',
'515,,,,,,515,,,,,,,,515,515,,515,515,515,515,515,515,515,515,515,515',
'515,515,979,979,515,,979,,,,,,,,979,979,,979,979,979,979,979,979,979',
',,979,979,,,,979,979,979,979,,,,,,979,,,,,,,,979,979,,979,979,979,979',
'979,979,979,979,979,979,979,979,591,591,979,,591,,,,,,,,591,591,,591',
'591,591,591,591,591,591,,,591,591,,,,591,591,591,591,,,,,,591,,,,,,',
',591,591,,591,591,591,591,591,591,591,591,591,591,591,591,590,590,591',
',590,,,,,,,,590,590,,590,590,590,590,590,590,590,,,590,590,,,,590,590',
'590,590,,,,,,590,,,,,,,,590,590,,590,590,590,590,590,590,590,590,590',
'590,590,590,525,525,590,,525,,,,,,,,525,525,,525,525,525,525,525,525',
'525,,,525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525',
'525,525,525,525,525,525,525,525,525,628,628,525,,628,,,,,,,,628,628',
',628,628,628,628,628,628,628,,,628,628,,,,628,628,628,628,,,,,,628,',
',,,,,,628,628,,628,628,628,628,628,628,628,628,628,628,628,628,627,627',
'628,,627,,,,,,,,627,627,,627,627,627,627,627,627,627,,,627,627,,,,627',
'627,627,627,,,,,,627,,,,,,,,627,627,,627,627,627,627,627,627,627,627',
'627,627,627,627,983,983,627,,983,,,,,,,,983,983,,983,983,983,983,983',
'983,983,,,983,983,,,,983,983,983,983,,,,,,983,,,,,,,,983,983,,983,983',
'983,983,983,983,983,983,983,983,983,983,984,984,983,,984,,,,,,,,984',
'984,,984,984,984,984,984,984,984,,,984,984,,,,984,984,984,984,,,,,,984',
',,,,,,,984,984,,984,984,984,984,984,984,984,984,984,984,984,984,448',
'448,984,,448,,,,,,,,448,448,,448,448,448,448,448,448,448,,,448,448,',
',,448,448,448,448,,,,,,448,,,,,,,,448,448,,448,448,448,448,448,448,448',
'448,448,448,448,448,447,447,448,,447,,,,,,,,447,447,,447,447,447,447',
'447,447,447,,,447,447,,,,447,447,447,447,,,,,,447,,,,,,,,447,447,,447',
'447,447,447,447,447,447,447,447,447,447,447,584,584,447,,584,,,,,,,',
'584,584,,584,584,584,584,584,584,584,,,584,584,,,,584,584,584,584,,',
',,,584,,,,,,,,584,584,,584,584,584,584,584,584,584,584,584,584,584,584',
'583,583,584,,583,,,,,,,,583,583,,583,583,583,583,583,583,583,,,583,583',
',,,583,583,583,583,,,,,,583,,,,,,,,583,583,,583,583,583,583,583,583',
'583,583,583,583,583,583,,541,583,541,541,541,541,541,,699,,699,699,699',
'699,699,541,,,,,,,,699,,701,,701,701,701,701,701,,,,,,541,,,701,,,,',
'699,541,541,541,541,,,,541,699,699,699,699,,,,699,701,,1003,,1003,1003',
'1003,1003,1003,701,701,701,701,,,,701,1003,,1001,,1001,1001,1001,1001',
'1001,,741,,741,741,741,741,741,1001,,,,,1003,,,741,,,,,,,,1003,1003',
',,,1003,1001,,,,,,,,741,1001,1001,1001,1001,,,,1001,741,741,741,741',
',,742,741,742,742,742,742,742,990,,990,990,990,990,990,,742,,,,,,338',
'990,338,338,338,338,338,,,,,,,,,338,742,,,,,,,990,,742,742,742,742,',
',,742,,990,990,,338,338,990,,,,,,,338,338,338,338,,,892,338,892,892',
'892,892,892,894,,894,894,894,894,894,896,892,896,896,896,896,896,898',
'894,898,898,898,898,898,930,896,930,930,930,930,930,,898,892,,,,,,930',
'894,,892,892,892,892,,896,,892,,894,894,,898,,894,,896,896,,930,,896',
',898,898,,,,898,,930,930,,,926,930,926,926,926,926,926,,,,,,,,,926,',
',,,,,,,,,,,,,,,,,,,,926,,,,,,,,,926,926,926,926,,,,926' ]
        racc_action_check = arr = ::Array.new(25327, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4215,    30,   nil,   422,   nil,  7605,  1206,   -32, 23527, 23399,
   -18,   nil,     4,    54,   584,   130,  1132,   361,   nil,   -72,
 18665,  2115,   281,   nil,   259,   nil,   151,  1124,  1366,  5886,
  6148,  6410,   nil,  4775,  7335,  7466,   nil,   208,   284,   397,
   293,   227, 16430, 16561, 16954,   253,   822,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1693,   nil, 19066, 19459,
 20376,   -15,   nil, 20507, 20769,   nil,   nil, 20900, 21170, 21301,
 21432, 23768,   nil,   nil,   nil,   nil,   nil,   524,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   602,   nil,   nil,   382,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   407,
   nil,  9971,   nil,   nil,   nil,   nil, 23004, 12083, 12214, 12885,
 11821,  5195,   nil,   -25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   283,   nil,  3655, 10896, 10765, 10634,
 10503, 10110, 22873, 24012, 24073,   nil,   nil, 22742, 22611, 22349,
   nil,   nil,  1029,   268,   360,   365,   121,   285,   344,   nil,
 18796,  5055,   353, 17740, 16692, 16037,  9701,  9570,  9439,  9308,
  9177,  9046,  8784,  8653,  8260,  7998,  6811, 15644, 15513, 15243,
 13933, 11952, 19852, 18927, 13016, 14588,  6680,  7204, 19197,   nil,
   nil, 23951,   nil,   nil,   348, 21039, 13278,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 14326,   nil,  2395,   nil,   330,   341,
   nil, 14719,   394, 14850,   nil,   nil, 14981, 15112,   nil,   nil,
   100,   nil, 15382,  1116,   406,   393,  1975,   443,   487,   447,
  6541,  3935,   572,   574,   643,   528,   712,   nil,   500,   461,
     6,   nil,   nil,   nil,   504,   300,   463,  8915,   nil,   298,
   538,   788,   nil,   540,   nil, 15775,  2955,   978,   478,   nil,
   135,   -70,   537,   519,   423,   549,   nil,   nil, 25090,   474,
    73,    69, 17478, 17609,   392,   630,   513,    67,    11,   861,
   595,   -23,   631,   nil,   nil,  1092,   495,   -40,   nil,   891,
   nil,   554, 19590,   nil,   nil,   nil,   320,   402,   439,   470,
   471,   576,   580,   610,   622,   nil,   642,   nil, 20245,   nil,
   171,   153,   413,   372,   312,   -39,   -34,   417,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   553, 23143,   nil,   nil,
   nil,   nil,   570,   nil,   nil,   557, 20638,   558,   nil,   nil,
   550,   nil,   960,   190,   654,   nil,   nil,  1835,   nil,   nil,
   nil,   nil,   nil,  1975,   571,   nil,   584,   588,   272,   196,
  1256,   nil,   nil,   nil,   492,   740,   634,   nil,   nil,  1478,
   988,   nil,   nil,   nil,   -13,   nil,   634, 24744, 24683, 21825,
   328, 21956, 22087, 22218,  3095,  3235,   672,   135,   659,   662,
   664,   665,  4495,  4775,  4635,  3795,  1581,  3935,  1207,  1429,
  3515,  3655,  4215,  4075,  4355,  1041,   697,  2955,  3375,  2675,
   nil,  1614,   nil,   nil,   nil,   nil,   611,   nil,   nil,   nil,
   612,   nil,   nil, 12345,   nil, 12476,   nil, 12607,   nil,   149,
   nil,   nil,   nil, 12746,  1441,  4355,   613,   613,   nil,   nil,
   618, 11682,   627, 11551, 23829, 24134,   992,   669,   nil, 11420,
   626,   nil, 11289, 11158, 23890, 24378,  2815, 11027,   754,   757,
   638,   679,   nil, 10372,   nil,   nil, 10241,   nil,   nil,   nil,
   nil, 24928,   nil,   639,   640,   nil,   645,   653,   654,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   645,   992,   nil,
   nil, 22480,   nil,   nil,   nil,   741,   nil,   nil,   nil,   746,
   nil,   nil,   753,  2255,   809,   nil,  4495,   132,   131,   816,
   827, 21694, 21563, 24866, 24805,     5,   nil,   nil,  1135,   nil,
 24317, 24256, 19328,   nil,   nil,   -34,  4915,   748,   nil,    16,
   nil,   nil,   nil,   492,   nil,   nil,   nil,   722,   nil,   nil,
   239,   nil,   309,   nil,   nil,   710,   nil,   721,   nil,   nil,
   nil, 23271,   nil,   723, 18534, 18403, 18272, 24500, 24439, 18010,
 17871,   302,   766, 17347, 17216, 17085, 16823,   765,   nil,   nil,
 16299, 16168,   772,   nil,   nil,   nil,   -54,   -82,   244,   850,
   739,   742,   870,   nil,   853,   -13,   nil,   nil,   771,   -54,
   876,   nil,   755,   nil,   807,  8522,   nil,   nil,  8391,   nil,
   783,   -84,  8129,   765,   nil,   770,   202,   270,   812,   235,
  1334,   814,   772, 14195,   nil,   841,    20,   894, 19983,   nil,
   nil,   nil,   337,    36,   779,   735,   nil,   nil,   293, 24936,
   nil, 24953,   nil,  6588,   nil, 14457,   nil,  1057,   nil,   777,
   247,   782,   nil,   nil,   nil,   nil,   215,   nil,   900,   nil,
   nil,   nil,   nil,   922,   nil,     6,   805,   -19,    41,    26,
    27, 15906,   678,   570,   nil,   809,  4075, 19721,   nil,   932,
  3515, 25017, 25069, 23655,   nil,   nil,   nil,   nil,   nil,   nil,
  3235,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   809, 20114,
   817,   148,   107,     0,   112,   nil,  2255, 13147,   nil,   816,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 13409, 13540, 13671, 13802,   106, 14064,   nil,   -47,   nil,   nil,
   838,   nil,   nil,  1187,   nil,  2115,   nil,   nil,   nil,   nil,
   nil,   832,   269,   nil,   nil,   958,   nil,  3375,   839,   887,
   nil,   nil,   nil,   nil,   nil,   nil,   841,   888,   846,   nil,
   nil,   nil,   853,   856,   nil,   857,   858,   nil,   861,   nil,
   nil,   868,   954,   866,  1657,   nil,   997,   nil,  6017,  1001,
  2535,  2675,   nil,  6279,  2815,     1,   106,   nil,  1003,   391,
  3795,   nil,  1013,   893,   372,   nil,   899,   899,    89,   nil,
   nil,  6942,  7073,  2535,  4635,   nil,   901,   902,   nil,   903,
   905,   906,   nil,   931,   911,   905,  7736,   nil,   nil,   nil,
   nil,  5475,   nil,   nil,    26,  7867,   nil,  5755,  1835,   774,
   nil,   nil, 25142,   nil, 25149,   nil, 25156,   nil, 25163,   nil,
   nil,   nil,   nil,   252,  1249,   917,   nil,    42,   nil,  1043,
  1059,   nil,   232,   nil,   nil,   nil,  1064,   nil,   nil,   nil,
   985,   nil,   nil,   694,   nil,   nil, 25222,   nil,  1578,   nil,
 25170,   nil,   nil,   968,  9832,   818,  1024,   nil,  3095,    76,
    92,   820,  1028,    36,   nil,   974,  1083,   296,   nil,   nil,
   nil,   965,   970,   971,   972,   976,  1549,   983,  1471,  2395,
   nil,   nil,   nil,   nil,   nil,  5615,   nil,  5335,   993,   nil,
   nil,   994,   995,   996,  1002,   nil,  1008,   nil,   540, 24195,
   nil,  1135, 18141, 24561, 24622,    32,   nil,   nil,   nil,   916,
 25076,   nil,   nil,   nil,   nil,  1359,  1015,   573,  1143,  1144,
   nil, 25009,   nil, 24992,   nil, 11729,   nil,  9879,   nil,   nil,
  1073,  1079,   nil,  1040,    10,    -6,    34,    33,   nil,  1039,
  1040,   nil,   nil,   nil,  1041,  1042,  1044,  1045,    35,   nil,
  7513,   nil,   nil,   nil,   nil,  -114,   nil ]

racc_action_default = [
    -3,  -604,    -1,  -590,    -4,  -604,    -7,  -604,  -604,  -604,
  -604,   -29,  -604,  -604,   -33,  -604,  -604,  -281,   -45,  -592,
  -604,   -50,   -52,   -53,   -54,   -58,  -258,  -258,  -258,  -294,
  -329,  -330,   -70,   -11,   -74,   -82,   -84,  -604,  -494,  -495,
  -604,  -604,  -604,  -604,  -604,  -592,  -237,  -272,  -273,  -274,
  -275,  -276,  -277,  -278,  -279,  -280,  -578,  -283,  -287,  -603,
  -568,  -302,  -390,  -604,  -604,  -307,  -310,  -590,  -604,  -604,
  -604,  -604,  -331,  -332,  -435,  -436,  -437,  -438,  -439,  -460,
  -442,  -443,  -462,  -464,  -447,  -452,  -456,  -458,  -474,  -462,
  -476,  -478,  -479,  -480,  -481,  -576,  -483,  -484,  -577,  -486,
  -487,  -488,  -489,  -490,  -491,  -492,  -493,  -498,  -499,  -604,
    -2,  -591,  -599,  -600,  -601,    -6,  -604,  -604,  -604,  -604,
  -604,    -3,   -17,  -604,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,   -22,  -122,   -11,  -604,  -604,  -604,
  -604,  -604,  -248,  -604,  -604,  -588,  -589,  -604,  -604,  -592,
  -593,   -49,  -604,  -494,  -495,  -604,  -281,  -604,  -604,  -229,
  -604,   -11,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -399,
  -401,  -604,  -586,  -587,   -59,  -248,  -604,  -301,  -405,  -414,
  -416,   -65,  -411,   -66,  -592,   -67,  -238,  -253,  -262,  -262,
  -257,  -604,  -263,  -604,  -460,  -570,  -604,  -604,   -68,   -69,
  -590,   -12,  -604,   -15,  -604,   -72,   -11,  -592,  -604,   -75,
   -78,   -11,   -90,   -91,  -604,  -604,   -98,  -294,  -297,  -592,
  -604,  -329,  -330,  -333,  -412,  -604,   -80,  -604,   -86,  -291,
  -477,  -604,  -214,  -215,  -230,  -604,   -11,  -285,  -592,  -239,
  -596,  -596,  -604,  -604,  -596,  -604,  -303,  -304,  -526,   -51,
  -604,  -604,  -604,  -604,  -590,  -604,  -591,  -494,  -495,  -604,
  -604,  -281,  -604,  -343,  -344,  -108,  -109,  -604,  -111,  -604,
  -281,  -502,  -604,  -494,  -495,  -322,  -113,  -114,  -155,  -156,
  -157,  -173,  -178,  -185,  -188,  -324,  -604,  -566,  -604,  -440,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  1037,    -5,
  -602,   -23,   -24,   -25,   -26,   -27,  -604,  -604,   -19,   -20,
   -21,  -123,  -604,   -30,   -32,  -268,  -604,  -604,  -267,   -31,
  -604,   -34,  -604,  -281,   -42,   -44,  -196,  -243,  -263,   -46,
   -47,   -35,  -197,  -243,  -592,  -249,  -262,  -262,  -579,  -580,
  -258,  -409,  -581,  -582,  -580,  -579,  -258,  -408,  -410,  -581,
  -582,   -41,  -204,   -48,  -592,  -300,  -604,  -604,  -604,  -248,
  -291,  -604,  -604,  -604,  -205,  -206,  -207,  -208,  -209,  -210,
  -211,  -212,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -227,  -228,  -231,  -232,  -233,  -234,  -592,
  -420,  -258,  -579,  -580,   -56,   -60,  -592,  -259,  -418,  -420,
  -592,  -296,  -254,  -604,  -255,  -604,  -260,  -604,  -264,  -604,
  -573,  -575,   -10,  -591,   -14,    -3,  -592,   -71,  -289,   -87,
   -76,  -604,  -592,  -248,  -604,  -604,   -97,  -604,  -477,  -604,
   -83,   -88,  -604,  -604,  -604,  -604,  -235,  -604,  -427,  -604,
  -592,  -604,  -240,  -598,  -597,  -242,  -598,  -292,  -293,  -569,
  -391,  -526,  -394,  -565,  -565,  -509,  -511,  -511,  -511,  -525,
  -527,  -528,  -529,  -530,  -531,  -532,  -533,  -534,  -604,  -536,
  -538,  -540,  -545,  -547,  -548,  -550,  -555,  -557,  -558,  -560,
  -561,  -562,  -604,   -11,  -334,  -335,   -11,  -604,  -604,  -604,
  -604,  -604,  -248,  -604,  -604,  -291,  -315,  -108,  -109,  -110,
  -604,  -604,  -248,  -318,  -500,  -604,   -11,  -504,  -326,  -592,
  -441,  -461,  -466,  -604,  -468,  -444,  -463,  -604,  -465,  -446,
  -604,  -449,  -604,  -451,  -454,  -604,  -455,  -604,  -475,    -8,
   -18,  -604,   -28,  -271,  -604,  -604,  -248,  -604,  -604,  -604,
  -604,  -413,  -604,  -250,  -252,  -604,  -604,   -61,  -247,  -406,
  -604,  -604,   -63,  -407,  -299,  -594,  -579,  -580,  -579,  -580,
  -592,  -604,  -604,  -421,   -55,  -402,  -418,  -245,  -604,  -379,
  -604,  -295,  -262,  -261,  -265,  -604,  -571,  -572,  -604,   -13,
  -604,   -73,  -604,   -79,   -85,  -592,  -579,  -580,  -246,  -583,
   -96,  -604,   -81,  -604,  -203,  -213,  -592,  -603,  -603,  -284,
  -286,  -288,  -596,  -604,  -592,  -604,  -507,  -508,  -604,  -604,
  -518,  -604,  -521,  -604,  -523,  -604,  -345,  -604,  -347,  -349,
  -356,  -592,  -539,  -549,  -559,  -563,  -603,  -336,  -603,  -308,
  -337,  -338,  -311,  -604,  -314,  -604,  -592,  -579,  -580,  -583,
  -290,  -604,  -108,  -109,  -112,  -592,   -11,  -604,  -320,  -604,
   -11,  -526,  -526,  -604,  -567,  -467,  -470,  -471,  -472,  -473,
   -11,  -445,  -448,  -450,  -453,  -457,  -459,  -124,  -269,  -604,
  -592,  -579,  -580,  -580,  -579,   -43,  -244,  -604,  -595,  -262,
   -37,  -199,   -38,  -200,   -62,   -39,  -202,   -40,  -201,   -64,
  -604,  -604,  -604,  -604,  -413,  -604,  -400,  -379,  -404,  -403,
  -604,  -415,  -380,  -592,  -382,   -11,  -417,  -256,  -266,  -574,
   -16,   -77,  -413,   -89,  -298,  -603,  -341,   -11,  -428,  -603,
  -429,  -430,  -241,  -392,  -395,  -397,  -384,  -604,  -565,  -546,
  -564,  -510,  -511,  -511,  -537,  -511,  -511,  -556,  -511,  -534,
  -551,  -592,  -604,  -354,  -604,  -535,  -604,  -339,  -604,  -604,
   -11,   -11,  -313,  -604,   -11,  -413,  -604,  -413,  -604,  -604,
   -11,  -323,  -604,  -592,  -604,  -327,  -604,  -270,  -413,   -36,
  -198,  -251,  -604,  -236,   -11,   -57,  -565,  -565,  -361,  -363,
  -363,  -363,  -378,  -604,  -592,  -534,  -542,  -543,  -553,  -419,
    -9,   -11,  -434,  -342,  -604,  -604,  -432,   -11,   -11,  -604,
  -393,  -506,  -604,  -514,  -604,  -516,  -604,  -519,  -604,  -522,
  -524,  -346,  -348,  -352,  -604,  -357,  -305,  -604,  -306,  -604,
  -604,  -265,  -603,  -316,  -319,  -501,  -604,  -325,  -503,  -505,
  -504,  -469,  -422,  -604,  -359,  -360,  -369,  -371,  -604,  -374,
  -604,  -376,  -381,  -604,  -604,  -541,  -604,  -433,   -11,  -494,
  -495,  -604,  -604,  -281,  -431,  -604,  -604,  -592,  -386,  -388,
  -389,  -511,  -511,  -511,  -511,  -350,  -604,  -355,  -604,   -11,
  -309,  -312,  -423,  -424,  -425,   -11,  -321,   -11,  -565,  -544,
  -362,  -363,  -363,  -363,  -363,  -554,  -363,  -383,  -552,  -604,
  -291,  -427,  -248,  -604,  -604,  -291,  -396,  -398,  -385,  -604,
  -604,  -512,  -515,  -517,  -520,  -604,  -353,  -603,  -604,  -604,
  -358,  -604,  -366,  -604,  -368,  -604,  -372,  -604,  -375,  -377,
  -290,  -583,  -426,  -592,  -579,  -580,  -583,  -290,  -387,  -511,
  -351,  -340,  -317,  -328,  -363,  -363,  -363,  -363,  -413,  -513,
  -604,  -364,  -367,  -370,  -373,  -363,  -365 ]

clist = [
'218,213,221,26,260,375,336,424,26,262,529,329,687,494,114,430,436,408',
'409,580,299,127,127,26,132,132,325,2,485,740,6,631,26,26,26,6,26,557',
'666,122,205,111,130,130,542,706,278,278,278,277,277,277,573,576,110',
'663,836,663,320,261,486,26,520,481,313,313,26,26,549,589,26,264,271',
'273,719,722,330,658,114,666,279,279,279,316,127,696,697,380,327,711',
'298,295,268,272,297,805,827,905,313,313,313,817,870,950,340,341,948',
'902,344,795,331,334,115,383,26,361,365,880,345,26,26,26,26,26,26,975',
'839,381,415,652,669,415,204,421,387,354,824,415,660,441,404,6,532,535',
'610,612,539,397,396,656,395,6,621,332,655,377,333,391,392,393,394,494',
'275,288,289,337,352,957,593,376,326,530,328,342,840,343,841,666,731',
'965,736,850,596,597,743,606,608,611,611,403,414,606,920,414,706,663',
'663,833,975,414,873,872,874,950,947,540,1018,447,813,26,26,26,26,26',
'26,26,338,693,389,996,26,26,26,887,407,407,888,440,480,823,488,825,277',
'902,26,971,489,864,831,787,557,335,962,809,650,790,884,694,379,430,436',
'382,1,723,384,385,673,784,1020,386,745,750,737,402,682,822,819,422,26',
'26,969,549,,442,,,,26,,431,739,933,802,278,,277,277,827,298,514,517',
'278,499,,277,26,,,,26,,114,734,521,26,,524,,675,531,,,,,,,678,279,,706',
'963,706,504,871,,279,678,,503,26,313,,518,845,583,824,,1021,,,,502,847',
'913,,26,26,313,510,,,,967,298,295,114,,506,298,295,891,262,512,824,',
'26,,858,,,,,,,,,268,726,,,272,26,,577,578,678,,735,405,418,955,706,',
'678,,579,797,627,557,487,557,774,,,666,632,779,490,924,925,127,598,',
'132,753,,753,801,,,848,760,951,663,852,,,,620,430,436,130,,,,,,844,',
',557,557,,706,824,706,,853,854,,,,26,,16,,972,,973,16,651,440,496,,498',
'1012,,500,501,277,,549,549,,222,637,,,,,,642,706,222,222,222,,16,304',
'304,,,875,,,,638,521,810,,,,643,797,812,521,26,442,26,422,1000,,16,431',
',,26,222,222,,,222,349,359,359,,654,,440,,26,1024,670,277,916,6,,,440',
',,313,,,662,415,,638,,313,,,,,,415,415,770,772,,415,415,775,777,,16',
',,,,222,222,222,222,16,16,26,,684,26,431,,,,692,26,964,623,720,720,431',
'557,,,,26,938,440,725,26,789,,277,440,,,738,414,,,,,277,,,,,414,414',
'959,1028,,414,414,,875,,875,26,26,716,632,26,718,127,,788,132,26,26',
'811,440,,26,26,,277,,,431,,999,757,,,130,632,431,521,765,16,222,412',
'222,222,412,222,,,803,,412,222,222,664,816,335,855,667,,,,,,769,16,',
'415,,859,,771,773,431,,,776,778,,,875,,313,,,407,,632,,,,,,313,664,',
'632,335,,222,222,,,,,,,,222,826,,828,,,26,,,,,26,26,632,712,26,638,',
'16,643,,414,16,,,26,304,16,127,882,,,38,886,418,,,38,,,,,26,304,846',
',816,,,1013,849,,16,,,,,678,,,,,,,,38,302,302,222,222,26,,,,,,,758,',
'856,,,26,,,,664,335,222,,38,,,869,,860,,,,,347,363,363,363,222,,818',
',771,773,778,776,,26,,26,26,445,798,26,,799,,,879,26,,816,,720,,,915',
',,,883,919,,26,,808,,38,,,,,,,,907,38,38,,,26,,830,,,820,26,26,820,',
',,,909,910,,491,912,,222,,,313,,,,,,,,,313,,,860,,952,922,953,507,954',
',983,,988,,,,867,,,,,,937,,857,26,,17,945,946,,,17,,,339,339,,,339,974',
'16,976,16,,,26,,313,304,38,222,26,,26,,,304,,,17,306,306,,,222,,,,26',
',868,,,,38,440,,632,981,,440,,,,17,277,,339,339,339,339,,,,351,360,360',
',,997,,1019,,,,998,,911,,,16,,1025,16,1026,,1027,,,222,,,,,,335,876',
',,222,,,431,16,,38,,17,,38,,1035,,302,38,968,17,17,867,,867,,867,644',
',,,,,,302,,412,222,,,16,,,38,,,412,412,,,,412,412,,419,420,,700,702',
'704,,,,443,444,,,,,657,,,,661,820,,,868,,868,,868,,304,,,,,,671,,,,',
'304,674,,867,,867,,867,,867,,,17,,413,,,413,,690,,,,413,,,,,,,,,867',
',,,876,17,,876,,876,,876,,,,,222,,,,,16,222,,,16,868,,868,,868,,868',
',,16,,,,,,,,,,,,,,,,,412,,,868,744,,,,,339,339,,,,17,,,,17,,,,306,17',
'927,929,931,,16,595,876,,876,,876,,876,,,306,16,,38,,38,599,,,17,,302',
',,,,,,,302,876,,,,,,,,,,,,222,,16,16,,,16,,,,,,16,,,,,,,,804,,,,,,16',
',15,,,,,15,,,,,935,,,38,,16,38,835,39,941,,16,16,39,,,,1002,1004,1006',
'1008,,1009,15,,,38,,,,,,,,,,,,,,,39,303,303,,,893,895,15,897,899,,900',
',,,,,978,38,,,16,,,,39,,,,1031,1032,1033,1034,,,348,364,364,364,,1036',
',16,,686,,,,16,,16,,,,,,,,,,15,302,,,,222,,,,15,15,,302,,,17,,17,39',
',,,,306,,,901,39,39,,,306,,,,,,,,,,,,,,,,,918,,,,,,,,,,,,,,,,,38,,,',
'38,,,,,991,992,993,994,,38,,,,,,17,,,17,,,,,,,15,,15,,,15,,,,,,15,,17',
',,,,39,,749,,,,,15,,,,38,,,,,,,,,,,,38,413,39,,,17,1029,,,,,413,413',
',,,413,413,,,,,,,,,,,,,,,,38,38,,,38,,,,,,38,,15,,,306,15,,,339,,15',
',,38,339,306,,,,39,,,,39,,363,,303,39,,38,,,,939,15,38,38,,,,,,,303',
',,,,,,,,39,,,,,,,,,,,,,,,17,,,,17,,,,,,,,,,17,363,,,,38,,,,,,,,,,,,413',
',,,,,,,,38,,,,,,38,339,38,,,,13,,,,,13,,17,,,,,,,,,,,,17,,,,,,,,,,,',
',,13,,,,,,,,,,,,,,,,,,,17,17,,,17,,13,,,,17,,,,,,353,,,,,,,,17,,,,,',
',,,,,,360,,,,15,17,15,,,943,,17,17,,,,,,,,,,39,13,39,,,,,,303,,13,13',
',,,,303,,,,,,,,,,,,,,,,,,,,360,,,,17,,,,,,,,,,,,15,,,15,,,,,,17,,,,',
',17,,17,39,,,39,,15,,,,,,,,,,,,,,,,,,39,,,13,,410,,,410,,,15,,,410,15',
',,,,,15,15,,,,15,15,13,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,303,,,,,,,,,,,303,,13,,,,13,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,15,13',
',,15,,,,,,,,,,15,,,,39,,,,39,,,,,,,,,15,39,,,,,,,,,,,,,,,,,,,,,,,,,',
',15,,,,,,,,,,,,15,,,,,,39,,,,,,,,,,,,39,,,,,,,,,,,,,,,15,15,,,15,,,',
',,15,,,,,,,,39,39,,,39,,15,,,,39,,,,,,,,,,,,,15,39,,,,,15,15,,,,,,364',
',,,,39,,,,940,,39,39,,229,,,,,,13,,13,276,276,276,,,,,,,,,,,322,323',
'324,,,,,,15,,,,,,,,,276,276,,,,364,,,,39,,,15,,,,,,15,,15,,,,,,,,,,39',
',,,,,39,13,39,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'410,,,,13,,,,,,410,410,,,,410,410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,276,417,,,423,276,,,,,423,,,,,,,,,,,,,229,,,454,455,456,457',
'458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474',
'475,476,477,478,479,13,,,,13,,276,276,,,,,,,13,276,,,,,,,276,,276,,',
'276,276,,,410,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,526,,,,,13,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,13,13,,,13,,,,,,13,,,,,,,,,,,,,,13,,,,,,,,',
',,,,,,,,13,,276,,944,,13,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276',
',423,423,423,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,13,,,,,,13,,13,,,276,,276',
',276,,,,,,,,,,,,,,,,276,,,,,,,,,423,685,,,,,,,,,,276,,,276,,,,,,,,,',
',,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,276,423,276,,,,766,,,276,276,423,423,,,,423,423',
',,,,,,,,,,,,,,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,',
',,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,',
',,,,423,,,,,,,,,,,,,423,423,423,423,,863,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,276,423,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3191, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'33,31,20,43,141,58,89,29,43,31,8,70,10,76,98,39,39,22,22,95,51,59,59',
'43,63,63,33,2,41,99,7,30,43,43,43,7,43,175,185,15,15,6,62,62,140,117',
'71,71,71,35,35,35,92,92,4,77,93,77,66,38,29,43,53,39,67,67,43,43,170',
'56,43,40,40,40,94,94,71,42,98,185,73,73,73,52,59,123,123,158,7,118,9',
'47,74,74,48,11,181,119,67,67,67,132,128,135,17,17,134,116,17,130,73',
'73,5,161,43,57,57,12,4,43,43,43,43,43,43,182,11,159,18,144,14,18,16',
'26,159,19,176,18,144,26,23,7,72,72,162,162,72,25,2,44,7,7,64,69,75,87',
'88,17,17,17,17,76,46,46,46,91,96,119,97,100,101,102,103,104,105,106',
'107,185,108,109,110,111,112,113,114,163,163,163,163,20,20,163,115,20',
'117,77,77,117,182,20,132,120,126,135,133,136,134,31,137,43,43,43,43',
'43,43,43,138,139,5,119,43,43,43,142,71,71,143,59,145,129,147,129,35',
'116,43,128,148,130,118,151,175,68,152,153,29,42,154,140,157,39,39,160',
'1,95,164,165,53,30,119,166,167,168,169,9,53,174,178,65,43,43,179,170',
',65,,,,43,,74,8,132,30,71,,35,35,181,9,31,33,71,158,,35,43,,,,43,,98',
'56,51,43,,31,,29,33,,,,,,,39,73,,117,11,117,7,129,,73,39,,6,43,67,,66',
'30,31,176,,93,,,,4,30,94,,43,43,67,52,,,,99,9,47,98,,48,9,47,123,31',
'48,176,,43,,30,,,,,,,,,74,29,,,74,43,,17,17,39,,29,68,68,117,117,,39',
',4,76,31,175,46,175,41,,,185,33,41,46,123,123,59,38,,63,163,,163,53',
',,8,29,129,77,8,,,,15,39,39,62,,,,,,92,,,175,175,,117,176,117,,140,140',
',,,43,,28,,129,,129,28,33,59,68,,68,10,,68,68,35,,170,170,,28,40,,,',
',,40,117,28,28,28,,28,28,28,,,175,,,,74,51,22,,,,74,76,72,51,43,65,43',
'65,123,,28,74,,,43,28,28,,,28,28,28,28,,40,,59,,43,129,2,35,8,7,,,59',
',,67,,,73,18,,74,,67,,,,,,18,18,26,26,,18,18,26,26,,28,,,,,28,28,28',
'28,28,28,43,,65,43,74,,,,73,43,95,68,98,98,74,175,,,,43,92,59,71,43',
'89,,35,59,,,98,20,,,,,35,,,,,20,20,92,30,,20,20,,175,,175,43,43,9,33',
'43,9,59,,141,63,43,43,70,59,,43,43,,35,,,74,,8,15,,,62,33,74,51,7,28',
'28,28,28,28,28,28,,,51,,28,28,28,68,33,68,58,68,,,,,,73,28,,18,,26,',
'65,65,74,,,65,65,,,175,,67,,,71,,33,,,,,,67,68,,33,68,,28,28,,,,,,,',
'28,127,,127,,,43,,,,,43,43,33,68,43,74,,28,74,,20,28,,,43,28,28,59,70',
',,54,70,68,,,54,,,,,43,28,17,,33,,,29,17,,28,,,,,39,,,,,,,,54,54,54',
'28,28,43,,,,,,,68,,9,,,43,,,,68,68,28,,54,,,127,,65,,,,,54,54,54,54',
'28,,122,,65,65,65,65,,43,,43,43,49,68,43,,68,,,9,43,,33,,98,,,98,,,',
'9,98,,43,,68,,54,,,,,,,,17,54,54,,,43,,68,,,124,43,43,124,,,,,9,9,,49',
'9,,28,,,67,,,,,,,,,67,,,65,,127,9,127,49,127,,31,,33,,,,122,,,,,,9,',
'68,43,,32,9,9,,,32,,,24,24,,,24,127,28,127,28,,,43,,67,28,54,28,43,',
'43,,,28,,,32,32,32,,,28,,,,43,,124,,,,54,59,,33,9,,59,,,,32,35,,24,24',
'24,24,,,,32,32,32,,,9,,127,,,,9,,68,,,28,,127,28,127,,127,,,28,,,,,',
'68,177,,,28,,,74,28,,54,,32,,54,,127,,54,54,122,32,32,122,,122,,122',
'49,,,,,,,54,,28,28,,,28,,,54,,,28,28,,,,28,28,,24,24,,173,173,173,,',
',24,24,,,,,49,,,,49,124,,,124,,124,,124,,28,,,,,,49,,,,,28,49,,122,',
'122,,122,,122,,,32,,32,,,32,,49,,,,32,,,,,,,,,122,,,,177,32,,177,,177',
',177,,,,,28,,,,,28,28,,,28,124,,124,,124,,124,,,28,,,,,,,,,,,,,,,,,28',
',,124,49,,,,,24,24,,,,32,,,,32,,,,32,32,125,125,125,,28,24,177,,177',
',177,,177,,,32,28,,54,,54,24,,,32,,54,,,,,,,,54,177,,,,,,,,,,,,28,,28',
'28,,,28,,,,,,28,,,,,,,,49,,,,,,28,,27,,,,,27,,,,,28,,,54,,28,54,49,55',
'28,,28,28,55,,,,125,125,125,125,,125,27,,,54,,,,,,,,,,,,,,,55,55,55',
',,173,173,27,173,173,,173,,,,,,28,54,,,28,,,,55,,,,125,125,125,125,',
',55,55,55,55,,125,,28,,24,,,,28,,28,,,,,,,,,,27,54,,,,28,,,,27,27,,54',
',,32,,32,55,,,,,32,,,49,55,55,,,32,,,,,,,,,,,,,,,,,49,,,,,,,,,,,,,,',
',,54,,,,54,,,,,173,173,173,173,,54,,,,,,32,,,32,,,,,,,27,,27,,,27,,',
',,,27,,32,,,,,55,,32,,,,,27,,,,54,,,,,,,,,,,,54,32,55,,,32,173,,,,,32',
'32,,,,32,32,,,,,,,,,,,,,,,,54,54,,,54,,,,,,54,,27,,,32,27,,,24,,27,',
',54,24,32,,,,55,,,,55,,54,,55,55,,54,,,,54,27,54,54,,,,,,,55,,,,,,,',
',55,,,,,,,,,,,,,,,32,,,,32,,,,,,,,,,32,54,,,,54,,,,,,,,,,,,32,,,,,,',
',,54,,,,,,54,24,54,,,,21,,,,,21,,32,,,,,,,,,,,,32,,,,,,,,,,,,,,21,,',
',,,,,,,,,,,,,,,,32,32,,,32,,21,,,,32,,,,,,21,,,,,,,,32,,,,,,,,,,,,32',
',,,27,32,27,,,32,,32,32,,,,,,,,,,55,21,55,,,,,,55,,21,21,,,,,55,,,,',
',,,,,,,,,,,,,,,32,,,,32,,,,,,,,,,,,27,,,27,,,,,,32,,,,,,32,,32,55,,',
'55,,27,,,,,,,,,,,,,,,,,,55,,,21,,21,,,21,,,27,,,21,27,,,,,,27,27,,,',
'27,27,21,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,,,,',
',,,55,,21,,,,21,,,,,21,,,,,,,,,,,,,,,,,,,,,,,,27,21,,,27,,,,,,,,,,27',
',,,55,,,,55,,,,,,,,,27,55,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,27',
',,,,,55,,,,,,,,,,,,55,,,,,,,,,,,,,,,27,27,,,27,,,,,,27,,,,,,,,55,55',
',,55,,27,,,,55,,,,,,,,,,,,,27,55,,,,,27,27,,,,,,55,,,,,55,,,,55,,55',
'55,,34,,,,,,21,,21,34,34,34,,,,,,,,,,,34,34,34,,,,,,27,,,,,,,,,34,34',
',,,55,,,,55,,,27,,,,,,27,,27,,,,,,,,,,55,,,,,,55,21,55,,21,,,,,,,,,',
',,,,,,,,,,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,21,,,,,,21,21,,,,21,21',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,,,,,34,,,,,',
',,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,21,,,,21,,34,34,,,,,,,21,34,,,,,,,34,,34,,,34,34',
',,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,34,,,,,21,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,21,21,,,21,,,,,,21,,,,,,,,,,,,,,21,,,,,,,,,,,,,,,,,21',
',34,,21,,21,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34,,,',
',,,,21,,,,,,,,,,,,,,,,,,,,,21,,,,,,21,,21,,,34,,34,,34,,,,,,,,,,,,,',
',,34,,,,,,,,,34,34,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,',
',,,,,,,,,,,,,,34,34,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34',
'34,,,,34,,,34,34,34,34,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,',
',,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,34,,,,,,,,34,,,,,,,,,,,,,34,34,34,34,,34,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,',
',,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3191, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   252,    27,   nil,    51,   107,    38,    30,  -316,    57,
  -516,  -592,  -688,   nil,  -373,    31,   123,    41,   -80,    67,
   -18,  1731,  -190,   -67,   888,    25,   -78,  1320,   454,  -205,
  -393,   -15,   943,   -19,  2208,    20,   nil,   nil,    35,  -198,
    45,  -236,  -411,     3,  -335,   nil,   133,    58,    61,   626,
   nil,   -14,    48,  -255,   760,  1338,  -288,    46,   -66,    13,
   nil,   nil,    34,    16,  -249,    56,    17,    30,   181,    94,
   -48,    17,  -188,    51,    66,  -327,  -266,  -438,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    96,   -55,
   nil,   103,  -288,  -660,  -503,  -326,    98,  -193,    11,  -568,
    98,   113,  -156,   114,   108,  -545,   109,  -546,  -408,  -734,
  -413,  -557,  -183,  -192,  -414,  -663,  -725,  -513,  -469,  -737,
  -592,   nil,   139,  -458,   194,   376,  -591,    28,  -691,  -470,
  -550,   nil,  -593,  -685,  -783,  -786,  -133,  -485,   154,  -323,
  -294,   -18,  -591,  -589,  -351,   -31,   nil,   -39,   -34,   nil,
   nil,  -414,  -670,  -445,  -563,   nil,   nil,   171,     8,    45,
   168,    29,  -239,  -196,   169,   169,   172,  -343,  -343,  -332,
  -270,   nil,   nil,   554,  -434,  -301,  -563,   250,  -429,  -653,
   nil,  -605,  -803,   nil,   nil,  -457 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   528,
   nil,   837,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   227,   nil,   nil,    14,   nil,   411,   228,   321,   nil,
   nil,   591,   226,   446,    21,    22,    23,    24,   nil,   681,
   nil,   nil,   nil,   310,   nil,    25,   425,    32,   nil,   nil,
    34,    37,    36,   nil,   223,   224,   358,   nil,   129,   433,
   128,   131,    75,    76,   nil,   416,    90,    46,   282,   nil,
   806,   426,   nil,   427,   438,   639,   492,   280,   266,    47,
    48,    49,    50,    51,    52,    53,    54,    55,   nil,   267,
    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   574,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   708,   556,   nil,   709,
   970,   866,   544,   nil,   545,   nil,   nil,   546,   nil,   548,
   nil,   792,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   437,   nil,   nil,   659,
   653,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,   nil,
   nil,   nil,   nil,   601,   nil,   nil,   nil,   nil,   nil,   nil,
   821,   742,   543,   nil,   547,   829,   559,   561,   562,   877,
   565,   566,   878,   569,   572,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 170, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  1, 152, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  6, 163, :_reduce_36,
  5, 163, :_reduce_37,
  5, 163, :_reduce_38,
  5, 163, :_reduce_39,
  5, 163, :_reduce_40,
  3, 163, :_reduce_41,
  1, 171, :_reduce_none,
  3, 171, :_reduce_43,
  1, 171, :_reduce_none,
  1, 169, :_reduce_none,
  3, 169, :_reduce_46,
  3, 169, :_reduce_47,
  3, 169, :_reduce_48,
  2, 169, :_reduce_49,
  1, 169, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_55,
  0, 189, :_reduce_56,
  4, 186, :_reduce_57,
  1, 188, :_reduce_none,
  2, 180, :_reduce_59,
  3, 180, :_reduce_60,
  4, 180, :_reduce_61,
  5, 180, :_reduce_62,
  4, 180, :_reduce_63,
  5, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  2, 180, :_reduce_69,
  1, 164, :_reduce_70,
  3, 164, :_reduce_71,
  1, 193, :_reduce_72,
  3, 193, :_reduce_73,
  1, 192, :_reduce_none,
  2, 192, :_reduce_75,
  3, 192, :_reduce_76,
  5, 192, :_reduce_77,
  2, 192, :_reduce_78,
  4, 192, :_reduce_79,
  2, 192, :_reduce_80,
  4, 192, :_reduce_81,
  1, 192, :_reduce_82,
  3, 192, :_reduce_83,
  1, 196, :_reduce_none,
  3, 196, :_reduce_85,
  2, 195, :_reduce_86,
  3, 195, :_reduce_87,
  1, 198, :_reduce_88,
  3, 198, :_reduce_89,
  1, 197, :_reduce_90,
  1, 197, :_reduce_91,
  4, 197, :_reduce_92,
  3, 197, :_reduce_93,
  3, 197, :_reduce_94,
  3, 197, :_reduce_95,
  3, 197, :_reduce_96,
  2, 197, :_reduce_97,
  1, 197, :_reduce_98,
  1, 166, :_reduce_99,
  1, 166, :_reduce_100,
  4, 166, :_reduce_101,
  3, 166, :_reduce_102,
  3, 166, :_reduce_103,
  3, 166, :_reduce_104,
  3, 166, :_reduce_105,
  2, 166, :_reduce_106,
  1, 166, :_reduce_107,
  1, 201, :_reduce_108,
  1, 201, :_reduce_none,
  2, 202, :_reduce_110,
  1, 202, :_reduce_111,
  3, 202, :_reduce_112,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 206, :_reduce_118,
  1, 206, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_122,
  0, 209, :_reduce_123,
  4, 161, :_reduce_124,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  3, 179, :_reduce_196,
  3, 179, :_reduce_197,
  6, 179, :_reduce_198,
  5, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  4, 179, :_reduce_203,
  3, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  4, 179, :_reduce_213,
  2, 179, :_reduce_214,
  2, 179, :_reduce_215,
  3, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  2, 179, :_reduce_229,
  2, 179, :_reduce_230,
  3, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  6, 179, :_reduce_236,
  1, 179, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  2, 214, :_reduce_none,
  4, 214, :_reduce_241,
  2, 214, :_reduce_242,
  1, 210, :_reduce_none,
  3, 210, :_reduce_244,
  3, 219, :_reduce_245,
  0, 220, :_reduce_246,
  1, 220, :_reduce_none,
  0, 174, :_reduce_248,
  1, 174, :_reduce_none,
  2, 174, :_reduce_none,
  4, 174, :_reduce_251,
  2, 174, :_reduce_252,
  1, 191, :_reduce_253,
  2, 191, :_reduce_254,
  2, 191, :_reduce_255,
  4, 191, :_reduce_256,
  1, 191, :_reduce_257,
  0, 223, :_reduce_258,
  2, 185, :_reduce_259,
  2, 222, :_reduce_260,
  2, 221, :_reduce_261,
  0, 221, :_reduce_262,
  1, 216, :_reduce_263,
  2, 216, :_reduce_264,
  3, 216, :_reduce_265,
  4, 216, :_reduce_266,
  1, 168, :_reduce_267,
  1, 168, :_reduce_none,
  3, 167, :_reduce_269,
  4, 167, :_reduce_270,
  2, 167, :_reduce_271,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_282,
  0, 246, :_reduce_283,
  4, 212, :_reduce_284,
  0, 247, :_reduce_285,
  4, 212, :_reduce_286,
  0, 248, :_reduce_287,
  4, 212, :_reduce_288,
  3, 212, :_reduce_289,
  3, 212, :_reduce_290,
  2, 212, :_reduce_291,
  3, 212, :_reduce_292,
  3, 212, :_reduce_293,
  1, 212, :_reduce_294,
  4, 212, :_reduce_295,
  3, 212, :_reduce_296,
  1, 212, :_reduce_297,
  5, 212, :_reduce_298,
  4, 212, :_reduce_299,
  3, 212, :_reduce_300,
  2, 212, :_reduce_301,
  1, 212, :_reduce_none,
  2, 212, :_reduce_303,
  2, 212, :_reduce_304,
  6, 212, :_reduce_305,
  6, 212, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 212, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 212, :_reduce_312,
  5, 212, :_reduce_313,
  4, 212, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 212, :_reduce_317,
  0, 255, :_reduce_318,
  6, 212, :_reduce_319,
  0, 256, :_reduce_320,
  7, 212, :_reduce_321,
  0, 257, :_reduce_322,
  5, 212, :_reduce_323,
  0, 258, :_reduce_324,
  6, 212, :_reduce_325,
  0, 259, :_reduce_326,
  0, 260, :_reduce_327,
  9, 212, :_reduce_328,
  1, 212, :_reduce_329,
  1, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 173, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_336,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_340,
  1, 156, :_reduce_none,
  2, 156, :_reduce_342,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 261, :_reduce_345,
  3, 261, :_reduce_346,
  1, 264, :_reduce_347,
  3, 264, :_reduce_348,
  1, 263, :_reduce_none,
  4, 263, :_reduce_350,
  6, 263, :_reduce_351,
  3, 263, :_reduce_352,
  5, 263, :_reduce_353,
  2, 263, :_reduce_354,
  4, 263, :_reduce_355,
  1, 263, :_reduce_356,
  3, 263, :_reduce_357,
  4, 265, :_reduce_358,
  2, 265, :_reduce_359,
  2, 265, :_reduce_360,
  1, 265, :_reduce_361,
  2, 270, :_reduce_362,
  0, 270, :_reduce_363,
  6, 271, :_reduce_364,
  8, 271, :_reduce_365,
  4, 271, :_reduce_366,
  6, 271, :_reduce_367,
  4, 271, :_reduce_368,
  2, 271, :_reduce_none,
  6, 271, :_reduce_370,
  2, 271, :_reduce_371,
  4, 271, :_reduce_372,
  6, 271, :_reduce_373,
  2, 271, :_reduce_374,
  4, 271, :_reduce_375,
  2, 271, :_reduce_376,
  4, 271, :_reduce_377,
  1, 271, :_reduce_none,
  0, 275, :_reduce_379,
  1, 275, :_reduce_380,
  3, 276, :_reduce_381,
  1, 276, :_reduce_382,
  4, 276, :_reduce_383,
  1, 277, :_reduce_384,
  4, 277, :_reduce_385,
  1, 278, :_reduce_386,
  3, 278, :_reduce_387,
  1, 279, :_reduce_388,
  1, 279, :_reduce_none,
  0, 283, :_reduce_390,
  0, 284, :_reduce_391,
  4, 236, :_reduce_392,
  4, 281, :_reduce_393,
  1, 281, :_reduce_394,
  0, 287, :_reduce_395,
  4, 282, :_reduce_396,
  0, 288, :_reduce_397,
  4, 282, :_reduce_398,
  0, 290, :_reduce_399,
  4, 286, :_reduce_400,
  2, 182, :_reduce_401,
  4, 182, :_reduce_402,
  5, 182, :_reduce_403,
  5, 182, :_reduce_404,
  2, 235, :_reduce_405,
  4, 235, :_reduce_406,
  4, 235, :_reduce_407,
  3, 235, :_reduce_408,
  3, 235, :_reduce_409,
  3, 235, :_reduce_410,
  2, 235, :_reduce_411,
  1, 235, :_reduce_412,
  4, 235, :_reduce_413,
  0, 292, :_reduce_414,
  4, 234, :_reduce_415,
  0, 293, :_reduce_416,
  4, 234, :_reduce_417,
  0, 294, :_reduce_418,
  3, 187, :_reduce_419,
  0, 295, :_reduce_420,
  0, 296, :_reduce_421,
  4, 289, :_reduce_422,
  5, 240, :_reduce_423,
  1, 297, :_reduce_424,
  1, 297, :_reduce_none,
  6, 155, :_reduce_426,
  0, 155, :_reduce_427,
  1, 298, :_reduce_428,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  2, 299, :_reduce_431,
  1, 299, :_reduce_none,
  2, 157, :_reduce_433,
  1, 157, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 225, :_reduce_438,
  1, 301, :_reduce_439,
  2, 301, :_reduce_440,
  3, 302, :_reduce_441,
  1, 302, :_reduce_442,
  1, 302, :_reduce_443,
  3, 226, :_reduce_444,
  4, 227, :_reduce_445,
  3, 228, :_reduce_446,
  0, 306, :_reduce_447,
  3, 306, :_reduce_448,
  1, 307, :_reduce_449,
  2, 307, :_reduce_450,
  3, 230, :_reduce_451,
  0, 309, :_reduce_452,
  3, 309, :_reduce_453,
  3, 229, :_reduce_454,
  3, 231, :_reduce_455,
  0, 310, :_reduce_456,
  3, 310, :_reduce_457,
  0, 311, :_reduce_458,
  3, 311, :_reduce_459,
  0, 303, :_reduce_460,
  2, 303, :_reduce_461,
  0, 304, :_reduce_462,
  2, 304, :_reduce_463,
  0, 305, :_reduce_464,
  2, 305, :_reduce_465,
  1, 308, :_reduce_466,
  2, 308, :_reduce_467,
  0, 313, :_reduce_468,
  4, 308, :_reduce_469,
  1, 312, :_reduce_470,
  1, 312, :_reduce_471,
  1, 312, :_reduce_472,
  1, 312, :_reduce_none,
  1, 207, :_reduce_474,
  3, 208, :_reduce_475,
  1, 300, :_reduce_476,
  2, 300, :_reduce_477,
  1, 211, :_reduce_478,
  1, 211, :_reduce_479,
  1, 211, :_reduce_480,
  1, 211, :_reduce_481,
  1, 199, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 199, :_reduce_486,
  1, 200, :_reduce_487,
  1, 200, :_reduce_488,
  1, 200, :_reduce_489,
  1, 200, :_reduce_490,
  1, 200, :_reduce_491,
  1, 200, :_reduce_492,
  1, 200, :_reduce_493,
  1, 232, :_reduce_494,
  1, 232, :_reduce_495,
  1, 172, :_reduce_496,
  1, 172, :_reduce_497,
  1, 177, :_reduce_498,
  1, 177, :_reduce_499,
  0, 314, :_reduce_500,
  4, 242, :_reduce_501,
  0, 242, :_reduce_502,
  3, 244, :_reduce_503,
  0, 316, :_reduce_504,
  3, 244, :_reduce_505,
  4, 315, :_reduce_506,
  2, 315, :_reduce_507,
  2, 315, :_reduce_508,
  1, 315, :_reduce_509,
  2, 318, :_reduce_510,
  0, 318, :_reduce_511,
  6, 285, :_reduce_512,
  8, 285, :_reduce_513,
  4, 285, :_reduce_514,
  6, 285, :_reduce_515,
  4, 285, :_reduce_516,
  6, 285, :_reduce_517,
  2, 285, :_reduce_518,
  4, 285, :_reduce_519,
  6, 285, :_reduce_520,
  2, 285, :_reduce_521,
  4, 285, :_reduce_522,
  2, 285, :_reduce_523,
  4, 285, :_reduce_524,
  1, 285, :_reduce_525,
  0, 285, :_reduce_526,
  1, 280, :_reduce_527,
  1, 280, :_reduce_528,
  1, 280, :_reduce_529,
  1, 280, :_reduce_530,
  1, 262, :_reduce_none,
  1, 262, :_reduce_532,
  1, 320, :_reduce_533,
  1, 321, :_reduce_534,
  3, 321, :_reduce_535,
  1, 272, :_reduce_536,
  3, 272, :_reduce_537,
  1, 322, :_reduce_538,
  2, 323, :_reduce_539,
  1, 323, :_reduce_540,
  2, 324, :_reduce_541,
  1, 324, :_reduce_542,
  1, 266, :_reduce_543,
  3, 266, :_reduce_544,
  1, 317, :_reduce_545,
  3, 317, :_reduce_546,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 267, :_reduce_549,
  1, 267, :_reduce_550,
  3, 326, :_reduce_551,
  3, 327, :_reduce_552,
  1, 273, :_reduce_553,
  3, 273, :_reduce_554,
  1, 319, :_reduce_555,
  3, 319, :_reduce_556,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 274, :_reduce_559,
  1, 274, :_reduce_560,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 269, :_reduce_563,
  2, 268, :_reduce_564,
  0, 268, :_reduce_565,
  1, 245, :_reduce_none,
  3, 245, :_reduce_567,
  0, 233, :_reduce_568,
  2, 233, :_reduce_none,
  1, 218, :_reduce_570,
  3, 218, :_reduce_571,
  3, 330, :_reduce_572,
  2, 330, :_reduce_573,
  4, 330, :_reduce_574,
  2, 330, :_reduce_575,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 176, :_reduce_588,
  1, 176, :_reduce_589,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 194, :_reduce_594,
  2, 175, :_reduce_595,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_599,
  1, 243, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 215, :_reduce_603 ]

racc_reduce_n = 604

racc_shift_n = 1037

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "arg_rhs",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "@21",
  "f_args",
  "do_block",
  "@22",
  "@23",
  "do_body",
  "@24",
  "operation3",
  "@25",
  "@26",
  "@27",
  "@28",
  "@29",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@30",
  "@31",
  "args_tail",
  "@32",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_57(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 74 omitted

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_123(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

def _reduce_196(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val
                    
    result
end

def _reduce_246(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = []
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_257(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_259(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = []
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 268 omitted

def _reduce_269(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_283(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_287(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_319(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_323(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = val
                    
    result
end

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = []
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_380(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = []
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_391(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_392(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_395(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_397(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_414(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_420(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_421(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = []
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_439(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_442(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = []
                    
    result
end

def _reduce_448(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = []
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = []
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = []
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_469(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_477(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_478(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_505(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = []
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      result = []
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_530(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_538(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 547 omitted

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 557 omitted

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 561 omitted

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = []
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_595(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby24
  end   # module Parser
