# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby19 < Parser::Base


  def version
    19
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-455,-99,205,206,229,542,665,-455,-455,-455,817,742,-455,-455,-455,258',
'-455,679,-98,526,525,524,619,527,-455,542,-455,-455,-455,105,511,563',
'498,510,104,-103,-455,-455,688,-455,-455,-455,-455,-455,542,-101,542',
'209,-100,-104,-99,584,542,-100,208,-460,618,688,511,-98,-101,513,-460',
'-101,-96,-97,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455',
'-455,-455,-455,229,-103,-455,-455,-455,-98,-455,-455,229,688,-455,209',
'105,-455,-455,899,-455,104,-455,229,-455,257,-455,-455,-455,-455,-455',
'-455,-455,-530,-455,664,-455,-526,583,-99,-530,-530,-530,105,-99,609',
'-530,-530,104,-530,-455,-455,-455,-455,-526,-455,-98,-455,-530,-455',
'562,-98,105,105,-94,-82,799,104,104,-530,-530,-68,-530,-530,-530,-530',
'-530,-91,-95,-90,105,105,105,-101,105,104,104,104,-101,104,105,-100',
'-92,-87,-88,104,-100,258,-102,-530,-530,-530,-530,-530,-530,-530,-530',
'-530,-530,-530,-530,-530,-530,105,-89,-530,-530,-530,104,603,205,206',
'511,-530,428,513,-530,205,206,205,206,-530,258,-530,606,-530,-530,-530',
'-530,-530,-530,-530,-467,-530,-530,-530,573,619,-92,105,-452,253,-523',
'-396,104,619,229,-452,-281,-530,-530,253,-91,-527,-530,-281,-281,-281',
'-100,-527,-281,-281,-281,-104,-281,209,679,-90,526,525,524,618,527,257',
'-281,-281,-281,511,226,618,513,-97,228,227,-281,-281,253,-281,-281,-281',
'-281,-281,596,-93,-452,-396,498,575,574,571,209,-452,-396,675,-92,807',
'-523,209,257,209,-452,-396,-466,741,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-523,-396,-281,-281,-281,-90,744',
'-281,595,597,-281,-94,-92,-281,-281,-92,-281,-103,-281,573,-281,-92',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,573,-281,-96,-99,598,-281',
'-281,-281,-467,619,-90,-281,-281,-90,-281,-281,-281,-281,-281,-90,-281',
'-90,-281,229,-102,-455,-530,-99,105,-462,794,656,-455,104,-281,-281',
'-462,-281,-281,-281,-281,-281,679,618,526,525,524,-92,527,575,574,-88',
'573,-101,656,226,548,-97,720,228,227,575,574,578,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-530,573,-281,-281',
'-281,554,602,-530,209,555,-281,591,-526,-281,573,-524,-530,-466,-281',
'-260,-281,-262,-281,-281,-281,-281,-281,-281,-281,76,-281,589,-281,568',
'-530,575,574,580,77,-530,569,586,790,493,494,-530,-281,-281,78,-93,203',
'-281,-530,-530,-530,-102,816,-530,-530,-530,-87,-530,575,574,585,553',
'-96,-455,205,206,-530,-530,-530,-530,-455,575,574,576,819,-524,821,-530',
'-530,-455,-530,-530,-530,-530,-530,-464,824,-530,825,-95,753,-461,-464',
'727,-530,-104,831,-524,-461,-526,381,-464,832,-530,552,383,382,-530',
'-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530',
'201,-530,-530,-530,-463,743,-530,202,834,-530,835,-463,-530,-530,-89',
'-530,200,-530,649,-530,-98,-530,-530,-530,-530,-530,-530,-530,105,-530',
'-530,-530,754,104,526,525,524,679,527,526,525,524,373,527,-324,-530',
'-530,-530,-530,-452,-530,-324,-530,548,-100,844,-452,-452,-452,475,-324',
'-452,-452,-452,679,-452,526,525,524,531,527,205,206,-452,675,-452,-452',
'-452,535,534,538,537,209,859,848,-452,-452,-459,-452,-452,-452,-452',
'-452,679,-459,526,525,524,424,527,679,675,526,525,524,425,527,851,105',
'853,678,855,753,104,426,-452,-452,-452,-452,-452,-452,-452,-452,-452',
'-452,-452,-452,-452,-452,855,675,-452,-452,-452,-464,-452,-452,675,209',
'-452,515,-464,-452,-452,860,-452,678,-452,514,-452,-464,-452,-452,-452',
'-452,-452,-452,-452,-465,-452,679,-452,526,525,524,-465,527,829,862',
'526,525,524,250,527,-465,-452,-452,-452,-452,251,-452,864,-452,507,-452',
'278,66,67,68,9,54,-458,506,-457,60,61,229,531,-458,64,-457,62,63,65',
'29,30,69,70,538,537,794,656,500,28,27,26,93,92,94,95,499,829,19,526',
'525,524,870,527,8,44,495,10,97,96,98,87,53,89,88,90,872,91,99,100,209',
'85,86,41,42,40,679,875,526,525,524,-263,527,253,679,209,526,525,524',
'105,527,205,206,262,104,39,304,305,32,491,484,55,56,483,882,57,679,34',
'526,525,524,43,527,675,529,489,526,525,524,20,527,531,490,883,84,76',
'79,80,209,81,82,488,538,537,77,83,278,66,67,68,9,54,59,675,78,60,61',
'886,-67,-526,64,531,62,63,65,29,30,69,70,891,535,534,538,537,28,27,26',
'93,92,94,95,714,715,19,855,716,99,100,892,8,44,893,10,97,96,98,87,53',
'89,88,90,475,91,99,100,473,85,86,41,42,40,679,471,526,525,524,462,527',
'208,679,901,526,525,524,430,527,903,-274,501,904,39,550,909,32,-274',
'502,55,56,551,429,57,911,34,-274,426,914,43,549,675,754,558,526,525',
'524,20,527,531,557,916,84,76,79,80,855,81,82,559,538,537,77,83,278,66',
'67,68,9,54,59,855,78,60,61,901,921,506,64,531,62,63,65,29,30,69,70,427',
'535,534,538,537,28,27,26,93,92,94,95,384,101,19,108,109,110,111,112',
'8,44,929,10,97,96,98,87,53,89,88,90,855,91,99,100,855,85,86,41,42,40',
'-282,855,-282,933,371,901,209,-282,679,-282,526,525,524,303,527,302',
'-282,248,-282,39,-281,-281,32,-465,204,55,56,-281,-281,57,-465,34,-527',
'-527,209,43,-281,-281,754,-465,526,525,524,20,527,531,199,198,84,76',
'79,80,197,81,82,855,538,537,77,83,278,66,67,68,9,54,59,113,78,60,61',
'901,948,949,64,531,62,63,65,29,30,69,70,951,535,534,538,537,28,27,26',
'93,92,94,95,855,855,19,462,462,728,-261,607,8,44,722,10,97,96,98,87',
'53,89,88,90,719,91,99,100,209,85,86,41,42,40,229,233,238,239,240,235',
'237,245,246,241,242,889,222,223,-274,746,243,244,890,39,691,-274,32',
'548,684,55,56,888,682,57,-274,34,226,681,232,43,228,227,224,225,236',
'234,230,20,231,473,475,673,84,76,79,80,672,81,82,229,649,558,77,83,209',
'247,-275,-237,920,669,59,667,78,-275,-275,-275,253,559,-275,-275,-275',
'529,-275,526,525,524,855,527,253,649,656,226,-275,-275,-275,228,227',
'224,225,649,229,229,-275,-275,-282,-275,-275,-275,-275,-275,-281,-282',
'108,109,110,111,112,-281,531,518,-282,504,-527,767,209,-260,-281,535',
'534,538,537,771,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'-275,-275,-275,209,229,-275,-275,-275,753,638,-275,-82,209,-275,209',
'788,-275,-275,209,-275,209,-275,656,-275,798,-275,-275,-275,-275,-275',
'-275,-275,,-275,,-275,226,,,,228,227,224,225,108,109,110,111,112,-275',
'-275,-275,-275,,-275,,-275,278,66,67,68,9,54,,,,60,61,,,,64,,62,63,65',
'29,30,69,70,108,109,110,111,112,28,27,26,93,92,94,95,,,19,,,,,,8,44',
',10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,679,',
'526,525,524,,527,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,529,,526,525,524',
'20,527,531,,,84,76,79,80,,81,82,,538,537,77,83,5,66,67,68,9,54,59,,78',
'60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538,537,28,27,26,93,92',
'94,95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
'41,42,40,,,,,,,,679,,526,525,524,,527,,,,,,39,,,32,,,55,56,,,57,,34',
',,,43,679,,526,525,524,,527,20,531,,,,84,76,79,80,,81,82,538,537,,77',
'83,278,66,67,68,9,54,59,,78,60,61,,,531,64,,62,63,65,29,30,69,70,,538',
'537,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,679,,526,525,524,,527,,,,,39,,,32',
',,55,56,,,57,,34,,,,43,,,529,,526,525,524,20,527,531,,,84,76,79,80,',
'81,82,,538,537,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,531,62,63',
'65,29,30,69,70,,535,534,538,537,28,27,26,93,92,94,95,,,19,,,,,,8,44',
',10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,679,',
'526,525,524,,527,,,,,39,,,280,,,55,56,,,57,,34,,,,43,,,529,,526,525',
'524,20,527,531,,,84,76,79,80,,81,82,,538,537,77,83,278,66,67,68,9,54',
'59,,78,60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538,537,28,27,26',
'93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,280,,,55,56,,,57,,34,,,,43,,,529',
',526,525,524,20,527,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54',
'59,,78,60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538,537,28,27,26',
'93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,754',
',526,525,524,20,527,,,,84,76,79,80,,81,82,,,,77,83,5,66,67,68,9,54,59',
',78,60,61,,,,64,531,62,63,65,29,30,69,70,,535,534,538,537,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,229,-549,-549,-549,-549,235,237,,,-549,-549,,,,,,243,244',
',39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20',
'231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,',
',64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,',
'10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,233,238,239',
'240,235,237,,,241,242,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232',
'43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83',
'278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,229,-549,-549,-549,-549,235,237,,,-549,-549,,,,,,243',
'244,,39,,,280,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230',
'20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,592,8',
'44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,233,238',
'239,240,235,237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56',
',,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79',
'80,,81,82,,,,77,83,,247,-532,,,,59,,78,-532,-532,-532,,,-532,-532,-532',
'529,-532,526,525,524,,527,,,,-532,-532,-532,-532,,,,,,,,-532,-532,,-532',
'-532,-532,-532,-532,,,,,,,,,531,709,,,,,,,,535,534,538,537,,-532,-532',
'-532,-532,-532,-532,-532,-532,-532,-532,-532,-532,-532,-532,,,-532,-532',
'-532,,,-532,,,-532,,,-532,-532,,-532,,-532,,-532,,-532,-532,-532,-532',
'-532,-532,-532,-531,-532,-532,-532,,,,-531,-531,-531,,,-531,-531,-531',
'229,-531,-532,-532,-532,-532,,-532,,-532,-531,-531,-531,-531,,,243,244',
',,,-531,-531,,-531,-531,-531,-531,-531,,,,226,,232,,228,227,224,225',
',,230,,231,,,,,,,-531,-531,-531,-531,-531,-531,-531,-531,-531,-531,-531',
'-531,-531,-531,,,-531,-531,-531,,,-531,,,-531,,,-531,-531,,-531,,-531',
',-531,,-531,-531,-531,-531,-531,-531,-531,,-531,-531,-531,,,,,,,,,,',
',,,-531,-531,-531,-531,,-531,,-531,278,66,67,68,9,54,,,,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,-549,-549,-549,-549',
'235,237,,,-549,-549,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232',
'43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83',
'278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,229,233,238,239,240,235,237,245,246,241,242,,-549,-549',
',,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236',
'234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,',
'78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19',
',,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229',
'233,238,239,240,235,237,245,246,241,242,,-549,-549,,,243,244,,39,,,32',
',,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84',
'76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,-549,-549,-549,-549,235',
'237,,,-549,-549,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228',
'227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,278,66',
'67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
'41,42,40,229,-549,-549,-549,-549,235,237,,,-549,-549,,,,,,243,244,,39',
',,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231',
',,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,,,,,,,,243',
'244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,,,230,20,231',
',,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,,,,,,,,243',
'244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,,,230,20,231',
',,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,,,,,,,,243',
'244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,,,230,20,231',
',,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,-549,-549,-549,-549',
'235,237,,,-549,-549,,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232',
'43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83',
'278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,229,233,238,239,240,235,237,245,,241,242,,,,,,243,244',
',39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,236,234,230,20',
'231,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,',
',64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,',
'10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,,',
',,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,',
',,20,,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44',
',10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,',
',,,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,,43,228,227,224,225,,,',
'20,,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61,,',
',64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,',
'10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,,,,,,,,,,',
',,,,,243,244,,39,,,32,,,55,56,,,57,,34,226,,232,43,228,227,224,225,',
',,20,,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44',
',10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,',
',,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82',
',,,77,83,278,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,',
'34,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,278,66,67,68,9,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,',
',,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295',
'296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,,529,299,526,525,524,,527,,,,,,,,,,,,',
',,289,,,285,,,55,56,,,57,,,,,,531,709,,,,,,,,535,534,538,537,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,',
',,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389,,,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,',
',219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,',
',,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,',
',,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,389,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,',
',,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,209,66,67,68',
'9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,19,,,,,,8,44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,',
',,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,,,299,,,,,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,',
',,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,',
',,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,',
'28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271',
',269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,299,,',
',,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,607,8,44,,10,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56,,,57,,34,226',
',232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,',
'77,83,,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,',
',,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,',
'28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271',
',269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,',
',,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,209,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97',
'96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,',
',,214,,,220,,,55,56,,,57,,633,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70',
',,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,',
',219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,',
',,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,9,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,',
',,28,27,26,93,92,94,95,,,19,,,,,,8,44,,10,97,96,98,87,53,89,88,90,,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,',
',,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78',
'60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221',
',,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,299,,,,,,,,',
',,,,,,,,,,,885,,,220,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70',
',,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,',
',,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,,,299,229,233,238,239,240,235,237',
'245,246,241,242,,222,223,,,243,244,,289,,,220,,,55,56,,,57,,,226,,232',
',228,227,224,225,236,234,230,,231,,,,84,76,79,80,,81,82,,,,77,83,,247',
',486,,,59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43',
',,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,725,,,,43,,,,,,,,219,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89',
'88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56',
',,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97',
'96,98,87,53,89,88,90,,91,99,100,,85,86,,,299,,,,,,,,,,,,,,,,,,,,289',
',,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,',
',219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,',
',,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,',
'85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,269,',
'43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60',
'61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,',
',,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,269,,43,,,,,,,,219,,,,,84',
'76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65',
'29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55',
'56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68',
',54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86',
'41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219',
',,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66',
'67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93',
'92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41',
'42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,',
',,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85',
'86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,',
',219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97',
'96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,',
',,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70',
',,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',271,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40',
',,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,',
',,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98',
'87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,271,,269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,',
',,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,',
'28,27,26,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,271',
',269,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,299,,',
',,,,,,,,,,,,,,,,,289,,,285,,,55,56,,,57,,284,,,,,,,,,,,,,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,,,299,229,233,238,239,240,235,237,245,246',
'241,242,,222,223,,,243,244,,289,,,220,,,55,56,,,57,,,226,,232,,228,227',
'224,225,236,234,230,,231,,,,84,76,79,80,,81,82,,,,77,83,,247,,301,,',
'59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291',
'292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43',
',,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94',
'95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42',
'40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,',
'84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63',
'65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96',
'98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,271,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77',
'83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291',
'292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,273,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,',
',,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78',
'60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221',
',,,,,,293,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,,,299,,,,,,,,',
',,,,,,,,,,,289,,,285,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81',
'82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,',
',,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91',
'99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,',
',,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78',
'60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,',
'81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91',
'99,100,,85,86,41,42,40,229,233,238,239,240,235,237,245,246,241,242,',
'222,223,,,243,244,,214,,,220,,,55,56,,,57,,,226,,232,43,228,227,224',
'225,236,234,230,20,231,,,,84,76,79,80,,81,82,,,,77,83,105,247,,,,104',
'59,,78,66,67,68,,54,,,,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291',
'292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,,,299,,,,,,,,,,,,,,,,,,,,335,,,32,,,55,56,,,57,,34,,,,,,',
',,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,',
'64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,',
'293,,,97,96,98,340,53,89,88,341,,91,99,100,,85,86,,,299,,,,,,,,,,,,',
',,,,347,,,342,,,220,,,55,56,,,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,',
',,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,340,53,89,88,341',
',91,99,100,,85,86,,,299,,,,,,,,,,,,,,,,,,,,342,,,220,,,55,56,,,57,,',
',,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60',
'61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,273,91,99,100,,85,86,41,42,40,,,',
',,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295',
'296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,273,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
',,55,56,,,57,,633,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,',
'66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,389,,,,43',
',,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,9,54,59,,78,60',
'61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,8',
'44,7,10,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,229,233,238',
'239,240,235,237,245,246,241,242,,222,223,,,243,244,,39,,,32,,,55,56',
',,57,,34,226,,232,43,228,227,224,225,236,234,230,20,231,,,,84,76,79',
'80,,81,82,,,,77,83,209,247,,,,373,59,,78,66,67,68,,54,,,,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96',
'98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214',
',,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83',
',66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,',
',,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,',
',,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43',
',,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69',
'70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88',
'90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,',
',57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54',
'59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,',
',19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,',
',,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76',
'79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295',
'296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87',
'53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220',
'504,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,',
'66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292',
'298,93,92,94,95,,,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100',
',85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,633,,,,43',
',,,,,,,219,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44',
',,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,',
',,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82',
',,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99',
'100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43',
',,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61',
',,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95,,,221,,,',
',,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,,,,',
',,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79,80',
',81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,93,92,94,95,,,19,,,,,,,44,,,97,96,98,87,53,89,88,90',
',91,99,100,,85,86,41,42,40,,,,,,,,,,,,,,,,,,,,214,,,220,,,55,56,,,57',
',,,,,43,,,,,,,,20,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59,',
'78,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,93,92,94,95,,,221',
',,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40,,,,,,',
',,,,,,,,,,,,,214,,,220,,,55,56,,,57,,,,,,43,,,,,,,,219,,,,,84,76,79',
'80,,81,82,,,,77,83,,66,67,68,,54,59,,78,60,61,,,,64,,62,63,65,295,296',
'69,70,,,,,,291,292,298,93,92,94,95,,,221,,,,,,,293,,,97,96,98,87,53',
'89,88,90,,91,99,100,,85,86,,,299,,,,,,,,,,,,,,,,,,,,841,,,220,,,55,56',
',,57,,,,,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,66,67,68,,54,59',
',78,60,61,,,,64,,62,63,65,295,296,69,70,,,,,,291,292,298,93,92,94,95',
',,221,,,,,,,44,,,97,96,98,87,53,89,88,90,,91,99,100,,85,86,41,42,40',
'229,233,238,239,240,235,237,245,246,241,242,,222,223,,,243,244,,214',
',,220,,,55,56,,,57,,,226,,232,43,228,227,224,225,236,234,230,219,231',
',,,84,76,79,80,,81,82,,,,77,83,,247,-243,,,,59,,78,-243,-243,-243,,',
'-243,-243,-243,,-243,,,,,,,,,-243,-243,-243,,,,,,,,,-243,-243,,-243',
'-243,-243,-243,-243,,,,,,,,,,,,,,,,,,,,,,,-243,-243,-243,-243,-243,-243',
'-243,-243,-243,-243,-243,-243,-243,-243,,,-243,-243,-243,,,-243,,253',
'-243,,,-243,-243,,-243,,-243,,-243,,-243,-243,-243,-243,-243,-243,-243',
'-288,-243,-243,-243,,,,-288,-288,-288,,,-288,-288,-288,,-288,-243,-243',
',-243,,-243,,,,-288,-288,,,,,,,,,-288,-288,,-288,-288,-288,-288,-288',
',,,,,,,,,,,,,,,,,,,,,,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,,,-288,-288,-288,,,-288,,262,-288,,,-288,-288,,-288',
',-288,,-288,,-288,-288,-288,-288,-288,-288,-288,-243,-288,,-288,,,,-243',
'-243,-243,,,-243,-243,-243,,-243,-288,-288,,-288,,-288,,,,-243,,,,,',
',,,,-243,-243,,-243,-243,-243,-243,-243,,,,,,,,,,,,,,,,,,,,,,,-395,',
',,,,,-395,-395,-395,,-243,-395,-395,-395,,-395,,-243,,,,,253,-243,-395',
'-395,-395,,,,,,,,,-395,-395,,-395,-395,-395,-395,-395,,,-243,,,,,,,',
',,,,,,-243,,,,,-243,-395,-395,-395,-395,-395,-395,-395,-395,-395,-395',
'-395,-395,-395,-395,,,-395,-395,-395,,,-395,,253,-395,,,-395,-395,,-395',
',-395,,-395,,-395,-395,-395,-395,-395,-395,-395,-243,-395,-395,-395',
',,,-243,-243,-243,,,-243,-243,-243,,-243,-395,-395,,-395,,-395,,,,-243',
',,,,,,,,,-243,-243,,-243,-243,-243,-243,-243,,,,,,645,408,,,646,,,,',
',,,149,150,,146,128,129,130,137,134,136,,,131,132,,,-243,151,152,138',
'139,,,-243,,,253,,253,-243,,,,,143,142,,127,148,145,144,140,141,135',
'133,125,147,126,,,153,-243,,,,,,,,,,,,,,-243,,,,,-243,164,175,165,188',
'161,181,171,170,191,192,186,169,168,163,189,193,194,173,162,176,180',
'182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,,159,166',
'157,158,154,155,156,116,118,,,117,,,,,,,,149,150,,146,128,129,130,137',
'134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148,145',
'144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175,165,188',
'161,181,171,170,191,192,186,169,168,163,189,193,194,173,162,176,180',
'182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,,159,166',
'157,158,154,155,156,116,118,115,,117,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175,165',
'188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162,176',
'180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,,159',
'166,157,158,154,155,156,116,118,,,117,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175,165',
'188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162,176',
'180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,,159',
'166,157,158,154,155,156,116,118,,,117,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,,,153,84,,,,,,,,,,,83,164,175,165',
'188,161,181,171,170,191,192,186,169,168,163,189,193,194,173,162,176',
'180,182,174,167,,,,183,190,185,184,177,187,172,160,179,178,,,,,,159',
'166,157,158,154,155,156,116,118,,,117,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,,,153,164,175,165,188,161,181,171',
'170,191,192,186,169,168,163,189,193,194,173,162,176,180,182,174,167',
',,,183,190,185,358,357,359,356,160,179,178,,,,,,159,166,157,158,353',
'354,355,351,118,89,88,352,,91,,,,,,149,150,,146,128,129,130,137,134',
'136,,,131,132,,,,151,152,138,139,,,,,,363,,,,,,,,143,142,,127,148,145',
'144,140,141,135,133,125,147,126,404,408,153,,403,,,,,,,,149,150,,146',
'128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,',
',143,142,,127,148,145,144,140,141,135,133,125,147,126,610,401,153,,611',
',,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138',
'139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147',
'126,612,408,153,,613,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131',
'132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140',
'141,135,133,125,147,126,943,408,153,,942,,,,,,,,149,150,,146,128,129',
'130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142',
',127,148,145,144,140,141,135,133,125,147,126,642,401,153,,643,,,,,,',
',149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,',
',,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'459,401,153,,460,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132',
',,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141',
'135,133,125,147,126,699,408,153,,700,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127',
'148,145,144,140,141,135,133,125,147,126,610,401,153,,611,,,,,,,,149',
'150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253',
',,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,696,408',
'153,,697,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151',
'152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133',
'125,147,126,694,401,153,,695,,,,,,,,149,150,,146,128,129,130,137,134',
'136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145',
'144,140,141,135,133,125,147,126,459,401,153,,460,,,,,,,,149,150,,146',
'128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143',
'142,,127,148,145,144,140,141,135,133,125,147,126,459,401,153,,460,,',
',,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,926',
'408,153,,927,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,',
',,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135',
'133,125,147,126,612,408,153,,613,,,,,,,,149,150,,146,128,129,130,137',
'134,136,,,131,132,,,,151,152,138,139,,,,,,253,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,397,401,153,,398,,,,,,,,149,150',
',146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,253,',
',,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,924,401,153',
',925,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152',
'138,139,,,,,,253,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125',
'147,126,,,153,229,233,238,239,240,235,237,245,246,241,242,,222,223,',
',243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,',
',,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239',
'240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226',
',232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237',
'245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227',
'224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246,241,242',
',222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234',
'230,,231,,229,233,238,239,240,235,237,245,246,241,242,,222,223,,247',
'243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,',
',,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239',
'240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226',
',232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237',
'245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227',
'224,225,236,234,230,,231,,,,,,,,,,,,,,,,,247' ]
        racc_action_table = arr = ::Array.new(23417, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'90,924,564,564,438,326,517,90,90,90,745,611,90,90,90,58,90,859,944,859',
'859,859,467,859,90,692,90,90,90,329,315,346,427,315,329,552,90,90,544',
'90,90,90,90,90,863,925,325,693,696,336,694,369,770,926,19,356,467,545',
'319,745,611,319,356,695,332,333,90,90,90,90,90,90,90,90,90,90,90,90',
'90,90,437,427,90,90,90,801,90,90,436,802,90,19,564,90,90,859,90,564',
'90,435,90,58,90,90,90,90,90,90,90,404,90,517,90,696,369,924,404,404',
'404,326,924,423,404,404,326,404,90,90,90,90,926,90,944,90,404,90,346',
'944,544,692,552,637,692,544,692,404,404,637,404,404,404,404,404,696',
'336,694,346,545,863,925,325,346,545,863,925,325,770,926,695,332,333',
'770,926,25,697,404,404,404,404,404,404,404,404,404,404,404,404,404,404',
'802,801,404,404,404,802,404,570,570,316,404,215,316,404,653,653,421',
'421,404,294,404,413,404,404,404,404,404,404,404,213,404,404,404,365',
'466,643,276,351,405,340,763,276,625,433,351,613,404,404,25,404,697,404',
'613,613,613,404,942,613,613,613,215,613,702,790,642,790,790,790,466',
'790,25,613,613,613,662,433,625,662,213,433,433,613,613,294,613,613,613',
'613,613,396,697,340,763,303,365,365,365,570,340,763,790,643,707,340',
'653,294,421,340,763,212,610,613,613,613,613,613,613,613,613,613,613',
'613,613,613,613,340,763,613,613,613,642,613,613,395,397,613,303,643',
'613,613,643,613,303,613,581,613,643,613,613,613,613,613,613,613,403',
'613,367,613,212,610,398,403,403,403,38,457,642,403,403,642,403,613,613',
'613,613,642,613,397,613,434,613,352,699,397,704,353,935,935,352,704',
'403,403,353,403,403,403,403,403,678,457,678,678,678,398,678,581,581',
'38,368,398,868,434,868,38,581,434,434,367,367,367,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,699,370,403,403,403,342,403,699',
'393,342,403,390,699,403,366,341,699,37,403,387,403,724,403,403,403,403',
'403,403,403,74,403,385,403,361,699,368,368,368,74,645,361,379,678,299',
'299,612,403,403,74,403,15,403,612,612,612,403,729,612,612,612,37,612',
'370,370,370,337,37,341,324,324,612,612,612,612,341,366,366,366,747,341',
'748,612,612,341,612,612,612,612,612,838,749,645,751,15,752,354,838,593',
'645,15,754,341,354,645,115,838,756,645,335,115,115,612,612,612,612,612',
'612,612,612,612,612,612,612,612,612,645,14,612,612,612,355,612,612,14',
'758,612,759,355,612,612,593,612,14,612,762,612,593,612,612,612,612,612',
'612,612,3,612,612,612,618,3,618,618,618,788,618,788,788,788,331,788',
'45,612,612,612,612,87,612,45,612,330,612,773,87,87,87,320,45,87,87,87',
'675,87,675,675,675,618,675,508,508,87,788,87,87,87,618,618,618,618,777',
'788,778,87,87,359,87,87,87,87,87,860,359,860,860,860,211,860,531,675',
'531,531,531,211,531,779,563,782,675,783,618,563,211,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,785,860,87,87,87,286,87,87,531,787,87,318,286',
'87,87,789,87,531,87,317,87,286,87,87,87,87,87,87,87,287,87,914,87,914',
'914,914,287,914,883,792,883,883,883,24,883,287,87,87,87,87,24,87,795',
'87,312,87,797,797,797,797,797,797,358,311,357,797,797,308,914,358,797',
'357,797,797,797,797,797,797,797,914,914,683,683,305,797,797,797,797',
'797,797,797,304,753,797,753,753,753,804,753,797,797,300,797,797,797',
'797,797,797,797,797,797,808,797,797,797,809,797,797,797,797,797,899',
'812,899,899,899,813,899,298,929,293,929,929,929,710,929,17,17,292,710',
'797,40,40,797,289,283,797,797,282,826,797,933,797,933,933,933,797,933',
'899,709,288,709,709,709,797,709,929,288,827,797,797,797,797,281,797',
'797,288,929,929,797,797,565,565,565,565,565,565,797,933,797,565,565',
'833,279,943,565,709,565,565,565,565,565,565,565,841,709,709,709,709',
'565,565,565,565,565,565,565,574,574,565,945,574,574,574,845,565,565',
'846,565,565,565,565,565,565,565,565,565,270,565,565,565,267,565,565',
'565,565,565,901,266,901,901,901,252,901,221,824,861,824,824,824,217',
'824,865,290,306,866,565,334,871,565,290,306,565,565,334,216,565,876',
'565,290,306,877,565,334,901,819,344,819,819,819,565,819,824,344,878',
'565,565,565,565,879,565,565,344,824,824,565,565,628,628,628,628,628',
'628,565,881,565,628,628,946,885,887,628,819,628,628,628,628,628,628',
'628,214,819,819,819,819,628,628,628,628,628,628,628,195,1,628,6,6,6',
'6,6,628,628,894,628,628,628,628,628,628,628,628,628,895,628,628,628',
'896,628,628,628,628,628,491,897,555,898,101,900,44,491,851,555,851,851',
'851,39,851,36,491,22,555,628,646,700,628,839,16,628,628,646,700,628',
'839,628,646,700,923,628,646,700,821,839,821,821,821,628,821,851,13,12',
'628,628,628,628,10,628,628,956,851,851,628,628,757,757,757,757,757,757',
'628,7,628,757,757,934,936,937,757,821,757,757,757,757,757,757,757,938',
'821,821,821,821,757,757,757,757,757,757,757,939,940,757,604,599,594',
'590,416,757,757,584,757,757,757,757,757,757,757,757,757,578,757,757',
'757,614,757,757,757,757,757,416,416,416,416,416,416,416,416,416,416',
'416,840,416,416,842,616,416,416,840,757,547,842,757,546,541,757,757',
'840,539,757,842,757,416,536,416,757,416,416,416,416,416,416,416,757',
'416,630,632,529,757,757,757,757,522,757,757,453,639,884,757,757,641',
'416,53,416,884,521,757,520,757,53,53,53,644,884,53,53,53,323,53,323',
'323,323,941,323,647,648,505,453,53,53,53,453,453,453,453,496,651,652',
'53,53,891,53,53,53,53,53,927,891,277,277,277,277,277,927,323,323,891',
'492,927,654,487,657,927,323,323,323,323,658,53,53,53,53,53,53,53,53',
'53,53,53,53,53,53,661,452,53,53,53,666,485,53,482,481,53,468,677,53',
'53,464,53,680,53,685,53,690,53,53,53,53,53,53,53,,53,,53,452,,,,452',
'452,452,452,636,636,636,636,636,53,53,53,53,,53,,53,54,54,54,54,54,54',
',,,54,54,,,,54,,54,54,54,54,54,54,54,480,480,480,480,480,54,54,54,54',
'54,54,54,,,54,,,,,,54,54,,54,54,54,54,54,54,54,54,54,,54,54,54,,54,54',
'54,54,54,,,,,,,,,853,,853,853,853,,853,,,,,54,,,54,,,54,54,,,54,,54',
',,,54,,,848,,848,848,848,54,848,853,,,54,54,54,54,,54,54,,853,853,54',
'54,0,0,0,0,0,0,54,,54,0,0,,,,0,848,0,0,0,0,0,0,0,,848,848,848,848,0',
'0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,,,,,',
',,855,,855,855,855,,855,,,,,,0,,,0,,,0,0,,,0,,0,,,,0,672,,672,672,672',
',672,0,855,,,,0,0,0,0,,0,0,855,855,,0,0,837,837,837,837,837,837,0,,0',
'837,837,,,672,837,,837,837,837,837,837,837,837,,672,672,,,837,837,837',
'837,837,837,837,,,837,,,,,,837,837,,837,837,837,837,837,837,837,837',
'837,,837,837,837,,837,837,837,837,837,,,,,,,,,951,,951,951,951,,951',
',,,,837,,,837,,,837,837,,,837,,837,,,,837,,,669,,669,669,669,837,669',
'951,,,837,837,837,837,,837,837,,951,951,837,837,280,280,280,280,280',
'280,837,,837,280,280,,,,280,669,280,280,280,280,280,280,280,,669,669',
'669,669,280,280,280,280,280,280,280,,,280,,,,,,280,280,,280,280,280',
'280,280,280,280,280,280,,280,280,280,,280,280,280,280,280,,,,,,,,,916',
',916,916,916,,916,,,,,280,,,280,,,280,280,,,280,,280,,,,280,,,667,,667',
'667,667,280,667,916,,,280,280,280,280,,280,280,,916,916,280,280,32,32',
'32,32,32,32,280,,280,32,32,,,,32,667,32,32,32,32,32,32,32,,667,667,667',
'667,32,32,32,32,32,32,32,,,32,,,,,,32,32,,32,32,32,32,32,32,32,32,32',
',32,32,32,,32,32,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32',
',,,32,,,518,,518,518,518,32,518,,,,32,32,32,32,,32,32,,,,32,32,656,656',
'656,656,656,656,32,,32,656,656,,,,656,518,656,656,656,656,656,656,656',
',518,518,518,518,656,656,656,656,656,656,656,,,656,,,,,,656,656,,656',
'656,656,656,656,656,656,656,656,,656,656,656,,656,656,656,656,656,,',
',,,,,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,656,,,,656,,,911,,911,911',
'911,656,911,,,,656,656,656,656,,656,656,,,,656,656,113,113,113,113,113',
'113,656,,656,113,113,,,,113,911,113,113,113,113,113,113,113,,911,911',
'911,911,113,113,113,113,113,113,113,,,113,,,,,,113,113,113,113,113,113',
'113,113,113,113,113,113,,113,113,113,,113,113,113,113,113,449,449,449',
'449,449,449,449,,,449,449,,,,,,449,449,,113,,,113,,,113,113,,,113,,113',
'449,,449,113,449,449,449,449,449,449,449,113,449,,,,113,113,113,113',
',113,113,,,,113,113,620,620,620,620,620,620,113,,113,620,620,,,,620',
',620,620,620,620,620,620,620,,,,,,620,620,620,620,620,620,620,,,620',
',,,,,620,620,,620,620,620,620,620,620,620,620,620,,620,620,620,,620',
'620,620,620,620,454,454,454,454,454,454,454,,,454,454,,,,,,454,454,',
'620,,,620,,,620,620,,,620,,620,454,,454,620,454,454,454,454,454,454',
'454,620,454,,,,620,620,620,620,,620,620,,,,620,620,285,285,285,285,285',
'285,620,,620,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285',
'285,285,285,285,285,,,285,,,,,,285,285,,285,285,285,285,285,285,285',
'285,285,,285,285,285,,285,285,285,285,285,451,451,451,451,451,451,451',
',,451,451,,,,,,451,451,,285,,,285,,,285,285,,,285,,285,451,,451,285',
'451,451,451,451,451,451,451,285,451,,,,285,285,285,285,,285,285,,,,285',
'285,220,220,220,220,220,220,285,,285,220,220,,,,220,,220,220,220,220',
'220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,392,220,220,',
'220,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220',
'392,392,392,392,392,392,392,392,392,392,392,,392,392,,,392,392,,220',
',,220,,,220,220,,,220,,220,392,,392,220,392,392,392,392,392,392,392',
'220,392,,,,220,220,220,220,,220,220,,,,220,220,,392,409,,,,220,,220',
'409,409,409,,,409,409,409,874,409,874,874,874,,874,,,,409,409,409,409',
',,,,,,,409,409,,409,409,409,409,409,,,,,,,,,874,874,,,,,,,,874,874,874',
'874,,409,409,409,409,409,409,409,409,409,409,409,409,409,409,,,409,409',
'409,,,409,,,409,,,409,409,,409,,409,,409,,409,409,409,409,409,409,409',
'408,409,409,409,,,,408,408,408,,,408,408,408,446,408,409,409,409,409',
',409,,409,408,408,408,408,,,446,446,,,,408,408,,408,408,408,408,408',
',,,446,,446,,446,446,446,446,,,446,,446,,,,,,,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,,,408,408,408,,,408,,,408,,,408,408',
',408,,408,,408,,408,408,408,408,408,408,408,,408,408,408,,,,,,,,,,,',
',,408,408,408,408,,408,,408,776,776,776,776,776,776,,,,776,776,,,,776',
',776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776,,,776',
',,,,,776,776,,776,776,776,776,776,776,776,776,776,,776,776,776,,776',
'776,776,776,776,450,450,450,450,450,450,450,,,450,450,,,,,,450,450,',
'776,,,776,,,776,776,,,776,,776,450,,450,776,450,450,450,450,450,450',
'450,776,450,,,,776,776,776,776,,776,776,,,,776,776,543,543,543,543,543',
'543,776,,776,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543',
'543,543,543,543,543,,,543,,,,,,543,543,,543,543,543,543,543,543,543',
'543,543,,543,543,543,,543,543,543,543,543,432,432,432,432,432,432,432',
'432,432,432,432,,432,432,,,432,432,,543,,,543,,,543,543,,,543,,543,432',
',432,543,432,432,432,432,432,432,432,543,432,,,,543,543,543,543,,543',
'543,,,,543,543,197,197,197,197,197,197,543,,543,197,197,,,,197,,197',
'197,197,197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,',
'197,197,,197,197,197,197,197,197,197,197,197,,197,197,197,,197,197,197',
'197,197,431,431,431,431,431,431,431,431,431,431,431,,431,431,,,431,431',
',197,,,197,,,197,197,,,197,,197,431,,431,197,431,431,431,431,431,431',
'431,197,431,,,,197,197,197,197,,197,197,,,,197,197,800,800,800,800,800',
'800,197,,197,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800',
'800,800,800,800,800,,,800,,,,,,800,800,,800,800,800,800,800,800,800',
'800,800,,800,800,800,,800,800,800,800,800,448,448,448,448,448,448,448',
',,448,448,,,,,,448,448,,800,,,800,,,800,800,,,800,,800,448,,448,800',
'448,448,448,448,448,448,448,800,448,,,,800,800,800,800,,800,800,,,,800',
'800,806,806,806,806,806,806,800,,800,806,806,,,,806,,806,806,806,806',
'806,806,806,,,,,,806,806,806,806,806,806,806,,,806,,,,,,806,806,,806',
'806,806,806,806,806,806,806,806,,806,806,806,,806,806,806,806,806,447',
'447,447,447,447,447,447,,,447,447,,,,,,447,447,,806,,,806,,,806,806',
',,806,,806,447,,447,806,447,447,447,447,447,447,447,806,447,,,,806,806',
'806,806,,806,806,,,,806,806,910,910,910,910,910,910,806,,806,910,910',
',,,910,,910,910,910,910,910,910,910,,,,,,910,910,910,910,910,910,910',
',,910,,,,,,910,910,,910,910,910,910,910,910,910,910,910,,910,910,910',
',910,910,910,910,910,445,,,,,,,,,,,,,,,,445,445,,910,,,910,,,910,910',
',,910,,910,445,,445,910,445,445,445,445,,,445,910,445,,,,910,910,910',
'910,,910,910,,,,910,910,703,703,703,703,703,703,910,,910,703,703,,,',
'703,,703,703,703,703,703,703,703,,,,,,703,703,703,703,703,703,703,,',
'703,,,,,,703,703,,703,703,703,703,703,703,703,703,703,,703,703,703,',
'703,703,703,703,703,444,,,,,,,,,,,,,,,,444,444,,703,,,703,,,703,703',
',,703,,703,444,,444,703,444,444,444,444,,,444,703,444,,,,703,703,703',
'703,,703,703,,,,703,703,708,708,708,708,708,708,703,,703,708,708,,,',
'708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,,',
'708,,,,,,708,708,,708,708,708,708,708,708,708,708,708,,708,708,708,',
'708,708,708,708,708,443,,,,,,,,,,,,,,,,443,443,,708,,,708,,,708,708',
',,708,,708,443,,443,708,443,443,443,443,,,443,708,443,,,,708,708,708',
'708,,708,708,,,,708,708,540,540,540,540,540,540,708,,708,540,540,,,',
'540,,540,540,540,540,540,540,540,,,,,,540,540,540,540,540,540,540,,',
'540,,,,,,540,540,,540,540,540,540,540,540,540,540,540,,540,540,540,',
'540,540,540,540,540,442,442,442,442,442,442,442,,,442,442,,,,,,442,442',
',540,,,540,,,540,540,,,540,,540,442,,442,540,442,442,442,442,442,442',
'442,540,442,,,,540,540,540,540,,540,540,,,,540,540,627,627,627,627,627',
'627,540,,540,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627',
'627,627,627,627,627,,,627,,,,,,627,627,,627,627,627,627,627,627,627',
'627,627,,627,627,627,,627,627,627,627,627,455,455,455,455,455,455,455',
'455,,455,455,,,,,,455,455,,627,,,627,,,627,627,,,627,,627,455,,455,627',
'455,455,455,455,455,455,455,627,455,,,,627,627,627,627,,627,627,,,,627',
'627,718,718,718,718,718,718,627,,627,718,718,,,,718,,718,718,718,718',
'718,718,718,,,,,,718,718,718,718,718,718,718,,,718,,,,,,718,718,,718',
'718,718,718,718,718,718,718,718,,718,718,718,,718,718,718,718,718,439',
',,,,,,,,,,,,,,,439,439,,718,,,718,,,718,718,,,718,,718,439,,439,718',
'439,439,439,439,,,,718,,,,,718,718,718,718,,718,718,,,,718,718,908,908',
'908,908,908,908,718,,718,908,908,,,,908,,908,908,908,908,908,908,908',
',,,,,908,908,908,908,908,908,908,,,908,,,,,,908,908,,908,908,908,908',
'908,908,908,908,908,,908,908,908,,908,908,908,908,908,441,,,,,,,,,,',
',,,,,441,441,,908,,,908,,,908,908,,,908,,908,441,,,908,441,441,441,441',
',,,908,,,,,908,908,908,908,,908,908,,,,908,908,902,902,902,902,902,902',
'908,,908,902,902,,,,902,,902,902,902,902,902,902,902,,,,,,902,902,902',
'902,902,902,902,,,902,,,,,,902,902,,902,902,902,902,902,902,902,902',
'902,,902,902,902,,902,902,902,902,902,440,,,,,,,,,,,,,,,,440,440,,902',
',,902,,,902,902,,,902,,902,440,,440,902,440,440,440,440,,,,902,,,,,902',
'902,902,902,,902,902,,,,902,902,767,767,767,767,767,767,902,,902,767',
'767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767,767,767',
'767,,,767,,,,,,767,767,,767,767,767,767,767,767,767,767,767,,767,767',
'767,,767,767,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767',
',767,,,,767,,,,,,,,767,,,,,767,767,767,767,,767,767,,,,767,767,775,775',
'775,775,775,775,767,,767,775,775,,,,775,,775,775,775,775,775,775,775',
',,,,,775,775,775,775,775,775,775,,,775,,,,,,775,775,,775,775,775,775',
'775,775,775,775,775,,775,775,775,,775,775,775,775,775,,,,,,,,,,,,,,',
',,,,,775,,,775,,,775,775,,,775,,775,,,,775,,,,,,,,775,,,,,775,775,775',
'775,,775,775,,,,775,775,796,796,796,796,796,796,775,,775,796,796,,,',
'796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,',
'796,,,,,,796,796,,796,796,796,796,796,796,796,796,796,,796,796,796,',
'796,796,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,796',
',,,796,,,,,,,,796,,,,,796,796,796,796,,796,796,,,,796,796,,109,109,109',
',109,796,,796,109,109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109',
'109,109,109,109,109,,,109,,,,,,,109,,,109,109,109,109,109,109,109,109',
',109,109,109,,109,109,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109',
'109,,,109,,,,,,109,,,,,,,,109,,,,,109,109,109,109,,109,109,,,,109,109',
',110,110,110,,110,109,,109,110,110,,,,110,,110,110,110,110,110,110,110',
',,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110,110,110',
'110,110,110,,110,110,110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110',
',,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110,110,,110,110',
',,,110,110,,111,111,111,,111,110,,110,111,111,,,,111,,111,111,111,111',
'111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,,111,,,111,111',
'111,111,111,111,111,111,,111,111,111,,111,111,111,111,111,,,,,,,,,,',
',,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111,,,,,111,111,111',
'111,,111,111,,,,111,111,,112,112,112,112,112,111,,111,112,112,,,,112',
',112,112,112,112,112,112,112,,,,,,112,112,112,112,112,112,112,,,112',
',,,,,112,112,,112,112,112,112,112,112,112,112,112,,112,112,112,,112',
'112,112,112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112,,,112,,112,,',
',112,,,,,,,,112,,,,,112,112,112,112,,112,112,,,,112,112,,649,649,649',
',649,112,,112,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649',
'649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649',
',649,649,649,,649,649,,566,649,566,566,566,,566,,,,,,,,,,,,,,,649,,',
'649,,,649,649,,,649,,,,,,566,566,,,,,,,,566,566,566,566,649,649,649',
'649,,649,649,,,,649,649,,504,504,504,,504,649,,649,504,504,,,,504,,504',
'504,504,504,504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,',
',504,,,504,504,504,504,504,504,504,504,,504,504,504,,504,504,504,504',
'504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504',
',,,,504,504,504,504,,504,504,,,,504,504,,198,198,198,,198,504,,504,198',
'198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198',
'198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,,198,198,198,',
'198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198,,198',
',,,198,,,,,,,,198,,,,,198,198,198,198,,198,198,,,,198,198,,199,199,199',
',199,198,,198,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199',
'199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199',
',199,199,199,,199,199,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199',
'199,,,199,,,,,,199,,,,,,,,199,,,,,199,199,199,199,,199,199,,,,199,199',
',200,200,200,,200,199,,199,200,200,,,,200,,200,200,200,200,200,200,200',
',,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200',
'200,200,200,200,200,200,200,,200,200,200,200,200,,,,,,,,,,,,,,,,,,,',
'200,,,200,,,200,200,,,200,,200,,200,,200,,,,,,,,200,,,,,200,200,200',
'200,,200,200,,,,200,200,,500,500,500,,500,200,,200,500,500,,,,500,,500',
'500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,',
',500,,,500,500,500,500,500,500,500,500,,500,500,500,,500,500,500,500',
'500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,,,500',
',,,,500,500,500,500,,500,500,,,,500,500,,499,499,499,,499,500,,500,499',
'499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499,499,499,499',
'499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499,,499,499,499,',
'499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,,',
',,499,,,,,,,,499,,,,,499,499,499,499,,499,499,,,,499,499,,203,203,203',
',203,499,,499,203,203,,,,203,,203,203,203,203,203,203,203,,,,,,203,203',
'203,203,203,203,203,,,203,,,,,,,203,,,203,203,203,203,203,203,203,203',
',203,203,203,,203,203,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203',
'203,,,203,,,,,,203,,,,,,,,203,,,,,203,203,203,203,,203,203,,,,203,203',
',204,204,204,,204,203,,203,204,204,,,,204,,204,204,204,204,204,204,204',
',,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204,204',
'204,204,204,,204,204,204,,204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204',
',,204,,,204,204,,,204,,204,,,,204,,,,,,,,204,,,,,204,204,204,204,,204',
'204,,,,204,204,,205,205,205,,205,204,,204,205,205,,,,205,,205,205,205',
'205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205',
'205,205,205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,',
',,,,,,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205',
'205,205,,205,205,,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206',
',206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206',
',,,,,,206,,,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206',
'206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,,,,,206,,,,,,',
',206,,,,,206,206,206,206,,206,206,,,,206,206,,207,207,207,,207,206,',
'206,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207,207',
'207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207,,207,207',
'207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207',
',,,,,207,,,,,,,,207,,,,,207,207,207,207,,207,207,,,,207,207,,208,208',
'208,,208,207,,207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208',
'208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208',
'208,,208,208,208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,',
',208,208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,,208,208,,,,208',
'208,208,5,5,5,5,5,208,,208,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5',
'5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,',
',,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,498,498',
'498,,498,5,,5,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498',
'498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498',
',498,498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498',
'498,,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,,498,498',
',495,495,495,,495,498,,498,495,495,,,,495,,495,495,495,495,495,495,495',
',,,,,495,495,495,495,495,495,495,,,495,,,,,,,495,,,495,495,495,495,495',
'495,495,495,,495,495,495,,495,495,,,495,,,,,,,,,,,,,,,,,,,,495,,,495',
',,495,495,,,495,,,,,,,,,,,,,,,,,,,495,495,495,495,,495,495,,,,495,495',
',888,888,888,,888,495,,495,888,888,,,,888,,888,888,888,888,888,888,888',
',,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888,888,888,888,888',
'888,888,888,888,888,888,888,,888,888,888,888,888,,,,,,,,,,,,,,,,,,,',
'888,,,888,,,888,888,,,888,,888,,888,,888,,,,,,,,888,,,,,888,888,888',
'888,,888,888,,,,888,888,,488,488,488,,488,888,,888,488,488,,,,488,,488',
'488,488,488,488,488,488,,,,,,488,488,488,488,488,488,488,,,488,,,,,',
',488,,,488,488,488,488,488,488,488,488,488,488,488,488,,488,488,488',
'488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488,,,488,,488,,488,,488',
',,,,,,,488,,,,,488,488,488,488,,488,488,,,,488,488,,486,486,486,,486',
'488,,488,486,486,,,,486,,486,486,486,486,486,486,486,,,,,,486,486,486',
'486,486,486,486,,,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486',
'486,486,,486,486,,,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486',
',,,,,,,,,,,,,,,,,,486,486,486,486,,486,486,,,,486,486,,219,219,219,',
'219,486,,486,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219,,,,219,219',
',673,673,673,,673,219,,219,673,673,,,,673,,673,673,673,673,673,673,673',
',,,,,673,673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673',
'673,673,673,,673,673,673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673',
',,673,,,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,,673,673',
',,,673,673,,222,222,222,,222,673,,673,222,222,,,,222,,222,222,222,222',
'222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222',
'222,222,222,222,222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,',
',,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222',
'222,,222,222,,,,222,222,,223,223,223,,223,222,,222,223,223,,,,223,,223',
'223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,',
',223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,223,223',
'223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223',
',,,,223,223,223,223,,223,223,,,,223,223,,224,224,224,,224,223,,223,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,',
',,224,,,,,,,,224,,,,,224,224,224,224,,224,224,,,,224,224,,225,225,225',
',225,224,,224,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225',
',225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225',
'225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,,225,225,,,,225,225',
',226,226,226,,226,225,,225,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,,226,226',
',,,226,226,,227,227,227,,227,226,,226,227,227,,,,227,,227,227,227,227',
'227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227',
'227,227,227,227,227,227,,227,227,227,,227,227,227,227,227,,,,,,,,,,',
',,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227',
'227,,227,227,,,,227,227,,228,228,228,,228,227,,227,228,228,,,,228,,228',
'228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,',
',228,,,228,228,228,228,228,228,228,228,,228,228,228,,228,228,228,228',
'228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228',
',,,,228,228,228,228,,228,228,,,,228,228,,229,229,229,,229,228,,228,229',
'229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229',
'229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,',
'229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,',
',,229,,,,,,,,229,,,,,229,229,229,229,,229,229,,,,229,229,,230,230,230',
',230,229,,229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230',
',230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230',
'230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230,230',
',231,231,231,,231,230,,230,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231',
'231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231',
',,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,,231,231',
',,,231,231,,232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232',
'232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232',
'232,232,232,232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,',
',,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232',
'232,,232,232,,,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233',
',,,,233,233,233,233,,233,233,,,,233,233,,234,234,234,,234,233,,233,234',
'234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,',
'234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,',
',,234,,,,,,,,234,,,,,234,234,234,234,,234,234,,,,234,234,,235,235,235',
',235,234,,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,,235,235,,,,235,235',
',236,236,236,,236,235,,235,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236',
',,,236,236,,237,237,237,,237,236,,236,237,237,,,,237,,237,237,237,237',
'237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237',
'237,237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,',
',,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,,237,237,,,,237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238',
',,,,238,238,238,238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,239,,,,,239,239,239,239,,239,239,,,,239,239,,240,240,240',
',240,239,,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240',
',240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240',
'240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240',
',241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241',
',,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242',
'242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242',
'242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,',
',,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,,242,242,,,,242,242,,244,244,244,,244,242,,242,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,,244,244,,,,244,244,,245,245,245,,245,244,,244,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,',
',,245,,,,,,,,245,,,,,245,245,245,245,,245,245,,,,245,245,,246,246,246',
',246,245,,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,,246,246,,,,246,246',
',247,247,247,,247,246,,246,247,247,,,,247,,247,247,247,247,247,247,247',
',,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247',
'247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247',
',,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,,247,247',
',,,247,247,,479,479,479,479,479,247,,247,479,479,,,,479,,479,479,479',
'479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479,,,,,615,479,479',
',479,479,479,479,479,479,479,479,479,,479,479,479,,479,479,479,479,479',
'615,615,615,615,615,615,615,615,615,615,615,,615,615,,,615,615,,479',
',,479,,,479,479,,,479,,479,615,,615,479,615,615,615,615,615,615,615',
'479,615,,,,479,479,479,479,,479,479,,,,479,479,,615,,,,479,479,,479',
'475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,',
',475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475',
'475,475,,475,475,475,,475,475,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475',
',,475,475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475,,475,475,,,',
'475,475,,473,473,473,,473,475,,475,473,473,,,,473,,473,473,473,473,473',
'473,473,,,,,,473,473,473,473,473,473,473,,,473,,,,,,,473,,,473,473,473',
'473,473,473,473,473,473,473,473,473,,473,473,473,473,473,,,,,,,,,,,',
',,,,,,,,473,,,473,,,473,473,,,473,,,,473,,473,,,,,,,,473,,,,,473,473',
'473,473,,473,473,,,,473,473,,253,253,253,,253,473,,473,253,253,,,,253',
',253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253',
',,,,,,253,,,253,253,253,253,253,253,253,253,253,253,253,253,,253,253',
'253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,253,,253,',
'253,,,,,,,,253,,,,,253,253,253,253,,253,253,,,,253,253,,254,254,254',
',254,253,,253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254',
'254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254',
'254,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,',
'254,254,,,254,,254,,254,,254,,,,,,,,254,,,,,254,254,254,254,,254,254',
',,,254,254,,262,262,262,,262,254,,254,262,262,,,,262,,262,262,262,262',
'262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262',
'262,262,262,262,262,262,262,262,262,262,,262,262,262,262,262,,,,,,,',
',,,,,,,,,,,,262,,,262,,,262,262,,,262,,262,,262,,262,,,,,,,,262,,,,',
'262,262,262,262,,262,262,,,,262,262,262,471,471,471,,471,262,,262,471',
'471,,,,471,,471,471,471,471,471,471,471,,,,,,471,471,471,471,471,471',
'471,,,471,,,,,,,471,,,471,471,471,471,471,471,471,471,471,471,471,471',
',471,471,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,,,471,471,,,471,,471',
',471,,471,,,,,,,,471,,,,,471,471,471,471,,471,471,,,,471,471,,269,269',
'269,,269,471,,471,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269',
'269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269',
'269,,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,',
',269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,,269,269,,,,269',
'269,,430,430,430,,430,269,,269,430,430,,,,430,,430,430,430,430,430,430',
'430,,,,,,430,430,430,430,430,430,430,,,430,,,,,,,430,,,430,430,430,430',
'430,430,430,430,,430,430,430,,430,430,430,430,430,,,,,,,,,,,,,,,,,,',
',430,,,430,,,430,430,,,430,,,,,,430,,,,,,,,430,,,,,430,430,430,430,',
'430,430,,,,430,430,,271,271,271,,271,430,,430,271,271,,,,271,,271,271',
'271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271',
',,271,271,271,271,271,271,271,271,,271,271,271,,271,271,271,271,271',
',,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,',
',271,271,271,271,,271,271,,,,271,271,,273,273,273,,273,271,,271,273',
'273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273',
'273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,,273,273,273,',
'273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,,',
',,273,,,,,,,,273,,,,,273,273,273,273,,273,273,,,,273,273,,429,429,429',
',429,273,,273,429,429,,,,429,,429,429,429,429,429,429,429,,,,,,429,429',
'429,429,429,429,429,,,429,,,,,,,429,,,429,429,429,429,429,429,429,429',
',429,429,429,,429,429,429,429,429,,,,,,,,,,,,,,,,,,,,429,,,429,,,429',
'429,,,429,,,,,,429,,,,,,,,429,,,,,429,429,429,429,,429,429,,,,429,429',
',278,278,278,278,278,429,,429,278,278,,,,278,,278,278,278,278,278,278',
'278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,278,278,,278,278,278',
'278,278,278,278,278,278,,278,278,278,,278,278,278,278,278,,,,,,,,,,',
',,,,,,,,,278,,,278,,,278,278,,,278,,278,,,,278,,,,,,,,278,,,,,278,278',
'278,278,,278,278,,,,278,278,,831,831,831,,831,278,,278,831,831,,,,831',
',831,831,831,831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831',
',,,,,,831,,,831,831,831,831,831,831,831,831,,831,831,831,,831,831,,',
'831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,,,,,,,,,,,,,,,,831',
'831,831,831,,831,831,,,,831,831,,428,428,428,,428,831,,831,428,428,',
',,428,,428,428,428,428,428,428,428,,,,,,428,428,428,428,428,428,428',
',,428,,,,,,,428,,,428,428,428,428,428,428,428,428,,428,428,428,,428',
'428,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428,,,428,,,,,,428',
',,,,,,,428,,,,,428,428,428,428,,428,428,,,,428,428,,426,426,426,,426',
'428,,428,426,426,,,,426,,426,426,426,426,426,426,426,,,,,,426,426,426',
'426,426,426,426,,,426,,,,,,,426,,,426,426,426,426,426,426,426,426,426',
'426,426,426,,426,426,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426',
'426,,,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,,426,426,,,',
'426,426,,284,284,284,,284,426,,426,284,284,,,,284,,284,284,284,284,284',
'284,284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284',
'284,284,284,284,284,,284,284,284,,284,284,,,284,726,726,726,726,726',
'726,726,726,726,726,726,,726,726,,,726,726,,284,,,284,,,284,284,,,284',
',,726,,726,,726,726,726,726,726,726,726,,726,,,,284,284,284,284,,284',
'284,,,,284,284,,726,,284,,,284,,284,698,698,698,,698,,,,698,698,,,,698',
',698,698,698,698,698,698,698,,,,,,698,698,698,698,698,698,698,,,698',
',,,,,,698,,,698,698,698,698,698,698,698,698,,698,698,698,,698,698,698',
'698,698,,,,,,,,,,,,,,,,,,,,698,,,698,,,698,698,,,698,,,,,,698,,,,,,',
',698,,,,,698,698,698,698,,698,698,,,,698,698,,591,591,591,,591,698,',
'698,591,591,,,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591',
'591,591,591,,,591,,,,,,,591,,,591,591,591,591,591,591,591,591,,591,591',
'591,,591,591,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591',
',591,,,,591,,,,,,,,591,,,,,591,591,591,591,,591,591,,,,591,591,,817',
'817,817,,817,591,,591,817,817,,,,817,,817,817,817,817,817,817,817,,',
',,,817,817,817,817,817,817,817,,,817,,,,,,,817,,,817,817,817,817,817',
'817,817,817,,817,817,817,,817,817,817,817,817,,,,,,,,,,,,,,,,,,,,817',
',,817,,,817,817,,,817,,,,,,817,,,,,,,,817,,,,,817,817,817,817,,817,817',
',,,817,817,,816,816,816,,816,817,,817,816,816,,,,816,,816,816,816,816',
'816,816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,,,816,,,816,816',
'816,816,816,816,816,816,816,816,816,816,,816,816,816,816,816,,,,,,,',
',,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,816,,816,,,,,,,,816,,,,,816',
'816,816,816,,816,816,,,,816,816,,301,301,301,,301,816,,816,301,301,',
',,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301,301,301,301',
',,301,,,,,,,301,,,301,301,301,301,301,301,301,301,,301,301,301,,301',
'301,,,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,,,,,,,,,,,',
',,,,,301,301,301,301,,301,301,,,,301,301,,389,389,389,,389,301,,301',
'389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389',
'389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389',
',389,389,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,,',
',,,389,,,,,,,,389,,,,,389,389,389,389,,389,389,,,,389,389,,243,243,243',
',243,389,,389,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',746,746,746,,746,243,,243,746,746,,,,746,,746,746,746,746,746,746,746',
',,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746,746,746',
'746,746,746,,746,746,746,,746,746,746,746,746,,,,,,,,,,,,,,,,,,,,746',
',,746,,,746,746,,,746,,,,,,746,,,,,,,,746,,,,,746,746,746,746,,746,746',
',,,746,746,,592,592,592,,592,746,,746,592,592,,,,592,,592,592,592,592',
'592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592',
'592,592,592,592,592,592,,592,592,592,,592,592,592,592,592,,,,,,,,,,',
',,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,592,,,,,592,592,592',
'592,,592,592,,,,592,592,,607,607,607,,607,592,,592,607,607,,,,607,,607',
'607,607,607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,',
',607,,,607,607,607,607,607,607,607,607,,607,607,607,,607,607,607,607',
'607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607',
',,,,607,607,607,607,,607,607,,,,607,607,,595,595,595,,595,607,,607,595',
'595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595',
'595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595,595,595',
',595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,595',
',595,,595,,,,,,,,595,,,,,595,595,595,595,,595,595,,,,595,595,,596,596',
'596,,596,595,,595,596,596,,,,596,,596,596,596,596,596,596,596,,,,,,596',
'596,596,596,596,596,596,,,596,,,,,,,596,,,596,596,596,596,596,596,596',
'596,596,596,596,596,,596,596,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596',
',,596,596,,,596,,,,596,,596,,,,,,,,596,,,,,596,596,596,596,,596,596',
',,,596,596,,597,597,597,,597,596,,596,597,597,,,,597,,597,597,597,597',
'597,597,597,,,,,,597,597,597,597,597,597,597,,,597,,,,,,,597,,,597,597',
'597,597,597,597,597,597,,597,597,597,,597,597,597,597,597,,,,,,,,,,',
',,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,,,,,,,,597,,,,,597,597,597',
'597,,597,597,,,,597,597,,598,598,598,,598,597,,597,598,598,,,,598,,598',
'598,598,598,598,598,598,,,,,,598,598,598,598,598,598,598,,,598,,,,,',
',598,,,598,598,598,598,598,598,598,598,,598,598,598,,598,598,598,598',
'598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,598',
',,,,598,598,598,598,,598,598,,,,598,598,,606,606,606,,606,598,,598,606',
'606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606',
'606,,,606,,,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,',
'606,606,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,,',
',,606,,,,,,,,606,,,,,606,606,606,606,,606,606,,,,606,606,,602,602,602',
',602,606,,606,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602,602',
'602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602,602,602',
',602,602,602,,602,602,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602,,,602',
'602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,,602,602,,,,602,602',
',603,603,603,,603,602,,602,603,603,,,,603,,603,603,603,603,603,603,603',
',,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603',
'603,603,603,,603,603,603,,603,603,603,603,603,,,,,,,,,,,,,,,,,,,,603',
',,603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603,,603,603',
',,,603,603,,562,562,562,,562,603,,603,562,562,,,,562,,562,562,562,562',
'562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,,,562,,,562,562',
'562,562,562,562,562,562,,562,562,562,,562,562,562,562,562,,,,,,,,,,',
',,,,,,,,,562,,,562,,,562,562,,,562,,,,,,562,,,,,,,,562,,,,,562,562,562',
'562,,562,562,,,,562,562,,559,559,559,,559,562,,562,559,559,,,,559,,559',
'559,559,559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,',
',559,,,559,559,559,559,559,559,559,559,559,559,559,559,,559,559,559',
'559,559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,559,,559,,559',
',,,,,,,559,,,,,559,559,559,559,,559,559,,,,559,559,,20,20,20,,20,559',
',559,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20',
',,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,',
',,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,',
'20,20,,,,20,20,,549,549,549,,549,20,,20,549,549,,,,549,,549,549,549',
'549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549',
'549,549,549,549,549,549,549,549,549,549,549,,549,549,549,549,549,,,',
',,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,549,,549,,549,,,,,,,,549',
',,,,549,549,549,549,,549,549,,,,549,549,,548,548,548,,548,549,,549,548',
'548,,,,548,,548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548',
'548,,,548,,,,,,,548,,,548,548,548,548,548,548,548,548,,548,548,548,',
'548,548,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,548',
',,,548,,,,,,,,548,,,,,548,548,548,548,,548,548,,,,548,548,,28,28,28',
',28,548,,548,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28,28,28,28,28',
'28,,,28,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,28,28,,28,28,28,28',
'28,,,,,,,,,,,,,,,,,,,,28,,,28,,,28,28,,,28,,28,,28,,28,,,,,,,,28,,,',
',28,28,28,28,,28,28,,,,28,28,,29,29,29,,29,28,,28,29,29,,,,29,,29,29',
'29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29',
'29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,',
',29,29,,,29,,29,,29,,29,,,,,,,,29,,,,,29,29,29,29,,29,29,,,,29,29,,30',
'30,30,,30,29,,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30',
'30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30',
'30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,,,,,',
'30,,,,,30,30,30,30,,30,30,,,,30,30,,33,33,33,,33,30,,30,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33',
'33,33,33,33,33,33,,33,33,33,,33,33,,,33,,,,,,,,,,,,,,,,,,,,33,,,33,',
',33,33,,,33,,33,,,,,,,,,,,,,,,,,33,33,33,33,,33,33,,,,33,33,,34,34,34',
',34,33,,33,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,818',
'818,818,818,818,818,818,818,818,818,818,,818,818,,,818,818,,34,,,34',
',,34,34,,,34,,,818,,818,,818,818,818,818,818,818,818,,818,,,,34,34,34',
'34,,34,34,,,,34,34,,818,,34,,,34,,34,41,41,41,,41,,,,41,41,,,,41,,41',
'41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41,,,41,41,41',
'41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41',
',,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,,41,41,,,,41,41,,42,42',
'42,,42,41,,41,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42',
'42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42',
'42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42',
'42,42,42,,42,42,,,,42,42,,43,43,43,,43,42,,42,43,43,,,,43,,43,43,43',
'43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43',
'43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43',
',,43,,,,,,43,,,,,,,,43,,,,,43,43,43,43,,43,43,,,,43,43,,633,633,633',
',633,43,,43,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633,633',
'633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633,633,633,633',
',633,633,633,,633,633,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633,,,633',
'633,,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,,633,633,,,,633,633',
',56,56,56,,56,633,,633,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56',
'56,56,56,56,56,,,56,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,56,56,',
'56,56,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,56,,,,56,,,',
',,,,56,,,,,56,56,56,56,,56,56,,,,56,56,,57,57,57,,57,56,,56,57,57,,',
',57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,',
'57,57,57,57,57,57,57,57,57,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,',
',,,57,,,57,,,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,',
'57,57,,638,638,638,,638,57,,57,638,638,,,,638,,638,638,638,638,638,638',
'638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638',
'638,638,638,638,,638,638,638,,638,638,,,638,,,,,,,,,,,,,,,,,,,,638,',
',638,,,638,638,,,638,,,,,,,,,,,,,,,,,,,638,638,638,638,,638,638,,,,638',
'638,,60,60,60,,60,638,,638,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60',
'60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,,60,60,60',
',60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,,',
',,,60,,,,,60,60,60,60,,60,60,,,,60,60,,61,61,61,,61,60,,60,61,61,,,',
'61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61',
'61,61,61,61,61,61,61,,61,61,61,,61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61',
',,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,,61,61,,,,61,61',
',64,64,64,,64,61,,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64',
'64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64',
'64,64,64,650,650,650,650,650,650,650,650,650,650,650,,650,650,,,650',
'650,,64,,,64,,,64,64,,,64,,,650,,650,64,650,650,650,650,650,650,650',
'64,650,,,,64,64,64,64,,64,64,,,,64,64,64,650,,,,64,64,,64,65,65,65,',
'65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,',
'65,,,,,,,65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,,,65,,,,,,,,',
',,,,,,,,,,,65,,,65,,,65,65,,,65,,65,,,,,,,,,,,,,,,,,65,65,65,65,,65',
'65,,,,65,65,,66,66,66,,66,65,,65,66,66,,,,66,,66,66,66,66,66,66,66,',
',,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66',
'66,66,,66,66,,,66,,,,,,,,,,,,,,,,,66,,,66,,,66,,,66,66,,,66,,,,,,,,',
',,,,,,,,,,66,66,66,66,,66,66,,,,66,66,,67,67,67,,67,66,,66,67,67,,,',
'67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67',
'67,67,67,67,67,67,67,,67,67,67,,67,67,,,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,,,,,,,,,,,,,,67,67,67,67,,67,67,,,,67,67,,513,513',
'513,,513,67,,67,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513',
'513,513,513,513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513',
'513,513,513,513,513,,513,513,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513',
',,513,513,,,513,,,,,,513,,,,,,,,513,,,,,513,513,513,513,,513,513,,,',
'513,513,,510,510,510,,510,513,,513,510,510,,,,510,,510,510,510,510,510',
'510,510,,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,,510,510,510',
'510,510,510,510,510,510,510,510,510,,510,510,510,510,510,,,,,,,,,,,',
',,,,,,,,510,,,510,,,510,510,,,510,,510,,,,510,,,,,,,,510,,,,,510,510',
'510,510,,510,510,,,,510,510,,506,506,506,,506,510,,510,506,506,,,,506',
',506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,506',
',,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506,,506,506,506',
'506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,',
',,,,506,,,,,506,506,506,506,,506,506,,,,506,506,,103,103,103,103,103',
'506,,506,103,103,,,,103,,103,103,103,103,103,103,103,,,,,,103,103,103',
'103,103,103,103,,,103,,,,,,103,103,103,103,103,103,103,103,103,103,103',
'103,,103,103,103,,103,103,103,103,103,456,456,456,456,456,456,456,456',
'456,456,456,,456,456,,,456,456,,103,,,103,,,103,103,,,103,,103,456,',
'456,103,456,456,456,456,456,456,456,103,456,,,,103,103,103,103,,103',
'103,,,,103,103,456,456,,,,103,103,,103,108,108,108,,108,,,,108,108,',
',,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108',
',,108,,,,,,,108,,,108,108,108,108,108,108,108,108,,108,108,108,,108',
'108,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,,,,,,108',
',,,,,,,108,,,,,108,108,108,108,,108,108,,,,108,108,,742,742,742,,742',
'108,,108,742,742,,,,742,,742,742,742,742,742,742,742,,,,,,742,742,742',
'742,742,742,742,,,742,,,,,,,742,,,742,742,742,742,742,742,742,742,,742',
'742,742,,742,742,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742',
',,742,,,,,,742,,,,,,,,742,,,,,742,742,742,742,,742,742,,,,742,742,,327',
'327,327,,327,742,,742,327,327,,,,327,,327,327,327,327,327,327,327,,',
',,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327',
'327,327,327,,327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327',
',,327,,,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,,327,327',
',,,327,327,,328,328,328,,328,327,,327,328,328,,,,328,,328,328,328,328',
'328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,,328,,,328,328',
'328,328,328,328,328,328,,328,328,328,,328,328,328,328,328,,,,,,,,,,',
',,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,328,,,,,328,328,328',
'328,,328,328,,,,328,328,,743,743,743,,743,328,,328,743,743,,,,743,,743',
'743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743,,,,,',
',743,,,743,743,743,743,743,743,743,743,,743,743,743,,743,743,743,743',
'743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,,,,,743,,,,,,,,743',
',,,,743,743,743,743,,743,743,,,,743,743,,744,744,744,,744,743,,743,744',
'744,,,,744,,744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744',
'744,,,744,,,,,,,744,,,744,744,744,744,744,744,744,744,,744,744,744,',
'744,744,744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,,744,,,',
',,744,,,,,,,,744,,,,,744,744,744,744,,744,744,,,,744,744,,347,347,347',
',347,744,,744,347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347',
'347,347,347,347,347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347',
',347,347,347,,347,347,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347',
'347,,,347,,,,,,347,,,,,,,,347,,,,,347,347,347,347,,347,347,,,,347,347',
',310,310,310,,310,347,,347,310,310,,,,310,,310,310,310,310,310,310,310',
',,,,,310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310,310,310',
'310,310,310,,310,310,310,,310,310,310,310,310,,,,,,,,,,,,,,,,,,,,310',
',,310,310,,310,310,,,310,,,,,,310,,,,,,,,310,,,,,310,310,310,310,,310',
'310,,,,310,310,,799,799,799,,799,310,,310,799,799,,,,799,,799,799,799',
'799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799,,,,,,,799,,,799',
'799,799,799,799,799,799,799,,799,799,799,,799,799,799,799,799,,,,,,',
',,,,,,,,,,,,,799,,,799,,,799,799,,,799,,799,,,,799,,,,,,,,799,,,,,799',
'799,799,799,,799,799,,,,799,799,,313,313,313,,313,799,,799,313,313,',
',,313,,313,313,313,313,313,313,313,,,,,,313,313,313,313,313,313,313',
',,313,,,,,,,313,,,313,313,313,313,313,313,313,313,,313,313,313,,313',
'313,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,,313,313,,,313,,,,,,313',
',,,,,,,313,,,,,313,313,313,313,,313,313,,,,313,313,,794,794,794,,794',
'313,,313,794,794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794',
'794,794,794,794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794',
'794,794,,794,794,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794',
',,794,,,,,,794,,,,,,,,794,,,,,794,794,794,794,,794,794,,,,794,794,,725',
'725,725,,725,794,,794,725,725,,,,725,,725,725,725,725,725,725,725,,',
',,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725',
'725,725,725,,725,725,725,,725,725,725,725,725,,,,,,,,,,,,,,,,,,,,725',
',,725,,,725,725,,,725,,,,,,725,,,,,,,,725,,,,,725,725,725,725,,725,725',
',,,725,725,,363,363,363,,363,725,,725,363,363,,,,363,,363,363,363,363',
'363,363,363,,,,,,363,363,363,363,363,363,363,,,363,,,,,,,363,,,363,363',
'363,363,363,363,363,363,,363,363,363,,363,363,363,363,363,,,,,,,,,,',
',,,,,,,,,363,,,363,,,363,363,,,363,,,,,,363,,,,,,,,363,,,,,363,363,363',
'363,,363,363,,,,363,363,,727,727,727,,727,363,,363,727,727,,,,727,,727',
'727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727,,,727,,,,,',
',727,,,727,727,727,727,727,727,727,727,,727,727,727,,727,727,727,727',
'727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727,,,,,,,,727',
',,,,727,727,727,727,,727,727,,,,727,727,,771,771,771,,771,727,,727,771',
'771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771,771',
'771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771,',
'771,771,,,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,,,,,,,,',
',,,,,,,,,771,771,771,771,,771,771,,,,771,771,,741,741,741,,741,771,',
'771,741,741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741',
'741,741,741,,,741,,,,,,,741,,,741,741,741,741,741,741,741,741,,741,741',
'741,,741,741,741,741,741,733,733,733,733,733,733,733,733,733,733,733',
',733,733,,,733,733,,741,,,741,,,741,741,,,741,,,733,,733,741,733,733',
'733,733,733,733,733,741,733,,,,741,741,741,741,,741,741,,,,741,741,',
'733,399,,,,741,,741,399,399,399,,,399,399,399,,399,,,,,,,,,399,399,399',
',,,,,,,,399,399,,399,399,399,399,399,,,,,,,,,,,,,,,,,,,,,,,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,,,399,399,399,,,399,,399',
'399,,,399,399,,399,,399,,399,,399,399,399,399,399,399,399,27,399,399',
'399,,,,27,27,27,,,27,27,27,,27,399,399,,399,,399,,,,27,27,,,,,,,,,27',
'27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27',
'27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,27',
'27,27,27,27,458,27,,27,,,,458,458,458,,,458,458,458,,458,27,27,,27,',
'27,,,,458,,,,,,,,,,458,458,,458,458,458,458,458,,,,,,,,,,,,,,,,,,,,',
',,26,,,,,,,26,26,26,,458,26,26,26,,26,,458,,,,,458,458,26,26,26,,,,',
',,,,26,26,,26,26,26,26,26,,,458,,,,,,,,,,,,,,458,,,,,458,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,,,26,26,26,,,26,,26,26,,,26,26,,26,,26',
',26,,26,26,26,26,26,26,26,461,26,26,26,,,,461,461,461,,,461,461,461',
',461,26,26,,26,,26,,,,461,,,,,,,,,,461,461,,461,461,461,461,461,,,,',
',490,490,,,490,,,,,,,,490,490,,490,490,490,490,490,490,490,,,490,490',
',,461,490,490,490,490,,,461,,,490,,461,461,,,,,490,490,,490,490,490',
'490,490,490,490,490,490,490,490,,,490,461,,,,,,,,,,,,,,461,,,,,461,588',
'588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588',
'588,588,588,588,588,588,,,,588,588,588,588,588,588,588,588,588,588,',
',,,,588,588,588,588,588,588,588,588,588,,,588,,,,,,,,588,588,,588,588',
'588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,,,,,,,,,588,588',
',588,588,588,588,588,588,588,588,588,588,588,,,588,588,,,,,,,,,,,588',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8',
'8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,8,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,',
',,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,',
',,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,9,380,380,380',
'380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380',
'380,380,380,380,,,,380,380,380,380,380,380,380,380,380,380,,,,,,380',
'380,380,380,380,380,380,380,380,,,380,,,,,,,,380,380,,380,380,380,380',
'380,380,380,,,380,380,,,,380,380,380,380,,,,,,,,,,,,,,380,380,,380,380',
'380,380,380,380,380,380,380,380,380,,,380,380,,,,,,,,,,,380,711,711',
'711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711,711',
'711,711,711,711,711,,,,711,711,711,711,711,711,711,711,711,711,,,,,',
'711,711,711,711,711,711,711,711,711,,,711,,,,,,,,711,711,,711,711,711',
'711,711,711,711,,,711,711,,,,711,711,711,711,,,,,,,,,,,,,,711,711,,711',
'711,711,711,711,711,711,711,711,711,711,,,711,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,,,,68,68,68,68,68,68',
'68,68,68,68,,,,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,,,,,,68,68',
',68,68,68,68,68,68,68,,,68,68,,,,68,68,68,68,,,,,,68,,,,,,,,68,68,,68',
'68,68,68,68,68,68,68,68,68,68,202,202,68,,202,,,,,,,,202,202,,202,202',
'202,202,202,202,202,,,202,202,,,,202,202,202,202,,,,,,202,,,,,,,,202',
'202,,202,202,202,202,202,202,202,202,202,202,202,424,424,202,,424,,',
',,,,,424,424,,424,424,424,424,424,424,424,,,424,424,,,,424,424,424,424',
',,,,,424,,,,,,,,424,424,,424,424,424,424,424,424,424,424,424,424,424',
'425,425,424,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,,,425,425',
',,,425,425,425,425,,,,,,425,,,,,,,,425,425,,425,425,425,425,425,425',
'425,425,425,425,425,920,920,425,,920,,,,,,,,920,920,,920,920,920,920',
'920,920,920,,,920,920,,,,920,920,920,920,,,,,,920,,,,,,,,920,920,,920',
'920,920,920,920,920,920,920,920,920,920,489,489,920,,489,,,,,,,,489',
'489,,489,489,489,489,489,489,489,,,489,489,,,,489,489,489,489,,,,,,489',
',,,,,,,489,489,,489,489,489,489,489,489,489,489,489,489,489,558,558',
'489,,558,,,,,,,,558,558,,558,558,558,558,558,558,558,,,558,558,,,,558',
'558,558,558,,,,,,558,,,,,,,,558,558,,558,558,558,558,558,558,558,558',
'558,558,558,557,557,558,,557,,,,,,,,557,557,,557,557,557,557,557,557',
'557,,,557,557,,,,557,557,557,557,,,,,,557,,,,,,,,557,557,,557,557,557',
'557,557,557,557,557,557,557,557,501,501,557,,501,,,,,,,,501,501,,501',
'501,501,501,501,501,501,,,501,501,,,,501,501,501,501,,,,,,501,,,,,,',
',501,501,,501,501,501,501,501,501,501,501,501,501,501,551,551,501,,551',
',,,,,,,551,551,,551,551,551,551,551,551,551,,,551,551,,,,551,551,551',
'551,,,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551',
'551,550,550,551,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,,,550',
'550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550,550',
'550,550,550,550,550,550,250,250,550,,250,,,,,,,,250,250,,250,250,250',
'250,250,250,250,,,250,250,,,,250,250,250,250,,,,,,,,,,,,,,250,250,,250',
'250,250,250,250,250,250,250,250,250,250,251,251,250,,251,,,,,,,,251',
'251,,251,251,251,251,251,251,251,,,251,251,,,,251,251,251,251,,,,,,',
',,,,,,,251,251,,251,251,251,251,251,251,251,251,251,251,251,890,890',
'251,,890,,,,,,,,890,890,,890,890,890,890,890,890,890,,,890,890,,,,890',
'890,890,890,,,,,,890,,,,,,,,890,890,,890,890,890,890,890,890,890,890',
'890,890,890,502,502,890,,502,,,,,,,,502,502,,502,502,502,502,502,502',
'502,,,502,502,,,,502,502,502,502,,,,,,502,,,,,,,,502,502,,502,502,502',
'502,502,502,502,502,502,502,502,201,201,502,,201,,,,,,,,201,201,,201',
'201,201,201,201,201,201,,,201,201,,,,201,201,201,201,,,,,,201,,,,,,',
',201,201,,201,201,201,201,201,201,201,201,201,201,201,889,889,201,,889',
',,,,,,,889,889,,889,889,889,889,889,889,889,,,889,889,,,,889,889,889',
'889,,,,,,889,,,,,,,,889,889,,889,889,889,889,889,889,889,889,889,889',
'889,,,889,736,736,736,736,736,736,736,736,736,736,736,,736,736,,,736',
'736,,,,,,,,,,,,,,,736,,736,,736,736,736,736,736,736,736,,736,,738,738',
'738,738,738,738,738,738,738,738,738,,738,738,,736,738,738,,,,,,,,,,',
',,,,738,,738,,738,738,738,738,738,738,738,,738,,740,740,740,740,740',
'740,740,740,740,740,740,,740,740,,738,740,740,,,,,,,,,,,,,,,740,,740',
',740,740,740,740,740,740,740,,740,,264,264,264,264,264,264,264,264,264',
'264,264,,264,264,,740,264,264,,,,,,,,,,,,,,,264,,264,,264,264,264,264',
'264,264,264,,264,,503,503,503,503,503,503,503,503,503,503,503,,503,503',
',264,503,503,,,,,,,,,,,,,,,503,,503,,503,503,503,503,503,503,503,,503',
',815,815,815,815,815,815,815,815,815,815,815,,815,815,,503,815,815,',
',,,,,,,,,,,,,815,,815,,815,815,815,815,815,815,815,,815,,411,411,411',
'411,411,411,411,411,411,411,411,,411,411,,815,411,411,,,,,,,,,,,,,,',
'411,,411,,411,411,411,411,411,411,411,,411,,21,21,21,21,21,21,21,21',
'21,21,21,,21,21,,411,21,21,,,,,,,,,,,,,,,21,,21,,21,21,21,21,21,21,21',
',21,,731,731,731,731,731,731,731,731,731,731,731,,731,731,,21,731,731',
',,,,,,,,,,,,,,731,,731,,731,731,731,731,731,731,731,,731,,,,,,,,,,,',
',,,,,731' ]
        racc_action_check = arr = ::Array.new(23417, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1494,  1020,   nil,   451,   nil,  6989,   983,  1005, 21429, 21553,
   990,   nil,   961,  1009,   472,   387,   938,   778,   nil,   -35,
 15630, 23243,  1039,   nil,   644,   148, 21066, 20891, 16005, 16130,
 16255,   nil,  1869, 16380, 16505,   nil,   935,   354,   267,  1007,
   758, 16638, 16763, 16888,   929,   516,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1236,  1369,   nil, 17138, 17263,   -10,   nil,
 17513, 17638,   nil,   nil, 17763, 17896, 18021, 18146, 21913,   nil,
   nil,   nil,   nil,   nil,   337,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   598,   nil,   nil,
     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1053,   nil, 18646,   nil,   nil,   nil,   nil, 18779,  4864,
  4989,  5114,  5239,  2119,   nil,   474,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   890,   nil,  3114,  5614,  5739,
  5864, 22813, 21973,  6239,  6364,  6489,  6614,  6739,  6864,   nil,
   nil,   570,   212,   132,   952,   114,   817,   851,   nil,  7739,
  2494,   842,  7989,  8114,  8239,  8364,  8489,  8614,  8739,  8864,
  8989,  9114,  9239,  9364,  9489,  9614,  9739,  9864,  9989, 10114,
 10239, 10364, 10489, 14005, 10614, 10739, 10864, 10989,   nil,   nil,
 22573, 22633,   833, 11497, 11622,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 11747,   nil, 23059,   nil,   796,   789,   nil, 11997,
   827, 12247,   nil, 12372,   nil,   nil,    99,  1243, 12622,   736,
  1744,   725,   736,   694, 13122,  2369,   606,   630,   761,   767,
   863,   nil,   727,   682,   183,   nil,   nil,   nil,   717,   405,
   650, 13755,   nil,   196,   703,   695,   864,   nil,   679,   nil,
 19654,   734,   723, 19904,   nil,   -96,    72,   603,   577,   -68,
   521,   nil,   nil,  1200,   455,    34,    -7, 19029, 19154,   -97,
   586,   460,    40,    41,   867,   476,    25,   464,   nil,   nil,
   203,   413,   377,   nil,   886,   nil,    30, 19529,   nil,   nil,
   nil,   149,   293,   297,   441,   476,   -22,   665,   663,   559,
   nil,   379,   nil, 20279,   nil,   162,   377,   285,   337,    -9,
   364,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   352,
 21677,   nil,   nil,   nil,   nil,   342,   nil,   313,   nil, 13880,
   305,   nil,  2494,   305,   nil,   193,   149,   237,   263, 20782,
   nil,   nil,   nil,   343,   109,   138,   nil,   nil,  2731,  2622,
   nil, 23197,   nil,    75,   nil,   nil,  1108,   nil,   nil,   nil,
   nil,   169,   nil,    31, 22033, 22093, 12997,   -54, 12872, 12497,
 12122,  3114,  2989,   166,   302,    33,    22,    14,   -62,  4114,
  4364,  4239,  3864,  3739,  3614,  3489,  2680,  3364,  3239,  2119,
  2864,  2369,  1251,  1163,  2244,  3989, 18646,   280, 21000,   nil,
   nil, 21175,   nil,   nil,  1205,   nil,   149,   -52,  1201,   nil,
   nil, 11872,   nil, 11372,   nil, 11247,   nil,   nil,   nil, 11114,
  1354,  1199,  1195,   nil,   nil,  1193,  7614,  1168,  7489, 22213,
 21173,   972,  1202,   nil,   nil,  7239,  1140,   nil,  7114,  6114,
  5989, 22393, 22753, 23105,  5489,  1246, 18521,   nil,   584,   nil,
 18396,   nil,   nil, 18271,   nil,   nil,   nil,   -22,  1922,   nil,
  1112,  1110,  1097,   nil,   nil,   nil,   nil,   nil,   nil,  1086,
   nil,   598,   nil,   nil,   nil,   nil,  1156,   nil,   nil,  1151,
  3864,  1186,   nil,  2989,    12,    31,  1181,  1185, 15880, 15755,
 22513, 22453,    11,   nil,   nil,   974,   nil, 22333, 22273, 15505,
   nil,   nil, 15380,   531,   -34,   858,  5377,   nil,   nil,   nil,
   160,   nil,   nil,   nil,   841,   nil,   nil,   nil,  1046,   nil,
   nil,   273,   nil,   nil,  1024,   nil,   nil,   nil, 21305,   nil,
  1021, 13380, 14255,   434,  1055, 14505, 14630, 14755, 14880,  1052,
   nil,   nil, 15130, 15255,  1051,   nil, 15005, 14380,   nil,   nil,
   213,   -75,   468,   234,  1042, 11114,  1061,   nil,   530,   nil,
  2244,   nil,   nil,   nil,   nil,   157,   nil,  3989,   983,   nil,
  1090,   nil,  1133, 17013,   nil,   nil,  1318,    12, 17388,  1101,
   nil,  1108,   229,   200,  1157,   437,   992,  1169,  1130,  5364,
 17763,  1204,  1205,   167,  1285,   nil,  1994,  1166,  1214,   nil,
   nil,  1190,   137,   nil,   nil,   nil,  1190,  1797,   nil,  1672,
   nil,   nil,  1545,  7864,   nil,   562,   nil,  1199,   336,   nil,
  1207,   nil,   nil,   746,   nil,  1321,   nil,   nil,   nil,   nil,
  1328,   nil,    13,   -79,    26,    39,    24,   150, 13255,   346,
   993,   nil,   125,  3614,   247,   nil,   nil,   282,  3739,   786,
   686, 21801,   nil,   nil,   nil,   nil,   nil,   nil,  4114,   nil,
   nil,   nil,   nil,   nil,   315, 20154, 13122, 20404,   nil,   350,
   nil, 23289,   nil, 20654,   nil,   nil, 22921,   nil, 22967,   nil,
 23013, 20654, 18904, 19279, 19404,   -76, 14130,   372,   374,   384,
   nil,   407,   386,   719,   388,   nil,   520,  1108,   445,   550,
   nil,   nil,   438,   204,   nil,   nil,   nil,  4489,   nil,   nil,
    40, 20529,   nil,   514,   nil,  4614,  2864,   505,   504,   527,
   nil,   nil,   529,   531,   nil,   549,   nil,   561,   535,   564,
   201,   nil,   708,   nil, 20029,   721,  4739,   733,   nil, 19779,
  3239,    61,    63,   nil,   766,   nil,  3364,   nil,   780,   667,
   nil,   nil,   688,   675,   nil, 23151, 13630, 13505, 16505,   911,
   nil,  1036,   nil,   nil,   881,   nil,   719,   717,   nil,   nil,
   nil, 12747,   nil,   758,   nil,   nil,   nil,  1619,   435,   995,
  1108,   827,  1111,   nil,   nil,   789,   895,   nil,  1422,   nil,
   nil,  1006,   nil,  1392,   nil,  1516,   nil,   nil,   nil,   -34,
   591,   804,   nil,    32,   nil,   930,   933,   nil,   385,   nil,
   nil,   936,   nil,   nil,  2586,   nil,   825,   829,   842,   847,
   nil,   862,   nil,   665,  1154,   941,   nil,   990,  7364, 22873,
 22693,  1197,   nil,   nil,   900,   910,   914,   921,   923,   748,
   925,   873,  4364,   nil,   nil,   nil,   nil,   nil,  4239,   nil,
  3489,  2047,   nil,   nil,   658,   nil,  1767,   nil,   nil,   nil,
 22153,   nil,   nil,   957,   -11,    33,    41,  1203,   nil,   756,
   nil,   nil,   nil,   778,   991,   362,  1112,  1113,  1003,  1015,
  1016,  1127,   156,   783,     6,   768,   866,   nil,   nil,   nil,
   nil,  1642,   nil,   nil,   nil,   nil,   975,   nil ]

racc_action_default = [
    -3,  -549,    -1,  -535,    -4,  -549,    -7,  -549,  -549,  -549,
  -549,   -27,  -549,  -549,  -549,  -274,  -549,   -39,   -42,  -537,
  -549,   -47,   -49,   -50,   -51,  -255,  -255,  -255,  -285,  -320,
  -321,   -67,   -11,   -71,   -79,   -81,  -549,  -464,  -465,  -549,
  -549,  -549,  -549,  -549,  -537,  -236,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -525,   -11,  -277,  -548,  -517,  -293,  -375,
  -549,  -549,  -298,  -301,  -535,  -549,  -549,  -549,  -549,  -322,
  -323,  -413,  -414,  -415,  -416,  -417,  -432,  -420,  -421,  -434,
  -436,  -425,  -430,  -446,  -434,  -448,  -449,  -523,  -453,  -454,
  -524,  -456,  -457,  -458,  -459,  -460,  -461,  -462,  -463,  -468,
  -469,  -549,    -2,  -536,  -544,  -545,  -546,    -6,  -549,  -549,
  -549,  -549,  -549,    -3,   -15,  -549,  -110,  -111,  -112,  -113,
  -114,  -115,  -116,  -117,  -118,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,
  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -190,  -191,   -20,  -119,   -11,  -549,  -549,
  -245,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -537,  -538,
   -46,  -549,  -464,  -465,  -549,  -274,  -549,  -549,  -228,  -549,
   -11,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -383,  -385,
  -549,  -549,   -56,  -245,  -549,  -292,  -388,  -397,  -399,   -62,
  -394,   -63,  -537,   -64,  -237,  -250,  -259,  -259,  -254,  -549,
  -260,  -549,  -519,  -549,   -65,   -66,  -535,   -12,  -549,   -69,
   -11,  -537,  -549,   -72,   -75,   -11,   -87,   -88,  -549,  -549,
   -95,  -285,  -288,  -537,  -549,  -320,  -321,  -324,  -395,  -549,
   -77,  -549,   -83,  -282,  -450,  -451,  -549,  -213,  -214,  -229,
  -549,  -405,  -549,  -549,  -238,  -541,  -541,  -549,  -549,  -541,
  -549,  -294,  -295,  -489,   -48,  -549,  -549,  -549,  -549,  -535,
  -549,  -536,  -464,  -465,  -549,  -549,  -274,  -549,  -334,  -335,
  -105,  -106,  -549,  -108,  -549,  -274,  -549,  -549,  -464,  -465,
  -313,  -110,  -111,  -151,  -152,  -153,  -169,  -174,  -181,  -184,
  -315,  -549,  -515,  -549,  -418,  -549,  -549,  -549,  -549,  -549,
  -549,   958,    -5,  -547,   -21,   -22,   -23,   -24,   -25,  -549,
  -549,   -17,   -18,   -19,  -120,  -549,   -28,   -37,   -38,  -549,
  -549,   -29,  -194,  -537,  -246,  -259,  -259,  -526,  -527,  -255,
  -392,  -528,  -529,  -527,  -526,  -255,  -391,  -393,  -528,  -529,
   -35,  -202,   -36,  -549,   -40,   -41,  -192,  -260,   -43,   -44,
   -45,  -537,  -291,  -549,  -549,  -549,  -245,  -282,  -549,  -549,
  -549,  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -215,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,  -230,  -231,  -232,  -233,  -537,  -364,  -255,  -526,
  -527,  -255,   -54,   -57,  -537,  -256,  -364,  -364,  -537,  -287,
  -251,  -549,  -252,  -549,  -257,  -549,  -261,  -522,   -10,  -536,
   -14,  -537,   -68,  -280,   -84,   -73,  -549,  -537,  -245,  -549,
  -549,   -94,  -549,  -450,  -451,  -549,   -80,   -85,  -549,  -549,
  -549,  -549,  -549,  -234,  -549,  -548,  -548,  -276,  -278,  -239,
  -543,  -542,  -241,  -543,  -283,  -284,  -518,  -549,  -489,  -378,
  -514,  -514,  -514,  -488,  -490,  -491,  -492,  -493,  -494,  -495,
  -496,  -549,  -498,  -504,  -506,  -507,  -509,  -510,  -511,  -549,
   -11,  -325,  -326,   -11,  -549,  -549,  -549,  -549,  -549,  -245,
  -549,  -549,  -282,  -306,  -105,  -106,  -107,  -549,  -549,  -245,
  -309,  -470,  -549,  -549,  -549,   -11,  -489,  -317,  -533,  -534,
  -537,  -419,  -433,  -438,  -549,  -440,  -422,  -435,  -549,  -437,
  -424,  -549,  -427,  -429,  -549,  -447,    -8,   -16,  -549,   -26,
  -266,  -549,  -549,  -396,  -549,  -247,  -249,  -549,  -549,   -58,
  -244,  -389,  -549,  -549,   -60,  -390,  -549,  -549,  -290,  -539,
  -526,  -527,  -526,  -527,  -537,  -192,  -549,  -365,  -369,  -367,
   -11,   -52,  -386,   -53,  -387,  -364,  -242,   -11,   -11,  -286,
  -259,  -258,  -262,  -549,  -520,  -521,   -13,   -70,  -549,   -76,
   -82,  -537,  -526,  -527,  -243,   -91,   -93,  -549,   -78,  -549,
  -201,  -211,  -212,  -537,  -548,  -332,   -11,  -406,  -548,  -407,
  -408,  -537,  -541,  -376,  -379,  -381,  -369,  -549,  -481,  -549,
  -484,  -486,  -549,  -549,  -336,  -549,  -338,  -340,  -347,  -495,
  -537,  -508,  -512,  -548,  -327,  -548,  -299,  -328,  -329,  -302,
  -549,  -305,  -549,  -537,  -526,  -527,  -530,  -281,  -549,  -105,
  -106,  -109,  -537,   -11,  -549,  -472,  -311,  -549,   -11,  -489,
  -549,  -549,  -516,  -439,  -442,  -443,  -444,  -445,   -11,  -423,
  -426,  -428,  -431,  -121,  -264,  -549,  -195,  -549,  -540,  -259,
   -31,  -197,   -32,  -198,   -59,   -33,  -200,   -34,  -199,   -61,
  -193,  -549,  -549,  -549,  -549,  -396,  -549,  -514,  -514,  -514,
  -363,  -549,  -369,  -549,  -495,  -502,  -549,   -11,  -549,  -549,
  -253,  -263,   -74,   -89,   -86,  -289,    -9,   -11,  -412,  -333,
  -549,  -549,  -410,  -549,  -240,   -11,   -11,  -537,  -514,  -514,
  -499,  -513,  -514,  -514,  -505,  -514,  -500,  -537,  -549,  -345,
  -549,  -497,  -549,  -330,  -549,  -549,   -11,   -11,  -304,  -549,
   -11,  -396,  -549,  -396,  -549,  -471,   -11,  -314,  -549,  -537,
  -474,  -318,  -549,  -265,   -30,  -196,  -248,  -549,  -235,  -354,
  -356,  -549,  -359,  -361,  -549,  -366,  -549,  -370,  -371,  -373,
  -374,  -549,  -384,  -549,  -398,  -400,  -411,   -11,   -96,   -97,
  -549,  -549,  -104,  -409,  -279,  -549,  -549,  -377,  -549,  -477,
  -479,  -549,  -482,  -549,  -485,  -549,  -487,  -337,  -339,  -343,
  -549,  -348,  -296,  -549,  -297,  -549,  -549,  -262,  -548,  -307,
  -310,  -549,  -316,  -473,  -489,  -441,  -514,  -514,  -514,  -514,
  -503,  -514,  -368,  -549,  -501,  -549,   -55,  -405,  -245,  -549,
  -549,  -103,  -380,  -382,  -514,  -514,  -514,  -514,  -341,  -549,
  -346,  -549,   -11,  -300,  -303,  -401,  -402,  -403,   -11,  -312,
   -11,  -549,  -351,  -353,  -549,  -357,  -549,  -360,  -362,  -372,
  -549,  -282,  -404,  -537,  -526,  -527,  -530,  -102,  -475,  -549,
  -478,  -480,  -483,  -549,  -344,  -548,  -549,  -549,  -514,  -514,
  -514,  -514,  -281,  -530,  -396,  -514,  -342,  -331,  -308,  -319,
  -349,  -549,  -352,  -355,  -358,  -476,  -514,  -350 ]

clist = [
'119,119,256,260,312,37,505,360,415,708,37,283,314,106,124,124,393,792',
'523,463,300,210,207,540,543,265,265,265,114,196,748,6,519,297,297,784',
'6,37,286,286,325,326,122,122,329,634,547,310,654,399,405,556,631,861',
'631,593,252,259,261,37,119,472,279,103,749,297,297,297,102,464,332,348',
'348,348,106,509,512,680,751,516,2,828,107,496,880,634,830,388,374,375',
'376,377,281,412,858,663,686,689,458,461,324,324,622,323,324,624,249',
'572,37,579,582,780,620,779,366,782,775,37,37,370,776,627,628,900,346',
'350,777,25,457,330,466,467,25,905,6,658,263,274,275,770,364,13,365,378',
'6,367,13,25,324,324,324,324,581,369,713,25,25,25,718,25,778,368,934',
'588,317,625,1,380,634,362,318,321,322,13,880,339,631,631,400,195,372',
'25,266,266,266,337,560,25,25,766,472,25,361,379,409,13,946,265,567,386',
'391,313,37,661,410,414,327,858,796,328,315,919,826,523,784,797,830,698',
'908,703,806,787,565,566,711,37,874,666,795,752,25,876,827,517,,25,25',
'25,25,25,25,,614,,13,418,419,420,421,,265,265,,13,13,,,,,265,,523,690',
'780,,877,701,878,639,947,485,256,399,405,,260,745,648,,497,757,,,37',
'297,37,106,,,286,37,267,267,267,894,,492,,,780,,297,,763,641,,286,544',
'545,480,279,,,750,,279,,910,,316,319,,,721,25,25,25,25,,,25,25,25,25',
'25,25,479,644,13,106,481,478,,,,487,,25,,644,,,390,508,869,801,561,938',
'390,,,13,465,,803,693,734,324,324,,468,739,119,,,702,600,,,,25,25,605',
',,,124,564,634,25,800,,,,546,659,594,631,644,,587,400,,570,523,25,644',
'25,266,,415,906,25,,122,,266,409,809,13,762,13,774,265,760,,13,,,,599',
',,,,600,604,,600,,25,,,,,,,,,,,,,,25,25,,,,616,,,660,,497,38,400,,837',
',38,,,497,25,,,,400,,,,409,282,37,265,297,,,621,25,286,623,,409,297',
',38,287,287,286,,,,,,,,,,636,,,,,707,,267,,38,,,,760,,267,,400,,,333',
'349,349,349,,400,,,,,,,704,409,653,37,265,,37,409,,,,25,687,687,265',
',,,,902,,,,,,,38,523,37,,,705,706,,,38,38,,119,,922,,907,944,,16,,,',
',16,,124,,,,730,732,,422,324,735,737,,25,414,723,,768,,,,772,25,497',
'594,,16,13,600,122,,605,37,,764,,,,25,37,37,,,,,297,,,16,674,286,594',
',,,385,297,811,,338,804,286,469,,,808,,390,37,38,,773,,,25,,,25,282',
',,482,,25,,802,,,13,,,13,38,25,,,25,16,,25,,,,594,,,16,16,,692,119,923',
'594,13,,37,,,,,37,805,,,,,,810,,,37,25,25,,,814,25,25,282,,25,630,,282',
'644,324,,,,,38,,38,,25,,287,38,,,,25,25,871,,,,,13,37,,,,287,,13,13',
',297,37,662,863,,838,,,,37,37,,25,16,,674,,,789,,413,,,,,,13,,,,37,37',
',,37,,16,,,,37,687,,608,,,,,,,,747,,,25,,,,,25,297,,,324,25,348,,,,',
',37,,13,25,,,,13,,,,,25,,,626,729,13,937,629,,,,16,400,16,,,,,16,783',
'637,,785,,,,640,,409,,25,265,,,,,,,,,25,,,,13,674,,674,25,25,,,,37,13',
',,,409,37,,37,13,13,,,15,25,,25,25,15,594,25,,,,,,25,,,,13,13,,,13,',
',38,,,13,,,,287,15,290,290,,,,,,287,,,712,25,,,,,,898,674,,,15,,,,13',
',,,,,,336,345,345,,,,683,,,685,,,,,,,,,,,38,,,38,,674,,674,,,25,,,,',
',,,15,,879,,,881,25,38,,15,15,,25,,25,,,,,,13,674,,765,,,13,,13,895',
',,896,,897,,,,,,,,,16,,,,,756,,791,,,,,758,759,,,,,,38,,,,,,,38,38,',
',,,,,,,,287,,,,769,320,,,,,,287,939,,15,940,,941,38,,,,,,16,,,16,,,945',
',,,,,,15,,,,,,,,,,,,16,,,956,,,,,,,,,,,,,38,812,847,,,38,,,,,,,857,',
',38,,,,,,,,,,413,,,,,15,,15,,873,,290,15,,16,833,,,,,,16,16,,,836,,',
'290,38,,,,845,846,,,,,38,,,,839,,,,38,38,,16,,,,865,866,387,,868,,,',
'417,,,,,,38,38,,,38,,,,,,38,,,,,,,,,,,,,,,,,887,,16,,,,,16,349,,,,,',
'38,,,16,,,,,,,,,,,,,,,474,,476,,477,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,935',
'16,,,,843,936,,,16,16,,,,38,,,,,,38,,38,,,,,,,,16,16,,,16,,,,,,16,,',
',,,15,,,,,,14,290,,,,14,,,,,290,668,670,671,,,,,,16,211,,,,,,,,211,211',
'211,,14,288,288,590,,,,,,,,,,,,,,,,,,,14,15,,,15,,211,211,,,211,334',
'344,344,,,,,,,,,,,,,15,,,,16,,,,,717,16,,16,,,,,,,,,,,14,,,,,211,211',
'211,211,14,14,,,,632,,320,,635,,,,,,,,,,,,,,15,,,,,,,15,15,,,,,,,,,657',
'290,,,632,,,320,,,,,290,,,,,,,15,,,,,,,,,,,,,,,,,,,,,,,417,,,14,211',
'211,211,,,211,211,211,211,211,211,,,,,,,,,,15,,14,,,15,,,,,,,,,,15,',
',,724,820,822,823,632,320,,,,,,,,,,,211,211,,,,,,,,211,,,,,,,849,850',
',15,852,854,,856,,14,761,14,,15,,288,14,842,,,,15,15,,,,,,,,,,288,,',
',,,,,,,15,15,211,,15,,,,786,,15,,,,,,211,211,,,,,,,,,,,,,,,,,,345,211',
',,,,15,,,,,,,,,,,211,,,,912,913,915,917,813,918,,,,,,,,,,,,,928,930',
'931,932,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,,,,,15,,15,211,,,950,952,953',
'954,,,,955,,,,,,,,,867,,957,,,,,,,,,,,,,,,320,,,,,,,,,,,,,,,,,14,,,',
',,,288,,211,,,,,,,288,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',14,,,14,,,,,,211,,,,,,,,,,211,,,211,,,14,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,211,211,,,,211,211,,,211,,,,,,,,,,,,,,14,,,,,,,14,14,,,,,,,,218',
',288,,,,,,264,264,264,,,288,,,,,,,14,307,308,309,,,,,,,,,,,,,264,264',
',,,,,,,,,,,,,,,,,,,,,,,,211,,,,,14,,,,,14,,,,,,,,,,14,,,,,,,,,211,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,14,,,,,,,,,,14,,,,840,,,,14,14,,,,,,,,,,',
',,,,,,,211,,14,14,,,14,,,,,,14,,,,,,,,264,392,264,,,411,416,,,,,,,,',
',,884,,,,218,,14,431,432,433,434,435,436,437,438,439,440,441,442,443',
'444,445,446,447,448,449,450,451,452,453,454,455,456,,,,,,264,264,,,',
',,,,264,,,,,,,264,,264,211,264,,,,,,,,,,,,,14,,,,,,14,,14,,,,,,,,,,',
',,,,,503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,411',
'615,392,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,264,,264,,,,,,',
',,,,,,264,,,,,,,,,,650,651,652,,,,,,264,,,,264,,,264,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,264,264,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,264,726,,,264,264,731,733,,,,736,738,,,615,740,,,,,,,,,,,,,,,,,,',
',,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,815,,,,,,,,,,,,,,731,733,738',
'736,,818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,',
',,,,,,,,,,,,,264,815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,264' ]
        racc_goto_table = arr = ::Array.new(2910, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'54,54,66,66,8,49,10,53,17,89,49,46,62,88,58,58,22,83,115,37,47,19,30',
'82,82,32,32,32,14,14,112,7,124,60,60,149,7,49,49,49,16,16,57,57,16,153',
'85,30,11,35,35,51,69,109,69,23,36,36,36,49,54,68,42,6,113,60,60,60,4',
'22,49,49,49,49,88,64,64,108,117,64,2,119,5,48,150,153,120,26,16,16,16',
'16,43,26,106,122,84,84,35,35,28,28,67,123,28,67,125,143,49,143,143,148',
'38,113,139,113,126,49,49,139,127,38,38,109,52,52,117,40,128,4,130,131',
'40,132,7,133,41,41,41,134,137,20,138,7,7,140,20,40,28,28,28,28,142,144',
'145,40,40,40,146,40,147,141,109,59,61,39,1,29,153,77,78,79,81,20,150',
'18,69,69,66,15,5,40,63,63,63,86,87,40,40,12,68,40,90,2,54,20,109,32',
'91,19,19,92,49,93,19,19,94,106,95,96,63,119,117,115,149,97,120,98,99',
'100,101,108,102,103,104,49,105,124,11,110,40,112,118,121,,40,40,40,40',
'40,40,,22,,20,28,28,28,28,,32,32,,20,20,,,,,32,,115,85,148,,113,51,113',
'48,83,47,66,35,35,,66,23,48,,46,38,,,49,60,49,88,,,49,49,65,65,65,113',
',30,,,148,,60,,23,22,,49,16,16,7,42,,,115,,42,,89,,65,65,,,143,40,40',
'40,40,,,40,40,40,40,40,40,6,35,20,88,43,4,,,,43,,40,,35,,,63,28,84,23',
'88,113,63,,,20,41,,23,22,37,28,28,,41,37,54,,,22,66,,,,40,40,66,,,,58',
'28,153,40,82,,,,4,26,30,69,35,,14,66,,28,115,40,35,40,63,,17,11,40,',
'57,,63,54,124,20,48,20,64,32,68,,20,,,,36,,,,,66,36,,66,,40,,,,,,,,',
',,,,,40,40,,,,30,,,62,,46,50,66,,82,,50,,,46,40,,,,66,,,,54,9,49,32',
'60,,,36,40,49,36,,54,60,,50,50,50,49,,,,,,,,,,7,,,,,8,,65,,50,,,,68',
',65,,66,,,50,50,50,50,,66,,,,,,,16,54,28,49,32,,49,54,,,,40,88,88,32',
',,,,82,,,,,,,50,115,49,,,88,88,,,50,50,,54,,10,,85,23,,25,,,,,25,,58',
',,,19,19,,44,28,19,19,,40,19,14,,62,,,,62,40,46,30,,25,20,66,57,,66',
'49,,46,,,,40,49,49,,,,,60,,,25,107,49,30,,,,9,60,53,,25,8,49,44,,,8',
',63,49,50,,30,,,40,,,40,9,,,44,,40,,16,,,20,,,20,50,40,,,40,25,,40,',
',,30,,,25,25,,63,54,22,30,20,,49,,,,,49,88,,,,,,88,,,49,40,40,,,19,40',
'40,9,,40,65,,9,35,28,,,,,50,,50,,40,,50,50,,,,40,40,8,,,,,20,49,,,,50',
',20,20,,60,49,65,16,,49,,,,49,49,,40,25,,107,,,107,,25,,,,,,20,,,,49',
'49,,,49,,25,,,,49,88,,44,,,,,,,,111,,,40,,,,,40,60,,,28,40,49,,,,,,49',
',20,40,,,,20,,,,,40,,,44,65,20,8,44,,,,25,66,25,,,,,25,111,44,,111,',
',,44,,54,,40,32,,,,,,,,,40,,,,20,107,,107,40,40,,,,49,20,,,,54,49,,49',
'20,20,,,24,40,,40,40,24,30,40,,,,,,40,,,,20,20,,,20,,,50,,,20,,,,50',
'24,24,24,,,,,,50,,,44,40,,,,,,107,107,,,24,,,,20,,,,,,,24,24,24,,,,9',
',,9,,,,,,,,,,,50,,,50,,107,,107,,,40,,,,,,,,24,,111,,,111,40,50,,24',
'24,,40,,40,,,,,,20,107,,44,,,20,,20,111,,,111,,111,,,,,,,,,25,,,,,9',
',44,,,,,9,9,,,,,,50,,,,,,,50,50,,,,,,,,,,50,,,,9,27,,,,,,50,111,,24',
'111,,111,50,,,,,,25,,,25,,,111,,,,,,,24,,,,,,,,,,,,25,,,111,,,,,,,,',
',,,,50,9,44,,,50,,,,,,,44,,,50,,,,,,,,,,25,,,,,24,,24,,44,,24,24,,25',
'9,,,,,,25,25,,,9,,,24,50,,,,9,9,,,,,50,,,,50,,,,50,50,,25,,,,9,9,27',
',9,,,,27,,,,,,50,50,,,50,,,,,,50,,,,,,,,,,,,,,,,,9,,25,,,,,25,50,,,',
',,50,,,25,,,,,,,,,,,,,,,27,,27,,27,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,9,25',
',,,25,9,,,25,25,,,,50,,,,,,50,,50,,,,,,,,25,25,,,25,,,,,,25,,,,,,24',
',,,,,21,24,,,,21,,,,,24,114,114,114,,,,,,25,21,,,,,,,,21,21,21,,21,21',
'21,27,,,,,,,,,,,,,,,,,,,21,24,,,24,,21,21,,,21,21,21,21,,,,,,,,,,,,',
'24,,,,25,,,,,24,25,,25,,,,,,,,,,,21,,,,,21,21,21,21,21,21,,,,27,,27',
',27,,,,,,,,,,,,,,24,,,,,,,24,24,,,,,,,,,27,24,,,27,,,27,,,,,24,,,,,',
',24,,,,,,,,,,,,,,,,,,,,,,,27,,,21,21,21,21,,,21,21,21,21,21,21,,,,,',
',,,,24,,21,,,24,,,,,,,,,,24,,,,27,114,114,114,27,27,,,,,,,,,,,21,21',
',,,,,,,21,,,,,,,114,114,,24,114,114,,114,,21,27,21,,24,,21,21,24,,,',
'24,24,,,,,,,,,,21,,,,,,,,,,24,24,21,,24,,,,27,,24,,,,,,21,21,,,,,,,',
',,,,,,,,,,24,21,,,,,24,,,,,,,,,,,21,,,,114,114,114,114,27,114,,,,,,',
',,,,,,114,114,114,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,24,,24,21',
',,114,114,114,114,,,,114,,,,,,,,,27,,114,,,,,,,,,,,,,,,27,,,,,,,,,,',
',,,,,,21,,,,,,,21,,21,,,,,,,21,,,,,,,,,21,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,21,,,21,,,,,,21,,,,,,,,,,21,,,21,,,21,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,21,21,,,,21,21,,,21,,,,,,,,,,,,,,21,,,,,,,21,21,,,,,,,,31',
',21,,,,,,31,31,31,,,21,,,,,,,21,31,31,31,,,,,,,,,,,,,31,31,,,,,,,,,',
',,,,,,,,,,,,,,,21,,,,,21,,,,,21,,,,,,,,,,21,,,,,,,,,21,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,21,,,,,,,,,,21,,,,21,,,,21,21,,,,,,,,,,,,,,,,,,21,,21',
'21,,,21,,,,,,21,,,,,,,,31,31,31,,,31,31,,,,,,,,,,,21,,,,31,,21,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,,,,,,31,31,,,,,,,,31,,,,,,,31,,31,21,31,,,,,,,,,,,,,21,,,,,,21,,21',
',,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31',
',31,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,31,,,,,,,',
',,,,,31,,,,,,,,,,31,31,31,,,,,,31,,,,31,,,31,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,31,31,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,',
'31,31,31,31,,,,31,31,,,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,31,,31,,,,,,,,,,,,,,31,31,31,31,,31,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,31,31,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31' ]
        racc_goto_check = arr = ::Array.new(2910, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   166,    80,   nil,    65,    77,    60,    31,   -50,   451,
  -305,  -457,  -465,   nil,    20,   170,   -20,  -196,   110,     1,
   141,  1405,  -184,  -338,   920,   587,  -111,  1051,    40,    53,
     3,  2021,    -3,   nil,   nil,  -152,    31,  -233,  -345,  -297,
   127,   108,    30,    60,   393,   nil,   -22,   -14,  -218,     5,
   465,  -291,    58,   -61,    -8,   nil,   nil,    34,     6,  -221,
     0,   108,   -44,   154,  -240,   263,   -23,  -356,  -206,  -419,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,   113,   113,
   nil,   113,  -302,  -666,  -448,  -284,   120,  -160,    10,  -557,
   124,  -163,   146,  -305,   144,  -478,   146,  -474,  -336,  -651,
  -341,  -486,  -128,  -137,  -343,  -585,  -694,   111,  -454,  -737,
  -389,   204,  -588,  -554,   896,  -305,   nil,  -540,  -521,  -672,
  -667,   -90,  -422,    44,  -291,    84,  -548,  -545,  -120,   nil,
  -127,  -127,  -735,  -371,  -519,   nil,   nil,    66,    66,    35,
    65,    80,  -216,  -258,    71,  -420,  -417,  -507,  -556,  -634,
  -737,   nil,   nil,  -428 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   331,   277,   nil,   311,
   nil,   793,   nil,   276,   nil,   nil,   nil,    11,    12,    18,
   217,   306,   nil,   nil,   215,   216,   nil,   270,    17,   nil,
   423,    21,    22,    23,    24,   647,   nil,   nil,   nil,   nil,
   294,   394,    31,   nil,   nil,    33,    36,    35,   nil,   212,
   213,   343,   nil,   121,   402,   120,   123,    72,    73,   nil,
    45,   nil,   655,   395,   nil,   396,   407,   601,   470,   268,
   254,    46,    47,    48,    49,    50,    51,    52,   nil,   255,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   541,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   676,   530,   nil,   677,
   nil,   520,   nil,   522,   nil,   781,   617,   nil,   nil,   nil,
   528,   nil,   nil,   nil,   710,   nil,   nil,   nil,   nil,   406,
   nil,   nil,   nil,   nil,   nil,    71,    74,    75,   nil,   nil,
   nil,   nil,   nil,   577,   nil,   nil,   nil,   521,   532,   533,
   755,   536,   539,   272 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 166, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  1, 144, :_reduce_none,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  3, 154, :_reduce_40,
  3, 154, :_reduce_41,
  1, 165, :_reduce_none,
  3, 165, :_reduce_43,
  3, 165, :_reduce_44,
  3, 165, :_reduce_45,
  2, 165, :_reduce_46,
  1, 165, :_reduce_none,
  1, 153, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 170, :_reduce_none,
  4, 170, :_reduce_52,
  4, 170, :_reduce_53,
  0, 176, :_reduce_54,
  5, 174, :_reduce_55,
  2, 169, :_reduce_56,
  3, 169, :_reduce_57,
  4, 169, :_reduce_58,
  5, 169, :_reduce_59,
  4, 169, :_reduce_60,
  5, 169, :_reduce_61,
  2, 169, :_reduce_62,
  2, 169, :_reduce_63,
  2, 169, :_reduce_64,
  2, 169, :_reduce_65,
  2, 169, :_reduce_66,
  1, 155, :_reduce_67,
  3, 155, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_none,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 183, :_reduce_none,
  3, 183, :_reduce_82,
  2, 182, :_reduce_83,
  3, 182, :_reduce_84,
  1, 185, :_reduce_85,
  3, 185, :_reduce_86,
  1, 184, :_reduce_87,
  1, 184, :_reduce_88,
  4, 184, :_reduce_89,
  3, 184, :_reduce_90,
  3, 184, :_reduce_91,
  3, 184, :_reduce_92,
  3, 184, :_reduce_93,
  2, 184, :_reduce_94,
  1, 184, :_reduce_95,
  1, 162, :_reduce_96,
  1, 162, :_reduce_97,
  4, 162, :_reduce_98,
  3, 162, :_reduce_99,
  3, 162, :_reduce_100,
  3, 162, :_reduce_101,
  3, 162, :_reduce_102,
  2, 162, :_reduce_103,
  1, 162, :_reduce_104,
  1, 188, :_reduce_105,
  1, 188, :_reduce_none,
  2, 189, :_reduce_107,
  1, 189, :_reduce_108,
  3, 189, :_reduce_109,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 193, :_reduce_115,
  1, 193, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_119,
  0, 196, :_reduce_120,
  4, 152, :_reduce_121,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 168, :_reduce_192,
  5, 168, :_reduce_193,
  3, 168, :_reduce_194,
  5, 168, :_reduce_195,
  6, 168, :_reduce_196,
  5, 168, :_reduce_197,
  5, 168, :_reduce_198,
  5, 168, :_reduce_199,
  5, 168, :_reduce_200,
  4, 168, :_reduce_201,
  3, 168, :_reduce_202,
  3, 168, :_reduce_203,
  3, 168, :_reduce_204,
  3, 168, :_reduce_205,
  3, 168, :_reduce_206,
  3, 168, :_reduce_207,
  3, 168, :_reduce_208,
  3, 168, :_reduce_209,
  3, 168, :_reduce_210,
  4, 168, :_reduce_211,
  4, 168, :_reduce_212,
  2, 168, :_reduce_213,
  2, 168, :_reduce_214,
  3, 168, :_reduce_215,
  3, 168, :_reduce_216,
  3, 168, :_reduce_217,
  3, 168, :_reduce_218,
  3, 168, :_reduce_219,
  3, 168, :_reduce_220,
  3, 168, :_reduce_221,
  3, 168, :_reduce_222,
  3, 168, :_reduce_223,
  3, 168, :_reduce_224,
  3, 168, :_reduce_225,
  3, 168, :_reduce_226,
  3, 168, :_reduce_227,
  2, 168, :_reduce_228,
  2, 168, :_reduce_229,
  3, 168, :_reduce_230,
  3, 168, :_reduce_231,
  3, 168, :_reduce_232,
  3, 168, :_reduce_233,
  3, 168, :_reduce_234,
  6, 168, :_reduce_235,
  1, 168, :_reduce_none,
  1, 164, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  4, 198, :_reduce_240,
  2, 198, :_reduce_241,
  3, 203, :_reduce_242,
  0, 204, :_reduce_243,
  1, 204, :_reduce_none,
  0, 159, :_reduce_245,
  1, 159, :_reduce_none,
  2, 159, :_reduce_none,
  4, 159, :_reduce_248,
  2, 159, :_reduce_249,
  1, 178, :_reduce_250,
  2, 178, :_reduce_251,
  2, 178, :_reduce_252,
  4, 178, :_reduce_253,
  1, 178, :_reduce_254,
  0, 207, :_reduce_255,
  2, 173, :_reduce_256,
  2, 206, :_reduce_257,
  2, 205, :_reduce_258,
  0, 205, :_reduce_259,
  1, 200, :_reduce_260,
  2, 200, :_reduce_261,
  3, 200, :_reduce_262,
  4, 200, :_reduce_263,
  3, 163, :_reduce_264,
  4, 163, :_reduce_265,
  2, 163, :_reduce_266,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_275,
  3, 197, :_reduce_276,
  0, 229, :_reduce_277,
  0, 230, :_reduce_278,
  6, 197, :_reduce_279,
  3, 197, :_reduce_280,
  3, 197, :_reduce_281,
  2, 197, :_reduce_282,
  3, 197, :_reduce_283,
  3, 197, :_reduce_284,
  1, 197, :_reduce_285,
  4, 197, :_reduce_286,
  3, 197, :_reduce_287,
  1, 197, :_reduce_288,
  5, 197, :_reduce_289,
  4, 197, :_reduce_290,
  3, 197, :_reduce_291,
  2, 197, :_reduce_292,
  1, 197, :_reduce_none,
  2, 197, :_reduce_294,
  2, 197, :_reduce_295,
  6, 197, :_reduce_296,
  6, 197, :_reduce_297,
  0, 231, :_reduce_298,
  0, 232, :_reduce_299,
  7, 197, :_reduce_300,
  0, 233, :_reduce_301,
  0, 234, :_reduce_302,
  7, 197, :_reduce_303,
  5, 197, :_reduce_304,
  4, 197, :_reduce_305,
  0, 235, :_reduce_306,
  0, 236, :_reduce_307,
  9, 197, :_reduce_308,
  0, 237, :_reduce_309,
  6, 197, :_reduce_310,
  0, 238, :_reduce_311,
  7, 197, :_reduce_312,
  0, 239, :_reduce_313,
  5, 197, :_reduce_314,
  0, 240, :_reduce_315,
  6, 197, :_reduce_316,
  0, 241, :_reduce_317,
  0, 242, :_reduce_318,
  9, 197, :_reduce_319,
  1, 197, :_reduce_320,
  1, 197, :_reduce_321,
  1, 197, :_reduce_322,
  1, 197, :_reduce_323,
  1, 158, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  2, 219, :_reduce_327,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 220, :_reduce_none,
  5, 220, :_reduce_331,
  1, 148, :_reduce_none,
  2, 148, :_reduce_333,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 243, :_reduce_336,
  3, 243, :_reduce_337,
  1, 246, :_reduce_338,
  3, 246, :_reduce_339,
  1, 245, :_reduce_none,
  4, 245, :_reduce_341,
  6, 245, :_reduce_342,
  3, 245, :_reduce_343,
  5, 245, :_reduce_344,
  2, 245, :_reduce_345,
  4, 245, :_reduce_346,
  1, 245, :_reduce_347,
  3, 245, :_reduce_348,
  6, 247, :_reduce_349,
  8, 247, :_reduce_350,
  4, 247, :_reduce_351,
  6, 247, :_reduce_352,
  4, 247, :_reduce_353,
  2, 247, :_reduce_none,
  6, 247, :_reduce_355,
  2, 247, :_reduce_356,
  4, 247, :_reduce_357,
  6, 247, :_reduce_358,
  2, 247, :_reduce_359,
  4, 247, :_reduce_360,
  2, 247, :_reduce_361,
  4, 247, :_reduce_362,
  1, 247, :_reduce_363,
  0, 175, :_reduce_364,
  1, 175, :_reduce_365,
  3, 253, :_reduce_366,
  1, 253, :_reduce_367,
  4, 253, :_reduce_368,
  0, 254, :_reduce_369,
  2, 254, :_reduce_370,
  1, 255, :_reduce_371,
  3, 255, :_reduce_372,
  1, 256, :_reduce_373,
  1, 256, :_reduce_none,
  0, 260, :_reduce_375,
  3, 218, :_reduce_376,
  4, 258, :_reduce_377,
  1, 258, :_reduce_378,
  0, 263, :_reduce_379,
  4, 259, :_reduce_380,
  0, 264, :_reduce_381,
  4, 259, :_reduce_382,
  0, 265, :_reduce_383,
  5, 262, :_reduce_384,
  2, 171, :_reduce_385,
  4, 171, :_reduce_386,
  4, 171, :_reduce_387,
  2, 217, :_reduce_388,
  4, 217, :_reduce_389,
  4, 217, :_reduce_390,
  3, 217, :_reduce_391,
  3, 217, :_reduce_392,
  3, 217, :_reduce_393,
  2, 217, :_reduce_394,
  1, 217, :_reduce_395,
  4, 217, :_reduce_396,
  0, 267, :_reduce_397,
  5, 216, :_reduce_398,
  0, 268, :_reduce_399,
  5, 216, :_reduce_400,
  5, 222, :_reduce_401,
  1, 269, :_reduce_402,
  1, 269, :_reduce_none,
  6, 147, :_reduce_404,
  0, 147, :_reduce_405,
  1, 270, :_reduce_406,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 271, :_reduce_409,
  1, 271, :_reduce_none,
  2, 149, :_reduce_411,
  1, 149, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 209, :_reduce_416,
  1, 273, :_reduce_417,
  2, 273, :_reduce_418,
  3, 274, :_reduce_419,
  1, 274, :_reduce_420,
  1, 274, :_reduce_421,
  3, 210, :_reduce_422,
  4, 211, :_reduce_423,
  3, 212, :_reduce_424,
  0, 278, :_reduce_425,
  3, 278, :_reduce_426,
  1, 279, :_reduce_427,
  2, 279, :_reduce_428,
  3, 213, :_reduce_429,
  0, 281, :_reduce_430,
  3, 281, :_reduce_431,
  0, 275, :_reduce_432,
  2, 275, :_reduce_433,
  0, 276, :_reduce_434,
  2, 276, :_reduce_435,
  0, 277, :_reduce_436,
  2, 277, :_reduce_437,
  1, 280, :_reduce_438,
  2, 280, :_reduce_439,
  0, 283, :_reduce_440,
  4, 280, :_reduce_441,
  1, 282, :_reduce_442,
  1, 282, :_reduce_443,
  1, 282, :_reduce_444,
  1, 282, :_reduce_none,
  1, 194, :_reduce_446,
  3, 195, :_reduce_447,
  1, 272, :_reduce_448,
  1, 272, :_reduce_449,
  2, 272, :_reduce_450,
  2, 272, :_reduce_451,
  1, 186, :_reduce_452,
  1, 186, :_reduce_453,
  1, 186, :_reduce_454,
  1, 186, :_reduce_455,
  1, 186, :_reduce_456,
  1, 187, :_reduce_457,
  1, 187, :_reduce_458,
  1, 187, :_reduce_459,
  1, 187, :_reduce_460,
  1, 187, :_reduce_461,
  1, 187, :_reduce_462,
  1, 187, :_reduce_463,
  1, 214, :_reduce_464,
  1, 214, :_reduce_465,
  1, 157, :_reduce_466,
  1, 157, :_reduce_467,
  1, 161, :_reduce_468,
  1, 161, :_reduce_469,
  1, 224, :_reduce_470,
  3, 224, :_reduce_471,
  2, 224, :_reduce_472,
  3, 226, :_reduce_473,
  2, 226, :_reduce_474,
  6, 261, :_reduce_475,
  8, 261, :_reduce_476,
  4, 261, :_reduce_477,
  6, 261, :_reduce_478,
  4, 261, :_reduce_479,
  6, 261, :_reduce_480,
  2, 261, :_reduce_481,
  4, 261, :_reduce_482,
  6, 261, :_reduce_483,
  2, 261, :_reduce_484,
  4, 261, :_reduce_485,
  2, 261, :_reduce_486,
  4, 261, :_reduce_487,
  1, 261, :_reduce_488,
  0, 261, :_reduce_489,
  1, 257, :_reduce_490,
  1, 257, :_reduce_491,
  1, 257, :_reduce_492,
  1, 257, :_reduce_493,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 285, :_reduce_496,
  3, 285, :_reduce_497,
  1, 248, :_reduce_498,
  3, 248, :_reduce_499,
  3, 286, :_reduce_500,
  3, 287, :_reduce_501,
  1, 249, :_reduce_502,
  3, 249, :_reduce_503,
  1, 284, :_reduce_504,
  3, 284, :_reduce_505,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 250, :_reduce_508,
  1, 250, :_reduce_509,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  2, 252, :_reduce_512,
  2, 251, :_reduce_513,
  0, 251, :_reduce_514,
  1, 227, :_reduce_none,
  3, 227, :_reduce_516,
  0, 215, :_reduce_517,
  2, 215, :_reduce_none,
  1, 202, :_reduce_519,
  3, 202, :_reduce_520,
  3, 290, :_reduce_521,
  2, 290, :_reduce_522,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 167, :_reduce_none,
  1, 167, :_reduce_none,
  2, 181, :_reduce_539,
  2, 160, :_reduce_540,
  0, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 225, :_reduce_544,
  1, 225, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 199, :_reduce_548 ]

racc_reduce_n = 549

racc_shift_n = 958

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@19",
  "f_args",
  "do_block",
  "@20",
  "@21",
  "@22",
  "operation3",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@25",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_19(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 27 omitted

def _reduce_28(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_33(val, _values, result)
                      diagnostic :error, :const_reassignment, nil, val[3]
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 106 omitted

def _reduce_107(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_120(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_121(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

def _reduce_192(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_201(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_241(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = val
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 244 omitted

def _reduce_245(val, _values, result)
                      result = []
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_249(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_254(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_256(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = []
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_278(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_295(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_296(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_297(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_298(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_302(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_304(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_305(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_309(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_310(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_314(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_315(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

def _reduce_327(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 332 omitted

def _reduce_333(val, _values, result)
                      result = val
                    
    result
end

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_338(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_339(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_342(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_344(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_345(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_356(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_365(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = []
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_373(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_376(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_377(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_379(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_381(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_383(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_384(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_385(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_386(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_387(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_388(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_392(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_393(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_394(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = []
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 407 omitted

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_423(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = []
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_432(val, _values, result)
                      result = []
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = []
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = []
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_441(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_451(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_471(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_472(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = []
                    
    result
end

def _reduce_490(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_491(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_492(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_493(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_501(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 510 omitted

# reduce 511 omitted

def _reduce_512(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = []
                    
    result
end

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = []
                    
    result
end

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_521(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

def _reduce_544(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 545 omitted

# reduce 546 omitted

# reduce 547 omitted

def _reduce_548(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby19
  end   # module Parser
