# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby23 < Parser::Base


  def version
    23
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-577,859,-99,-490,270,-98,-104,-577,-577,-577,906,570,715,-577,-577',
'219,-577,270,-97,-99,-476,-104,-105,-490,647,-577,612,-476,-97,-103',
'610,220,216,217,978,270,-577,-577,-98,-577,-577,-577,-577,-577,570,570',
'-100,-102,570,113,-88,715,647,908,112,-286,220,113,-99,646,-97,208,112',
'-105,-102,-100,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577',
'-577,-577,-577,-97,-101,-577,-577,-577,-476,631,646,814,-101,-577,269',
'611,-577,-574,-286,609,715,-577,265,-577,624,-577,-577,269,-577,-577',
'-577,-577,-577,-289,-577,-577,-577,-89,-95,113,-289,-289,-289,-99,112',
'269,-289,-289,-99,-289,-577,-90,113,-577,-577,-103,-92,112,-577,-97',
'-88,-94,-104,-105,-97,-577,-101,-104,-105,-289,-289,570,-289,-289,-289',
'-289,-289,-573,113,-98,-491,-573,-92,112,-98,113,113,-100,-102,113,112',
'112,-100,-102,112,-96,-93,-91,914,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,216,217,-289,-289,-289,-83,630,813',
'-92,-101,-289,113,207,-289,-101,-69,112,214,-289,-574,-289,445,-289',
'-289,-98,-289,-289,-289,-289,-289,-476,-289,447,-289,-573,-92,626,-476',
'-476,-476,91,92,-476,-476,-476,448,-476,-289,582,647,-289,-289,583,-94',
'-476,-289,-476,-476,-476,805,-103,576,-289,-103,-96,-103,-476,-476,-93',
'-476,-476,-476,-476,-476,-105,-92,113,917,-92,841,-90,112,-91,-93,646',
'974,216,217,-92,270,647,216,217,-102,220,769,-476,-476,-476,-476,-476',
'-476,-476,-476,-476,-476,-476,-476,-476,-476,216,217,-476,-476,-476',
'219,-476,-476,93,94,-476,220,113,-476,-476,646,-476,112,-476,921,-476',
'-264,-476,-476,-93,-476,-476,-476,-476,-476,-479,-476,-289,-476,91,92',
'-90,-479,-91,-289,-289,-289,-100,265,-289,-289,-289,-476,-289,113,-476',
'-476,-476,-476,112,-476,113,-476,-289,-289,-289,112,-476,-476,-93,589',
'269,-93,-289,-289,220,-289,-289,-289,-289,-289,-90,-93,-91,-90,898,-91',
'216,217,550,446,547,546,545,-90,548,-91,597,957,220,-479,517,970,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,93',
'94,-289,-289,-289,529,772,-289,531,529,-289,597,528,-289,-289,597,-289',
'597,-289,931,-289,625,-289,-289,972,-289,-289,-289,-289,-289,-105,-289',
'550,-289,547,546,545,79,548,597,529,-104,597,531,599,598,595,-289,938',
'80,-289,-289,-289,-289,832,-289,597,-289,-577,81,770,662,-289,-103,113',
'-577,-577,-577,-91,112,-577,-577,-577,939,-577,599,598,608,-100,599',
'598,599,598,-577,-577,-577,-577,529,206,748,531,746,755,623,-577,-577',
'220,-577,-577,-577,-577,-577,619,599,598,602,599,598,600,597,216,217',
'597,398,955,479,-486,-102,400,399,599,598,595,-486,-577,-577,-577,-577',
'-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-261,-90,-577,-577',
'-577,488,771,-577,212,490,-577,-99,-485,-577,-577,579,-577,957,-577',
'-485,-577,-491,-577,-577,577,-577,-577,-577,-577,-577,492,-577,-577',
'-577,617,599,598,613,599,598,604,-487,-484,-486,959,517,960,-577,-487',
'-484,-577,-577,-577,-577,500,-577,-68,-577,-479,836,805,220,-577,-101',
'503,-479,-479,-479,-89,504,-479,-479,-479,213,-479,836,805,-485,-98',
'566,565,-481,-479,965,-479,-479,-479,934,-481,547,546,545,-95,548,-479',
'-479,576,-479,-479,-479,-479,-479,-104,212,390,-482,-487,-484,-483,212',
'585,511,-482,212,581,-483,263,740,741,587,263,742,107,108,-479,-479',
'-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,274,220',
'-479,-479,-479,240,-479,-479,-481,614,-479,265,974,-479,-479,514,-479',
'220,-479,220,-479,735,-479,-479,240,-479,-479,-479,-479,-479,213,-479',
'-482,-479,555,-483,213,237,212,985,213,239,238,220,558,937,-83,-479',
'666,986,-479,-479,-479,-479,587,-479,237,-479,-411,220,239,238,-479',
'-479,987,-411,-411,-411,518,555,-411,-411,-411,212,-411,522,988,566',
'565,558,984,898,559,-411,-411,-411,677,898,580,982,898,-577,682,683',
'-411,-411,685,-411,-411,-411,-411,-411,550,213,547,546,545,-332,548',
'993,689,692,566,565,-332,693,934,559,547,546,545,695,548,-332,-411,-411',
'-411,-411,-411,-411,-411,-411,-411,-411,-411,-411,-411,-411,213,701',
'-411,-411,-411,-577,697,-411,-290,265,-411,699,-577,-411,-411,-290,-411',
'-573,-411,957,-411,-577,-411,-411,-290,-411,-411,-411,-411,-411,707',
'-411,-411,-411,-332,240,708,709,220,711,-577,-290,-289,576,718,-570',
'240,-411,-290,-289,-411,-411,-579,-411,-574,-411,319,-290,-289,-579',
'-579,-579,-411,735,-579,-579,-579,237,-579,745,-577,239,238,-290,235',
'236,749,-579,-579,-579,-579,116,117,118,119,120,750,-262,-579,-579,109',
'-579,-579,-579,-579,-579,756,-476,479,-574,-573,212,479,682,-476,974',
'-290,-289,211,-570,220,774,318,-476,259,240,692,209,-579,-579,-579,-579',
'-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-570,212,-579,-579',
'-579,490,492,-579,443,798,-579,240,677,-579,-579,220,-579,444,-579,240',
'-579,240,-579,-579,265,-579,-579,-579,-579,-579,-476,-579,-579,-579',
'213,401,265,677,212,240,550,968,547,546,545,937,548,-579,240,-571,-579',
'-579,-579,-579,587,-579,-296,-579,805,220,220,957,-579,-296,-296,-296',
'213,830,-296,-296,-296,237,-296,220,805,239,238,701,235,236,840,121',
'-296,-296,220,637,903,116,117,118,119,120,-296,-296,220,-296,-296,-296',
'-296,-296,220,-479,259,213,1012,-488,849,634,-479,-263,1013,1014,-488',
'-571,858,532,533,-479,492,974,974,-488,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-571,974,-296,-296,-296,-289',
'220,-296,265,274,-296,861,-289,-296,-296,692,-296,-574,-296,864,-296',
'-289,-296,-296,866,-296,-296,-296,-296,-296,-479,-296,-244,-296,-488',
'868,870,220,872,-244,-244,-244,873,876,-244,-244,-244,-296,-244,878',
'-296,-296,879,-296,677,-296,388,-244,-244,-244,881,215,-296,116,117',
'118,119,120,-244,-244,-289,-244,-244,-244,-244,-244,550,-489,547,546',
'545,212,548,-261,-489,885,887,890,510,692,892,894,896,-489,898,898,220',
'508,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,904,701,-244,-244,-244,-279,,-244,212,265,-244,,-279,-244,-244',
'520,-244,,-244,,-244,-279,-244,-244,444,-244,-244,-244,-244,-244,-489',
'-244,-244,-244,213,550,,547,546,545,,548,,,,,,-244,,,-244,-244,-578',
'-244,,-244,,,,-578,-578,-578,-244,,-578,-578,-578,,-578,,-279,,701,213',
',,,-578,-578,-578,-578,704,,,,,,,-578,-578,,-578,-578,-578,-578,-578',
'550,,547,546,545,550,548,547,546,545,550,548,547,546,545,,548,,,,,,-578',
'-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,,701',
'-578,-578,-578,,701,-578,,,-578,701,,-578,-578,704,-578,,-578,,-578',
',-578,-578,,-578,-578,-578,-578,-578,,-578,-578,-578,,,550,,547,546',
'545,,548,,,,,-578,,,-578,-578,-578,-578,,-578,-280,-578,,,,,-578,-280',
'-280,-280,,,-280,-280,-280,240,-280,701,,,,,,,,,-280,-280,-280,,,254',
'255,,,,-280,-280,,-280,-280,-280,-280,-280,,,,237,,243,,239,238,,235',
'236,,,241,,242,,,,,,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280,,,-280,-280,,-280',
',-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,,-280,,-280,,,,,,,',
',,,,,,-280,,,-280,-280,-280,-280,,-280,-244,-280,,,,,-280,-244,-244',
'-244,,,-244,-244,-244,550,-244,547,546,545,555,548,,,,-244,-244,,,,558',
',,,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,550,553,547,546,545',
'555,548,,,,563,562,566,565,,558,,559,,550,,547,546,545,555,548,-244',
',,,,,,-244,558,,,553,265,-244,,,,220,,,563,562,566,565,,,,559,,,553',
'536,,,,-244,-244,,,563,562,566,565,,,,559,,,,-244,,,-244,,,,,-244,292',
'69,70,71,9,57,-244,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,635,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252',
'253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258',
',-238,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,635,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,296,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,620,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,220,258,,,',
',62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256',
'257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,258,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246,248,,',
'-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256',
'257,252,253,,-598,-598,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,,,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,',
',,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235',
'236,,,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246,248,,,-598',
'-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235',
'236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246,248,,',
'-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246',
'248,,,-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246',
'248,,,-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
',,252,253,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,,252,253,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,-598,-598,-598,-598,246',
'248,,,-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,-598,-598,,,254,255,,40,,,33,,,58,59,,,60,,35,237,',
'243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,',
',,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,,44,239,238,,235,236,,',
',20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
',,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,,,237,,243,44,239,238',
',235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60',
',300,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,231,,,58,59,,,60,,,550,,547',
'546,545,555,548,,,,,,,,,558,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,317',
',553,62,,81,93,94,69,70,71,,57,566,565,,63,64,559,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,',
',,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,113,,,,,112,62,,81,93,94,69,70,71',
',57,,,,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,,315,,,,,,,,,,,,,,,,,,,,350,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,309,,,105,104,106,355,56,97,96,356,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,362,,,357,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,355,56,97,96,356,,99,107,108,,91,92,,,315,,,,,,,',
',,,,,,,,,,,,357,,,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,',
',,558,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,553,62,,81,93,94,69,70',
'71,9,57,566,565,,63,64,559,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93',
'94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,',
',,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,220,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,',
',,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,,,',
'558,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,506,,553,62,,81,93,94,69',
'70,71,,57,566,565,,63,64,559,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,',
',,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,522,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,659,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,',
'89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,',
',,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,659,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,753,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,659,',
'281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,875,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,659,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,875,,,231,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,945,,,231,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203',
'182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187',
',,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,',
',,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169',
'188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,',
',,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89',
',,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,',
',,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,373',
'372,374,371,169,188,187,,,,,,168,175,166,167,368,369,370,366,126,97',
'96,367,,99,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,378,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195,178',
'177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186',
'196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,',
',,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,726,426,162,,727,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,640,426,162,,641,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,477,419,162,,478',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,673,426,162,,674,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,670,419,162,,671,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,723,426,162',
',724,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,477,419,162,,478,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,1007,426,162,,1008,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,638,419,162',
',639,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,415,419,162,,416,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,422,426,162,,421,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,980,426',
'162,,979,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,640,426,162,,641,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,638,419,162,,639,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,1005',
'419,162,,1006,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,721,419,162,,722,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,550,162,547,546,545',
'555,548,,550,,547,546,545,555,548,558,,,,,,,,558,,550,,547,546,545,555',
'548,,,,,,553,,,558,,,,,553,563,562,566,565,,,,559,563,562,566,565,,',
',559,553,,550,,547,546,545,555,548,,,566,565,,,,559,558,,550,,547,546',
'545,555,548,,550,,547,546,545,555,548,558,,,,,553,,,558,,,,,,,,566,565',
',,,559,553,,,,,,,,553,563,562,566,565,,,,559,563,562,566,565,,,550,559',
'547,546,545,555,548,,550,,547,546,545,555,548,558,,,,,,,,558,,550,,547',
'546,545,555,548,,,,,,553,,,558,,,,,553,,,566,565,,,,559,563,562,566',
'565,,,,559,553,,550,,547,546,545,555,548,,,566,565,,,,559,558,,550,',
'547,546,545,555,548,,550,,547,546,545,555,548,558,,,,,553,,,558,,,,',
',563,562,566,565,,,,559,553,,,,,,,,553,563,562,566,565,,,,559,563,562',
'566,565,,,550,559,547,546,545,555,548,550,,547,546,545,555,548,550,558',
'547,546,545,555,548,,558,,,,,,,558,,,,,,,,553,,,,,,,553,,,,566,565,',
'553,,559,,566,565,,,,559,,566,565,,,,559' ]
        racc_action_table = arr = ::Array.new(25178, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'422,773,1019,38,61,348,580,422,422,422,834,907,573,422,422,19,422,650',
'942,843,366,985,946,223,483,422,386,366,347,724,385,932,525,525,932',
'310,422,422,943,422,422,422,422,422,341,340,1005,1006,884,290,38,572',
'651,837,290,58,19,852,773,483,38,13,852,351,722,721,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,223,1007,422,422,422,366,422',
'651,687,723,422,61,386,422,724,58,385,844,422,310,422,414,422,422,650',
'422,422,422,422,422,421,422,422,422,348,580,573,421,421,421,1019,573',
'310,421,421,1019,421,422,843,907,422,422,1008,422,907,422,942,347,724',
'985,946,942,422,422,985,946,421,421,719,421,421,421,421,421,723,572',
'943,224,1007,673,572,943,341,340,1005,1006,884,341,340,1005,1006,884',
'351,722,721,846,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,594,594,421,421,421,665,421,687,723,1007,421,844,12,421,1007,665',
'844,15,421,1008,421,225,421,421,224,421,421,421,421,421,95,421,227,421',
'673,673,416,95,95,95,41,41,95,95,95,228,95,421,357,484,421,421,357,421',
'95,421,95,95,95,912,1008,912,421,421,15,1008,95,95,671,95,95,95,95,95',
'15,673,719,850,673,719,800,719,670,416,484,928,439,439,673,26,475,17',
'17,416,594,638,95,95,95,95,95,95,95,95,95,95,95,95,95,95,680,680,95',
'95,95,232,95,95,41,41,95,851,847,95,95,475,95,847,95,854,95,855,95,95',
'671,95,95,95,95,95,367,95,641,95,315,315,800,367,670,641,641,641,638',
'26,641,641,641,95,641,3,95,95,95,95,3,95,344,95,641,641,641,344,95,95',
'671,361,26,671,641,641,439,641,641,641,641,641,800,671,670,800,1009',
'670,590,590,704,226,704,704,704,800,704,670,494,1010,680,367,445,926',
'641,641,641,641,641,641,641,641,641,641,641,641,641,641,315,315,641',
'641,641,331,641,641,331,330,641,384,330,641,641,607,641,605,641,871',
'641,415,641,641,927,641,641,641,641,641,226,641,903,641,903,903,903',
'77,903,382,334,445,381,334,494,494,494,641,875,77,641,641,641,641,704',
'641,380,641,640,77,639,494,641,641,590,640,640,640,415,590,640,640,640',
'877,640,384,384,384,415,607,607,605,605,640,640,640,640,686,10,607,686',
'605,621,413,640,640,411,640,640,640,640,640,407,382,382,382,381,381',
'381,387,339,339,383,123,903,264,368,639,123,123,380,380,380,368,640',
'640,640,640,640,640,640,640,640,640,640,640,640,640,405,621,640,640',
'640,278,640,640,349,279,640,621,369,640,640,349,640,905,640,369,640',
'39,640,640,349,640,640,640,640,640,282,640,640,640,402,387,387,387,383',
'383,383,370,371,368,909,319,910,640,370,371,640,640,640,640,294,640',
'295,640,98,995,995,297,640,640,298,98,98,98,39,299,98,98,98,349,98,710',
'710,369,39,692,692,372,98,916,98,98,98,978,372,978,978,978,319,978,98',
'98,345,98,98,98,98,98,319,359,346,373,370,371,374,376,359,305,373,24',
'352,374,376,598,598,359,24,598,598,598,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,308,309,98,98,98,451,98,98,372,396,98,314,930,98,98,316',
'98,481,98,485,98,920,98,98,452,98,98,98,98,98,359,98,373,98,689,374',
'376,451,936,945,24,451,451,501,689,936,502,98,505,948,98,98,98,98,936',
'98,452,98,27,507,452,452,98,98,949,27,27,27,320,861,27,27,27,944,27',
'512,950,689,689,861,944,951,689,27,27,27,515,952,350,944,953,726,523',
'524,27,27,526,27,27,27,27,27,957,936,957,957,957,46,957,954,538,539',
'861,861,46,541,872,861,872,872,872,542,872,46,27,27,27,27,27,27,27,27',
'27,27,27,27,27,27,944,957,27,27,27,726,543,27,511,27,27,552,726,27,27',
'511,27,726,27,956,27,726,27,27,511,27,27,27,27,27,560,27,27,27,46,471',
'564,567,45,569,726,583,674,574,575,355,323,27,583,674,27,27,427,27,674',
'27,40,583,674,427,427,427,27,592,427,427,427,471,427,602,726,471,471',
'511,471,471,610,427,427,427,427,293,293,293,293,293,612,618,427,427',
'1,427,427,427,427,427,622,355,627,979,980,14,632,981,355,1021,583,674',
'14,355,642,644,37,355,649,456,922,14,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,355,222,427,427,427,656,658,427,222,664,427',
'455,667,427,427,669,427,222,427,454,427,453,427,427,672,427,427,427',
'427,427,355,427,427,427,14,204,675,676,874,470,830,925,830,830,830,874',
'830,427,679,356,427,427,427,427,874,427,28,427,681,684,688,994,427,28',
'28,28,222,703,28,28,28,470,28,705,712,470,470,830,470,470,717,7,28,28',
'720,441,830,6,6,6,6,6,28,28,328,28,28,28,28,28,729,356,22,874,996,302',
'733,431,356,752,997,998,302,356,757,332,333,356,335,999,1000,302,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,356,1001,28,28,28,727,1004,28',
'423,28,28,775,727,28,28,776,28,727,28,778,28,727,28,28,779,28,28,28',
'28,28,356,28,417,28,302,780,782,783,784,417,417,417,785,789,417,417',
'417,28,417,793,28,28,794,28,799,28,109,417,417,417,803,16,28,499,499',
'499,499,499,417,417,727,417,417,417,417,417,832,303,832,832,832,304',
'832,806,303,807,810,815,304,816,820,821,823,303,824,826,829,304,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,831,832,417,417',
'417,306,,417,321,417,417,,306,417,417,321,417,,417,,417,306,417,417',
'321,417,417,417,417,417,303,417,417,417,304,553,,553,553,553,,553,,',
',,,417,,,417,417,426,417,,417,,,,426,426,426,417,,426,426,426,,426,',
'306,,553,321,,,,426,426,426,426,553,,,,,,,426,426,,426,426,426,426,426',
'904,,904,904,904,701,904,701,701,701,993,701,993,993,993,,993,,,,,,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,,904,426,426,426',
',701,426,,,426,993,,426,426,701,426,,426,,426,,426,426,,426,426,426',
'426,426,,426,426,426,,,955,,955,955,955,,955,,,,,426,,,426,426,426,426',
',426,56,426,,,,,426,56,56,56,,,56,56,56,464,56,955,,,,,,,,,56,56,56',
',,464,464,,,,56,56,,56,56,56,56,56,,,,464,,464,,464,464,,464,464,,,464',
',464,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56',
',,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,',
',56,,,56,56,56,56,,56,476,56,,,,,56,476,476,476,,,476,476,476,646,476',
'646,646,646,646,646,,,,476,476,,,,646,,,,,,476,476,,476,476,476,476',
'476,,,,,,,,968,646,968,968,968,968,968,,,,646,646,646,646,,968,,646',
',338,,338,338,338,338,338,476,,,,,,,476,338,,,968,476,476,,,,646,,,968',
'968,968,968,,,,968,,,338,338,,,,476,476,,,338,338,338,338,,,,338,,,',
'476,,,476,,,,,476,941,941,941,941,941,941,476,,,941,941,,,,941,,941',
'941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941,,,,,434',
'941,941,941,941,941,941,941,941,941,941,941,941,,941,941,941,,941,941',
'941,941,941,434,434,434,434,434,434,434,434,434,434,434,,434,434,,,434',
'434,,941,,,941,,,941,941,,,941,,941,434,,434,941,434,434,,434,434,434',
'434,434,941,434,,,,941,941,941,941,,941,941,941,941,,,,,941,941,,434',
',434,,,941,,941,941,941,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,643,33,33,33,33,33,33,33',
'33,33,33,33,33,,33,33,33,,33,33,33,33,33,643,643,643,643,643,643,643',
'643,643,643,643,,643,643,,,643,643,,33,,,33,,,33,33,,,33,,33,643,,643',
'33,643,643,,643,643,643,643,643,33,643,,,,33,33,33,33,,33,33,33,33,',
',,,33,33,,643,,,,,33,,33,33,33,889,889,889,889,889,889,,,,889,889,,',
',889,,889,889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889,',
',889,,,,,410,889,889,889,889,889,889,889,889,889,889,889,889,,889,889',
'889,,889,889,889,889,889,410,410,410,410,410,410,410,410,410,410,410',
',410,410,,,410,410,,889,,,889,,,889,889,,,889,,889,410,,410,889,410',
'410,,410,410,410,410,410,889,410,,,,889,889,889,889,,889,889,889,889',
',,,,889,889,,410,,,,,889,,889,889,889,301,301,301,301,301,301,,,,301',
'301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301,301,301',
'301,,,301,,,,,,301,301,301,301,301,301,301,301,301,301,301,301,,301',
'301,301,,301,301,301,301,301,429,429,429,429,429,429,429,429,429,429',
'429,,429,429,,,429,429,,301,,,301,,,301,301,,,301,,301,429,,429,301',
'429,429,,429,429,429,429,429,301,429,,,,301,301,301,301,,301,301,301',
'301,,,,,301,301,,429,,,,,301,,301,301,301,296,296,296,296,296,296,,',
',296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296',
'296,296,,,296,,,,,,296,296,296,296,296,296,296,296,296,296,296,296,',
'296,296,296,,296,296,296,296,296,474,474,474,474,474,474,474,474,474',
'474,474,,474,474,,,474,474,,296,,,296,,,296,296,,,296,,296,474,,474',
'296,474,474,,474,474,474,474,474,296,474,,,,296,296,296,296,,296,296',
'296,296,,,,,296,296,474,474,,,,,296,,296,296,296,888,888,888,888,888',
'888,,,,888,888,,,,888,,888,888,888,888,888,888,888,,,,,,888,888,888',
'888,888,888,888,,,888,,,,,,888,888,888,888,888,888,888,888,888,888,888',
'888,,888,888,888,,888,888,888,888,888,521,521,521,521,521,521,521,521',
'521,521,521,,521,521,,,521,521,,888,,,888,,,888,888,,,888,,888,521,',
'521,888,521,521,,521,521,521,521,521,888,521,,,,888,888,888,888,,888',
'888,888,888,,,,,888,888,,521,,,,,888,,888,888,888,648,648,648,648,648',
'648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,,,648,648,648',
'648,648,648,648,,,648,,,,,,648,648,648,648,648,648,648,648,648,648,648',
'648,,648,648,648,,648,648,648,648,648,678,678,678,678,678,678,678,678',
'678,678,678,,678,678,,,678,678,,648,,,648,,,648,648,,,648,,648,678,',
'678,648,678,678,,678,678,678,678,678,648,678,,,,648,648,648,648,,648',
'648,648,648,,,,,648,648,,678,,,,,648,,648,648,648,0,0,0,0,0,0,,,,0,0',
',,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0',
'0,0,,0,0,0,,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21',
',0,,,0,,,0,0,,,0,,0,21,,21,0,21,21,,21,21,21,21,21,0,21,,,,0,0,0,0,',
'0,0,0,0,,,,,0,0,,21,,,,,0,,0,0,0,591,591,591,591,591,591,,,,591,591',
',,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591',
',,591,,,,,,591,591,591,591,591,591,591,591,591,591,591,591,,591,591',
'591,,591,591,591,591,591,754,754,754,754,754,754,754,754,754,754,754',
',754,754,,,754,754,,591,,,591,,,591,591,,,591,,591,754,,754,591,754',
'754,,754,754,754,754,754,591,754,,,,591,591,591,591,,591,591,591,591',
',,,,591,591,,754,,,,,591,,591,591,591,231,231,231,231,231,231,,,,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,231,231,231,231,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,231,231,231,759,759,759,759,759,759,759,759,759,759',
'759,,759,759,,,759,759,,231,,,231,,,231,231,,,231,,231,759,,759,231',
'759,759,,759,759,759,759,759,231,759,,,,231,231,231,231,,231,231,231',
'231,,,,,231,231,,759,,,,,231,,231,231,231,571,571,571,571,571,571,,',
',571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571,571,571,571',
'571,571,,,571,,,,,,571,571,571,571,571,571,571,571,571,571,571,571,',
'571,571,571,,571,571,571,571,571,761,761,761,761,761,761,761,761,761',
'761,761,,761,761,,,761,761,,571,,,571,,,571,571,,,571,,571,761,,761',
'571,761,761,,761,761,761,761,761,571,761,,,,571,571,571,571,,571,571',
'571,571,,,,,571,571,,761,,,,,571,,571,571,571,881,881,881,881,881,881',
',,,881,881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881,881,881',
'881,881,881,,,881,,,,,,881,881,881,881,881,881,881,881,881,881,881,881',
',881,881,881,,881,881,881,881,881,764,764,764,764,764,764,764,764,764',
'764,764,,764,764,,,764,764,,881,,,881,,,881,881,,,881,,881,764,,764',
'881,764,764,,764,764,764,764,764,881,764,,,,881,881,881,881,,881,881',
'881,881,,,,,881,881,,764,,,,,881,,881,881,881,848,848,848,848,848,848',
',,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848,848',
'848,848,848,,,848,,,,,,848,848,848,848,848,848,848,848,848,848,848,848',
',848,848,848,,848,848,848,848,848,766,766,766,766,766,766,766,766,766',
'766,766,,766,766,,,766,766,,848,,,848,,,848,848,,,848,,848,766,,766',
'848,766,766,,766,766,766,766,766,848,766,,,,848,848,848,848,,848,848',
'848,848,,,,,848,848,,766,,,,,848,,848,848,848,842,842,842,842,842,842',
',,,842,842,,,,842,,842,842,842,842,842,842,842,,,,,,842,842,842,842',
'842,842,842,,,842,,,,,,842,842,842,842,842,842,842,842,842,842,842,842',
',842,842,842,,842,842,842,842,842,768,768,768,768,768,768,768,768,768',
'768,768,,768,768,,,768,768,,842,,,842,,,842,842,,,842,,842,768,,768',
'842,768,768,,768,768,768,768,768,842,768,,,,842,842,842,842,,842,842',
'842,842,,,,,842,842,,768,,,,,842,,842,842,842,568,568,568,568,568,568',
',,,568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568,568',
'568,568,568,,,568,,,,,,568,568,568,568,568,568,568,568,568,568,568,568',
',568,568,568,,568,568,568,568,568,857,857,857,857,857,857,857,857,857',
'857,857,,857,857,,,857,857,,568,,,568,,,568,568,,,568,,568,857,,857',
'568,857,857,,857,857,857,857,857,568,857,,,,568,568,568,568,,568,568',
'568,568,,,,,568,568,,857,,,,,568,,568,568,568,805,805,805,805,805,805',
',,,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805,805,805,805',
'805,805,805,,,805,,,,,,805,805,805,805,805,805,805,805,805,805,805,805',
',805,805,805,,805,805,805,805,805,860,860,860,860,860,860,860,860,860',
'860,860,,860,860,,,860,860,,805,,,805,,,805,805,,,805,,805,860,,860',
'805,860,860,,860,860,860,860,860,805,860,,,,805,805,805,805,,805,805',
'805,805,,,,,805,805,,860,,,,,805,,805,805,805,839,839,839,839,839,839',
',,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839,839',
'839,839,839,,,839,,,,,,839,839,839,839,839,839,839,839,839,839,839,839',
',839,839,839,,839,839,839,839,839,276,276,276,276,276,276,276,276,276',
'276,276,,276,276,,,276,276,,839,,,839,,,839,839,,,839,,839,276,,276',
'839,276,276,,276,276,276,276,276,839,276,,,,839,839,839,839,,839,839',
'839,839,,,,,839,839,,276,,,,,839,,839,839,839,838,838,838,838,838,838',
',,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838,838',
'838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838,838',
',838,838,838,,838,838,838,838,838,465,465,465,465,465,465,465,,,465',
'465,,,,,,465,465,,838,,,838,,,838,838,,,838,,838,465,,465,838,465,465',
',465,465,465,465,465,838,465,,,,838,838,838,838,,838,838,838,838,,,',
',838,838,,,,,,,838,,838,838,838,500,500,500,500,500,500,,,,500,500,',
',,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500',
',,500,,,,,,500,500,500,500,500,500,500,500,500,500,500,500,,500,500',
'500,,500,500,500,500,500,449,449,449,449,449,449,449,449,449,449,449',
',449,449,,,449,449,,500,,,500,,,500,500,,,500,,500,449,,449,500,449',
'449,,449,449,449,449,449,500,449,,,,500,500,500,500,,500,500,500,500',
',,,,500,500,,,,,,,500,,500,500,500,792,792,792,792,792,792,,,,792,792',
',,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792',
',,792,,,,,,792,792,792,792,792,792,792,792,792,792,792,792,,792,792',
'792,,792,792,792,792,792,463,,,,,,,,,,,,,,,,463,463,,792,,,792,,,792',
'792,,,792,,792,463,,463,792,463,463,,463,463,,,463,792,463,,,,792,792',
'792,792,,792,792,792,792,,,,,792,792,,,,,,,792,,792,792,792,744,744',
'744,744,744,744,,,,744,744,,,,744,,744,744,744,744,744,744,744,,,,,',
'744,744,744,744,744,744,744,,,744,,,,,,744,744,744,744,744,744,744,744',
'744,744,744,744,,744,744,744,,744,744,744,744,744,462,,,,,,,,,,,,,,',
',462,462,,744,,,744,,,744,744,,,744,,744,462,,462,744,462,462,,462,462',
',,462,744,462,,,,744,744,744,744,,744,744,744,744,,,,,744,744,,,,,,',
'744,,744,744,744,964,964,964,964,964,964,,,,964,964,,,,964,,964,964',
'964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,,964',
'964,964,964,964,964,964,964,964,964,964,964,,964,964,964,,964,964,964',
'964,964,461,,,,,,,,,,,,,,,,461,461,,964,,,964,,,964,964,,,964,,964,461',
',461,964,461,461,,461,461,,,461,964,461,,,,964,964,964,964,,964,964',
'964,964,,,,,964,964,,,,,,,964,,964,964,964,734,734,734,734,734,734,',
',,734,734,,,,734,,734,734,734,734,734,734,734,,,,,,734,734,734,734,734',
'734,734,,,734,,,,,,734,734,734,734,734,734,734,734,734,734,734,734,',
'734,734,734,,734,734,734,734,734,468,468,468,468,468,468,468,,,468,468',
',,,,,468,468,,734,,,734,,,734,734,,,734,,734,468,,468,734,468,468,,468',
'468,468,468,468,734,468,,,,734,734,734,734,,734,734,734,734,,,,,734',
'734,,,,,,,734,,734,734,734,730,730,730,730,730,730,,,,730,730,,,,730',
',730,730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730,,,730',
',,,,,730,730,730,730,730,730,730,730,730,730,730,730,,730,730,730,,730',
'730,730,730,730,467,467,467,467,467,467,467,,,467,467,,,,,,467,467,',
'730,,,730,,,730,730,,,730,,730,467,,467,730,467,467,,467,467,467,467',
'467,730,467,,,,730,730,730,730,,730,730,730,730,,,,,730,730,,,,,,,730',
',730,730,730,654,654,654,654,654,654,,,,654,654,,,,654,,654,654,654',
'654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,654,654',
'654,654,654,654,654,654,654,654,654,654,,654,654,654,,654,654,654,654',
'654,460,460,460,460,460,460,460,,,460,460,,,,,,460,460,,654,,,654,,',
'654,654,,,654,,654,460,,460,654,460,460,,460,460,460,460,460,654,460',
',,,654,654,654,654,,654,654,654,654,,,,,654,654,,,,,,,654,,654,654,654',
'653,653,653,653,653,653,,,,653,653,,,,653,,653,653,653,653,653,653,653',
',,,,,653,653,653,653,653,653,653,,,653,,,,,,653,653,653,653,653,653',
'653,653,653,653,653,653,,653,653,653,,653,653,653,653,653,466,466,466',
'466,466,466,466,,,466,466,,,,,,466,466,,653,,,653,,,653,653,,,653,,653',
'466,,466,653,466,466,,466,466,466,466,466,653,466,,,,653,653,653,653',
',653,653,653,653,,,,,653,653,,,,,,,653,,653,653,653,966,966,966,966',
'966,966,,,,966,966,,,,966,,966,966,966,966,966,966,966,,,,,,966,966',
'966,966,966,966,966,,,966,,,,,,966,966,966,966,966,966,966,966,966,966',
'966,966,,966,966,966,,966,966,966,966,966,472,472,472,472,472,472,472',
',,472,472,,,,,,472,472,,966,,,966,,,966,966,,,966,,966,472,,472,966',
'472,472,,472,472,472,472,472,966,472,,,,966,966,966,966,,966,966,966',
'966,,,,,966,966,,,,,,,966,,966,966,966,958,958,958,958,958,958,,,,958',
'958,,,,958,,958,958,958,958,958,958,958,,,,,,958,958,958,958,958,958',
'958,,,958,,,,,,958,958,958,958,958,958,958,958,958,958,958,958,,958',
'958,958,,958,958,958,958,958,473,473,473,473,473,473,473,473,,473,473',
',,,,,473,473,,958,,,958,,,958,958,,,958,,958,473,,473,958,473,473,,473',
'473,473,473,473,958,473,,,,958,958,958,958,,958,958,958,958,,,,,958',
'958,,,,,,,958,,958,958,958,121,121,121,121,121,121,,,,121,121,,,,121',
',121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121',
',,,,,121,121,121,121,121,121,121,121,121,121,121,121,,121,121,121,,121',
'121,121,121,121,469,469,469,469,469,469,469,,,469,469,,,,,,469,469,',
'121,,,121,,,121,121,,,121,,121,469,,469,121,469,469,,469,469,469,469',
'469,121,469,,,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,,,,121',
',121,121,121,326,326,326,326,326,326,,,,326,326,,,,326,,326,326,326',
'326,326,326,326,,,,,,326,326,326,326,326,326,326,,,326,,,,,,326,326',
'326,326,326,326,326,326,326,326,326,326,,326,326,326,,326,326,326,326',
'326,450,450,450,450,450,450,450,450,450,450,450,,450,450,,,450,450,',
'326,,,326,,,326,326,,,326,,326,450,,450,326,450,450,,450,450,450,450',
'450,326,450,,,,326,326,326,326,,326,326,326,326,,,,,326,326,,,,,,,326',
',326,326,326,206,206,206,206,206,206,,,,206,206,,,,206,,206,206,206',
'206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,206,206',
'206,206,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206',
'206,459,,,,,,,,,,,,,,,,459,459,,206,,,206,,,206,206,,,206,,206,459,',
',206,459,459,,459,459,,,,206,,,,,206,206,206,206,,206,206,206,206,,',
',,206,206,,,,216,216,216,206,216,206,206,206,216,216,,,,216,,216,216',
'216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216',
',,216,216,216,216,216,216,216,216,,216,216,216,,216,216,216,216,216',
'457,,,,,,,,,,,,,,,,457,457,,216,,,216,,,216,216,,,216,,,457,,457,216',
'457,457,,457,457,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216',
'216,,,,,,,216,,216,216,216,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,',
',5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,458',
',,,,,,,,,,,,,,,458,458,,5,,,5,,,5,5,,,5,,5,458,,458,5,458,458,,458,458',
',,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,20,20,20,5,20,5,5,5,20,20,,,,20',
',20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20',
'20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,',
'20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,',
'20,20,,,,29,29,29,20,29,20,20,20,29,29,,,,29,,29,29,29,29,29,29,29,',
',,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29',
'29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29',
',29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30',
'30,29,30,29,29,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30',
'30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30',
'30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,',
',,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30',
'30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31',
',,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,',
',,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31',
'31,31,,31,31,31,31,,,,,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,',
',34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34',
',,,35,35,35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35',
'35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35',
',35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,697,,697,697,697',
'697,697,,,,,,,,,697,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,697,35',
',35,35,35,42,42,42,,42,697,697,,42,42,697,,,42,,42,42,42,42,42,42,42',
',,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42',
'42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42',
',,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43',
'42,42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43',
',,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,',
',,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43',
'43,,43,43,43,43,,,,,43,43,,,,44,44,44,43,44,43,43,43,44,44,,,,44,,44',
'44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44',
'44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44',
',,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44',
'44,,,,59,59,59,44,59,44,44,44,59,59,,,,59,,59,59,59,59,59,59,59,,,,',
',59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59',
'59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,',
',59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60',
'59,60,59,59,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60',
'60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60',
'60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,',
',,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,63,63,63,60,63,60,60,60,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,',
',,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63',
'63,63,,,,,63,63,,,,64,64,64,63,64,63,63,63,64,64,,,,64,,64,64,64,64',
'64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64',
'64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,',
',64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,67',
'67,67,64,67,64,64,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67',
'67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67',
'67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67',
',,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,,,,,67,67,,67,67,67,68,68',
'68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68',
',,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,68,,,,,,',
',,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,',
'68,68,68,68,,,,,68,68,,,,69,69,69,68,69,68,68,68,69,69,,,,69,,69,69',
'69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69',
'69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69',
'69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70',
'70,70,69,70,69,69,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70',
'70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70',
',,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,974,,974,974,974,974',
'974,,,,,,,,,974,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,,,974,70,,70',
'70,70,111,111,111,111,111,974,974,,111,111,974,,,111,,111,111,111,111',
'111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111',
'111,111,111,111,111,111,111,111,111,,111,111,111,,111,111,111,111,111',
',,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111',
',,,,111,111,111,111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111',
'111,116,116,116,,116,,,,116,116,,,,116,,116,116,116,116,116,116,116',
',,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116',
'116,116,116,,116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116',
',,116,,,116,116,,,116,,,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116',
'116,116,116,,,,,116,116,,,,117,117,117,116,117,116,116,116,117,117,',
',,117,,117,117,117,117,117,117,117,,,,,,117,117,117,117,117,117,117',
',,117,,,,,,,117,,,117,117,117,117,117,117,117,117,,117,117,117,,117',
'117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117',
',,,,,,,,117,,,,,117,117,117,117,,117,117,117,117,,,,,117,117,,,,118',
'118,118,117,118,117,117,117,118,118,,,,118,,118,118,118,118,118,118',
'118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118',
'118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,',
',118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118',
',118,118,118,118,,,,,118,118,,,,119,119,119,118,119,118,118,118,119',
'119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119',
'119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,',
'119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,',
',,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,,,,,119,119,',
',,,,,119,,119,119,119,120,120,120,120,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120',
'120,,120,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,',
',120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,207,207,207',
'120,207,120,120,120,207,207,,,,207,,207,207,207,207,207,207,207,,,,',
',207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207',
'207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207',
',,207,207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207,207,,207,207',
'207,207,,,,,207,207,,,,208,208,208,207,208,207,207,207,208,208,,,,208',
',208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208',
',,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208,208',
'208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,',
',,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208,,,,209,209,209',
'208,209,208,208,208,209,209,,,,209,,209,209,209,209,209,209,209,,,,',
',209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209,209',
'209,209,209,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,209,,209,,209,,,209,,,,,,209,,,,,209,209,209',
'209,,209,209,209,209,,,,,209,209,,,,214,214,214,209,214,209,209,209',
'214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214',
',214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,',
',,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214',
',,,215,215,215,214,215,214,214,214,215,215,,,,215,,215,215,215,215,215',
'215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215',
'215,215,215,215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,',
',,,,,215,,,215,,,215,215,,,215,,215,,,,215,,,,,,,,,215,,,,,215,215,215',
'215,,215,215,215,215,,,,,215,215,,,,217,217,217,215,217,215,215,215',
'217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217',
'217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217',
',217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217',
',,,218,218,218,217,218,217,217,217,218,218,,,,218,,218,218,218,218,218',
'218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218',
'218,218,218,218,218,,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,',
',,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218,218,218',
'218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219,218,218,218',
'219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219',
'219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219',
',219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,',
',,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,,,,,219,219',
'219,,,230,230,230,219,230,219,219,219,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230,,,,,230,230',
'230,230,,230,230,230,230,,,,,230,230,,,,233,233,233,230,233,230,230',
'230,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233',
'233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233',
'233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233',
',,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233',
',,,234,234,234,233,234,233,233,233,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,',
',,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234',
'234,,234,234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,236,236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,',
',,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,',
',,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,258,258,258,257,258,257,257,257,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,',
',,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258',
'258,,258,258,258,258,,,,,258,258,,,,265,265,265,258,265,258,258,258',
'265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265',
'265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265,265',
'265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265,265,265,265,',
',,,265,265,,,,266,266,266,265,266,265,265,265,266,266,,,,266,,266,266',
'266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266',
',,266,266,266,266,266,266,266,266,266,266,266,266,,266,266,266,266,266',
',,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266,,266,,,266,,',
',,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266,,,,274,274,274',
'266,274,266,266,266,274,274,,,,274,,274,274,274,274,274,274,274,,,,',
',274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274,274',
'274,274,274,274,274,274,,274,274,274,274,274,,,,,,,,,,,,,,,,,,,,274',
',,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274,,,,,274,274,274',
'274,,274,274,274,274,,,,,274,274,274,,,281,281,281,274,281,274,274,274',
'281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',,,283,283,283,281,283,281,281,281,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283',
'283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,,,,,,,,,',
',,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283,283',
'283,,283,283,283,283,,,,,283,283,,,,286,286,286,283,286,283,283,283',
'286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286',
'286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286',
',286,286,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,',
',,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286,,,,,286,286',
',,,287,287,287,286,287,286,286,286,287,287,,,,287,,287,287,287,287,287',
'287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287',
'287,287,287,287,287,,287,287,287,,287,287,287,287,287,,,,,,,,,,,,,,',
',,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,,,,287,287,287',
'287,,287,287,287,287,,,,,287,287,,,,,,,287,,287,287,287,292,292,292',
'292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,,,292,292',
'292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292,292,292,292',
'292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292',
',,292,292,,,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292',
'292,292,,,,,292,292,,,,300,300,300,292,300,292,292,292,300,300,,,,300',
',300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300',
',,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300,,300,300,,',
'300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,972,,972,972,972',
'972,972,,,,,,,,,972,,300,300,300,300,,300,300,300,300,,,,,300,300,,',
',300,,972,300,,300,300,300,317,317,317,,317,972,972,,317,317,972,,,317',
',317,317,317,317,317,317,317,,,,,,317,317,317,317,317,317,317,,,317',
',,,,,,317,,,317,317,317,317,317,317,317,317,,317,317,317,,317,317,,',
'317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,',
'317,317,317,317,,317,317,317,317,,,,,317,317,,,,325,325,325,317,325',
'317,317,317,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325',
'325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325',
',325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,',
'325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325',
'325,,,,,325,325,,,,327,327,327,325,327,325,325,325,327,327,,,,327,,327',
'327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,',
',327,,,327,327,327,327,327,327,327,327,,327,327,327,,327,327,327,327',
'327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,,327',
',,,,327,327,327,327,,327,327,327,327,,,,,327,327,,,,342,342,342,327',
'342,327,327,327,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342',
'342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342',
'342,,342,342,342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,',
',342,342,,,342,,,,,,342,,,,,,,,,342,,,,,342,342,342,342,,342,342,342',
'342,,,,,342,342,,,,343,343,343,342,343,342,342,342,343,343,,,,343,,343',
'343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,',
',343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343,343,343',
'343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,,343',
',,,,343,343,343,343,,343,343,343,343,,,,,343,343,,,,362,362,362,343',
'362,343,343,343,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362',
'362,362,362,362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362',
'362,,362,362,362,,362,362,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,',
',362,362,,,362,,,,,,362,,,,,,,,,362,,,,,362,362,362,362,,362,362,362',
'362,,,,,362,362,,,,378,378,378,362,378,362,362,362,378,378,,,,378,,378',
'378,378,378,378,378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,',
',378,,,378,378,378,378,378,378,378,378,,378,378,378,,378,378,378,378',
'378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,,378,,,,,,378,,,,,,,,,378',
',,,,378,378,378,378,,378,378,378,378,,,,,378,378,,,,406,406,406,378',
'406,378,378,378,406,406,,,,406,,406,406,406,406,406,406,406,,,,,,406',
'406,406,406,406,406,406,,,406,,,,,,,406,,,406,406,406,406,406,406,406',
'406,,406,406,406,,406,406,406,406,406,,,,,,,,,,,,,,,,,,,,406,,,406,',
',406,406,,,406,,,,,,406,,,,,,,,,406,,,,,406,406,406,406,,406,406,406',
'406,,,,,406,406,,,,444,444,444,406,444,406,406,406,444,444,,,,444,,444',
'444,444,444,444,444,444,,,,,,444,444,444,444,444,444,444,,,444,,,,,',
',444,,,444,444,444,444,444,444,444,444,444,444,444,444,,444,444,444',
'444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444,444,,,444,,444,,444,,444',
',,444,,,,,,444,,,,,444,444,444,444,,444,444,444,444,,,,,444,444,,,,446',
'446,446,444,446,444,444,444,446,446,,,,446,,446,446,446,446,446,446',
'446,,,,,,446,446,446,446,446,446,446,,,446,,,,,,,446,,,446,446,446,446',
'446,446,446,446,,446,446,446,,446,446,446,446,446,,,,,,,,,,,,,,,,,,',
',446,,,446,,,446,446,,,446,,,,,,446,,,,,,,,,446,,,,,446,446,446,446',
',446,446,446,446,,,,,446,446,,,,447,447,447,446,447,446,446,446,447',
'447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447,447,447',
'447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447,,447,447,447,',
'447,447,447,447,447,,,,,,,,,,,,,,,,,,,,447,,,447,,,447,447,,,447,,,',
',,447,,,,,,,,,447,,,,,447,447,447,447,,447,447,447,447,,,,,447,447,',
',,448,448,448,447,448,447,447,447,448,448,,,,448,,448,448,448,448,448',
'448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448,448,448',
'448,448,448,448,448,,448,448,448,,448,448,448,448,448,,,,,,,,,,,,,,',
',,,,,448,,,448,,,448,448,,,448,,,,,,448,,,,,,,,,448,,,,,448,448,448',
'448,,448,448,448,448,,,,,448,448,,,,488,488,488,448,488,448,448,448',
'488,488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488,488',
'488,488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488,488',
'488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488,,,488',
',488,,488,,488,,,488,,,,,,488,,,,,488,488,488,488,,488,488,488,488,',
',,,488,488,,,,490,490,490,488,490,488,488,488,490,490,,,,490,,490,490',
'490,490,490,490,490,,,,,,490,490,490,490,490,490,490,,,490,,,,,,,490',
',,490,490,490,490,490,490,490,490,490,490,490,490,,490,490,490,490,490',
',,,,,,,,,,,,,,,,,,,490,,,490,,,490,490,,,490,,,,490,,490,,,490,,,,,',
'490,,,,,490,490,490,490,,490,490,490,490,,,,,490,490,,,,492,492,492',
'490,492,490,490,490,492,492,,,,492,,492,492,492,492,492,492,492,,,,',
',492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492,492,492,492,492',
'492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492',
',,492,492,,,492,,,,,,492,,,,,,,,,492,,,,,492,492,492,492,,492,492,492',
'492,,,,,492,492,,,,,,,492,,492,492,492,498,498,498,498,498,,,,498,498',
',,,498,,498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498',
',,498,,,,,,498,498,498,498,498,498,498,498,498,498,498,498,,498,498',
'498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498',
',498,,,,498,,,,,,,,,498,,,,,498,498,498,498,,498,498,498,498,,,,,498',
'498,,,,,,498,498,,498,498,498,506,506,506,,506,,,,506,506,,,,506,,506',
'506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,',
',506,,,506,506,506,506,506,506,506,506,,506,506,506,,506,506,,,506,',
',,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,,,,,,,,,,,,,,,506,506',
'506,506,,506,506,506,506,,,,,506,506,,,,508,508,508,506,508,506,506',
'506,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508',
'508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508,508,508',
'508,508,,508,508,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508',
',,508,,508,,508,,508,,,508,,,,,,508,,,,,508,508,508,508,,508,508,508',
'508,,,,,508,508,,,,514,514,514,508,514,508,508,508,514,514,,,,514,,514',
'514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,',
',514,,,514,514,514,514,514,514,514,514,,514,514,514,,514,514,,,514,',
',,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514,514',
'514,514,,514,514,514,514,,,,,514,514,,,,517,517,517,514,517,514,514',
'514,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,,517,517',
'517,,517,517,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517',
',,,,,517,,,,,,,,,517,,,,,517,517,517,517,,517,517,517,517,,,,,517,517',
',,,518,518,518,517,518,517,517,517,518,518,,,,518,,518,518,518,518,518',
'518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518',
'518,518,518,518,518,,518,518,518,,518,518,518,518,518,,,,,,,,,,,,,,',
',,,,,518,,,518,,,518,518,,,518,,,,,,518,,,,,,,,,518,,,,,518,518,518',
'518,,518,518,518,518,,,,,518,518,,,,522,522,522,518,522,518,518,518',
'522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522',
',522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,',
',,,522,,,,,,,,,522,,,,,522,522,522,522,,522,522,522,522,,,,,522,522',
',,,528,528,528,522,528,522,522,522,528,528,,,,528,,528,528,528,528,528',
'528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528',
'528,528,528,528,528,528,528,528,528,,528,528,528,528,528,,,,,,,,,,,',
',,,,,,,,528,,,528,,,528,528,,,528,,528,,,,528,,,528,,,,,,528,,,,,528',
'528,528,528,,528,528,528,528,,,,,528,528,,,,531,531,531,528,531,528',
'528,528,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531,531,531',
'531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531,531,531',
'531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531',
'531,,,531,,,,,,531,,,531,,,,,,531,,,,,531,531,531,531,,531,531,531,531',
',,,,531,531,,,,556,556,556,531,556,531,531,531,556,556,,,,556,,556,556',
'556,556,556,556,556,,,,,,556,556,556,556,556,556,556,,,556,,,,,,,556',
',,556,556,556,556,556,556,556,556,,556,556,556,,556,556,556,556,556',
',,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,,556,,,,,,556,,,,,,,,,556,,',
',,556,556,556,556,,556,556,556,556,,,,,556,556,,,,576,576,576,556,576',
'556,556,556,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576',
'576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576',
',576,576,576,,576,576,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576',
'576,,,576,,576,,,,576,,,,,,,,,576,,,,,576,576,576,576,,576,576,576,576',
',,,,576,576,,,,577,577,577,576,577,576,576,576,577,577,,,,577,,577,577',
'577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,,577',
',,577,577,577,577,577,577,577,577,577,577,577,577,,577,577,577,577,577',
',,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,,577,,577,,,577,,',
',,,577,,,,,577,577,577,577,,577,577,577,577,,,,,577,577,,,,587,587,587',
'577,587,577,577,577,587,587,,,,587,,587,587,587,587,587,587,587,,,,',
',587,587,587,587,587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587',
'587,587,587,587,587,587,,587,587,587,587,587,,,,,,,,,,,,,,,,,,,,587',
',,587,,,587,587,,,587,,587,,587,,587,,,587,,,,,,587,,,,,587,587,587',
'587,,587,587,587,587,,,,,587,587,,,,619,619,619,587,619,587,587,587',
'619,619,,,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619,619',
'619,619,,,619,,,,,,,619,,,619,619,619,619,619,619,619,619,,619,619,619',
',619,619,619,619,619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,619',
',,,619,,,,,,,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619',
',,,620,620,620,619,620,619,619,619,620,620,,,,620,,620,620,620,620,620',
'620,620,,,,,,620,620,620,620,620,620,620,,,620,,,,,,,620,,,620,620,620',
'620,620,620,620,620,,620,620,620,,620,620,620,620,620,,,,,,,,,,,,,,',
',,,,,620,,,620,,,620,620,,,620,,,,,,620,,,,,,,,,620,,,,,620,620,620',
'620,,620,620,620,620,,,,,620,620,,,,623,623,623,620,623,620,620,620',
'623,623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623,623,623,623',
'623,623,,,623,,,,,,,623,,,623,623,623,623,623,623,623,623,623,623,623',
'623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623,,,623',
',623,,623,,623,,,623,,,,,,623,,,,,623,623,623,623,,623,623,623,623,',
',,,623,623,,,,624,624,624,623,624,623,623,623,624,624,,,,624,,624,624',
'624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624',
',,624,624,624,624,624,624,624,624,624,624,624,624,,624,624,624,624,624',
',,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,624,,624,,,624,,,,,',
'624,,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,625,625,625',
'624,625,624,624,624,625,625,,,,625,,625,625,625,625,625,625,625,,,,',
',625,625,625,625,625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625',
'625,625,,625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625',
',,625,625,,,625,,,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625',
'625,,,,,625,625,,,,626,626,626,625,626,625,625,625,626,626,,,,626,,626',
'626,626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,',
',626,,,626,626,626,626,626,626,626,626,,626,626,626,,626,626,626,626',
'626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626',
',,,,626,626,626,626,,626,626,626,626,,,,,626,626,,,,630,630,630,626',
'630,626,626,626,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630',
'630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630',
'630,,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,',
',630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630',
'630,,,,,630,630,,,,631,631,631,630,631,630,630,630,631,631,,,,631,,631',
'631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,',
',631,,,631,631,631,631,631,631,631,631,,631,631,631,,631,631,631,631',
'631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,,,,,631,,,,,,,,,631',
',,,,631,631,631,631,,631,631,631,631,,,,,631,631,,,,634,634,634,631',
'634,631,631,631,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634',
'634,634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634',
'634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,',
',634,634,,,634,,,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634,634',
'634,,,,,634,634,,,,635,635,635,634,635,634,634,634,635,635,,,,635,,635',
'635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,',
',635,,,635,635,635,635,635,635,635,635,,635,635,635,,635,635,635,635',
'635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635',
',,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,659,659,659,635',
'659,635,635,635,659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659',
'659,659,659,659,659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659',
'659,,659,659,659,,659,659,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,',
',659,659,,,659,,,,,,659,,,,,,,,,659,,,,,659,659,659,659,,659,659,659',
'659,,,,,659,659,,,,662,662,662,659,662,659,659,659,662,662,,,,662,,662',
'662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,',
',662,,,662,662,662,662,662,662,662,662,,662,662,662,,662,662,662,662',
'662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,,662',
',,,,662,662,662,662,,662,662,662,662,,,,,662,662,,,,666,666,666,662',
'666,662,662,662,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666',
'666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666',
'666,,666,666,666,,666,666,,,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666',
',,666,,,,,,,,,,,,,,,,,,,,666,666,666,666,,666,666,666,666,,,,,666,666',
',,,677,677,677,666,677,666,666,666,677,677,,,,677,,677,677,677,677,677',
'677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677',
'677,677,677,677,677,,677,677,677,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677',
',,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677,677,677,677,,677,677,677',
'677,,,,,677,677,,,,682,682,682,677,682,677,677,677,682,682,,,,682,,682',
'682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682,,,682,,,,,',
',682,,,682,682,682,682,682,682,682,682,,682,682,682,,682,682,682,682',
'682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,682,,,,682,,,,,,,',
',682,,,,,682,682,682,682,,682,682,682,682,,,,,682,682,,,,699,699,699',
'682,699,682,682,682,699,699,,,,699,,699,699,699,699,699,699,699,,,,',
',699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699',
'699,699,,699,699,699,,699,699,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699',
',,699,699,,,699,,,,,,699,,,,,,,,,699,,,,,699,699,699,699,,699,699,699',
'699,,,,,699,699,,,,725,725,725,699,725,699,699,699,725,725,,,,725,,725',
'725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,',
',725,,,725,725,725,725,725,725,725,725,,725,725,725,,725,725,725,725',
'725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,,,,725',
',,,,725,725,725,725,,725,725,725,725,,,,,725,725,,,,731,731,731,725',
'731,725,725,725,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731',
'731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731',
'731,,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,',
',731,731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731,731,,731,731,731',
'731,,,,,731,731,,,,753,753,753,731,753,731,731,731,753,753,,,,753,,753',
'753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753,,,753,,,,,',
',753,,,753,753,753,753,753,753,753,753,,753,753,753,,753,753,753,753',
'753,,,,,,,,,,,,,,,,,,,,753,,,753,,,753,753,,,753,,,,,,753,,,,,,,,,753',
',,,,753,753,753,753,,753,753,753,753,,,,,753,753,,,,755,755,755,753',
'755,753,753,753,755,755,,,,755,,755,755,755,755,755,755,755,,,,,,755',
'755,755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755,755,755',
'755,,755,755,755,,755,755,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,',
',755,755,,,755,,,,,,755,,,,,,,,,755,,,,,755,755,755,755,,755,755,755',
'755,,,,,755,755,,,,769,769,769,755,769,755,755,755,769,769,,,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
',769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769,769,769',
'769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769',
',,,,769,769,769,769,,769,769,769,769,,,,,769,769,,,,770,770,770,769',
'770,769,769,769,770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770',
'770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770',
'770,,770,770,770,,770,770,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,',
',770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770,770,,770,770,770',
'770,,,,,770,770,,,,771,771,771,770,771,770,770,770,771,771,,,,771,,771',
'771,771,771,771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,',
',771,,,771,771,771,771,771,771,771,771,,771,771,771,,771,771,771,771',
'771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,,,,,771,,,,,,,,,771',
',,,,771,771,771,771,,771,771,771,771,,,,,771,771,,,,772,772,772,771',
'772,771,771,771,772,772,,,,772,,772,772,772,772,772,772,772,,,,,,772',
'772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772,772,772,772,772',
'772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,,,,,,,772,,,772,',
',772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772,772,,772,772,772',
'772,,,,,772,772,,,,774,774,774,772,774,772,772,772,774,774,,,,774,,774',
'774,774,774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,',
',774,,,774,774,774,774,774,774,774,774,,774,774,774,,774,774,774,774',
'774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,,774',
',,,,774,774,774,774,,774,774,774,774,,,,,774,774,,,,786,786,786,774',
'786,774,774,774,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786',
'786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786',
'786,,786,786,786,,786,786,,,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786',
',,786,,,,,,,,,,,,,,,,,,,,786,786,786,786,,786,786,786,786,,,,,786,786',
',,,836,836,836,786,836,786,786,786,836,836,,,,836,,836,836,836,836,836',
'836,836,,,,,,836,836,836,836,836,836,836,,,836,,,,,,,836,,,836,836,836',
'836,836,836,836,836,,836,836,836,,836,836,836,836,836,,,,,,,,,,,,,,',
',,,,,836,,,836,,,836,836,,,836,,,,,,836,,,,,,,,,836,,,,,836,836,836',
'836,,836,836,836,836,,,,,836,836,,,,841,841,841,836,841,836,836,836',
'841,841,,,,841,,841,841,841,841,841,841,841,,,,,,841,841,841,841,841',
'841,841,,,841,,,,,,,841,,,841,841,841,841,841,841,841,841,,841,841,841',
',841,841,841,841,841,,,,,,,,,,,,,,,,,,,,841,,,841,,,841,841,,,841,,841',
',,,841,,,,,,,,,841,,,,,841,841,841,841,,841,841,841,841,,,,,841,841',
',,,858,858,858,841,858,841,841,841,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,858,858,858,858,,858,858,858,858,858,,,,,,,,,,,',
',,,,,,,,858,,,858,,,858,858,,,858,,,,858,,858,,,858,,,,,,858,,,,,858',
'858,858,858,,858,858,858,858,,,,,858,858,,,,859,859,859,858,859,858',
'858,858,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859,859',
'859,859,859,859,,,859,,,,,,,859,,,859,859,859,859,859,859,859,859,,859',
'859,859,,859,859,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859,,,859,859',
',,859,,,,,,859,,,,,,,,,859,,,,,859,859,859,859,,859,859,859,859,,,,',
'859,859,,,,873,873,873,859,873,859,859,859,873,873,,,,873,,873,873,873',
'873,873,873,873,,,,,,873,873,873,873,873,873,873,,,873,,,,,,,873,,,873',
'873,873,873,873,873,873,873,,873,873,873,,873,873,,,873,,,,,,,,,,,,',
',,,,,,,873,,,873,,,873,873,,,873,,,,,,,,,,,,,,,,,,,,873,873,873,873',
',873,873,873,873,,,,,873,873,,,,885,885,885,873,885,873,873,873,885',
'885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885',
'885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885,',
'885,885,,,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,,,,',
',,,,,,,,,,885,885,885,885,,885,885,885,885,,,,,885,885,,,,982,982,982',
'885,982,885,885,885,982,982,,,,982,,982,982,982,982,982,982,982,,,,',
',982,982,982,982,982,982,982,,,982,,,,,,,982,,,982,982,982,982,982,982',
'982,982,982,982,982,982,,982,982,982,982,982,,,,,,,,,,,,,,,,,,,,982',
',,982,,,982,982,,,982,,982,,982,,982,,,982,,,,,,982,,,,,982,982,982',
'982,,982,982,982,982,,,,,982,982,,,,,,,982,,982,982,982,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9',
'9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,',
',,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,616,616,616',
'616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616',
'616,616,616,616,,,,616,616,616,616,616,616,616,616,616,616,,,,,,616',
'616,616,616,616,616,616,616,616,,,616,,,,,,,,616,616,,616,616,616,616',
'616,616,616,,,616,616,,,,616,616,616,616,,,,,,,,,,,,,,616,616,,616,616',
'616,616,616,616,616,616,616,616,616,616,,,616,616,,,,,,,,,,,,,,616,397',
'397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'397,397,397,397,397,397,,,,397,397,397,397,397,397,397,397,397,397,',
',,,,397,397,397,397,397,397,397,397,397,,,397,,,,,,,,397,397,,397,397',
'397,397,397,397,397,,,397,397,,,,397,397,397,397,,,,,,,,,,,,,,397,397',
',397,397,397,397,397,397,397,397,397,397,397,397,,,397,397,,,,,,,,,',
',,,,397,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8',
'8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8',
'8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,',
',,,,,,8,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71',
'71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,',
',71,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737',
'737,737,737,737,737,737,737,737,,,,737,737,737,737,737,737,737,737,737',
'737,,,,,,737,737,737,737,737,737,737,737,737,,,737,,,,,,,,737,737,,737',
'737,737,737,737,737,737,,,737,737,,,,737,737,737,737,,,,,,,,,,,,,,737',
'737,,737,737,737,737,737,737,737,737,737,737,737,737,585,585,737,,585',
',,,,,,,585,585,,585,585,585,585,585,585,585,,,585,585,,,,585,585,585',
'585,,,,,,585,,,,,,,,585,585,,585,585,585,585,585,585,585,585,585,585',
'585,585,520,520,585,,520,,,,,,,,520,520,,520,520,520,520,520,520,520',
',,520,520,,,,520,520,520,520,,,,,,520,,,,,,,,520,520,,520,520,520,520',
'520,520,520,520,520,520,520,520,586,586,520,,586,,,,,,,,586,586,,586',
'586,586,586,586,586,586,,,586,586,,,,586,586,586,586,,,,,,586,,,,,,',
',586,586,,586,586,586,586,586,586,586,586,586,586,586,586,510,510,586',
',510,,,,,,,,510,510,,510,510,510,510,510,510,510,,,510,510,,,,510,510',
'510,510,,,,,,510,,,,,,,,510,510,,510,510,510,510,510,510,510,510,510',
'510,510,510,509,509,510,,509,,,,,,,,509,509,,509,509,509,509,509,509',
'509,,,509,509,,,,509,509,509,509,,,,,,509,,,,,,,,509,509,,509,509,509',
'509,509,509,509,509,509,509,509,509,579,579,509,,579,,,,,,,,579,579',
',579,579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579,',
',,,,,,579,579,,579,579,579,579,579,579,579,579,579,579,579,579,261,261',
'579,,261,,,,,,,,261,261,,261,261,261,261,261,261,261,,,261,261,,,,261',
'261,261,261,,,,,,,,,,,,,,261,261,,261,261,261,261,261,261,261,261,261',
'261,261,261,984,984,261,,984,,,,,,,,984,984,,984,984,984,984,984,984',
'984,,,984,984,,,,984,984,984,984,,,,,,984,,,,,,,,984,984,,984,984,984',
'984,984,984,984,984,984,984,984,984,519,519,984,,519,,,,,,,,519,519',
',519,519,519,519,519,519,519,,,519,519,,,,519,519,519,519,,,,,,519,',
',,,,,,519,519,,519,519,519,519,519,519,519,519,519,519,519,519,210,210',
'519,,210,,,,,,,,210,210,,210,210,210,210,210,210,210,,,210,210,,,,210',
'210,210,210,,,,,,210,,,,,,,,210,210,,210,210,210,210,210,210,210,210',
'210,210,210,210,211,211,210,,211,,,,,,,,211,211,,211,211,211,211,211',
'211,211,,,211,211,,,,211,211,211,211,,,,,,211,,,,,,,,211,211,,211,211',
'211,211,211,211,211,211,211,211,211,211,937,937,211,,937,,,,,,,,937',
'937,,937,937,937,937,937,937,937,,,937,937,,,,937,937,937,937,,,,,,937',
',,,,,,,937,937,,937,937,937,937,937,937,937,937,937,937,937,937,443',
'443,937,,443,,,,,,,,443,443,,443,443,443,443,443,443,443,,,443,443,',
',,443,443,443,443,,,,,,443,,,,,,,,443,443,,443,443,443,443,443,443,443',
'443,443,443,443,443,442,442,443,,442,,,,,,,,442,442,,442,442,442,442',
'442,442,442,,,442,442,,,,442,442,442,442,,,,,,442,,,,,,,,442,442,,442',
'442,442,442,442,442,442,442,442,442,442,442,983,983,442,,983,,,,,,,',
'983,983,,983,983,983,983,983,983,983,,,983,983,,,,983,983,983,983,,',
',,,983,,,,,,,,983,983,,983,983,983,983,983,983,983,983,983,983,983,983',
'578,578,983,,578,,,,,,,,578,578,,578,578,578,578,578,578,578,,,578,578',
',,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578,578,578',
'578,578,578,578,578,578,,695,578,695,695,695,695,695,,693,,693,693,693',
'693,693,695,,,,,,,,693,,970,,970,970,970,970,970,,,,,,695,,,970,,,,',
'693,695,695,695,695,,,,695,693,693,693,693,,,,693,970,,988,,988,988',
'988,988,988,,,970,970,,,,970,988,,864,,864,864,864,864,864,,866,,866',
'866,866,866,866,864,,,,,988,,,866,,,,,,,,988,988,,,,988,864,,,,,,,,866',
'864,864,864,864,,,,864,866,866,866,866,,,868,866,868,868,868,868,868',
',735,,735,735,735,735,735,868,,,,,,,,735,,1014,,1014,1014,1014,1014',
'1014,,,,,,868,,,1014,,,,,735,,,868,868,,,,868,735,735,735,735,,,,735',
'1014,,736,,736,736,736,736,736,,,1014,1014,,,,1014,736,,536,,536,536',
'536,536,536,,892,,892,892,892,892,892,536,,,,,736,,,892,,,,,,736,736',
'736,736,,,,736,536,,,,,,,,892,536,536,536,536,,,,536,892,892,892,892',
',,894,892,894,894,894,894,894,896,,896,896,896,896,896,898,894,898,898',
'898,898,898,,896,,,,,,,898,,,,,,,,894,,,,,,,896,,,,894,894,,898,,894',
',896,896,,,,896,,898,898,,,,898' ]
        racc_action_check = arr = ::Array.new(25178, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2645,   916,   nil,   219,   nil,  6135,  1006,   927, 23498, 23114,
   388,   nil,    59,   -25,   850,   121,  1012,   245,   nil,   -74,
  6266,  2645,  1033,   nil,   586,   nil,   254,   746,  1014,  6397,
  6528,  6659,   nil,  1805,  6790,  6921,   nil,   805,   -83,   485,
   827,   169,  7060,  7191,  7322,   734,   718,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1394,   nil,   -35,  7453,
  7584,   -21,   nil,  7715,  7846,   nil,   nil,  7977,  8116,  8247,
  8378, 23626,   nil,   nil,   nil,   nil,   nil,   333,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   220,   nil,   nil,   608,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1150,
   nil,  8517,   nil,   nil,   nil,   nil,  8656,  8787,  8918,  9049,
  9188,  5585,   nil,   472,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   860,   nil,  5865,  9319,  9450,  9581,
 24349, 24410,   nil,   nil,  9712,  9843,  5996,  9974, 10105, 10236,
   nil,   nil,   882,   -63,    71,   156,   299,    79,   149,   nil,
 10367,  2925,   216, 10498, 10629, 10760, 10891, 11022, 11153, 11284,
 11415, 11546, 11677, 11808, 11939, 12070, 12201, 12332, 12463, 12594,
 12725, 12856, 12987, 13118, 13249, 13380, 13511, 13642, 13773,   nil,
   nil, 24166,   nil,   nil,   431, 13904, 14035,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 14166,   nil,  3905,   nil,   422,   426,
   nil, 14297,   493, 14428,   nil,   nil, 14559, 14690,   nil,   nil,
   -81,   nil, 14829,   868,   492,   463,  2225,   481,   524,   486,
 14960,  2085,   986,  1094,  1098,   606,  1134,   nil,   599,   559,
    10,   nil,   nil,   nil,   610,   273,   570, 15099,   nil,   509,
   690,  1137,   nil,   806,   nil, 15230,  5725, 15361,   922,   nil,
   291,   287,   979,   961,   322,   989,   nil,   nil,  1549,   486,
    33,    32, 15492, 15623,   226,   630,   519,     4,   -19,   481,
   721,    39,   640,   nil,   nil,   846,   982,   187,   nil,   576,
   nil,   258, 15754,   nil,   nil,   nil,   -57,   253,   451,   485,
   514,   515,   554,   578,   581,   nil,   582,   nil, 15885,   nil,
   408,   394,   391,   464,   363,   -30,   -34,   461,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   584, 23370,   nil,   nil,
   nil,   nil,   471,   nil,   nil,   417, 16016,   381,   nil,   nil,
  1945,   378,   nil,   372,   -32,   347,   140,  1126,   nil,   nil,
   nil,   110,     0,  1013,   nil,   nil,  1258,   878,   nil,  2085,
   nil,   922,   nil,   nil,  1665,   nil,   nil,   nil,   nil,   240,
   nil,   953, 24593, 24532, 16147,   310, 16278, 16409, 16540,  4185,
  5725,   627,   646,   913,   911,   903,   875,  5996,  6135,  5865,
  5025,  4605,  4465,  4325,  1343,  4045,  5165,  4885,  4745,  5585,
   931,   795,  5305,  5445,  2225,   206,  1530,   nil,   nil,   nil,
   nil,   575,   nil,   -50,   165,   577,   nil,   nil, 16671,   nil,
 16802,   nil, 16933,   nil,   332,   nil,   nil,   nil, 17072,  1118,
  4185,   601,   601,   nil,   nil,   603, 17211,   617, 17342, 24044,
 23983,   757,   674,   nil, 17473,   641,   nil, 17604, 17735, 24288,
 23861,  2365, 17866,   773,   772,    -4,   694,   nil, 17997,   nil,
   nil, 18128,   nil,   nil,   nil,   nil, 24999,   nil,   665,   666,
   nil,   670,   676,   699,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   694,  1190,   nil,   nil, 18259,   nil,   nil,   nil,
   805,   nil,   nil,   nil,   811,   nil,   nil,   812,  3625,   853,
   nil,  3065,    25,   -14,   853,   861, 18390, 18521, 24715, 24105,
   -18,   nil,   nil,   790,   nil, 23800, 23922, 18652,   nil,   nil,
   346,  2785,   800,   nil,   154,   nil,   nil,   nil,   614,   nil,
   nil,   nil,   776,   nil,   nil,   369,   nil,   367,   nil,   nil,
   768,   nil,   778,   nil,   nil,   nil, 23242,   nil,   780, 18783,
 18914,   418,   828, 19045, 19176, 19307, 19438,   828,   nil,   nil,
 19569, 19700,   832,   nil, 19831, 19962,   nil,   nil,   199,   386,
   470,   332,   806,  1805,   805,   nil,  1494,   nil,  2505,   913,
    -8,   -22,   nil,  5165,  5025,   nil,   830,   nil,   877, 20093,
   nil,   nil, 20224,   nil,   854,    62, 20355,   837,   nil,   843,
   248,   234,   893,   135,   791,   905,   862, 20486,  2505,   940,
   264,  1002, 20617,   nil,   887,   nil,   369,    60,   888,   666,
   nil,   nil,   530, 24785,   nil, 24777,   nil,  6968,   nil, 20748,
   nil,  1256,   nil,   892,   333,   901,   nil,   nil,   nil,   nil,
   612,   nil,  1018,   nil,   nil,   nil,   nil,  1029,   nil,   136,
   912,    41,    40,    65,     5, 20879,   754,  1022,   nil,   928,
  4885, 21010,   nil,  1055,  4745, 24926, 24982, 23739,   nil,   nil,
   nil,   nil,   nil,   nil,  4465,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   934, 21141,  2785, 21272,   nil,   939,   nil,  2925,
   nil,  3065,   nil,   nil,  3205,   nil,  3345,   nil,  3485, 21403,
 21534, 21665, 21796,   -85, 21927,   972,   976,   nil,   980,   985,
   996,   nil,  1021,  1001,   997,   993, 22058,   nil,   nil,  1128,
   nil,   nil,  4325,  1030,  1137,   nil,   nil,   nil,   nil,  1015,
   246,   nil,   nil,  1146,   nil,  3765,  1044,  1092,   nil,   nil,
  1090,   nil,   nil,   nil,   nil,  1091,  1050,   nil,   nil,   nil,
  1051,  1052,   nil,  1053,  1055,   nil,  1056,   nil,   nil,  1060,
   947,  1073,  1119,   nil,     1,   nil, 22189,    44,  4045,  3905,
   nil, 22320,  3485,    -5,    71,   nil,   166,   182,  3345,   nil,
   258,   181,   -73,   nil,   192,   188,   nil,  3625, 22451, 22582,
  3765,   701,   nil,   nil, 24858,   nil, 24866,   nil, 24918,   nil,
   nil,   322,   753, 22713,   919,   405,   nil,   372,   nil,   nil,
   nil,  3205,   nil,   nil,    36, 22844,   nil,   nil,  2365,  1945,
   nil,   nil, 25007,   nil, 25059,   nil, 25066,   nil, 25073,   nil,
   nil,   nil,   nil,   393,  1251,   434,   nil,    -1,   nil,   585,
   587,   nil,   235,   nil,   nil,   nil,   624,   nil,   nil,   nil,
   620,   nil,   809,   nil,   nil,   866,   264,   303,   142,   nil,
   567,   nil,   -99,   nil,   nil,   nil,   649, 24471,   nil,   nil,
   nil,  1665,     6,    26,   684,   672,    10,   nil,   624,   743,
   631,   636,   642,   645,   664,  1323,   712,   739,  5445,   nil,
   nil,   nil,   nil,   nil,  4605,   nil,  5305,   nil,  1530,   nil,
 24802,   nil, 15007,   nil,  8425,   nil,   nil,   nil,   586,   836,
   837,   922, 22975, 24654, 24227,     9,   nil,   nil, 24841,   nil,
   nil,   nil,   nil,  1261,   886,   596,  1053,  1059,   936,   944,
   945,   962,   nil,   nil,   970,    34,    35,    69,   120,   247,
   260,   nil,   nil,   nil, 24943,   nil,   nil,   nil,   nil,   -10,
   nil,   798,   nil ]

racc_action_default = [
    -3,  -598,    -1,  -584,    -4,  -598,    -7,  -598,  -598,  -598,
  -598,   -29,  -598,  -598,  -598,  -279,  -598,   -40,   -43,  -586,
  -598,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -328,  -329,   -68,   -11,   -72,   -80,   -82,  -598,  -488,  -489,
  -598,  -598,  -598,  -598,  -598,  -586,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -572,  -281,  -283,  -597,
  -562,  -301,  -389,  -598,  -598,  -306,  -309,  -584,  -598,  -598,
  -598,  -598,  -330,  -331,  -429,  -430,  -431,  -432,  -433,  -454,
  -436,  -437,  -456,  -458,  -441,  -446,  -450,  -452,  -468,  -456,
  -470,  -472,  -473,  -474,  -475,  -570,  -477,  -478,  -571,  -480,
  -481,  -482,  -483,  -484,  -485,  -486,  -487,  -492,  -493,  -598,
    -2,  -585,  -593,  -594,  -595,    -6,  -598,  -598,  -598,  -598,
  -598,    -3,   -17,  -598,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -598,  -598,  -246,
  -598,  -598,  -582,  -583,  -598,  -598,  -598,  -598,  -598,  -586,
  -587,   -47,  -598,  -488,  -489,  -598,  -279,  -598,  -598,  -229,
  -598,   -11,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -398,
  -400,  -598,  -580,  -581,   -57,  -246,  -598,  -300,  -404,  -413,
  -415,   -63,  -410,   -64,  -586,   -65,  -238,  -251,  -260,  -260,
  -255,  -598,  -261,  -598,  -454,  -564,  -598,  -598,   -66,   -67,
  -584,   -12,  -598,   -15,  -598,   -70,   -11,  -586,  -598,   -73,
   -76,   -11,   -88,   -89,  -598,  -598,   -96,  -293,  -296,  -586,
  -598,  -328,  -329,  -332,  -411,  -598,   -78,  -598,   -84,  -290,
  -471,  -598,  -214,  -215,  -230,  -598,   -11,  -598,  -586,  -239,
  -590,  -590,  -598,  -598,  -590,  -598,  -302,  -303,  -520,   -49,
  -598,  -598,  -598,  -598,  -584,  -598,  -585,  -488,  -489,  -598,
  -598,  -279,  -598,  -342,  -343,  -106,  -107,  -598,  -109,  -598,
  -279,  -496,  -598,  -488,  -489,  -321,  -111,  -112,  -153,  -154,
  -155,  -171,  -176,  -183,  -186,  -323,  -598,  -560,  -598,  -434,
  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  1023,    -5,
  -596,   -23,   -24,   -25,   -26,   -27,  -598,  -598,   -19,   -20,
   -21,  -121,  -598,   -30,   -39,  -266,  -598,  -598,  -265,   -31,
  -196,  -586,  -247,  -260,  -260,  -573,  -574,  -256,  -408,  -575,
  -576,  -574,  -573,  -256,  -407,  -409,  -575,  -576,   -37,  -204,
   -38,  -598,   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -586,
  -299,  -598,  -598,  -598,  -246,  -290,  -598,  -598,  -598,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -231,  -232,  -233,  -234,  -586,  -378,  -256,  -573,  -574,   -54,
   -58,  -586,  -257,  -378,  -378,  -586,  -295,  -252,  -598,  -253,
  -598,  -258,  -598,  -262,  -598,  -567,  -569,   -10,  -585,   -14,
    -3,  -586,   -69,  -288,   -85,   -74,  -598,  -586,  -246,  -598,
  -598,   -95,  -598,  -471,  -598,   -81,   -86,  -598,  -598,  -598,
  -598,  -235,  -598,  -421,  -598,  -284,  -598,  -240,  -592,  -591,
  -242,  -592,  -291,  -292,  -563,  -390,  -520,  -393,  -559,  -559,
  -503,  -505,  -505,  -505,  -519,  -521,  -522,  -523,  -524,  -525,
  -526,  -527,  -528,  -598,  -530,  -532,  -534,  -539,  -541,  -542,
  -544,  -549,  -551,  -552,  -554,  -555,  -556,  -598,   -11,  -333,
  -334,   -11,  -598,  -598,  -598,  -598,  -598,  -246,  -598,  -598,
  -290,  -314,  -106,  -107,  -108,  -598,  -598,  -246,  -317,  -494,
  -598,   -11,  -498,  -325,  -586,  -435,  -455,  -460,  -598,  -462,
  -438,  -457,  -598,  -459,  -440,  -598,  -443,  -598,  -445,  -448,
  -598,  -449,  -598,  -469,    -8,   -18,  -598,   -28,  -269,  -598,
  -598,  -412,  -598,  -248,  -250,  -598,  -598,   -59,  -245,  -405,
  -598,  -598,   -61,  -406,  -598,  -598,  -298,  -588,  -573,  -574,
  -573,  -574,  -586,  -194,  -598,  -379,  -586,  -381,   -11,   -53,
  -401,  -378,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -598,
  -565,  -566,  -598,   -13,  -598,   -71,  -598,   -77,   -83,  -586,
  -573,  -574,  -244,  -577,   -94,  -598,   -79,  -598,  -203,  -213,
  -586,  -597,  -597,  -282,  -586,  -287,  -590,  -598,  -586,  -598,
  -501,  -502,  -598,  -598,  -512,  -598,  -515,  -598,  -517,  -598,
  -344,  -598,  -346,  -348,  -355,  -586,  -533,  -543,  -553,  -557,
  -597,  -335,  -597,  -307,  -336,  -337,  -310,  -598,  -313,  -598,
  -586,  -573,  -574,  -577,  -289,  -598,  -106,  -107,  -110,  -586,
   -11,  -598,  -319,  -598,   -11,  -520,  -520,  -598,  -561,  -461,
  -464,  -465,  -466,  -467,   -11,  -439,  -442,  -444,  -447,  -451,
  -453,  -122,  -267,  -598,  -197,  -598,  -589,  -260,   -33,  -199,
   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,  -598,
  -598,  -598,  -598,  -412,  -598,  -559,  -559,  -360,  -362,  -362,
  -362,  -377,  -598,  -586,  -383,  -528,  -536,  -537,  -547,  -598,
  -403,  -402,   -11,  -598,  -598,  -254,  -264,  -568,   -16,   -75,
  -412,   -87,  -297,  -597,  -340,   -11,  -422,  -597,  -423,  -424,
  -598,  -241,  -391,  -394,  -396,  -598,  -559,  -540,  -558,  -504,
  -505,  -505,  -531,  -505,  -505,  -550,  -505,  -528,  -545,  -586,
  -598,  -353,  -598,  -529,  -598,  -338,  -598,  -598,   -11,   -11,
  -312,  -598,   -11,  -412,  -598,  -412,  -598,  -598,   -11,  -322,
  -598,  -586,  -598,  -326,  -598,  -268,   -32,  -198,  -249,  -598,
  -236,  -598,  -358,  -359,  -368,  -370,  -598,  -373,  -598,  -375,
  -380,  -598,  -598,  -598,  -535,  -598,  -399,  -598,  -414,  -416,
    -9,   -11,  -428,  -341,  -598,  -598,  -426,  -285,   -11,   -11,
  -392,  -500,  -598,  -508,  -598,  -510,  -598,  -513,  -598,  -516,
  -518,  -345,  -347,  -351,  -598,  -356,  -304,  -598,  -305,  -598,
  -598,  -263,  -597,  -315,  -318,  -495,  -598,  -324,  -497,  -499,
  -498,  -463,  -559,  -538,  -361,  -362,  -362,  -362,  -362,  -548,
  -362,  -382,  -586,  -385,  -387,  -388,  -546,  -598,  -290,   -55,
  -427,   -11,  -488,  -489,  -598,  -598,  -279,  -425,  -598,  -598,
  -505,  -505,  -505,  -505,  -349,  -598,  -354,  -598,   -11,  -308,
  -311,  -417,  -418,  -419,   -11,  -320,   -11,  -357,  -598,  -365,
  -598,  -367,  -598,  -371,  -598,  -374,  -376,  -384,  -598,  -289,
  -577,  -421,  -246,  -598,  -598,  -290,  -395,  -397,  -598,  -506,
  -509,  -511,  -514,  -598,  -352,  -597,  -598,  -598,  -362,  -362,
  -362,  -362,  -386,  -420,  -586,  -573,  -574,  -577,  -289,  -505,
  -350,  -339,  -316,  -327,  -598,  -363,  -366,  -369,  -372,  -412,
  -507,  -362,  -364 ]

clist = [
'218,329,411,524,26,313,313,210,299,26,375,127,127,277,277,277,114,262',
'260,2,132,132,336,621,26,489,325,6,417,423,408,681,6,26,26,26,261,26',
'430,313,313,313,433,340,341,130,130,344,568,571,268,272,657,575,657',
'734,713,716,481,316,122,205,660,782,110,320,115,26,26,221,480,26,111',
'834,127,822,537,297,584,476,114,264,271,273,380,544,295,515,339,339',
'779,705,339,933,905,803,391,392,393,394,527,530,825,660,534,815,690',
'691,880,902,935,591,381,605,607,26,278,278,278,387,26,26,26,26,26,26',
'837,929,345,592,780,361,365,737,279,279,279,920,6,730,396,339,339,339',
'339,648,330,395,6,275,288,289,964,653,654,725,839,781,343,838,489,342',
'328,783,331,334,956,552,684,327,326,376,389,932,588,352,535,821,812',
'823,338,687,337,333,888,700,889,657,657,601,603,606,606,277,475,601',
'660,483,484,1002,871,961,807,884,379,377,650,382,383,1,26,26,26,26,427',
'442,935,994,26,26,26,26,26,26,332,384,385,386,739,929,744,731,616,651',
'418,26,902,642,820,829,397,436,437,438,439,404,822,354,817,277,277,923',
'204,298,773,1010,403,409,277,663,417,423,848,428,432,,,,733,26,26,313',
',,688,,667,,26,,822,800,717,544,676,,,,313,494,512,516,,,407,,26,509',
',825,26,669,407,114,,26,728,,925,526,,,,,519,,,,,499,,792,572,573,505',
',962,672,913,,26,26,843,700,268,,831,672,272,513,501,845,578,862,863',
'507,26,26,926,295,927,497,525,278,295,,822,114,1011,498,,278,,,,552',
'26,339,339,262,720,279,,,,,950,,,279,729,,26,966,891,,482,590,593,,14',
',622,,485,14,672,,,,127,,795,594,672,574,,846,,132,222,850,,747,,747',
',,,222,222,222,657,14,304,304,402,842,277,,660,,,762,130,13,799,,767',
',13,628,440,,,,427,633,26,615,,298,998,222,222,644,811,222,349,359,359',
'433,700,,700,,418,,13,,,,627,851,852,785,,313,632,,516,,544,544,,313',
',,516,1003,967,,277,,,,,486,,,628,14,26,795,26,808,222,222,222,222,14',
'14,26,427,,,298,,,664,502,298,552,427,552,916,26,6,,,,649,,418,,954',
'700,,,,,,,418,,,13,680,,,,,,,,13,13,,,,,277,,,552,552,,,,,,277,26,,',
'26,,,,,,26,427,,,714,714,700,427,700,,26,941,656,,26,14,222,222,222',
'335,,418,732,222,222,222,222,222,222,418,791,,,,958,1019,,,127,963,14',
',622,809,700,,784,132,26,26,,,686,26,26,,313,26,,516,13,,997,,790,,',
'313,,622,801,26,130,,222,222,26,26,,,,636,719,222,810,13,,751,784,,',
',,758,760,853,,,763,765,,14,432,,,14,,,,304,14,,785,,785,628,,,633,',
'622,,,652,844,,304,655,,622,847,,,,,14,222,,,,552,,,665,,,13,757,26',
'668,13,222,222,26,26,13,,26,,127,,,,,882,,405,26,886,339,,222,,,435',
'339,313,,26,,13,,,784,,,,222,407,,,,,,1004,,,,,,694,696,698,,,,,710',
',,712,,,,,26,785,,,,672,,16,856,,,,16,26,,,,,,,907,738,,,,491,,493,',
',495,496,,,,,,,222,,16,,,,26,,26,26,313,,26,,,,,,26,,,,313,714,,,915',
'339,,,,919,,,789,,,353,,793,794,,,,,,,,,,,26,,,14,,14,,26,26,,,304,',
'222,,,,,802,304,,,,,,,,222,977,16,,,,,,15,,,16,16,15,777,,833,,,,,13',
'786,13,,983,,,427,,,,,26,618,,,,,,,15,306,306,,,14,,,14,26,,854,,277',
'222,26,818,26,,818,,,,,222,,,,14,,,,622,26,427,351,360,360,,,,,,,,,',
',,,13,,,13,418,,16,,,877,,,222,222,,431,,222,222,,,222,883,13,,658,',
'335,15,661,,16,,,,14,,15,15,,14,14,,,,,,,,901,,,,304,,909,910,893,895',
'912,897,899,,900,304,658,,,335,,,918,,,,,,,,,13,,,,,13,13,,,,776,,16',
'706,,,16,,940,,,16,,,,948,949,,,,,,222,435,,,,14,222,,,14,,15,,,16,',
',,,14,,816,,,,,818,,,777,222,777,,777,786,,15,786,,786,,786,,,752,778',
'981,,658,335,13,,,,13,,,,,,,874,,995,13,,,14,,996,,,,,,989,990,991,992',
',14,,,,796,,,797,,,,,,,824,,826,15,,,,15,,,,306,15,806,,,,222,13,14',
'14,,,14,,,,,306,14,828,13,,,,,,15,,777,1020,777,,777,,777,,786,,786',
',786,,786,936,,,,,,,,14,,13,13,944,,13,14,14,,,,13,,,,,,,,,39,855,777',
',,39,,,,16,786,16,,,,,922,,,776,,776,,776,13,,865,867,869,,,13,13,39',
'303,303,,,,14,,,,,,,,,,,,,,,,,14,,,,,,14,,14,,,,348,364,364,364,,,,',
',,,16,222,,16,,13,,,,928,911,930,,,,,,,,,,,13,16,,,,335,13,,13,,39,',
',951,,952,38,953,,39,39,38,776,,776,15,776,15,776,,,,,306,,,,,,,,306',
',,431,,,,,38,302,302,,,,,,,16,,,,,16,16,,,,776,,,,969,971,973,975,,976',
',,,,,,347,363,363,363,,999,,1000,,1001,,15,,,15,,,,,,,39,,,,1009,,,',
',,,,,15,,,,,,,743,,38,,,39,,,,,1021,38,38,,,16,,,,16,1015,1016,1017',
'1018,,,,,,16,,,,,,,,,,,,,,1022,,,,,,,15,,,,,15,15,,,,,,,,,,39,,306,',
'39,,,,303,39,,16,,306,,,,,,,,,,,16,303,,,,,,38,,,39,,,,,,,,,,,,,,,,',
',,,,,38,16,16,,,16,,,,,15,16,,,15,,,,,,,,,,15,,,,,,,,,,,,,,,,,,,,16',
',,,947,,,16,16,,,,,,,,,38,,,,38,360,,,302,38,,15,,,,,,,,,,,,,15,302',
',,,,,,,,38,,,,,,,,,16,,,,,,,,,,,,,,15,15,,16,15,,,,,16,15,16,,,,,,,',
',,,,,,,,,,,,,39,,39,360,,,,,303,,,15,,,,946,303,,15,15,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,15,,39,,,,,,,,,,,,,,,15,,,,',
'39,15,,15,,,,,,,,,,,,,,,,,,,,,38,,38,,,,,,302,,,,,,,,302,,,,,,,,,,,',
',,,,,39,,,,,39,39,,,,,,,,,,,,303,,,,,,,,,,,303,,,,,,,,38,,,38,,,,,,',
',,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,39,,,,39,,,,,,,,,,39,,,,,,,,,,',
',,,,,,,,,,38,,,,,38,38,,,,,,,,,,,,302,,,364,,,,,,39,,302,,,,,,,,,,,39',
'229,,,,,,,,,276,276,276,,,,,,,,,,,322,323,324,,,,,,,,39,39,,,39,,,276',
'276,38,39,,,38,,,,,,,,,,38,,,,,,,,,,,,364,,,,,,,,39,,,,943,,,39,39,',
',,,,,,,,,,,,363,,,,,,38,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,39,,,,,,,,',
',,,,,38,38,,39,38,,,,,39,38,39,,,,,,,,,,,,,,,,,,,,,,,,363,,,276,410',
'276,,,38,,429,434,942,,,38,38,,,,,,,,,,229,,,449,450,451,452,453,454',
'455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,,,,,,,276,276,,,,,,38,,276,,,,,,,276,,276,,,276,276,,38',
',,,,,38,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,521,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,429,643,410,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,276,,276,,276,,,,,,,,,,,,,,,,276,,,,,,,,,678,679,,,',
',,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,276',
',,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,754,,,276,276,759,761',
',,,764,766,,,643,768,,,,,,,,,,,,,,,,,,,,,,,,276,,,276,,,,,,,,,,,,,,',
',,,,,276,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,276,,857,,,,,,,,,,,,,,759,761,766,764,,860,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,',
',,,,,,,276,857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',276' ]
        racc_goto_table = arr = ::Array.new(3061, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'32,68,23,8,42,65,65,25,50,42,57,58,58,34,34,34,96,25,139,2,62,62,87',
'24,42,74,32,7,38,38,28,10,7,42,42,42,37,42,28,65,65,65,18,17,17,61,61',
'17,90,90,72,72,75,93,75,97,92,92,23,51,15,15,179,130,4,64,5,42,42,20',
'40,42,6,91,58,170,138,47,55,38,96,39,39,39,152,164,46,52,30,30,127,117',
'30,132,118,11,17,17,17,17,70,70,175,179,70,130,122,122,12,115,133,111',
'153,156,156,42,69,69,69,153,42,42,42,42,42,42,11,176,4,112,128,56,56',
'113,71,71,71,114,7,109,2,30,30,30,30,41,69,7,7,45,45,45,108,41,41,107',
'106,119,105,104,74,103,102,125,71,71,118,169,101,100,99,98,5,131,95',
'94,134,128,135,128,136,137,89,86,140,116,141,75,75,157,157,157,157,34',
'142,157,179,144,145,132,130,146,147,148,151,85,73,154,155,1,42,42,42',
'42,58,25,133,118,42,42,42,42,42,42,67,158,159,160,161,176,162,163,63',
'43,72,42,115,23,168,117,31,30,30,30,30,29,170,19,172,34,34,173,16,9',
'24,118,20,20,34,14,38,38,110,20,20,,,,8,42,42,65,,,138,,52,,42,,170',
'24,93,164,52,,,,65,152,32,50,,,69,,42,25,,175,42,23,69,96,,42,55,,127',
'32,,,,,25,,,,,7,,41,17,17,51,,11,38,92,,42,42,24,116,72,,116,38,72,64',
'47,24,25,122,122,47,42,42,128,46,128,4,30,69,46,,170,96,91,6,,69,,,',
'169,42,30,30,25,23,71,,,,,128,,,71,23,,42,97,122,,45,30,37,,22,,32,',
'45,22,38,,,,58,,74,30,38,4,,8,,62,22,8,,157,,157,,,,22,22,22,75,22,22',
'22,9,90,34,,179,,,40,61,21,52,,40,,21,72,48,,,,58,72,42,15,,9,128,22',
'22,32,70,22,22,22,22,18,116,,116,,72,,21,,,,39,138,138,169,,65,39,,50',
',164,164,,65,,,50,10,122,,34,,,,,48,,,72,22,42,74,42,28,22,22,22,22',
'22,22,42,58,,,9,,,2,48,9,169,58,169,8,42,7,,,,39,,72,,116,116,,,,,,',
'72,,,21,30,,,,,,,,21,21,,,,,34,,,169,169,,,,,,34,42,,,42,,,,,,42,58',
',,96,96,116,58,116,,42,90,71,,42,22,22,22,22,66,,72,96,22,22,22,22,22',
'22,72,87,,,,90,24,,,58,93,22,,32,68,116,,32,62,42,42,,,71,42,42,,65',
'42,,50,21,,8,,139,,,65,,32,50,42,61,,22,22,42,42,,,,48,69,22,32,21,',
'15,32,,,,,20,20,57,,,20,20,,22,20,,,22,,,,22,22,,169,,169,72,,,72,,32',
',,48,17,,22,48,,32,17,,,,,22,22,,,,169,,,48,,,21,71,42,48,21,22,22,42',
'42,21,,42,,58,,,,,68,,66,42,68,30,,22,,,66,30,65,,42,,21,,,32,,,,22',
'69,,,,,,23,,,,,,167,167,167,,,,,9,,,9,,,,,42,169,,,,38,,27,20,,,,27',
'42,,,,,,,17,48,,,,66,,66,,,66,66,,,,,,,22,,27,,,,42,,42,42,65,,42,,',
',,,42,,,,65,96,,,96,30,,,,96,,,9,,,27,,9,9,,,,,,,,,,,42,,,22,,22,,42',
'42,,,22,,22,,,,,48,22,,,,,,,,22,32,27,,,,,,26,,,27,27,26,123,,48,,,',
',21,171,21,,25,,,58,,,,,42,66,,,,,,,26,26,26,,,22,,,22,42,,9,,34,22',
'42,123,42,,123,,,,,22,,,,22,,,,32,42,58,26,26,26,,,,,,,,,,,,,21,,,21',
'72,,27,,,9,,,22,22,,27,,22,22,,,22,9,21,,66,,66,26,66,,27,,,,22,,26',
'26,,22,22,,,,,,,,48,,,,22,,9,9,167,167,9,167,167,,167,22,66,,,66,,,48',
',,,,,,,,21,,,,,21,21,,,,121,,27,66,,,27,,9,,,27,,,,9,9,,,,,,22,66,,',
',22,22,,,22,,26,,,27,,,,,22,,121,,,,,123,,,123,22,123,,123,171,,26,171',
',171,,171,,,66,126,9,,66,66,21,,,,21,,,,,,,22,,9,21,,,22,,9,,,,,,167',
'167,167,167,,22,,,,66,,,66,,,,,,,126,,126,26,,,,26,,,,26,26,66,,,,22',
'21,22,22,,,22,,,,,26,22,66,21,,,,,,26,,123,167,123,,123,,123,,171,,171',
',171,,171,22,,,,,,,,22,,21,21,22,,21,22,22,,,,21,,,,,,,,,54,66,123,',
',54,,,,27,171,27,,,,,121,,,121,,121,,121,21,,124,124,124,,,21,21,54',
'54,54,,,,22,,,,,,,,,,,,,,,,,22,,,,,,22,,22,,,,54,54,54,54,,,,,,,,27',
'22,,27,,21,,,,126,66,126,,,,,,,,,,,21,27,,,,66,21,,21,,54,,,126,,126',
'53,126,,54,54,53,121,,121,26,121,26,121,,,,,26,,,,,,,,26,,,27,,,,,53',
'53,53,,,,,,,27,,,,,27,27,,,,121,,,,124,124,124,124,,124,,,,,,,53,53',
'53,53,,126,,126,,126,,26,,,26,,,,,,,54,,,,126,,,,,,,,,26,,,,,,,26,,53',
',,54,,,,,126,53,53,,,27,,,,27,124,124,124,124,,,,,,27,,,,,,,,,,,,,,124',
',,,,,,26,,,,,26,26,,,,,,,,,,54,,26,,54,,,,54,54,,27,,26,,,,,,,,,,,27',
'54,,,,,,53,,,54,,,,,,,,,,,,,,,,,,,,,,53,27,27,,,27,,,,,26,27,,,26,,',
',,,,,,,26,,,,,,,,,,,,,,,,,,,,27,,,,27,,,27,27,,,,,,,,,53,,,,53,26,,',
'53,53,,26,,,,,,,,,,,,,26,53,,,,,,,,,53,,,,,,,,,27,,,,,,,,,,,,,,26,26',
',27,26,,,,,27,26,27,,,,,,,,,,,,,,,,,,,,,54,,54,26,,,,,54,,,26,,,,26',
'54,,26,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,26,,54',
',,,,,,,,,,,,,,26,,,,,54,26,,26,,,,,,,,,,,,,,,,,,,,,53,,53,,,,,,53,,',
',,,,,53,,,,,,,,,,,,,,,,,54,,,,,54,54,,,,,,,,,,,,54,,,,,,,,,,,54,,,,',
',,,53,,,53,,,,,,,,,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,54,,,,54,,,,,',
',,,,54,,,,,,,,,,,,,,,,,,,,,53,,,,,53,53,,,,,,,,,,,,53,,,54,,,,,,54,',
'53,,,,,,,,,,,54,33,,,,,,,,,33,33,33,,,,,,,,,,,33,33,33,,,,,,,,54,54',
',,54,,,33,33,53,54,,,53,,,,,,,,,,53,,,,,,,,,,,,54,,,,,,,,54,,,,54,,',
'54,54,,,,,,,,,,,,,,53,,,,,,53,,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,54,,',
',,,,,,,,,,,53,53,,54,53,,,,,54,53,54,,,,,,,,,,,,,,,,,,,,,,,,53,,,33',
'33,33,,,53,,33,33,53,,,53,53,,,,,,,,,,33,,,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,,,,,,,33,33,,,,,',
'53,,33,,,,,,,33,,33,,,33,33,,53,,,,,,53,,53,,,,,,,,,,,,,,,,,,,,,,,,',
',,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,33',
'33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,,33,,,,,,,,,,,,,,,',
'33,,,,,,,,,33,33,,,,,,,,,,33,,,33,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,',
',,,,,,,,,,,,33,33,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,33,',
',33,33,33,33,,,,33,33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,33,,,33,,,,,,,',
',,,,,,,,,,,,33,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,33,,33,,,,,,,,,,,,,,33,33,33,33,,33,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,',
',,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33' ]
        racc_goto_check = arr = ::Array.new(3061, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   209,    19,   nil,    61,    61,    69,    27,  -323,   220,
  -492,  -586,  -695,   nil,  -239,    52,   243,   -20,  -173,   179,
    49,   435,   390,  -207,  -388,    -7,   920,   803,  -177,    38,
    25,   118,   -19,  2078,   -16,   nil,   nil,    12,  -182,    55,
  -194,  -330,     4,  -246,   nil,   120,    53,    44,   223,   nil,
   -26,    24,  -230,  1409,  1292,  -279,    62,   -61,     3,   nil,
   nil,    37,    12,  -169,    24,   -29,   540,   165,   -58,    87,
  -230,   105,    24,  -270,  -254,  -436,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   134,   123,   -39,   nil,   120,
  -292,  -637,  -516,  -292,   107,  -187,    13,  -537,   100,   113,
   111,  -357,   104,    96,  -554,    92,  -560,  -426,  -761,  -449,
  -470,  -254,  -246,  -460,  -716,  -721,  -368,  -462,  -738,  -489,
   nil,   447,  -432,   280,   540,  -483,   514,  -556,  -516,   nil,
  -583,  -699,  -779,  -762,  -162,  -509,   118,  -354,  -262,    -4,
  -629,  -628,   -65,   nil,   -72,   -72,  -711,  -480,  -604,   nil,
   nil,   127,     5,    30,   124,   124,  -270,  -192,   140,   140,
   140,  -370,  -369,  -358,  -253,   nil,   nil,   240,  -455,  -171,
  -618,   288,  -441,  -610,   nil,  -593,  -739,   nil,   nil,  -428 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   523,
   nil,   835,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   228,   321,   nil,   nil,   586,   226,   227,   nil,   nil,
    17,   nil,   441,    21,    22,    23,    24,   nil,   675,   nil,
   nil,   nil,   310,   nil,    25,   412,    32,   nil,   nil,    34,
    37,    36,   nil,   223,   224,   358,   nil,   129,   420,   128,
   131,    75,    76,   nil,    90,    46,   282,   nil,   804,   413,
   nil,   414,   425,   629,   487,   280,   266,    47,    48,    49,
    50,    51,    52,    53,    54,    55,   nil,   267,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   569,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   702,   551,   nil,   703,   924,
   775,   539,   nil,   540,   nil,   nil,   541,   nil,   543,   645,
   nil,   nil,   nil,   549,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   424,   nil,   nil,   nil,   nil,   nil,    74,
    77,    78,   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,
   nil,   nil,   nil,   nil,   819,   736,   538,   nil,   542,   827,
   554,   556,   557,   787,   560,   561,   788,   564,   567,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 176, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  6, 152, :_reduce_32,
  5, 152, :_reduce_33,
  5, 152, :_reduce_34,
  5, 152, :_reduce_35,
  5, 152, :_reduce_36,
  3, 152, :_reduce_37,
  3, 152, :_reduce_38,
  3, 152, :_reduce_39,
  1, 152, :_reduce_none,
  3, 163, :_reduce_41,
  3, 163, :_reduce_42,
  1, 175, :_reduce_none,
  3, 175, :_reduce_44,
  3, 175, :_reduce_45,
  3, 175, :_reduce_46,
  2, 175, :_reduce_47,
  1, 175, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 180, :_reduce_none,
  4, 180, :_reduce_53,
  0, 188, :_reduce_54,
  5, 185, :_reduce_55,
  1, 187, :_reduce_none,
  2, 179, :_reduce_57,
  3, 179, :_reduce_58,
  4, 179, :_reduce_59,
  5, 179, :_reduce_60,
  4, 179, :_reduce_61,
  5, 179, :_reduce_62,
  2, 179, :_reduce_63,
  2, 179, :_reduce_64,
  2, 179, :_reduce_65,
  2, 179, :_reduce_66,
  2, 179, :_reduce_67,
  1, 164, :_reduce_68,
  3, 164, :_reduce_69,
  1, 192, :_reduce_70,
  3, 192, :_reduce_71,
  1, 191, :_reduce_none,
  2, 191, :_reduce_73,
  3, 191, :_reduce_74,
  5, 191, :_reduce_75,
  2, 191, :_reduce_76,
  4, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  1, 191, :_reduce_80,
  3, 191, :_reduce_81,
  1, 195, :_reduce_none,
  3, 195, :_reduce_83,
  2, 194, :_reduce_84,
  3, 194, :_reduce_85,
  1, 197, :_reduce_86,
  3, 197, :_reduce_87,
  1, 196, :_reduce_88,
  1, 196, :_reduce_89,
  4, 196, :_reduce_90,
  3, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  2, 196, :_reduce_95,
  1, 196, :_reduce_96,
  1, 172, :_reduce_97,
  1, 172, :_reduce_98,
  4, 172, :_reduce_99,
  3, 172, :_reduce_100,
  3, 172, :_reduce_101,
  3, 172, :_reduce_102,
  3, 172, :_reduce_103,
  2, 172, :_reduce_104,
  1, 172, :_reduce_105,
  1, 200, :_reduce_106,
  1, 200, :_reduce_none,
  2, 201, :_reduce_108,
  1, 201, :_reduce_109,
  3, 201, :_reduce_110,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_116,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_120,
  0, 208, :_reduce_121,
  4, 161, :_reduce_122,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 178, :_reduce_194,
  5, 178, :_reduce_195,
  3, 178, :_reduce_196,
  5, 178, :_reduce_197,
  6, 178, :_reduce_198,
  5, 178, :_reduce_199,
  5, 178, :_reduce_200,
  5, 178, :_reduce_201,
  5, 178, :_reduce_202,
  4, 178, :_reduce_203,
  3, 178, :_reduce_204,
  3, 178, :_reduce_205,
  3, 178, :_reduce_206,
  3, 178, :_reduce_207,
  3, 178, :_reduce_208,
  3, 178, :_reduce_209,
  3, 178, :_reduce_210,
  3, 178, :_reduce_211,
  3, 178, :_reduce_212,
  4, 178, :_reduce_213,
  2, 178, :_reduce_214,
  2, 178, :_reduce_215,
  3, 178, :_reduce_216,
  3, 178, :_reduce_217,
  3, 178, :_reduce_218,
  3, 178, :_reduce_219,
  3, 178, :_reduce_220,
  3, 178, :_reduce_221,
  3, 178, :_reduce_222,
  3, 178, :_reduce_223,
  3, 178, :_reduce_224,
  3, 178, :_reduce_225,
  3, 178, :_reduce_226,
  3, 178, :_reduce_227,
  3, 178, :_reduce_228,
  2, 178, :_reduce_229,
  2, 178, :_reduce_230,
  3, 178, :_reduce_231,
  3, 178, :_reduce_232,
  3, 178, :_reduce_233,
  3, 178, :_reduce_234,
  3, 178, :_reduce_235,
  6, 178, :_reduce_236,
  1, 178, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_none,
  2, 212, :_reduce_none,
  4, 212, :_reduce_241,
  2, 212, :_reduce_242,
  3, 217, :_reduce_243,
  0, 218, :_reduce_244,
  1, 218, :_reduce_none,
  0, 168, :_reduce_246,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  4, 168, :_reduce_249,
  2, 168, :_reduce_250,
  1, 190, :_reduce_251,
  2, 190, :_reduce_252,
  2, 190, :_reduce_253,
  4, 190, :_reduce_254,
  1, 190, :_reduce_255,
  0, 221, :_reduce_256,
  2, 184, :_reduce_257,
  2, 220, :_reduce_258,
  2, 219, :_reduce_259,
  0, 219, :_reduce_260,
  1, 214, :_reduce_261,
  2, 214, :_reduce_262,
  3, 214, :_reduce_263,
  4, 214, :_reduce_264,
  1, 174, :_reduce_265,
  1, 174, :_reduce_none,
  3, 173, :_reduce_267,
  4, 173, :_reduce_268,
  2, 173, :_reduce_269,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_280,
  0, 244, :_reduce_281,
  4, 210, :_reduce_282,
  0, 245, :_reduce_283,
  0, 246, :_reduce_284,
  6, 210, :_reduce_285,
  0, 247, :_reduce_286,
  4, 210, :_reduce_287,
  3, 210, :_reduce_288,
  3, 210, :_reduce_289,
  2, 210, :_reduce_290,
  3, 210, :_reduce_291,
  3, 210, :_reduce_292,
  1, 210, :_reduce_293,
  4, 210, :_reduce_294,
  3, 210, :_reduce_295,
  1, 210, :_reduce_296,
  5, 210, :_reduce_297,
  4, 210, :_reduce_298,
  3, 210, :_reduce_299,
  2, 210, :_reduce_300,
  1, 210, :_reduce_none,
  2, 210, :_reduce_302,
  2, 210, :_reduce_303,
  6, 210, :_reduce_304,
  6, 210, :_reduce_305,
  0, 248, :_reduce_306,
  0, 249, :_reduce_307,
  7, 210, :_reduce_308,
  0, 250, :_reduce_309,
  0, 251, :_reduce_310,
  7, 210, :_reduce_311,
  5, 210, :_reduce_312,
  4, 210, :_reduce_313,
  0, 252, :_reduce_314,
  0, 253, :_reduce_315,
  9, 210, :_reduce_316,
  0, 254, :_reduce_317,
  6, 210, :_reduce_318,
  0, 255, :_reduce_319,
  7, 210, :_reduce_320,
  0, 256, :_reduce_321,
  5, 210, :_reduce_322,
  0, 257, :_reduce_323,
  6, 210, :_reduce_324,
  0, 258, :_reduce_325,
  0, 259, :_reduce_326,
  9, 210, :_reduce_327,
  1, 210, :_reduce_328,
  1, 210, :_reduce_329,
  1, 210, :_reduce_330,
  1, 210, :_reduce_331,
  1, 167, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_335,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_339,
  1, 156, :_reduce_none,
  2, 156, :_reduce_341,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 260, :_reduce_344,
  3, 260, :_reduce_345,
  1, 263, :_reduce_346,
  3, 263, :_reduce_347,
  1, 262, :_reduce_none,
  4, 262, :_reduce_349,
  6, 262, :_reduce_350,
  3, 262, :_reduce_351,
  5, 262, :_reduce_352,
  2, 262, :_reduce_353,
  4, 262, :_reduce_354,
  1, 262, :_reduce_355,
  3, 262, :_reduce_356,
  4, 264, :_reduce_357,
  2, 264, :_reduce_358,
  2, 264, :_reduce_359,
  1, 264, :_reduce_360,
  2, 269, :_reduce_361,
  0, 269, :_reduce_362,
  6, 270, :_reduce_363,
  8, 270, :_reduce_364,
  4, 270, :_reduce_365,
  6, 270, :_reduce_366,
  4, 270, :_reduce_367,
  2, 270, :_reduce_none,
  6, 270, :_reduce_369,
  2, 270, :_reduce_370,
  4, 270, :_reduce_371,
  6, 270, :_reduce_372,
  2, 270, :_reduce_373,
  4, 270, :_reduce_374,
  2, 270, :_reduce_375,
  4, 270, :_reduce_376,
  1, 270, :_reduce_none,
  0, 186, :_reduce_378,
  1, 186, :_reduce_379,
  3, 274, :_reduce_380,
  1, 274, :_reduce_381,
  4, 274, :_reduce_382,
  1, 275, :_reduce_383,
  4, 275, :_reduce_384,
  1, 276, :_reduce_385,
  3, 276, :_reduce_386,
  1, 277, :_reduce_387,
  1, 277, :_reduce_none,
  0, 281, :_reduce_389,
  0, 282, :_reduce_390,
  4, 234, :_reduce_391,
  4, 279, :_reduce_392,
  1, 279, :_reduce_393,
  0, 285, :_reduce_394,
  4, 280, :_reduce_395,
  0, 286, :_reduce_396,
  4, 280, :_reduce_397,
  0, 287, :_reduce_398,
  5, 284, :_reduce_399,
  2, 181, :_reduce_400,
  4, 181, :_reduce_401,
  5, 181, :_reduce_402,
  5, 181, :_reduce_403,
  2, 233, :_reduce_404,
  4, 233, :_reduce_405,
  4, 233, :_reduce_406,
  3, 233, :_reduce_407,
  3, 233, :_reduce_408,
  3, 233, :_reduce_409,
  2, 233, :_reduce_410,
  1, 233, :_reduce_411,
  4, 233, :_reduce_412,
  0, 289, :_reduce_413,
  5, 232, :_reduce_414,
  0, 290, :_reduce_415,
  5, 232, :_reduce_416,
  5, 238, :_reduce_417,
  1, 291, :_reduce_418,
  1, 291, :_reduce_none,
  6, 155, :_reduce_420,
  0, 155, :_reduce_421,
  1, 292, :_reduce_422,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 293, :_reduce_425,
  1, 293, :_reduce_none,
  2, 157, :_reduce_427,
  1, 157, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_432,
  1, 295, :_reduce_433,
  2, 295, :_reduce_434,
  3, 296, :_reduce_435,
  1, 296, :_reduce_436,
  1, 296, :_reduce_437,
  3, 224, :_reduce_438,
  4, 225, :_reduce_439,
  3, 226, :_reduce_440,
  0, 300, :_reduce_441,
  3, 300, :_reduce_442,
  1, 301, :_reduce_443,
  2, 301, :_reduce_444,
  3, 228, :_reduce_445,
  0, 303, :_reduce_446,
  3, 303, :_reduce_447,
  3, 227, :_reduce_448,
  3, 229, :_reduce_449,
  0, 304, :_reduce_450,
  3, 304, :_reduce_451,
  0, 305, :_reduce_452,
  3, 305, :_reduce_453,
  0, 297, :_reduce_454,
  2, 297, :_reduce_455,
  0, 298, :_reduce_456,
  2, 298, :_reduce_457,
  0, 299, :_reduce_458,
  2, 299, :_reduce_459,
  1, 302, :_reduce_460,
  2, 302, :_reduce_461,
  0, 307, :_reduce_462,
  4, 302, :_reduce_463,
  1, 306, :_reduce_464,
  1, 306, :_reduce_465,
  1, 306, :_reduce_466,
  1, 306, :_reduce_none,
  1, 206, :_reduce_468,
  3, 207, :_reduce_469,
  1, 294, :_reduce_470,
  2, 294, :_reduce_471,
  1, 209, :_reduce_472,
  1, 209, :_reduce_473,
  1, 209, :_reduce_474,
  1, 209, :_reduce_475,
  1, 198, :_reduce_476,
  1, 198, :_reduce_477,
  1, 198, :_reduce_478,
  1, 198, :_reduce_479,
  1, 198, :_reduce_480,
  1, 199, :_reduce_481,
  1, 199, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 199, :_reduce_486,
  1, 199, :_reduce_487,
  1, 230, :_reduce_488,
  1, 230, :_reduce_489,
  1, 166, :_reduce_490,
  1, 166, :_reduce_491,
  1, 171, :_reduce_492,
  1, 171, :_reduce_493,
  0, 308, :_reduce_494,
  4, 240, :_reduce_495,
  0, 240, :_reduce_496,
  3, 242, :_reduce_497,
  0, 310, :_reduce_498,
  3, 242, :_reduce_499,
  4, 309, :_reduce_500,
  2, 309, :_reduce_501,
  2, 309, :_reduce_502,
  1, 309, :_reduce_503,
  2, 312, :_reduce_504,
  0, 312, :_reduce_505,
  6, 283, :_reduce_506,
  8, 283, :_reduce_507,
  4, 283, :_reduce_508,
  6, 283, :_reduce_509,
  4, 283, :_reduce_510,
  6, 283, :_reduce_511,
  2, 283, :_reduce_512,
  4, 283, :_reduce_513,
  6, 283, :_reduce_514,
  2, 283, :_reduce_515,
  4, 283, :_reduce_516,
  2, 283, :_reduce_517,
  4, 283, :_reduce_518,
  1, 283, :_reduce_519,
  0, 283, :_reduce_520,
  1, 278, :_reduce_521,
  1, 278, :_reduce_522,
  1, 278, :_reduce_523,
  1, 278, :_reduce_524,
  1, 261, :_reduce_none,
  1, 261, :_reduce_526,
  1, 314, :_reduce_527,
  1, 315, :_reduce_528,
  3, 315, :_reduce_529,
  1, 271, :_reduce_530,
  3, 271, :_reduce_531,
  1, 316, :_reduce_532,
  2, 317, :_reduce_533,
  1, 317, :_reduce_534,
  2, 318, :_reduce_535,
  1, 318, :_reduce_536,
  1, 265, :_reduce_537,
  3, 265, :_reduce_538,
  1, 311, :_reduce_539,
  3, 311, :_reduce_540,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  2, 266, :_reduce_543,
  1, 266, :_reduce_544,
  3, 320, :_reduce_545,
  3, 321, :_reduce_546,
  1, 272, :_reduce_547,
  3, 272, :_reduce_548,
  1, 313, :_reduce_549,
  3, 313, :_reduce_550,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  2, 273, :_reduce_553,
  1, 273, :_reduce_554,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  2, 268, :_reduce_557,
  2, 267, :_reduce_558,
  0, 267, :_reduce_559,
  1, 243, :_reduce_none,
  3, 243, :_reduce_561,
  0, 231, :_reduce_562,
  2, 231, :_reduce_none,
  1, 216, :_reduce_564,
  3, 216, :_reduce_565,
  3, 324, :_reduce_566,
  2, 324, :_reduce_567,
  4, 324, :_reduce_568,
  2, 324, :_reduce_569,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 170, :_reduce_582,
  1, 170, :_reduce_583,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 177, :_reduce_none,
  1, 177, :_reduce_none,
  2, 193, :_reduce_588,
  2, 169, :_reduce_589,
  0, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 241, :_reduce_593,
  1, 241, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 213, :_reduce_597 ]

racc_reduce_n = 598

racc_shift_n = 1023

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@28",
  "@29",
  "args_tail",
  "@30",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_312(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_317(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_318(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_319(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = []
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_379(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = []
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_387(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_390(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_391(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_394(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_396(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_398(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_413(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_415(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 419 omitted

def _reduce_420(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = []
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_435(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_436(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_438(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_439(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = []
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = []
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_463(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_471(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_495(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_499(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = []
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_520(val, _values, result)
                      result = []
                    
    result
end

def _reduce_521(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_522(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_523(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_532(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 541 omitted

# reduce 542 omitted

def _reduce_543(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 551 omitted

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = []
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_583(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby23
  end   # module Parser
