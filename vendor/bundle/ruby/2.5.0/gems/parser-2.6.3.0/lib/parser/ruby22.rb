# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby22 < Parser::Base


  def version
    22
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-578,568,568,-101,860,-104,625,-578,-578,-578,893,568,-578,-578,-578',
'217,-578,589,218,-98,647,979,214,215,-83,-578,-578,-578,-578,-100,-103',
'-99,-101,-69,895,-99,-578,-578,568,-578,-578,-578,-578,-578,610,444',
'-105,-102,-100,113,715,568,612,-91,112,646,218,897,-97,-102,-99,770',
'-100,214,215,899,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578',
'-578,-578,-578,-574,-93,-578,-578,-578,715,772,-578,715,815,-578,214',
'215,-578,-578,-575,-578,-574,-578,268,-578,-105,-578,-578,268,-578,-578',
'-578,-578,-578,609,-578,-578,-578,-95,-91,218,-100,611,113,113,-101',
'842,588,112,112,-101,-578,-89,113,-578,-578,-578,-578,112,-578,-476',
'-578,-91,-94,-90,-92,-101,-476,-476,-476,113,-93,-476,-476,-476,112',
'-476,-99,113,-96,113,218,-99,112,-476,112,-476,-476,-476,-102,-100,-88',
'-93,113,-102,-100,-476,-476,112,-476,-476,-476,-476,-476,899,-91,647',
'214,215,218,267,-93,268,113,-93,267,113,806,112,574,268,112,814,-93',
'597,218,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476',
'-476,-476,-286,646,-476,-476,-476,-91,-476,-476,-91,905,-476,580,597',
'-476,-476,581,-476,-91,-476,-412,-476,-571,-476,-476,907,-476,-476,-476',
'-476,-476,909,-476,-491,-476,771,548,263,545,544,543,-286,546,91,92',
'263,597,-491,-476,599,598,-476,-476,-476,-476,490,-476,-578,-476,747',
'267,212,113,-476,-578,-578,-578,112,267,238,-578,-578,-412,-578,-476',
'488,-487,599,598,-412,-89,-476,-578,-487,486,-578,-571,749,-412,-98',
'-476,-102,515,-578,-578,260,-578,-578,-578,-578,-578,235,261,-98,477',
'237,236,-412,-96,-571,599,598,602,527,217,-490,526,-105,833,91,92,93',
'94,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578',
'-578,-578,647,-578,-578,-578,647,631,-578,-483,915,-578,-104,-574,-578',
'597,-483,-578,446,-578,918,-578,515,-578,-578,-572,-578,-578,-578,-578',
'-578,-479,-578,-578,-578,-97,-578,646,-479,-479,-479,646,-482,-479,-479',
'-479,218,-479,-578,-482,238,-578,-578,79,-92,-479,-578,-479,-479,-479',
'922,93,94,-101,-578,80,-264,-479,-479,-95,-479,-479,-479,-479,-479,81',
'-481,-479,-104,599,598,595,235,-481,-479,445,237,236,548,-572,545,544',
'543,-479,546,443,662,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479',
'-479,-479,-479,-479,399,-572,-479,-479,-479,-578,-479,-479,975,-490',
'-479,597,-578,-479,-479,597,-479,-574,-479,597,-479,-578,-479,-479,597',
'-479,-479,-479,-479,-479,-289,-479,975,-479,-484,756,218,-289,-289,-289',
'-578,-484,-290,-289,-289,527,-289,-479,529,-290,-479,-479,-479,-479',
'260,-479,-88,-479,-290,956,597,261,-479,626,932,-97,-289,-289,939,-289',
'-289,-289,-289,-289,940,599,598,604,386,599,598,608,-90,599,598,600',
'-485,-486,599,598,613,-99,527,-485,-486,529,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-93,584,-289,-289,-289',
'-488,630,218,938,-102,-289,317,-488,-289,599,598,595,585,-289,113,-289',
'-488,-289,-289,112,-289,-289,-289,-289,-289,-289,-289,121,-289,-479',
'553,316,-289,-289,-289,958,-479,-289,-289,-289,556,-289,-289,214,215',
'-289,-289,-489,-94,-476,-289,-289,-289,-289,-489,113,-476,-103,214,215',
'112,-289,-289,-489,-289,-289,-289,-289,-289,984,113,960,-279,564,563',
'112,985,961,557,-279,548,966,545,544,543,983,546,527,-279,736,529,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,113',
'553,-289,-289,-289,112,773,-289,210,692,-289,556,701,-289,-289,211,-289',
'969,-289,971,-289,704,-289,-289,209,-289,-289,-289,-289,-289,973,-289',
'548,-289,545,544,543,548,546,545,544,543,975,546,564,563,975,-289,257',
'557,-289,-289,-289,-289,584,-289,986,-289,564,563,987,583,-103,290,69',
'70,71,9,57,701,585,113,63,64,701,988,112,67,904,65,66,68,30,31,72,73',
'116,117,118,119,120,29,28,27,101,100,102,103,396,989,19,214,215,398',
'397,635,8,45,292,10,105,104,106,95,56,97,96,98,899,99,107,108,899,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,-289,231,232',
'-332,899,252,253,-289,40,994,-332,33,-575,958,58,59,-289,213,60,-332',
'35,235,899,241,44,237,236,958,233,234,245,243,239,20,240,837,806,975',
'89,79,82,83,-279,84,86,85,87,837,806,-279,-575,80,88,-574,256,682,-238',
'208,-279,62,207,81,93,94,290,69,70,71,9,57,206,109,576,63,64,677,520',
'218,67,577,65,66,68,30,31,72,73,666,575,-83,682,683,29,28,27,101,100',
'102,103,741,742,19,685,743,107,108,635,8,45,292,10,105,104,106,95,56',
'97,96,98,218,99,107,108,958,91,92,42,43,41,238,242,247,248,249,244,246',
'254,255,250,251,-290,231,232,584,689,252,253,-290,40,692,938,33,693',
'695,58,59,-290,699,60,585,35,235,697,241,44,237,236,218,233,234,245',
'243,239,20,240,707,708,709,89,79,82,83,507,84,86,85,87,711,218,508,574',
'80,88,718,256,736,746,750,506,62,751,81,93,94,290,69,70,71,9,57,-262',
'757,-489,63,64,238,238,238,67,-489,65,66,68,30,31,72,73,238,-489,477',
'477,637,29,28,27,101,100,102,103,634,263,19,624,218,623,775,620,8,45',
'292,10,105,104,106,95,56,97,96,98,218,99,107,108,619,91,92,42,43,41',
'238,242,247,248,249,244,246,254,255,250,251,-289,231,232,-488,257,252',
'253,-289,40,-261,-488,33,-575,617,58,59,-289,614,60,-488,35,235,488',
'241,44,237,236,490,233,234,245,243,239,20,240,799,677,218,89,79,82,83',
'-290,84,86,85,87,263,263,-290,677,80,88,238,256,806,218,218,-290,62',
'1013,81,93,94,290,69,70,71,9,57,1014,831,517,63,64,579,218,806,67,518',
'65,66,68,30,31,72,73,841,442,578,218,388,29,28,27,101,100,102,103,574',
'935,19,545,544,543,490,546,8,45,292,10,105,104,106,95,56,97,96,98,218',
'99,107,108,531,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250',
'251,-289,231,232,440,850,252,253,-289,40,530,441,33,-575,1015,58,59',
'-289,975,60,442,35,235,-263,241,44,237,236,218,233,234,245,243,239,20',
'240,238,859,516,89,79,82,83,512,84,86,85,87,263,218,272,509,80,88,502',
'256,862,692,865,867,62,869,81,93,94,290,69,70,71,9,57,871,218,873,63',
'64,874,501,877,67,218,65,66,68,30,31,72,73,116,117,118,119,120,29,28',
'27,101,100,102,103,879,935,19,545,544,543,880,546,8,45,292,10,105,104',
'106,95,56,97,96,98,677,99,107,108,-68,91,92,42,43,41,238,242,247,248',
'249,244,246,254,255,250,251,882,231,232,498,-261,252,253,886,40,888',
'891,33,692,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,116,117,118,119,120',
'29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',256,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244',
'246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,256,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247',
'248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59',
',,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40',
',,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231',
'232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,218,256,,,',
',62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254',
'255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44',
'237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,256,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249',
'244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,256,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'292,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242',
'247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,294,,,58',
'59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,5,69,70,71,9,57,',
',,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,',
'19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40',
',,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,290',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231',
'232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62',
',81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,238,548,19,545,544,543,,546,8,45,292,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,235,,,,237,236',
'701,233,234,,,,,,,704,,40,,,33,,,58,59,,,60,,35,235,,,44,237,236,,233',
'234,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,548,,545,544,543,62',
'546,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,701,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246',
'254,255,250,251,,-597,-597,,,252,253,,40,,,294,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,548,,545,544,543,62,546,81,93,94,290,69,70,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,701,29,28,27,101,100,102,103,',
'548,19,545,544,543,,546,8,45,292,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,-597,-597,-597,-597,244,246,,701,-597,-597,',
',,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245',
'243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,548,,545,544,543',
'62,546,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,701,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-597,-597,-597,-597,244',
'246,,,-597,-597,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246',
'254,255,250,251,,-597,-597,,,252,253,,40,,,33,,,58,59,,,60,,35,235,',
'241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,,,,,,,,',
',,,,,,252,253,,40,,,294,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
',,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-597,-597,-597',
'-597,244,246,,,-597,-597,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248',
'249,244,246,254,,250,251,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-597,-597',
'-597,-597,244,246,,,-597,-597,,,,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,,,,,',
',,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233',
'234,,,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,,,250,251',
',,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,290,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,292,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,',
',58,59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,290,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,292,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
'238,-597,-597,-597,-597,244,246,,,-597,-597,,,,,,252,253,,40,,,33,,',
'58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-597,-597',
'-597,-597,244,246,,,-597,-597,,,,,,252,253,,223,,,229,,,58,59,,,60,',
',235,,241,44,237,236,,233,234,245,243,239,228,240,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,,,,,,,,,,,,',
',,252,253,,223,,,229,,,58,59,,,60,,,235,,241,44,237,236,,233,234,,,',
'228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241',
'44,237,236,,233,234,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,284,99',
'107,108,,91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253,,223,,,229,,,58,59',
',,60,,281,235,279,,44,237,236,285,233,234,,,,228,,,,,89,282,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,307,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,',
',299,,,58,59,,,60,,298,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73',
',,,,,305,306,312,101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,,,229,,,58',
'59,,,60,,,548,,545,544,543,553,546,,,,,,,,,556,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,315,,551,62,,81,93,94,69,70,71,,57,564,563,,63,64,557',
',,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,307,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,',
',,,946,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,281,,,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310',
'72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,113,,,,,112,62,,81,93,94,69,70',
'71,,57,,,,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100',
'102,103,,,230,,,,,,,307,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,,313,,,,,,,,,,,,,,,,,,,,348,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,307,,,105,104,106,353,56,97,96,354,,99,107,108,,91,92,,,313',
',,,,,,,,,,,,,,,,360,,,355,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',307,,,105,104,106,353,56,97,96,354,,99,107,108,,91,92,,,313,,,,,,,',
',,,,,,,,,,,,355,,,229,,,58,59,,,60,,,548,,545,544,543,553,546,,,,,,',
',,556,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,551,62,,81,93,94,69,70',
'71,9,57,564,563,,63,64,557,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,388,62,,81,93',
'94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,',
',,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,',
',,,305,306,312,101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,876,,,229,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,404,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,',
',,,,,45,,,105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228',
',,,,89,282,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,307,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,313',
',,,,,,,,,,,,,,,,,,,303,,,299,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,404,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,218,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,',
',,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,285,,,,,,228,',
',,,89,282,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,',
',,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305',
'306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,',
',,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305',
'306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,',
',105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89',
'282,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,',
'45,,,105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,',
',,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,',
',,89,282,82,83,,84,86,85,87,,,,,80,88,218,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103',
',,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,659,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,307,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,876,,,229,,',
'58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305',
'306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312',
'101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,,,229,,,58,59,,,60,,,548,,545',
'544,543,553,546,,,,,,,,,556,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,504',
',551,62,,81,93,94,69,70,71,,57,564,563,,63,64,557,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,',
',,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305',
'306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312',
'101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,223,,,229,520,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,404,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73',
',,,,,305,306,312,101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306',
'312,101,100,102,103,,,230,,,,,,,307,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,58,59,,,60,,,,,',
',,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72',
'73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309,310,72,73,,',
',,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,',
',,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,',
',,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,659,,279,,44,,,285,,,,,,228,,,,,89,282',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,754,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,281,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,659,,279,,44,,,285,,,,,,228,,,,,89,282,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,285,,,,,,228,,,,,89,282,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,292',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,388,62,,81,93,94,69,70,71,,57,,,,63,64,,',
',67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,',
',,,,,45,,,105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,285,,,,,,228,,,',
',89,282,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,284,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,659,,,,44,,,285,,,,,,228',
',,,,89,282,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,309,310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,307',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,313,,,,,,,,,,,,,,',
',,,,,303,,,299,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,284,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,281,,279,,44,,,285,,,,,,228,,,,,89,282,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,309',
'310,72,73,,,,,,305,306,312,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,-579,,62,,81,93,94,-579,-579,-579,,,-579,-579,-579,,-579',
',,,,,,,,-579,-579,-579,-579,,,,,,,,-579,-579,,-579,-579,-579,-579,-579',
',,,,,,,,,,,,,,,,,,,,,,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579',
'-579,-579,-579,-579,,,-579,-579,-579,,,-579,,,-579,,,-579,-579,,-579',
',-579,,-579,,-579,-579,,-579,-579,-579,-579,-579,,-579,-579,-579,,,',
',,,,,,,,,,-579,,,-579,-579,-579,-579,-280,-579,,-579,,,,-280,-280,-280',
',,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,,,,,,,-280,-280,,-280',
'-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280',
',,-280,-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,',
'-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280,-580,-280,,-280,',
',,-580,-580,-580,,,-580,-580,-580,,-580,,,,,,,,,-580,-580,-580,-580',
',,,,,,,-580,-580,,-580,-580,-580,-580,-580,,,,,,,,,,,,,,,,,,,,,,,-580',
'-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,,,-580',
'-580,-580,,,-580,,,-580,,,-580,-580,,-580,,-580,,-580,,-580,-580,,-580',
'-580,-580,-580,-580,,-580,-580,-580,548,,545,544,543,553,546,,,,,,,-580',
',556,-580,-580,-580,-580,-296,-580,,-580,,,,-296,-296,-296,,,-296,-296',
'-296,,-296,551,,,,,,,,,-296,-296,564,563,,,,557,,,-296,-296,,-296,-296',
'-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,272,-296',
',,-296,-296,,-296,,-296,,-296,,-296,-296,,-296,-296,-296,-296,-296,',
'-296,-411,-296,,,,,,-411,-411,-411,,,-411,-411,-411,-296,-411,,-296',
'-296,,-296,,-296,,-411,-411,-411,,,,,,,,,-411,-411,,-411,-411,-411,-411',
'-411,,,,,,,,,,,,,,,,,,,,,,,-411,-411,-411,-411,-411,-411,-411,-411,-411',
'-411,-411,-411,-411,-411,,,-411,-411,-411,,,-411,,263,-411,,,-411,-411',
',-411,,-411,,-411,,-411,-411,,-411,-411,-411,-411,-411,,-411,-411,-411',
',,,,,,,,,,,,,-411,,-244,-411,-411,,-411,,-411,-244,-244,-244,,,-244',
'-244,-244,548,-244,545,544,543,553,546,,,,-244,-244,,,,556,,,,,,-244',
'-244,,-244,-244,-244,-244,-244,,,,,,,,,551,,,,,,,,,561,560,564,563,',
',,557,,,,,,,,,-244,,-244,,,,,-244,,-244,-244,-244,263,-244,-244,-244',
'-244,218,-244,,,,,,,,,-244,-244,-244,,,,,,-244,-244,,-244,-244,,-244',
'-244,-244,-244,-244,,,,,-244,,,-244,,,,,-244,,,,,,,,,,-244,-244,-244',
'-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,,,-244,-244,-244',
',,-244,,263,-244,,,-244,-244,,-244,,-244,,-244,,-244,-244,,-244,-244',
'-244,-244,-244,,-244,-244,-244,,,,,,,,,,,,,,-244,,,-244,-244,,-244,',
'-244,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,',
',,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89',
',,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,',
',,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193',
'186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201',
'195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194',
'193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126',
',,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200',
'201,195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199',
'194,193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124',
'126,,,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,371,370,372',
'369,169,188,187,,,,,,168,175,166,167,366,367,368,364,126,97,96,365,',
'99,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,376,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,640,424,162,,641,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,475,417,162,,476,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,640,424,162',
',641,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,638,417,162,,639,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,413,417,162,,414,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,670,417',
'162,,671,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,475,417,162,,476,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,1008,424,162,,1009,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,420,424',
'162,,419,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,1006,417,162,,1007,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,638,417,162,,639,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,981',
'424,162,,980,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,726,424,162,,727,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,723,424,162,,724,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'721,417,162,,722,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,673,424,162,,674,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,548,162,545,544,543',
'553,546,,,,,,,,548,556,545,544,543,553,546,,,,,,,,548,556,545,544,543',
'553,546,,,551,,,,,,556,,,561,560,564,563,,551,534,557,,,,,,,561,560',
'564,563,,551,,557,,,,,,,561,560,564,563,,,548,557,545,544,543,553,546',
',548,,545,544,543,553,546,556,,,,,,,,556,,548,,545,544,543,553,546,',
',,,,551,,,556,,,,,551,561,560,564,563,,,,557,561,560,564,563,,,,557',
'551,,548,,545,544,543,553,546,561,560,564,563,,,,557,556,,548,,545,544',
'543,553,546,,548,,545,544,543,553,546,556,,,,,551,,,556,,,,,,561,560',
'564,563,,,,557,551,,,,,,,,551,561,560,564,563,,,,557,561,560,564,563',
',,548,557,545,544,543,553,546,,548,,545,544,543,553,546,556,,,,,,,,556',
',548,,545,544,543,553,546,,,,,,551,,,556,,,,,551,,,564,563,,,,557,561',
'560,564,563,,,,557,551,,548,,545,544,543,553,546,,,564,563,,,,557,556',
',548,,545,544,543,553,546,548,,545,544,543,553,546,,556,,,,,551,,556',
',548,,545,544,543,553,546,564,563,,,,557,551,,556,,,,,551,,,,564,563',
',,,557,,564,563,,,,557,551,,,,,,,,,,,564,563,,,,557' ]
        racc_action_table = arr = ::Array.new(25138, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'640,719,339,1008,774,578,413,640,640,640,821,338,640,640,640,19,640',
'359,933,346,473,933,680,680,665,640,640,640,640,721,724,844,723,665',
'822,1020,640,640,908,640,640,640,640,640,383,224,349,1007,1006,3,571',
'885,384,413,3,473,19,824,345,722,774,638,413,437,437,825,640,640,640',
'640,640,640,640,640,640,640,640,640,640,640,1008,671,640,640,640,570',
'640,640,845,687,640,594,594,640,640,724,640,723,640,61,640,224,640,640',
'650,640,640,640,640,640,383,640,640,640,578,670,680,638,384,719,339',
'1008,719,359,719,339,1008,640,346,338,640,640,640,640,338,640,95,640',
'721,724,844,723,640,95,95,95,359,671,95,95,95,359,95,1020,571,349,908',
'437,1020,571,95,908,95,95,95,1007,1006,345,722,885,1007,1006,95,95,885',
'95,95,95,95,95,827,670,481,590,590,594,61,671,26,570,671,650,845,913',
'570,913,308,845,687,671,605,830,95,95,95,95,95,95,95,95,95,95,95,95',
'95,95,58,481,95,95,95,670,95,95,670,832,95,355,607,95,95,355,95,670',
'95,801,95,353,95,95,835,95,95,95,95,95,838,95,39,95,639,704,26,704,704',
'704,58,704,313,313,308,380,222,95,605,605,95,95,95,95,280,95,420,95',
'605,26,15,590,95,420,420,420,590,308,450,420,420,801,420,353,277,368',
'607,607,801,39,353,420,368,276,726,353,607,801,39,353,639,443,420,420',
'374,420,420,420,420,420,450,374,222,262,450,450,801,15,353,380,380,380',
'328,230,221,328,15,704,41,41,313,313,420,420,420,420,420,420,420,420',
'420,420,420,420,420,420,726,482,420,420,420,651,420,726,372,847,420',
'443,726,420,492,372,726,226,420,851,420,317,420,420,354,420,420,420',
'420,420,98,420,420,420,221,726,482,98,98,98,651,371,98,98,98,852,98',
'420,371,449,420,420,77,420,98,420,98,98,98,855,41,41,420,673,77,856',
'98,98,317,98,98,98,98,98,77,370,354,317,492,492,492,449,370,354,225',
'449,449,904,354,904,904,904,354,904,223,492,98,98,98,98,98,98,98,98',
'98,98,98,98,98,98,204,354,98,98,98,673,98,98,1001,38,98,381,673,98,98',
'382,98,673,98,379,98,673,98,98,385,98,98,98,98,98,419,98,1002,98,369',
'621,1005,419,419,419,673,369,581,419,419,329,419,98,329,581,98,98,98',
'98,24,98,38,98,581,904,378,24,98,414,872,38,419,419,876,419,419,419',
'419,419,878,381,381,381,109,382,382,382,621,379,379,379,367,366,385',
'385,385,621,686,367,366,686,419,419,419,419,419,419,419,419,419,419',
'419,419,419,419,414,937,419,419,419,943,419,45,937,414,419,40,943,419',
'378,378,378,937,419,589,419,943,419,419,589,419,419,419,419,419,641',
'419,7,419,365,689,37,641,641,641,906,365,641,641,641,689,641,419,337',
'337,419,419,944,419,364,419,641,641,641,944,342,364,419,523,523,342',
'641,641,944,641,641,641,641,641,945,288,910,947,689,689,288,945,911',
'689,947,551,917,551,551,551,945,551,332,947,921,332,641,641,641,641',
'641,641,641,641,641,641,641,641,641,641,848,862,641,641,641,848,641',
'641,14,923,641,862,551,641,641,14,641,926,641,927,641,551,641,641,14',
'641,641,641,641,641,928,641,831,641,831,831,831,833,831,833,833,833',
'929,833,862,862,931,641,22,862,641,641,641,641,357,641,946,641,692,692',
'949,357,641,839,839,839,839,839,839,831,357,853,839,839,833,950,853',
'839,831,839,839,839,839,839,839,839,6,6,6,6,6,839,839,839,839,839,839',
'839,123,951,839,17,17,123,123,432,839,839,839,839,839,839,839,839,839',
'839,839,839,952,839,839,839,953,839,839,839,839,839,432,432,432,432',
'432,432,432,432,432,432,432,1009,432,432,46,954,432,432,1009,839,955',
'46,839,1009,957,839,839,1009,16,839,46,839,432,1010,432,839,432,432',
'1011,432,432,432,432,432,839,432,710,710,1022,839,839,839,839,304,839',
'839,839,839,996,996,304,980,839,839,981,432,982,432,13,304,839,12,839',
'839,839,566,566,566,566,566,566,10,1,347,566,566,513,510,505,566,347',
'566,566,566,566,566,566,566,503,347,500,521,522,566,566,566,566,566',
'566,566,598,598,566,524,598,598,598,643,566,566,566,566,566,566,566',
'566,566,566,566,566,499,566,566,566,995,566,566,566,566,566,643,643',
'643,643,643,643,643,643,643,643,643,509,643,643,875,536,643,643,509',
'566,537,875,566,539,540,566,566,509,550,566,875,566,643,541,643,566',
'643,643,483,643,643,643,643,643,566,643,558,562,565,566,566,566,566',
'302,566,566,566,566,567,479,302,572,566,566,573,643,592,602,610,302',
'566,612,566,566,566,648,648,648,648,648,648,618,622,301,648,648,454',
'453,452,648,301,648,648,648,648,648,648,648,451,301,627,632,439,648',
'648,648,648,648,648,648,429,421,648,412,642,411,644,408,648,648,648',
'648,648,648,648,648,648,648,648,648,409,648,648,648,405,648,648,648',
'648,648,408,408,408,408,408,408,408,408,408,408,408,727,408,408,300',
'649,408,408,727,648,403,300,648,727,400,648,648,727,394,648,300,648',
'408,656,408,648,408,408,658,408,408,408,408,408,648,408,664,667,669',
'648,648,648,648,986,648,648,648,648,672,675,986,676,648,648,679,408',
'681,684,688,986,648,997,648,648,648,653,653,653,653,653,653,998,703',
'319,653,653,350,705,712,653,319,653,653,653,653,653,653,653,717,319',
'348,720,344,653,653,653,653,653,653,653,343,979,653,979,979,979,333',
'979,653,653,653,653,653,653,653,653,653,653,653,653,729,653,653,653',
'331,653,653,653,653,653,519,519,519,519,519,519,519,519,519,519,519',
'674,519,519,220,734,519,519,674,653,330,220,653,674,999,653,653,674',
'1000,653,220,653,519,753,519,653,519,519,326,519,519,519,519,519,653',
'519,321,758,318,653,653,653,653,314,653,653,653,653,312,307,306,303',
'653,653,297,519,776,777,779,780,653,781,653,653,653,654,654,654,654',
'654,654,783,784,785,654,654,786,296,790,654,295,654,654,654,654,654',
'654,654,291,291,291,291,291,654,654,654,654,654,654,654,794,873,654',
'873,873,873,795,873,654,654,654,654,654,654,654,654,654,654,654,654',
'800,654,654,654,293,654,654,654,654,654,678,678,678,678,678,678,678',
'678,678,678,678,804,678,678,292,807,678,678,808,654,811,816,654,817',
',654,654,,,654,,654,678,,678,654,678,678,,678,678,678,678,678,654,678',
',,,654,654,654,654,,654,654,654,654,,,,,654,654,,678,,,,,654,,654,654',
'654,730,730,730,730,730,730,,,,730,730,,,,730,,730,730,730,730,730,730',
'730,497,497,497,497,497,730,730,730,730,730,730,730,,,730,,,,,,730,730',
'730,730,730,730,730,730,730,730,730,730,,730,730,730,,730,730,730,730',
'730,858,858,858,858,858,858,858,858,858,858,858,,858,858,,,858,858,',
'730,,,730,,,730,730,,,730,,730,858,,858,730,858,858,,858,858,858,858',
'858,730,858,,,,730,730,730,730,,730,730,730,730,,,,,730,730,,858,,,',
',730,,730,730,730,735,735,735,735,735,735,,,,735,735,,,,735,,735,735',
'735,735,735,735,735,,,,,,735,735,735,735,735,735,735,,,735,,,,,,735',
'735,735,735,735,735,735,735,735,735,735,735,,735,735,735,,735,735,735',
'735,735,861,861,861,861,861,861,861,861,861,861,861,,861,861,,,861,861',
',735,,,735,,,735,735,,,735,,735,861,,861,735,861,861,,861,861,861,861',
'861,735,861,,,,735,735,735,735,,735,735,735,735,,,,,735,735,,861,,,',
',735,,735,735,735,840,840,840,840,840,840,,,,840,840,,,,840,,840,840',
'840,840,840,840,840,,,,,,840,840,840,840,840,840,840,,,840,,,,,,840',
'840,840,840,840,840,840,840,840,840,840,840,,840,840,840,,840,840,840',
'840,840,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,840,,,840,',
',840,840,,,840,,840,21,,21,840,21,21,,21,21,21,21,21,840,21,,,,840,840',
'840,840,,840,840,840,840,,,,,840,840,,21,,,,,840,,840,840,840,843,843',
'843,843,843,843,,,,843,843,,,,843,,843,843,843,843,843,843,843,,,,,',
'843,843,843,843,843,843,843,,,843,,,,,,843,843,843,843,843,843,843,843',
'843,843,843,843,,843,843,843,,843,843,843,843,843,427,427,427,427,427',
'427,427,427,427,427,427,,427,427,,,427,427,,843,,,843,,,843,843,,,843',
',843,427,,427,843,427,427,,427,427,427,427,427,843,427,,,,843,843,843',
'843,,843,843,843,843,,,,,843,843,,427,,,,,843,,843,843,843,882,882,882',
'882,882,882,,,,882,882,,,,882,,882,882,882,882,882,882,882,,,,,,882',
'882,882,882,882,882,882,,,882,,,,,,882,882,882,882,882,882,882,882,882',
'882,882,882,,882,882,882,,882,882,882,882,882,274,274,274,274,274,274',
'274,274,274,274,274,,274,274,,,274,274,,882,,,882,,,882,882,,,882,,882',
'274,,274,882,274,274,,274,274,274,274,274,882,274,,,,882,882,882,882',
',882,882,882,882,,,,,882,882,,274,,,,,882,,882,882,882,890,890,890,890',
'890,890,,,,890,890,,,,890,,890,890,890,890,890,890,890,,,,,,890,890',
'890,890,890,890,890,,,890,,,,,,890,890,890,890,890,890,890,890,890,890',
'890,890,,890,890,890,,890,890,890,890,890,472,472,472,472,472,472,472',
'472,472,472,472,,472,472,,,472,472,,890,,,890,,,890,890,,,890,,890,472',
',472,890,472,472,,472,472,472,472,472,890,472,,,,890,890,890,890,,890',
'890,890,890,,,,,890,890,472,472,,,,,890,,890,890,890,569,569,569,569',
'569,569,,,,569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569',
'569,569,569,569,569,,,569,,,,,,569,569,569,569,569,569,569,569,569,569',
'569,569,,569,569,569,,569,569,569,569,569,769,769,769,769,769,769,769',
'769,769,769,769,,769,769,,,769,769,,569,,,569,,,569,569,,,569,,569,769',
',769,569,769,769,,769,769,769,769,769,569,769,,,,569,569,569,569,,569',
'569,569,569,,,,,569,569,,769,,,,,569,,569,569,569,591,591,591,591,591',
'591,,,,591,591,,,,591,,591,591,591,591,591,591,591,,,,,,591,591,591',
'591,591,591,591,,,591,,,,,,591,591,591,591,591,591,591,591,591,591,591',
'591,,591,591,591,,591,591,591,591,591,767,767,767,767,767,767,767,767',
'767,767,767,,767,767,,,767,767,,591,,,591,,,591,591,,,591,,591,767,',
'767,591,767,767,,767,767,767,767,767,591,767,,,,591,591,591,591,,591',
'591,591,591,,,,,591,591,,767,,,,,591,,591,591,591,33,33,33,33,33,33',
',,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,765',
'765,765,765,765,765,765,765,765,765,765,,765,765,,,765,765,,33,,,33',
',,33,33,,,33,,33,765,,765,33,765,765,,765,765,765,765,765,33,765,,,',
'33,33,33,33,,33,33,33,33,,,,,33,33,,765,,,,,33,,33,33,33,121,121,121',
'121,121,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121',
'121,121,121,121,121,121,,,121,,,,,,121,121,121,121,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,121,121,121,762,762,762,762,762,762',
'762,762,762,762,762,,762,762,,,762,762,,121,,,121,,,121,121,,,121,,121',
'762,,762,121,762,762,,762,762,762,762,762,121,762,,,,121,121,121,121',
',121,121,121,121,,,,,121,121,,762,,,,,121,,121,121,121,229,229,229,229',
'229,229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229',
'229,229,229,229,229,,,229,,,,,,229,229,229,229,229,229,229,229,229,229',
'229,229,,229,229,229,,229,229,229,229,229,760,760,760,760,760,760,760',
'760,760,760,760,,760,760,,,760,760,,229,,,229,,,229,229,,,229,,229,760',
',760,229,760,760,,760,760,760,760,760,229,760,,,,229,229,229,229,,229',
'229,229,229,,,,,229,229,,760,,,,,229,,229,229,229,206,206,206,206,206',
'206,,,,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206,206',
'206,206,206,206,,,206,,,,,,206,206,206,206,206,206,206,206,206,206,206',
'206,,206,206,206,,206,206,206,206,206,755,755,755,755,755,755,755,755',
'755,755,755,,755,755,,,755,755,,206,,,206,,,206,206,,,206,,206,755,',
'755,206,755,755,,755,755,755,755,755,206,755,,,,206,206,206,206,,206',
'206,206,206,,,,,206,206,,755,,,,,206,,206,206,206,324,324,324,324,324',
'324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324',
'324,324,324,324,469,701,324,701,701,701,,701,324,324,324,324,324,324',
'324,324,324,324,324,324,,324,324,324,,324,324,324,324,324,468,,469,',
',,469,469,701,469,469,,,,,,,701,,324,,,324,,,324,324,,,324,,324,468',
',,324,468,468,,468,468,,,,324,,,,,324,324,324,324,,324,324,324,324,',
',,,324,324,,958,,958,958,958,324,958,324,324,324,299,299,299,299,299',
'299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,958,299,299,299',
'299,299,299,299,,,299,,,,,,299,299,299,299,299,299,299,299,299,299,299',
'299,,299,299,299,,299,299,299,299,299,448,448,448,448,448,448,448,448',
'448,448,448,,448,448,,,448,448,,299,,,299,,,299,299,,,299,,299,448,',
'448,299,448,448,,448,448,448,448,448,299,448,,,,299,299,299,299,,299',
'299,299,299,,,,,299,299,,905,,905,905,905,299,905,299,299,299,793,793',
'793,793,793,793,,,,793,793,,,,793,,793,793,793,793,793,793,793,,,,,905',
'793,793,793,793,793,793,793,,994,793,994,994,994,,994,793,793,793,793',
'793,793,793,793,793,793,793,793,,793,793,793,,793,793,793,793,793,463',
'463,463,463,463,463,463,,994,463,463,,,,,,463,463,,793,,,793,,,793,793',
',,793,,793,463,,463,793,463,463,,463,463,463,463,463,793,463,,,,793',
'793,793,793,,793,793,793,793,,,,,793,793,,956,,956,956,956,793,956,793',
'793,793,849,849,849,849,849,849,,,,849,849,,,,849,,849,849,849,849,849',
'849,849,,,,,956,849,849,849,849,849,849,849,,,849,,,,,,849,849,849,849',
'849,849,849,849,849,849,849,849,,849,849,849,,849,849,849,849,849,464',
'464,464,464,464,464,464,,,464,464,,,,,,464,464,,849,,,849,,,849,849',
',,849,,849,464,,464,849,464,464,,464,464,464,464,464,849,464,,,,849',
'849,849,849,,849,849,849,849,,,,,849,849,,,,,,,849,,849,849,849,0,0',
'0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0',
'0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,447,447,447,447,447,447,447,447',
'447,447,447,,447,447,,,447,447,,0,,,0,,,0,0,,,0,,0,447,,447,0,447,447',
',447,447,447,447,447,0,447,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0',
'0,294,294,294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294',
'294,,,,,,294,294,294,294,294,294,294,,,294,,,,,,294,294,294,294,294',
'294,294,294,294,294,294,294,,294,294,294,,294,294,294,294,294,461,,',
',,,,,,,,,,,,,461,461,,294,,,294,,,294,294,,,294,,294,461,,461,294,461',
'461,,461,461,,,461,294,461,,,,294,294,294,294,,294,294,294,294,,,,,294',
'294,,,,,,,294,,294,294,294,498,498,498,498,498,498,,,,498,498,,,,498',
',498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498',
',,,,,498,498,498,498,498,498,498,498,498,498,498,498,,498,498,498,,498',
'498,498,498,498,460,,,,,,,,,,,,,,,,460,460,,498,,,498,,,498,498,,,498',
',498,460,,460,498,460,460,,460,460,,,460,498,460,,,,498,498,498,498',
',498,498,498,498,,,,,498,498,,,,,,,498,,498,498,498,967,967,967,967',
'967,967,,,,967,967,,,,967,,967,967,967,967,967,967,967,,,,,,967,967',
'967,967,967,967,967,,,967,,,,,,967,967,967,967,967,967,967,967,967,967',
'967,967,,967,967,967,,967,967,967,967,967,467,467,467,467,467,467,467',
',,467,467,,,,,,467,467,,967,,,967,,,967,967,,,967,,967,467,,467,967',
'467,467,,467,467,467,467,467,967,467,,,,967,967,967,967,,967,967,967',
'967,,,,,967,967,,,,,,,967,,967,967,967,745,745,745,745,745,745,,,,745',
'745,,,,745,,745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745',
'745,,,745,,,,,,745,745,745,745,745,745,745,745,745,745,745,745,,745',
'745,745,,745,745,745,745,745,471,471,471,471,471,471,471,471,,471,471',
',,,,,471,471,,745,,,745,,,745,745,,,745,,745,471,,471,745,471,471,,471',
'471,471,471,471,745,471,,,,745,745,745,745,,745,745,745,745,,,,,745',
'745,,,,,,,745,,745,745,745,889,889,889,889,889,889,,,,889,889,,,,889',
',889,889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889,,,889',
',,,,,889,889,889,889,889,889,889,889,889,889,889,889,,889,889,889,,889',
'889,889,889,889,458,458,458,458,458,458,458,,,458,458,,,,,,458,458,',
'889,,,889,,,889,889,,,889,,889,458,,458,889,458,458,,458,458,458,458',
'458,889,458,,,,889,889,889,889,,889,889,889,889,,,,,889,889,,,,,,,889',
',889,889,889,806,806,806,806,806,806,,,,806,806,,,,806,,806,806,806',
'806,806,806,806,,,,,,806,806,806,806,806,806,806,,,806,,,,,,806,806',
'806,806,806,806,806,806,806,806,806,806,,806,806,806,,806,806,806,806',
'806,459,,,,,,,,,,,,,,,,459,459,,806,,,806,,,806,806,,,806,,806,459,',
'459,806,459,459,,459,459,,,459,806,459,,,,806,806,806,806,,806,806,806',
'806,,,,,806,806,,,,,,,806,,806,806,806,965,965,965,965,965,965,,,,965',
'965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965,965',
'965,,,965,,,,,,965,965,965,965,965,965,965,965,965,965,965,965,,965',
'965,965,,965,965,965,965,965,470,470,470,470,470,470,470,,,470,470,',
',,,,470,470,,965,,,965,,,965,965,,,965,,965,470,,470,965,470,470,,470',
'470,470,470,470,965,470,,,,965,965,965,965,,965,965,965,965,,,,,965',
'965,,,,,,,965,,965,965,965,959,959,959,959,959,959,,,,959,959,,,,959',
',959,959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959',
',,,,,959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959',
'959,959,959,959,462,,,,,,,,,,,,,,,,462,462,,959,,,959,,,959,959,,,959',
',959,462,,462,959,462,462,,462,462,,,462,959,462,,,,959,959,959,959',
',959,959,959,959,,,,,959,959,,,,,,,959,,959,959,959,942,942,942,942',
'942,942,,,,942,942,,,,942,,942,942,942,942,942,942,942,,,,,,942,942',
'942,942,942,942,942,,,942,,,,,,942,942,942,942,942,942,942,942,942,942',
'942,942,,942,942,942,,942,942,942,942,942,465,465,465,465,465,465,465',
',,465,465,,,,,,465,465,,942,,,942,,,942,942,,,942,,942,465,,465,942',
'465,465,,465,465,465,465,465,942,465,,,,942,942,942,942,,942,942,942',
'942,,,,,942,942,,,,212,212,212,942,212,942,942,942,212,212,,,,212,,212',
'212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,',
',212,,,212,212,212,212,212,212,212,212,,212,212,212,,212,212,212,212',
'212,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,,212,,,212,,',
'212,212,,,212,,,466,,466,212,466,466,,466,466,466,466,466,212,466,,',
',212,212,212,212,,212,212,212,212,,,,,212,212,,,,515,515,515,212,515',
'212,212,212,515,515,,,,515,,515,515,515,515,515,515,515,,,,,,515,515',
'515,515,515,515,515,,,515,,,,,,,515,,,515,515,515,515,515,515,515,515',
',515,515,515,,515,515,515,515,515,456,,,,,,,,,,,,,,,,456,456,,515,,',
'515,,,515,515,,,515,,,456,,456,515,456,456,,456,456,,,,515,,,,,515,515',
'515,515,,515,515,515,515,,,,,515,515,,,,,,,515,,515,515,515,5,5,5,5',
'5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5',
'5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,455,,,,,,,,,,,,,,,,455,455,,5,,,5,,,5',
'5,,,5,,5,455,,455,5,455,455,,455,455,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5',
'5,,,,983,983,983,5,983,5,5,5,983,983,,,,983,,983,983,983,983,983,983',
'983,,,,,,983,983,983,983,983,983,983,,,983,,,,,,,983,,,983,983,983,983',
'983,983,983,983,983,983,983,983,,983,983,983,983,983,457,,,,,,,,,,,',
',,,,457,457,,983,,,983,,,983,983,,,983,,983,457,983,,983,457,457,983',
'457,457,,,,983,,,,,983,983,983,983,,983,983,983,983,,,,,983,983,,,,20',
'20,20,983,20,983,983,983,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20',
'20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20',
'20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,',
'20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29,20,20,20',
'29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,',
',,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,',
',,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29',
'29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30',
'30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30',
'30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30',
',,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,',
',,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31',
'31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31',
',31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34',
'34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34',
'34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35',
',35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35',
'35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,',
',35,35,,,35,,,697,,697,697,697,697,697,,,,,,,,,697,,35,35,35,35,,35',
'35,35,35,,,,,35,35,,,,35,,697,35,,35,35,35,42,42,42,,42,697,697,,42',
'42,697,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,',
',,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,',
',,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42',
'42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43',
'43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43',
'43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43',
',,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,44',
'44,44,43,44,43,43,43,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44',
'44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44',
'44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44',
',,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,886,886,886,44,886,44,44,44',
'886,886,,,,886,,886,886,886,886,886,886,886,,,,,,886,886,886,886,886',
'886,886,,,886,,,,,,,886,,,886,886,886,886,886,886,886,886,,886,886,886',
',886,886,,,886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,,,',
',,,,,,,,,,,886,886,886,886,,886,886,886,886,,,,,886,886,,,,59,59,59',
'886,59,886,886,886,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59',
'59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59',
'59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,',
',59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59',
'60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,',
',,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,',
',,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60',
',60,60,60,60,,,,,60,60,,,,63,63,63,60,63,60,60,60,63,63,,,,63,,63,63',
'63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63',
'63,63,63,63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63',
'63,,,63,,,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,',
',64,64,64,63,64,63,63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64',
'64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64',
'64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,',
'64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64',
'67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,',
',,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,',
',,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67',
'67,67,67,,,,,67,67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68',
',68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68',
'68,68,68,68,68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,',
',68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68',
',,,69,69,69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69',
'69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69',
',69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,',
',,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70',
'70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,',
'70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,',
',,70,,,70,,,70,70,,,70,,,869,,869,869,869,869,869,,,,,,,,,869,,70,70',
'70,70,,70,70,70,70,,,,,70,70,,,,,,869,70,,70,70,70,111,111,111,111,111',
'869,869,,111,111,869,,,111,,111,111,111,111,111,111,111,,,,,,111,111',
'111,111,111,111,111,,,111,,,,,,111,111,111,111,111,111,111,111,111,111',
'111,111,,111,111,111,,111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111',
',,111,111,,,111,,111,,,,111,,,,,,,,,111,,,,,111,111,111,111,,111,111',
'111,111,,,,,111,111,,,,,,111,111,,111,111,111,116,116,116,,116,,,,116',
'116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116,116',
'116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116,',
'116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,',
',,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116,',
',,117,117,117,116,117,116,116,116,117,117,,,,117,,117,117,117,117,117',
'117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117,117,117',
'117,117,117,117,117,,117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,',
',,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117',
'117,,117,117,117,117,,,,,117,117,,,,118,118,118,117,118,117,117,117',
'118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118',
'118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118',
',118,118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,',
',,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118,118',
',,,119,119,119,118,119,118,118,118,119,119,,,,119,,119,119,119,119,119',
'119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119',
'119,119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,',
',,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119',
'119,,119,119,119,119,,,,,119,119,,,,,,,119,,119,119,119,120,120,120',
'120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120',
'120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120,120,120',
'120,120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120',
',,120,120,,,120,,120,,,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120',
'120,120,,,,,120,120,,,,874,874,874,120,874,120,120,120,874,874,,,,874',
',874,874,874,874,874,874,874,,,,,,874,874,874,874,874,874,874,,,874',
',,,,,,874,,,874,874,874,874,874,874,874,874,,874,874,874,,874,874,,',
'874,,,,,,,,,,,,,,,,,,,,874,,,874,,,874,874,,,874,,,,,,,,,,,,,,,,,,,',
'874,874,874,874,,874,874,874,874,,,,,874,874,,,,207,207,207,874,207',
'874,874,874,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207',
'207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207',
',207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207',
'207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207,207,,207,207,207,207',
',,,,207,207,,,,208,208,208,207,208,207,207,207,208,208,,,,208,,208,208',
'208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,,208',
',,208,208,208,208,208,208,208,208,,208,208,208,,208,208,208,208,208',
',,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,,208,,',
',,208,208,208,208,,208,208,208,208,,,,,208,208,,,,209,209,209,208,209',
'208,208,208,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209',
'209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209,209,209,209',
'209,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,',
'209,209,,,209,,209,,209,,209,,,209,,,,,,209,,,,,209,209,209,209,,209',
'209,209,209,,,,,209,209,,,,512,512,512,209,512,209,209,209,512,512,',
',,512,,512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512',
',,512,,,,,,,512,,,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,,,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,,,,,,,,,,,,',
',,,,,,512,512,512,512,,512,512,512,512,,,,,512,512,,,,213,213,213,512',
'213,512,512,512,213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213',
'213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213',
'213,,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,',
',213,213,,,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213',
'213,213,,,,,213,213,,,,214,214,214,213,214,213,213,213,214,214,,,,214',
',214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214',
',,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,,214,214,214',
'214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,',
',,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,,,,215,215,215',
'214,215,214,214,214,215,215,,,,215,,215,215,215,215,215,215,215,,,,',
',215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215',
'215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215',
',,215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215',
'215,,,,,215,215,,,,216,216,216,215,216,215,215,215,216,216,,,,216,,216',
'216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,',
',216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216,216,216',
'216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216',
',,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,217,217,217,216',
'217,216,216,216,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217',
'217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217',
'217,,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,',
',217,217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217',
'217,,,,,217,217,217,,,860,860,860,217,860,217,217,217,860,860,,,,860',
',860,860,860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860',
',,,,,,860,,,860,860,860,860,860,860,860,860,,860,860,860,,860,860,860',
'860,860,,,,,,,,,,,,,,,,,,,,860,,,860,,,860,860,,,860,,,,,,860,,,,,,',
',,860,,,,,860,860,860,860,,860,860,860,860,,,,,860,860,,,,859,859,859',
'860,859,860,860,860,859,859,,,,859,,859,859,859,859,859,859,859,,,,',
',859,859,859,859,859,859,859,,,859,,,,,,,859,,,859,859,859,859,859,859',
'859,859,859,859,859,859,,859,859,859,859,859,,,,,,,,,,,,,,,,,,,,859',
',,859,,,859,859,,,859,,,,859,,859,,,859,,,,,,859,,,,,859,859,859,859',
',859,859,859,859,,,,,859,859,,,,228,228,228,859,228,859,859,859,228',
'228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228',
'228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228,228,',
'228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,',
',,228,,,,,,,,,228,,,,,228,228,228,228,,228,228,228,228,,,,,228,228,',
',,231,231,231,228,231,228,228,228,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231',
'231,231,231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,',
',,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,,231,,,,,231,231,231',
'231,,231,231,231,231,,,,,231,231,,,,232,232,232,231,232,231,231,231',
'232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232',
'232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232',
',232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,',
',,,232,,,,,,,,,232,,,,,232,232,232,232,,232,232,232,232,,,,,232,232',
',,,233,233,233,232,233,232,232,232,233,233,,,,233,,233,233,233,233,233',
'233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233',
'233,233,233,233,233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,',
',,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233',
'233,,233,233,233,233,,,,,233,233,,,,234,234,234,233,234,233,233,233',
'234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234',
'234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234',
',234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,',
',,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234,,,,,234,234',
',,,235,235,235,234,235,234,234,234,235,235,,,,235,,235,235,235,235,235',
'235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235',
'235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,',
',,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235',
'235,,235,235,235,235,,,,,235,235,,,,236,236,236,235,236,235,235,235',
'236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236',
'236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236',
',236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236',
',,,237,237,237,236,237,236,236,236,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,',
',,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237',
'237,,237,237,237,237,,,,,237,237,,,,238,238,238,237,238,237,237,237',
'238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238',
',,,239,239,239,238,239,238,238,238,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,',
',,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239',
'239,,239,239,239,239,,,,,239,239,,,,240,240,240,239,240,239,239,239',
'240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240',
'240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240',
',240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240',
',,,241,241,241,240,241,240,240,240,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,',
',,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241',
'241,,241,241,241,241,,,,,241,241,,,,242,242,242,241,242,241,241,241',
'242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242',
'242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242',
',242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,',
',,,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242',
',,,243,243,243,242,243,242,242,242,243,243,,,,243,,243,243,243,243,243',
'243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243',
'243,243,243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,',
',,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243',
'243,,243,243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243',
'244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244',
'244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244',
',244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,',
',,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244',
',,,245,245,245,244,245,244,244,244,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,',
',,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245',
'245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245,245,245',
'246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246',
',246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',,,247,247,247,246,247,246,246,246,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,',
',,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247',
'247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247,247,247',
'248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248',
'248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248',
',248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248',
',,,249,249,249,248,249,248,248,248,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,',
',,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249',
'249,,249,249,249,249,,,,,249,249,,,,250,250,250,249,250,249,249,249',
'250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250',
'250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250',
',250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',,,251,251,251,250,251,250,250,250,251,251,,,,251,,251,251,251,251,251',
'251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251',
'251,251,251,251,251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,',
',,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251',
'251,,251,251,251,251,,,,,251,251,,,,252,252,252,251,252,251,251,251',
'252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252',
'252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252',
',252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252',
',,,253,253,253,252,253,252,252,252,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,',
',,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253',
'253,,253,253,253,253,,,,,253,253,,,,254,254,254,253,254,253,253,253',
'254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254',
'254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254',
',254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254',
',,,255,255,255,254,255,254,254,254,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,',
',,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255',
'255,,255,255,255,255,,,,,255,255,,,,256,256,256,255,256,255,255,255',
'256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256',
'256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256',
',256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,',
',,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256',
',,,263,263,263,256,263,256,256,256,263,263,,,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,263,263,263,263,,263,263,263,263,263,,,,,,,,,,,',
',,,,,,,,263,,,263,,,263,263,,,263,,263,,263,,263,,,263,,,,,,263,,,,',
'263,263,263,263,,263,263,263,263,,,,,263,263,,,,264,264,264,263,264',
'263,263,263,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264',
'264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264',
'264,264,264,264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,',
'264,264,,,264,,264,,264,,264,,,264,,,,,,264,,,,,264,264,264,264,,264',
'264,264,264,,,,,264,264,,,,272,272,272,264,272,264,264,264,272,272,',
',,272,,272,272,272,272,272,272,272,,,,,,272,272,272,272,272,272,272',
',,272,,,,,,,272,,,272,272,272,272,272,272,272,272,272,272,272,272,,272',
'272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,272,,272',
',272,,,272,,,,,,272,,,,,272,272,272,272,,272,272,272,272,,,,,272,272',
'272,,,842,842,842,272,842,272,272,272,842,842,,,,842,,842,842,842,842',
'842,842,842,,,,,,842,842,842,842,842,842,842,,,842,,,,,,,842,,,842,842',
'842,842,842,842,842,842,,842,842,842,,842,842,842,842,842,,,,,,,,,,',
',,,,,,,,,842,,,842,,,842,842,,,842,,842,,,,842,,,,,,,,,842,,,,,842,842',
'842,842,,842,842,842,842,,,,,842,842,,,,279,279,279,842,279,842,842',
'842,279,279,,,,279,,279,279,279,279,279,279,279,,,,,,279,279,279,279',
'279,279,279,,,279,,,,,,,279,,,279,279,279,279,279,279,279,279,,279,279',
'279,,279,279,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,,,279,279,,,279',
',,,,,279,,,,,,,,,279,,,,,279,279,279,279,,279,279,279,279,,,,,279,279',
',,,281,281,281,279,281,279,279,279,281,281,,,,281,,281,281,281,281,281',
'281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281',
'281,281,281,281,281,,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,',
',,,,,281,,,281,,,281,281,,,281,,,,,,281,,,,,,,,,281,,,,,281,281,281',
'281,,281,281,281,281,,,,,281,281,,,,284,284,284,281,284,281,281,281',
'284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284,284,284',
'284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284,284,284',
',284,284,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,,284,,',
',,,284,,,,,,,,,284,,,,,284,284,284,284,,284,284,284,284,,,,,284,284',
',,,285,285,285,284,285,284,284,284,285,285,,,,285,,285,285,285,285,285',
'285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285',
'285,285,285,285,285,,285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,',
',,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285',
'285,,285,285,285,285,,,,,285,285,,,,,,,285,,285,285,285,290,290,290',
'290,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290',
'290,290,290,290,290,,,290,,,,,,290,290,,290,290,290,290,290,290,290',
'290,290,,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290',
',,290,290,,,290,,290,,,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290',
'290,290,,,,,290,290,,,,837,837,837,290,837,290,290,290,837,837,,,,837',
',837,837,837,837,837,837,837,,,,,,837,837,837,837,837,837,837,,,837',
',,,,,,837,,,837,837,837,837,837,837,837,837,,837,837,837,,837,837,837',
'837,837,,,,,,,,,,,,,,,,,,,,837,,,837,,,837,837,,,837,,,,,,837,,,,,,',
',,837,,,,,837,837,837,837,,837,837,837,837,,,,,837,837,,,,787,787,787',
'837,787,837,837,837,787,787,,,,787,,787,787,787,787,787,787,787,,,,',
',787,787,787,787,787,787,787,,,787,,,,,,,787,,,787,787,787,787,787,787',
'787,787,,787,787,787,,787,787,,,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787',
'787,,,787,,,,,,,,,,,,,,,,,,,,787,787,787,787,,787,787,787,787,,,,,787',
'787,,,,775,775,775,787,775,787,787,787,775,775,,,,775,,775,775,775,775',
'775,775,775,,,,,,775,775,775,775,775,775,775,,,775,,,,,,,775,,,775,775',
'775,775,775,775,775,775,,775,775,775,,775,775,775,775,775,,,,,,,,,,',
',,,,,,,,,775,,,775,,,775,775,,,775,,,,,,775,,,,,,,,,775,,,,,775,775',
'775,775,,775,775,775,775,,,,,775,775,,,,298,298,298,775,298,775,775',
'775,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298,298',
'298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298,298,,298,298',
'298,,298,298,,,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,895',
',895,895,895,895,895,,,,,,,,,895,,298,298,298,298,,298,298,298,298,',
',,,298,298,,,,298,,895,298,,298,298,298,773,773,773,,773,895,895,,773',
'773,895,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773',
'773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773,773,773',
',773,773,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,',
',,,773,,,,,,,,,773,,,,,773,773,773,773,,773,773,773,773,,,,,773,773',
',,,772,772,772,773,772,773,773,773,772,772,,,,772,,772,772,772,772,772',
'772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772',
'772,772,772,772,772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,',
',,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772',
'772,,772,772,772,772,,,,,772,772,,,,771,771,771,772,771,772,772,772',
'771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771',
'771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771',
',771,771,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,',
',,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771,771,,,,,771,771',
',,,770,770,770,771,770,771,771,771,770,770,,,,770,,770,770,770,770,770',
'770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770',
'770,770,770,770,770,,770,770,770,,770,770,770,770,770,,,,,,,,,,,,,,',
',,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770',
'770,,770,770,770,770,,,,,770,770,,,,315,315,315,770,315,770,770,770',
'315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315',
'315,315,,,315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315,315,315',
',315,315,,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,,,,,,',
',,,,,,,,,,,315,315,315,315,,315,315,315,315,,,,,315,315,,,,756,756,756',
'315,756,315,315,315,756,756,,,,756,,756,756,756,756,756,756,756,,,,',
',756,756,756,756,756,756,756,,,756,,,,,,,756,,,756,756,756,756,756,756',
'756,756,,756,756,756,,756,756,756,756,756,,,,,,,,,,,,,,,,,,,,756,,,756',
',,756,756,,,756,,,,,,756,,,,,,,,,756,,,,,756,756,756,756,,756,756,756',
'756,,,,,756,756,,,,323,323,323,756,323,756,756,756,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,',
',323,,,323,323,323,323,323,323,323,323,,323,323,323,,323,323,323,323',
'323,,,,,,,,,,,,,,,,,,,,323,,,323,323,,323,323,,,323,,,,,,323,,,,,,,',
',323,,,,,323,323,323,323,,323,323,323,323,,,,,323,323,,,,325,325,325',
'323,325,323,323,323,325,325,,,,325,,325,325,325,325,325,325,325,,,,',
',325,325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325',
'325,325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325',
',,325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325',
'325,,,,,325,325,,,,754,754,754,325,754,325,325,325,754,754,,,,754,,754',
'754,754,754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,',
',754,,,754,754,754,754,754,754,754,754,,754,754,754,,754,754,754,754',
'754,,,,,,,,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,,,,,754,,,,,,,,,754',
',,,,754,754,754,754,,754,754,754,754,,,,,754,754,,,,731,731,731,754',
'731,754,754,754,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731',
'731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731',
'731,,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,',
',731,731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731,731,,731,731,731',
'731,,,,,731,731,,,,725,725,725,731,725,731,731,731,725,725,,,,725,,725',
'725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,',
',725,,,725,725,725,725,725,725,725,725,,725,725,725,,725,725,725,725',
'725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,,,,725',
',,,,725,725,725,725,,725,725,725,725,,,,,725,725,,,,340,340,340,725',
'340,725,725,725,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340',
'340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340,340',
'340,,340,340,340,,340,340,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,',
',340,340,,,340,,,,,,340,,,,,,,,,340,,,,,340,340,340,340,,340,340,340',
'340,,,,,340,340,,,,341,341,341,340,341,340,340,340,341,341,,,,341,,341',
'341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,',
',341,,,341,341,341,341,341,341,341,341,,341,341,341,,341,341,341,341',
'341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,,341',
',,,,341,341,341,341,,341,341,341,341,,,,,341,341,,,,699,699,699,341',
'699,341,341,341,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699',
'699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699,699',
'699,,699,699,699,,699,699,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,',
',699,699,,,699,,,,,,699,,,,,,,,,699,,,,,699,699,699,699,,699,699,699',
'699,,,,,699,699,,,,360,360,360,699,360,699,699,699,360,360,,,,360,,360',
'360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,',
',360,,,360,360,360,360,360,360,360,360,,360,360,360,,360,360,360,360',
'360,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,360,,,,,,,,,360',
',,,,360,360,360,360,,360,360,360,360,,,,,360,360,,,,682,682,682,360',
'682,360,360,360,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682',
'682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682',
'682,,682,682,682,,682,682,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,',
',682,682,,,682,,682,,,,682,,,,,,,,,682,,,,,682,682,682,682,,682,682',
'682,682,,,,,682,682,,,,677,677,677,682,677,682,682,682,677,677,,,,677',
',677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677',
',,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,,677,677,,',
'677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,',
'677,677,677,677,,677,677,677,677,,,,,677,677,,,,666,666,666,677,666',
'677,677,677,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666',
'666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666',
',666,666,666,,666,666,,,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,',
',666,,,,,,,,,,,,,,,,,,,,666,666,666,666,,666,666,666,666,,,,,666,666',
',,,662,662,662,666,662,666,666,666,662,662,,,,662,,662,662,662,662,662',
'662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662,662',
'662,662,662,662,662,,662,662,662,,662,662,662,662,662,,,,,,,,,,,,,,',
',,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,,662,,,,,662,662,662',
'662,,662,662,662,662,,,,,662,662,,,,659,659,659,662,659,662,662,662',
'659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659',
'659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659,659,,659,659,659',
',659,659,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,',
',,,659,,,,,,,,,659,,,,,659,659,659,659,,659,659,659,659,,,,,659,659',
',,,376,376,376,659,376,659,659,659,376,376,,,,376,,376,376,376,376,376',
'376,376,,,,,,376,376,376,376,376,376,376,,,376,,,,,,,376,,,376,376,376',
'376,376,376,376,376,,376,376,376,,376,376,376,376,376,,,,,,,,,,,,,,',
',,,,,376,,,376,,,376,376,,,376,,,,,,376,,,,,,,,,376,,,,,376,376,376',
'376,,376,376,376,376,,,,,376,376,,,,404,404,404,376,404,376,376,376',
'404,404,,,,404,,404,404,404,404,404,404,404,,,,,,404,404,404,404,404',
'404,404,,,404,,,,,,,404,,,404,404,404,404,404,404,404,404,,404,404,404',
',404,404,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,404,,,404,,',
',,,404,,,,,,,,,404,,,,,404,404,404,404,,404,404,404,404,,,,,404,404',
',,,442,442,442,404,442,404,404,404,442,442,,,,442,,442,442,442,442,442',
'442,442,,,,,,442,442,442,442,442,442,442,,,442,,,,,,,442,,,442,442,442',
'442,442,442,442,442,442,442,442,442,,442,442,442,442,442,,,,,,,,,,,',
',,,,,,,,442,,,442,,,442,442,,,442,,442,,442,,442,,,442,,,,,,442,,,,',
'442,442,442,442,,442,442,442,442,,,,,442,442,,,,444,444,444,442,444',
'442,442,442,444,444,,,,444,,444,444,444,444,444,444,444,,,,,,444,444',
'444,444,444,444,444,,,444,,,,,,,444,,,444,444,444,444,444,444,444,444',
',444,444,444,,444,444,444,444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444',
'444,,,444,,,,,,444,,,,,,,,,444,,,,,444,444,444,444,,444,444,444,444',
',,,,444,444,,,,445,445,445,444,445,444,444,444,445,445,,,,445,,445,445',
'445,445,445,445,445,,,,,,445,445,445,445,445,445,445,,,445,,,,,,,445',
',,445,445,445,445,445,445,445,445,,445,445,445,,445,445,445,445,445',
',,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,,,,,445,,,,,,,,,445,,',
',,445,445,445,445,,445,445,445,445,,,,,445,445,,,,446,446,446,445,446',
'445,445,445,446,446,,,,446,,446,446,446,446,446,446,446,,,,,,446,446',
'446,446,446,446,446,,,446,,,,,,,446,,,446,446,446,446,446,446,446,446',
',446,446,446,,446,446,446,446,446,,,,,,,,,,,,,,,,,,,,446,,,446,,,446',
'446,,,446,,,,,,446,,,,,,,,,446,,,,,446,446,446,446,,446,446,446,446',
',,,,446,446,,,,635,635,635,446,635,446,446,446,635,635,,,,635,,635,635',
'635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635',
',,635,635,635,635,635,635,635,635,,635,635,635,,635,635,635,635,635',
',,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635,,',
',,635,635,635,635,,635,635,635,635,,,,,635,635,,,,634,634,634,635,634',
'635,635,635,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634',
'634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634',
',634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634',
'634,,,634,,,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634,634,634',
',,,,634,634,,,,631,631,631,634,631,634,634,634,631,631,,,,631,,631,631',
'631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631',
',,631,631,631,631,631,631,631,631,,631,631,631,,631,631,631,631,631',
',,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,,,,,631,,,,,,,,,631,,',
',,631,631,631,631,,631,631,631,631,,,,,631,631,,,,630,630,630,631,630',
'631,631,631,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630',
'630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630',
',630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630',
'630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630,630',
',,,,630,630,,,,626,626,626,630,626,630,630,630,626,626,,,,626,,626,626',
'626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626',
',,626,626,626,626,626,626,626,626,,626,626,626,,626,626,626,626,626',
',,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626,,',
',,626,626,626,626,,626,626,626,626,,,,,626,626,,,,625,625,625,626,625',
'626,626,626,625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625',
'625,625,625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625',
',625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625',
'625,,,625,,,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625,625',
',,,,625,625,,,,624,624,624,625,624,625,625,625,624,624,,,,624,,624,624',
'624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624',
',,624,624,624,624,624,624,624,624,624,624,624,624,,624,624,624,624,624',
',,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,624,,624,,,624,,,,,',
'624,,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,623,623,623',
'624,623,624,624,624,623,623,,,,623,,623,623,623,623,623,623,623,,,,',
',623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623,623',
'623,623,623,623,623,623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,,,623',
',,623,,,623,623,,,623,,623,,623,,623,,,623,,,,,,623,,,,,623,623,623',
'623,,623,623,623,623,,,,,623,623,,,,620,620,620,623,620,623,623,623',
'620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620,620,620,620',
'620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620,,620,620,620',
',620,620,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620,620,,,620,,',
',,,620,,,,,,,,,620,,,,,620,620,620,620,,620,620,620,620,,,,,620,620',
',,,619,619,619,620,619,620,620,620,619,619,,,,619,,619,619,619,619,619',
'619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,,,619,,,619,619,619',
'619,619,619,619,619,,619,619,619,,619,619,619,619,619,,,,,,,,,,,,,,',
',,,,,619,,,619,,,619,619,,,619,,619,,,,619,,,,,,,,,619,,,,,619,619,619',
'619,,619,619,619,619,,,,,619,619,,,,585,585,585,619,585,619,619,619',
'585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585,585,585,585',
'585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585,585,585,585',
'585,,585,585,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585,585,,,585',
',585,,585,,585,,,585,,,,,,585,,,,,585,585,585,585,,585,585,585,585,',
',,,585,585,,,,575,575,575,585,575,585,585,585,575,575,,,,575,,575,575',
'575,575,575,575,575,,,,,,575,575,575,575,575,575,575,,,575,,,,,,,575',
',,575,575,575,575,575,575,575,575,575,575,575,575,,575,575,575,575,575',
',,,,,,,,,,,,,,,,,,,575,,,575,,,575,575,,,575,,575,,575,,575,,,575,,',
',,,575,,,,,575,575,575,575,,575,575,575,575,,,,,575,575,,,,574,574,574',
'575,574,575,575,575,574,574,,,,574,,574,574,574,574,574,574,574,,,,',
',574,574,574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574',
'574,574,,574,574,574,,574,574,574,574,574,,,,,,,,,,,,,,,,,,,,574,,,574',
',,574,574,,,574,,574,,,,574,,,,,,,,,574,,,,,574,574,574,574,,574,574',
'574,574,,,,,574,574,,,,554,554,554,574,554,574,574,574,554,554,,,,554',
',554,554,554,554,554,554,554,,,,,,554,554,554,554,554,554,554,,,554',
',,,,,,554,,,554,554,554,554,554,554,554,554,,554,554,554,,554,554,554',
'554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,,,,,,554,,,,,,',
',,554,,,,,554,554,554,554,,554,554,554,554,,,,,554,554,,,,486,486,486',
'554,486,554,554,554,486,486,,,,486,,486,486,486,486,486,486,486,,,,',
',486,486,486,486,486,486,486,,,486,,,,,,,486,,,486,486,486,486,486,486',
'486,486,486,486,486,486,,486,486,486,486,486,,,,,,,,,,,,,,,,,,,,486',
',,486,,,486,486,,,486,,486,,486,,486,,,486,,,,,,486,,,,,486,486,486',
'486,,486,486,486,486,,,,,486,486,,,,488,488,488,486,488,486,486,486',
'488,488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488,488',
'488,488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488,488',
'488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488,,,488',
',,,488,,488,,,488,,,,,,488,,,,,488,488,488,488,,488,488,488,488,,,,',
'488,488,,,,490,490,490,488,490,488,488,488,490,490,,,,490,,490,490,490',
'490,490,490,490,,,,,,490,490,490,490,490,490,490,,,490,,,,,,,490,,,490',
'490,490,490,490,490,490,490,,490,490,490,,490,490,490,490,490,,,,,,',
',,,,,,,,,,,,,490,,,490,,,490,490,,,490,,,,,,490,,,,,,,,,490,,,,,490',
'490,490,490,,490,490,490,490,,,,,490,490,,,,,,,490,,490,490,490,496',
'496,496,496,496,,,,496,496,,,,496,,496,496,496,496,496,496,496,,,,,',
'496,496,496,496,496,496,496,,,496,,,,,,496,496,496,496,496,496,496,496',
'496,496,496,496,,496,496,496,,496,496,496,496,496,,,,,,,,,,,,,,,,,,',
',496,,,496,,,496,496,,,496,,496,,,,496,,,,,,,,,496,,,,,496,496,496,496',
',496,496,496,496,,,,,496,496,,,,,,496,496,,496,496,496,529,529,529,',
'529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529',
'529,,,529,,,,,,529,,,529,,,,,,529,,,,,529,529,529,529,,529,529,529,529',
',,,,529,529,,,,526,526,526,529,526,529,529,529,526,526,,,,526,,526,526',
'526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526',
',,526,526,526,526,526,526,526,526,526,526,526,526,,526,526,526,526,526',
',,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,526,,,,526,,,526,,,,,',
'526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526,,,,520,520,520',
'526,520,526,526,526,520,520,,,,520,,520,520,520,520,520,520,520,,,,',
',520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520,520',
'520,520,,520,520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520',
',,520,520,,,520,,,,,,520,,,,,,,,,520,,,,,520,520,520,520,,520,520,520',
'520,,,,,520,520,,,,504,504,504,520,504,520,520,520,504,504,,,,504,,504',
'504,504,504,504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,',
',504,,,504,504,504,504,504,504,504,504,,504,504,504,,504,504,,,504,',
',,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,,,,,,,,,,,,,,,504,504',
'504,504,,504,504,504,504,,,,,504,504,,,,506,506,506,504,506,504,504',
'504,506,506,,,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506',
'506,506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506,506,506',
'506,506,,506,506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506',
',,506,,506,,506,,506,,,506,,,,,,506,,,,,506,506,506,506,,506,506,506',
'506,,,,,506,506,,,,516,516,516,506,516,506,506,506,516,516,,,,516,,516',
'516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,',
',516,,,516,516,516,516,516,516,516,516,,516,516,516,,516,516,516,516',
'516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,,,,,516,,,,,,,,,516',
',,,,516,516,516,516,,516,516,516,516,,,,,516,516,,,,,424,,516,,516,516',
'516,424,424,424,,,424,424,424,,424,,,,,,,,,424,424,424,424,,,,,,,,424',
'424,,424,424,424,424,424,,,,,,,,,,,,,,,,,,,,,,,424,424,424,424,424,424',
'424,424,424,424,424,424,424,424,,,424,424,424,,,424,,,424,,,424,424',
',424,,424,,424,,424,424,,424,424,424,424,424,,424,424,424,,,,,,,,,,',
',,,424,,,424,424,424,424,56,424,,424,,,,56,56,56,,,56,56,56,,56,,,,',
',,,,,56,56,56,,,,,,,,56,56,,56,56,56,56,56,,,,,,,,,,,,,,,,,,,,,,,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56,56',
',56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56,56',
'56,425,56,,56,,,,425,425,425,,,425,425,425,,425,,,,,,,,,425,425,425',
'425,,,,,,,,425,425,,425,425,425,425,425,,,,,,,,,,,,,,,,,,,,,,,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,,,425,425,425,,,425',
',,425,,,425,425,,425,,425,,425,,425,425,,425,425,425,425,425,,425,425',
'425,897,,897,897,897,897,897,,,,,,,425,,897,425,425,425,425,28,425,',
'425,,,,28,28,28,,,28,28,28,,28,897,,,,,,,,,28,28,897,897,,,,897,,,28',
'28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28',
'28,28,28,28,,28,27,28,,,,,,27,27,27,,,27,27,27,28,27,,28,28,,28,,28',
',27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27',
'27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,',
'27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,,27,,474,27',
'27,,27,,27,474,474,474,,,474,474,474,646,474,646,646,646,646,646,,,',
'474,474,,,,646,,,,,,474,474,,474,474,474,474,474,,,,,,,,,646,,,,,,,',
',646,646,646,646,,,,646,,,,,,,,,474,,415,,,,,474,,415,415,415,474,474',
'415,415,415,646,415,,,,,,,,,415,415,415,,,,,,474,474,,415,415,,415,415',
'415,415,415,,,,,474,,,474,,,,,474,,,,,,,,,,415,415,415,415,415,415,415',
'415,415,415,415,415,415,415,,,415,415,415,,,415,,415,415,,,415,415,',
'415,,415,,415,,415,415,,415,415,415,415,415,,415,415,415,,,,,,,,,,,',
',,415,,,415,415,,415,,415,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8',
',8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8',
'8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,',
'9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9',
'9,9,,,9,9,,,,,,,,,,,,,,9,395,395,395,395,395,395,395,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,395,395,395,,,,395,395,395,395',
'395,395,395,395,395,395,,,,,,395,395,395,395,395,395,395,395,395,,,395',
',,,,,,,395,395,,395,395,395,395,395,395,395,,,395,395,,,,395,395,395',
'395,,,,,,,,,,,,,,395,395,,395,395,395,395,395,395,395,395,395,395,395',
'395,,,395,395,,,,,,,,,,,,,,395,616,616,616,616,616,616,616,616,616,616',
'616,616,616,616,616,616,616,616,616,616,616,616,616,616,,,,616,616,616',
'616,616,616,616,616,616,616,,,,,,616,616,616,616,616,616,616,616,616',
',,616,,,,,,,,616,616,,616,616,616,616,616,616,616,,,616,616,,,,616,616',
'616,616,,,,,,,,,,,,,,616,616,,616,616,616,616,616,616,616,616,616,616',
'616,616,,,616,616,,,,,,,,,,,,,,616,738,738,738,738,738,738,738,738,738',
'738,738,738,738,738,738,738,738,738,738,738,738,738,738,738,,,,738,738',
'738,738,738,738,738,738,738,738,,,,,,738,738,738,738,738,738,738,738',
'738,,,738,,,,,,,,738,738,,738,738,738,738,738,738,738,,,738,738,,,,738',
'738,738,738,,,,,,,,,,,,,,738,738,,738,738,738,738,738,738,738,738,738',
'738,738,738,,,738,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71',
'71,71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71',
'71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71',
'71,71,518,518,71,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,',
'518,518,,,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518',
'518,518,518,518,518,518,518,518,584,584,518,,584,,,,,,,,584,584,,584',
'584,584,584,584,584,584,,,584,584,,,,584,584,584,584,,,,,,584,,,,,,',
',584,584,,584,584,584,584,584,584,584,584,584,584,584,584,441,441,584',
',441,,,,,,,,441,441,,441,441,441,441,441,441,441,,,441,441,,,,441,441',
'441,441,,,,,,441,,,,,,,,441,441,,441,441,441,441,441,441,441,441,441',
'441,441,441,440,440,441,,440,,,,,,,,440,440,,440,440,440,440,440,440',
'440,,,440,440,,,,440,440,440,440,,,,,,440,,,,,,,,440,440,,440,440,440',
'440,440,440,440,440,440,440,440,440,210,210,440,,210,,,,,,,,210,210',
',210,210,210,210,210,210,210,,,210,210,,,,210,210,210,210,,,,,,210,',
',,,,,,210,210,,210,210,210,210,210,210,210,210,210,210,210,210,507,507',
'210,,507,,,,,,,,507,507,,507,507,507,507,507,507,507,,,507,507,,,,507',
'507,507,507,,,,,,507,,,,,,,,507,507,,507,507,507,507,507,507,507,507',
'507,507,507,507,259,259,507,,259,,,,,,,,259,259,,259,259,259,259,259',
'259,259,,,259,259,,,,259,259,259,259,,,,,,,,,,,,,,259,259,,259,259,259',
'259,259,259,259,259,259,259,259,259,985,985,259,,985,,,,,,,,985,985',
',985,985,985,985,985,985,985,,,985,985,,,,985,985,985,985,,,,,,985,',
',,,,,,985,985,,985,985,985,985,985,985,985,985,985,985,985,985,211,211',
'985,,211,,,,,,,,211,211,,211,211,211,211,211,211,211,,,211,211,,,,211',
'211,211,211,,,,,,211,,,,,,,,211,211,,211,211,211,211,211,211,211,211',
'211,211,211,211,984,984,211,,984,,,,,,,,984,984,,984,984,984,984,984',
'984,984,,,984,984,,,,984,984,984,984,,,,,,984,,,,,,,,984,984,,984,984',
'984,984,984,984,984,984,984,984,984,984,517,517,984,,517,,,,,,,,517',
'517,,517,517,517,517,517,517,517,,,517,517,,,,517,517,517,517,,,,,,517',
',,,,,,,517,517,,517,517,517,517,517,517,517,517,517,517,517,517,938',
'938,517,,938,,,,,,,,938,938,,938,938,938,938,938,938,938,,,938,938,',
',,938,938,938,938,,,,,,938,,,,,,,,938,938,,938,938,938,938,938,938,938',
'938,938,938,938,938,583,583,938,,583,,,,,,,,583,583,,583,583,583,583',
'583,583,583,,,583,583,,,,583,583,583,583,,,,,,583,,,,,,,,583,583,,583',
'583,583,583,583,583,583,583,583,583,583,583,577,577,583,,577,,,,,,,',
'577,577,,577,577,577,577,577,577,577,,,577,577,,,,577,577,577,577,,',
',,,577,,,,,,,,577,577,,577,577,577,577,577,577,577,577,577,577,577,577',
'576,576,577,,576,,,,,,,,576,576,,576,576,576,576,576,576,576,,,576,576',
',,,576,576,576,576,,,,,,576,,,,,,,,576,576,,576,576,576,576,576,576',
'576,576,576,576,576,576,508,508,576,,508,,,,,,,,508,508,,508,508,508',
'508,508,508,508,,,508,508,,,,508,508,508,508,,,,,,508,,,,,,,,508,508',
',508,508,508,508,508,508,508,508,508,508,508,508,,893,508,893,893,893',
'893,893,,,,,,,,336,893,336,336,336,336,336,,,,,,,,534,336,534,534,534',
'534,534,,,893,,,,,,534,,,893,893,893,893,,336,336,893,,,,,,,336,336',
'336,336,,534,,336,,,,,,,534,534,534,534,,,693,534,693,693,693,693,693',
',695,,695,695,695,695,695,693,,,,,,,,695,,736,,736,736,736,736,736,',
',,,,693,,,736,,,,,695,693,693,693,693,,,,693,695,695,695,695,,,,695',
'736,,737,,737,737,737,737,737,736,736,736,736,,,,736,737,,865,,865,865',
'865,865,865,,867,,867,867,867,867,867,865,,,,,737,,,867,,,,,,737,737',
'737,737,,,,737,865,,,,,,,,867,865,865,865,865,,,,865,867,867,867,867',
',,899,867,899,899,899,899,899,,969,,969,969,969,969,969,899,,,,,,,,969',
',971,,971,971,971,971,971,,,,,,899,,,971,,,,,969,,,899,899,,,,899,969',
'969,969,969,,,,969,971,,973,,973,973,973,973,973,,,971,971,,,,971,973',
',975,,975,975,975,975,975,989,,989,989,989,989,989,,975,,,,,973,,989',
',1015,,1015,1015,1015,1015,1015,973,973,,,,973,975,,1015,,,,,989,,,',
'975,975,,,,975,,989,989,,,,989,1015,,,,,,,,,,,1015,1015,,,,1015' ]
        racc_action_check = arr = ::Array.new(25138, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3684,   892,   nil,   -81,   nil,  5345,   729,   492, 23044, 23172,
   779,   nil,   739,   792,   613,   190,   696,   747,   nil,   -74,
  5607,  1724,   703,   nil,   439,   nil,   163, 22702, 22590,  5738,
  5869,  6000,   nil,  2564,  6131,  6262,   nil,   475,   385,   162,
   528,   273,  6401,  6532,  6663,   449,   747,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22322,   nil,   126,  6925,
  7056,    74,   nil,  7187,  7318,   nil,   nil,  7449,  7588,  7719,
  7850, 23669,   nil,   nil,   nil,   nil,   nil,   288,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   382,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   540,
   nil,  7989,   nil,   nil,   nil,   nil,  8128,  8259,  8390,  8521,
  8660,  2704,   nil,   727,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   329,   nil,  2984,  8922,  9053,  9184,
 23974, 24218,  5075,  9446,  9577,  9708,  9839,  9970,   nil,   nil,
  1167,   244,   176,   391,   -41,   294,   283,   nil, 10363,  2844,
   240, 10494, 10625, 10756, 10887, 11018, 11149, 11280, 11411, 11542,
 11673, 11804, 11935, 12066, 12197, 12328, 12459, 12590, 12721, 12852,
 12983, 13114, 13245, 13376, 13507, 13638, 13769,   nil,   nil, 24096,
   nil,   nil,   223, 13900, 14031,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 14162,   nil,  2004,   nil,   166,   157,   nil, 14424,
   183, 14555,   nil,   nil, 14686, 14817,   nil,   nil,   517,   nil,
 14956,  1289,  1272,  1222,  3824,  1190,  1227,  1161, 15480,  3264,
  1027,   956,   926,  1236,   786,   nil,  1201,  1159,   171,   nil,
   nil,   nil,  1199,   197,  1150, 16143,   nil,   287,  1212,  1096,
   nil,  1210,   nil, 16405,  3124, 16536,  1138,   nil,   198,   377,
  1156,  1111,   534,  1119,   nil,   nil, 24721,   584,    -1,   -10,
 17060, 17191,   502,  1184,  1057,    34,    -5,   816,  1135,    22,
  1152,   nil,   nil,   212,   351,   176,   nil,   659,   nil,    16,
 17453,   nil,   nil,   nil,   549,   529,   472,   471,   214,   419,
   350,   316,   283,   nil,   233,   nil, 18239,   nil,   462,   421,
   201,   413,   417,   -16,    -8,   426,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1005, 23300,   nil,   nil,   nil,   nil,
  1001,   nil,   nil,   977, 18370,   951,   nil,   nil,  1024,   950,
   nil,   932,   930,   -80,   439, 22910,   nil,   nil,   nil,   492,
   272,   972,   nil,   nil, 22188, 22456,   nil,  1864,   nil,   918,
   nil,   nil,   744,   nil,   nil,   nil,   nil,    27,   nil,   962,
 23913, 23852, 18501,   221, 18632, 18763, 18894,  3684,  3264,   335,
   218,   982,   972,   971,   970,  5345,  5206,  5476,  4384,  4524,
  3964,  3824,  4804,  3404,  3544,  4944,  5075,  4104,  3124,  3094,
  4664,  4244,  2144,   -54, 22831,   nil,   nil,   nil,   nil,   879,
   nil,   108,   279,   858,   nil,   nil, 20859,   nil, 20990,   nil,
 21121,   nil,   306,   nil,   nil,   nil, 21260,  1429,  3964,   810,
   777,   nil,   nil,   775, 21792,   768, 21923, 24035, 24645,   884,
   808,   nil,  9315,   763,   nil,  5206, 22054, 24340, 23730,  1164,
 21661,   904,   903,   599,   833,   nil, 21530,   nil,   nil, 21399,
   nil,   nil,   nil,   nil, 24735,   nil,   832,   837,   nil,   840,
   841,   850,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   836,   606,   nil,   nil, 20728,   nil,   nil,   nil,   945,   nil,
   nil,   nil,   946,   nil,   nil,   947,   884,   996,   nil,  2284,
    59,    24,   995,  1005, 20597, 20466, 24584, 24523,   -19,   nil,
   nil,   427,   nil, 24462, 23791, 20335,   nil,   nil,   nil,   461,
   147,  2424,   927,   nil,    55,   nil,   nil,   nil,   867,   nil,
   nil,   nil,   898,   nil,   nil,   140,   nil,   168,   nil,   nil,
   884,   nil,   887,   nil,   nil,   nil, 23428,   nil,   898, 20204,
 20073,   411,   938, 19942, 19811, 19680, 19549,   954,   nil,   nil,
 19418, 19287,   955,   nil, 19156, 19025,   nil,   nil,   -25,   164,
     0,   602,   934,   884,   934,   nil, 22795,   nil,  1024,  1078,
    79,   283,   nil,  1164,  1304,   nil,   990,   nil,  1041, 18108,
   nil,   nil, 17977,   nil,  1023,  -109, 17846,  1004,   nil,  1008,
    91,    57,  1059,   390,  1164,  1060,  1018, 17715,  1304,  1088,
   -14,  1142, 17584,   nil,  1027,   nil,   424,    61,  1028,   551,
   nil,   nil,   641, 24787,   nil, 24795,   nil,  6309,   nil, 17322,
   nil,  3110,   nil,  1039,   200,  1047,   nil,   nil,   nil,   nil,
   843,   nil,  1164,   nil,   nil,   nil,   nil,  1179,   nil,   -11,
  1061,     5,    35,     8,     6, 16929,   275,  1024,   nil,  1090,
  1444, 16798,   nil,   nil,  1236,  1584, 24812, 24851, 23556,   nil,
   nil,   nil,   nil,   nil,   nil,  4244,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1130, 16667,  2984, 16274,   nil,  1144,   nil,
  2844,   nil,  2704,   nil,   nil,  2564,   nil,  2424,   nil,  2284,
 16012, 15881, 15750, 15619,   -82, 15349,  1163,  1164,   nil,  1165,
  1166,  1168,   nil,  1202,  1182,  1178,  1174, 15218,   nil,   nil,
  1309,   nil,   nil,  3404,  1227,  1337,   nil,   nil,   nil,   nil,
  1227,   210,   nil,   nil,  1373,   nil,  4524,  1252,  1301,   nil,
   nil,  1300,   nil,   nil,   nil,   nil,  1301,  1260,   nil,   nil,
   nil,  -123,   -99,   nil,   -76,   -68,   nil,    47,   nil,   nil,
    71,   663,    92,   668,   nil,   231,   nil, 15087,   237,   744,
  1724,   nil, 14293,  1864,     7,    62,   nil,   352,   552,  3544,
   nil,   362,   267,   623,   nil,   284,   284,   nil,  1444, 10232,
 10101,  1584,   627,   nil,   nil, 24868,   nil, 24876,   nil,  7897,
   nil,   nil,   417,  1290,  8791,   887,   475,   nil,   423,   nil,
   nil,   nil,  2004,   nil,   nil,    39,  6794,   nil,   nil,  4384,
  2144,   nil,   nil, 24707,   nil, 15527,   nil, 22519,   nil, 24928,
   nil,   nil,   nil,   nil,   388,  3344,   479,   nil,    26,   nil,
   639,   645,   nil,   179,   nil,   nil,   nil,   649,   nil,   nil,
   nil,   577,   nil,   558,   nil,   nil,   566,   568,   579,   591,
   nil,   595,   nil,  -112,   nil,   nil,   nil,   496, 24401,   nil,
   nil,   nil,  4944,   500,   547,   569,   683,   572,   nil,   629,
   748,   648,   667,   671,   692,   697,  3484,   701,  3204,  4804,
   nil,   nil,   nil,   nil,   nil,  4664,   nil,  4104,   nil, 24936,
   nil, 24953,   nil, 24992,   nil, 25009,   nil,   nil,   nil,  1150,
   782,   785,   869,  5476, 24279, 24157,  1066,   nil,   nil, 25016,
   nil,   nil,   nil,   nil,  3390,   811,   855,  1152,  1162,  1121,
  1125,   337,   361,   nil,   nil,   368,    36,    35,    -9,   744,
   710,   715,   nil,   nil,   nil, 25033,   nil,   nil,   nil,   nil,
    23,   nil,   725,   nil ]

racc_action_default = [
    -3,  -597,    -1,  -583,    -4,  -597,    -7,  -597,  -597,  -597,
  -597,   -29,  -597,  -597,  -597,  -279,  -597,   -40,   -43,  -585,
  -597,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -328,  -329,   -68,   -11,   -72,   -80,   -82,  -597,  -488,  -489,
  -597,  -597,  -597,  -597,  -597,  -585,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -573,  -281,  -283,  -596,
  -563,  -301,  -389,  -597,  -597,  -306,  -309,  -583,  -597,  -597,
  -597,  -597,  -330,  -331,  -429,  -430,  -431,  -432,  -433,  -454,
  -436,  -437,  -456,  -458,  -441,  -446,  -450,  -452,  -468,  -456,
  -470,  -472,  -473,  -474,  -475,  -571,  -477,  -478,  -572,  -480,
  -481,  -482,  -483,  -484,  -485,  -486,  -487,  -492,  -493,  -597,
    -2,  -584,  -592,  -593,  -594,    -6,  -597,  -597,  -597,  -597,
  -597,    -3,   -17,  -597,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -597,  -597,  -246,
  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -585,  -586,   -47,
  -597,  -488,  -489,  -597,  -279,  -597,  -597,  -229,  -597,   -11,
  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -398,  -400,  -597,
  -581,  -582,   -57,  -246,  -597,  -300,  -404,  -413,  -415,   -63,
  -410,   -64,  -585,   -65,  -238,  -251,  -260,  -260,  -255,  -597,
  -261,  -597,  -454,  -565,  -597,  -597,   -66,   -67,  -583,   -12,
  -597,   -15,  -597,   -70,   -11,  -585,  -597,   -73,   -76,   -11,
   -88,   -89,  -597,  -597,   -96,  -293,  -296,  -585,  -597,  -328,
  -329,  -332,  -411,  -597,   -78,  -597,   -84,  -290,  -471,  -597,
  -214,  -215,  -230,  -597,   -11,  -597,  -585,  -239,  -589,  -589,
  -597,  -597,  -589,  -597,  -302,  -303,  -521,   -49,  -597,  -597,
  -597,  -597,  -583,  -597,  -584,  -488,  -489,  -597,  -597,  -279,
  -597,  -342,  -343,  -106,  -107,  -597,  -109,  -597,  -279,  -597,
  -597,  -488,  -489,  -321,  -111,  -112,  -153,  -154,  -155,  -171,
  -176,  -183,  -186,  -323,  -597,  -561,  -597,  -434,  -597,  -597,
  -597,  -597,  -597,  -597,  -597,  -597,  1024,    -5,  -595,   -23,
   -24,   -25,   -26,   -27,  -597,  -597,   -19,   -20,   -21,  -121,
  -597,   -30,   -39,  -266,  -597,  -597,  -265,   -31,  -196,  -585,
  -247,  -260,  -260,  -574,  -575,  -256,  -408,  -576,  -577,  -575,
  -574,  -256,  -407,  -409,  -576,  -577,   -37,  -204,   -38,  -597,
   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -585,  -299,  -597,
  -597,  -597,  -246,  -290,  -597,  -597,  -597,  -205,  -206,  -207,
  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,  -219,  -220,
  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -231,  -232,
  -233,  -234,  -585,  -378,  -256,  -574,  -575,   -54,   -58,  -585,
  -257,  -378,  -378,  -585,  -295,  -252,  -597,  -253,  -597,  -258,
  -597,  -262,  -597,  -568,  -570,   -10,  -584,   -14,    -3,  -585,
   -69,  -288,   -85,   -74,  -597,  -585,  -246,  -597,  -597,   -95,
  -597,  -471,  -597,   -81,   -86,  -597,  -597,  -597,  -597,  -235,
  -597,  -421,  -597,  -284,  -597,  -240,  -591,  -590,  -242,  -591,
  -291,  -292,  -564,  -390,  -521,  -393,  -560,  -560,  -504,  -506,
  -506,  -506,  -520,  -522,  -523,  -524,  -525,  -526,  -527,  -528,
  -529,  -597,  -531,  -533,  -535,  -540,  -542,  -543,  -545,  -550,
  -552,  -553,  -555,  -556,  -557,  -597,   -11,  -333,  -334,   -11,
  -597,  -597,  -597,  -597,  -597,  -246,  -597,  -597,  -290,  -314,
  -106,  -107,  -108,  -597,  -597,  -246,  -317,  -494,  -495,  -597,
  -597,   -11,  -499,  -325,  -585,  -435,  -455,  -460,  -597,  -462,
  -438,  -457,  -597,  -459,  -440,  -597,  -443,  -597,  -445,  -448,
  -597,  -449,  -597,  -469,    -8,   -18,  -597,   -28,  -269,  -597,
  -597,  -412,  -597,  -248,  -250,  -597,  -597,   -59,  -245,  -405,
  -597,  -597,   -61,  -406,  -597,  -597,  -298,  -587,  -574,  -575,
  -574,  -575,  -585,  -194,  -597,  -379,  -585,  -381,   -11,   -53,
  -401,  -378,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -597,
  -566,  -567,  -597,   -13,  -597,   -71,  -597,   -77,   -83,  -585,
  -574,  -575,  -244,   -92,   -94,  -597,   -79,  -597,  -203,  -213,
  -585,  -596,  -596,  -282,  -585,  -287,  -589,  -597,  -585,  -597,
  -502,  -503,  -597,  -597,  -513,  -597,  -516,  -597,  -518,  -597,
  -344,  -597,  -346,  -348,  -355,  -585,  -534,  -544,  -554,  -558,
  -596,  -335,  -596,  -307,  -336,  -337,  -310,  -597,  -313,  -597,
  -585,  -574,  -575,  -578,  -289,  -597,  -106,  -107,  -110,  -585,
   -11,  -597,  -497,  -319,  -597,   -11,  -521,  -521,  -597,  -562,
  -461,  -464,  -465,  -466,  -467,   -11,  -439,  -442,  -444,  -447,
  -451,  -453,  -122,  -267,  -597,  -197,  -597,  -588,  -260,   -33,
  -199,   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,
  -597,  -597,  -597,  -597,  -412,  -597,  -560,  -560,  -360,  -362,
  -362,  -362,  -377,  -597,  -585,  -383,  -529,  -537,  -538,  -548,
  -597,  -403,  -402,   -11,  -597,  -597,  -254,  -264,  -569,   -16,
   -75,   -90,   -87,  -297,  -596,  -340,   -11,  -422,  -596,  -423,
  -424,  -597,  -241,  -391,  -394,  -396,  -597,  -560,  -541,  -559,
  -505,  -506,  -506,  -532,  -506,  -506,  -551,  -506,  -529,  -546,
  -585,  -597,  -353,  -597,  -530,  -597,  -338,  -597,  -597,   -11,
   -11,  -312,  -597,   -11,  -412,  -597,  -412,  -597,  -597,   -11,
  -322,  -597,  -585,  -597,  -326,  -597,  -268,   -32,  -198,  -249,
  -597,  -236,  -597,  -358,  -359,  -368,  -370,  -597,  -373,  -597,
  -375,  -380,  -597,  -597,  -597,  -536,  -597,  -399,  -597,  -414,
  -416,    -9,   -11,  -428,  -341,  -597,  -597,  -426,  -285,   -11,
   -11,  -392,  -501,  -597,  -509,  -597,  -511,  -597,  -514,  -597,
  -517,  -519,  -345,  -347,  -351,  -597,  -356,  -304,  -597,  -305,
  -597,  -597,  -263,  -596,  -315,  -318,  -496,  -597,  -324,  -498,
  -500,  -499,  -463,  -560,  -539,  -361,  -362,  -362,  -362,  -362,
  -549,  -362,  -382,  -585,  -385,  -387,  -388,  -547,  -597,  -290,
   -55,  -427,   -11,   -97,   -98,  -597,  -597,  -105,  -425,  -597,
  -597,  -506,  -506,  -506,  -506,  -349,  -597,  -354,  -597,   -11,
  -308,  -311,  -417,  -418,  -419,   -11,  -320,   -11,  -357,  -597,
  -365,  -597,  -367,  -597,  -371,  -597,  -374,  -376,  -384,  -597,
  -289,  -578,  -421,  -246,  -597,  -597,  -104,  -395,  -397,  -597,
  -507,  -510,  -512,  -515,  -597,  -352,  -596,  -597,  -597,  -362,
  -362,  -362,  -362,  -386,  -420,  -585,  -574,  -575,  -578,  -103,
  -506,  -350,  -339,  -316,  -327,  -597,  -363,  -366,  -369,  -372,
  -412,  -508,  -362,  -364 ]

clist = [
'216,327,132,132,26,258,573,373,431,26,275,275,275,522,122,205,409,415',
'421,334,130,130,735,621,26,2,323,681,660,127,127,566,569,26,26,26,487',
'26,478,542,406,835,6,259,337,337,428,6,337,277,277,277,297,823,535,111',
'266,270,276,276,276,262,269,271,318,110,474,26,26,660,479,26,713,716',
'114,311,311,219,780,329,332,582,513,525,528,314,804,532,328,338,339',
'826,127,342,295,903,378,337,337,337,337,657,934,657,648,906,438,705',
'936,311,311,311,653,654,881,26,591,838,115,592,26,26,26,26,26,26,273',
'286,287,343,605,607,930,690,691,738,293,783,114,921,379,730,389,390',
'391,392,394,385,965,694,696,698,725,6,359,363,840,782,781,341,839,484',
'393,6,660,340,326,784,684,325,324,487,601,603,606,606,374,957,601,816',
'933,586,350,533,500,813,336,687,335,331,275,889,890,473,481,434,435',
'436,437,482,962,808,885,377,375,822,650,824,1003,380,26,26,26,26,936',
'381,26,26,26,26,26,26,903,333,387,823,1,330,995,382,383,384,425,26,930',
'717,405,542,657,657,416,740,405,745,275,275,731,415,421,642,616,651',
'688,275,821,395,774,830,402,823,352,818,924,204,401,407,1011,26,26,426',
'430,667,663,849,,872,26,,,676,734,,793,801,277,,,,510,826,,,277,276',
'26,,,926,26,492,,276,,26,,,523,524,,728,,,,669,672,,,,963,,,337,337',
',672,,636,1012,26,26,,,497,514,844,823,511,,266,311,496,590,270,846',
'26,26,,914,503,,495,967,,,,499,311,594,,114,505,480,,,26,,570,571,652',
'483,403,,655,863,864,,433,927,,928,26,,720,672,,,,,665,132,622,672,729',
'593,668,,,293,748,660,748,615,293,763,572,951,,130,768,,,,843,114,892',
'796,127,,,847,,,,275,851,,,,,431,587,894,896,800,898,900,,901,,542,542',
'812,489,,491,628,26,493,494,,627,633,,644,852,853,632,,,,,,425,,14,',
',,,14,416,,,,657,,,,,,,999,,739,220,,,275,1004,,,,,220,220,220,,14,302',
'302,26,680,26,,628,,656,,,649,26,,,,,809,,796,,,968,,514,664,26,,,220',
'220,425,514,220,347,357,357,,,416,917,425,6,,,,,311,686,416,,,,,,311',
',,275,,,,,990,991,992,993,,275,618,,803,26,,,26,,14,964,,942,26,220',
'220,220,220,14,14,,,,26,,,,,834,26,,550,425,,,959,,719,425,,416,,792',
',132,,,,416,,,,,1020,1021,,752,622,810,,,785,130,26,26,,791,,26,26,',
'127,26,,,714,714,758,,,,,,658,622,333,26,661,,,998,26,26,,732,733,700',
',,811,,,,785,14,220,220,220,854,,220,220,220,220,220,220,759,761,514',
',,764,766,658,,430,333,14,,802,,,,,,622,628,,,633,337,311,,778,622,405',
'337,,,,,706,311,902,,,,,,,,220,220,26,,,,,26,26,220,433,,26,,919,,,',
',883,,,26,887,845,819,,14,819,,848,14,127,26,,302,14,,785,,15,,,,,15',
',,,,,,302,,,753,,,,658,333,14,220,1005,672,,,,550,,26,,,15,304,304,',
'220,220,,,,,26,,700,857,,832,,,337,,,777,797,,220,798,,,311,,,,,,,349',
'358,358,,,220,26,,26,26,807,,26,,,,,787,26,,,,,,,,,829,908,817,,,,39',
',,,,39,296,,,,15,16,,,,,16,,26,15,15,,,,,26,26,,,,,,779,39,301,301,',
',220,786,,,,,16,,978,311,714,856,,916,,,,,920,819,,311,778,,778,,778',
',,,346,362,362,362,,,700,,700,,26,351,,825,,827,,,550,,550,,,425,14',
',14,26,275,,,,302,26,220,26,,15,,,302,,,39,,,,,220,,622,26,39,39,16',
',,,,,15,550,550,16,16,,,,,912,425,,,,,,,,416,955,700,,,,,,333,,,,,,',
',14,,778,14,778,,778,923,778,220,777,,777,,777,,,400,,220,,,,,,14,,15',
',,,15,,,,304,15,700,787,700,296,787,,787,39,787,,,778,,,,304,,,16,,',
',220,220,15,429,,220,220,,39,220,,,,,,,700,,,16,,,,14,,,,,14,14,,,929',
',931,,,786,,786,,302,,,,,296,,,,,296,302,,,777,,777,952,777,953,777',
'954,,,550,,,,39,,,,39,,,,301,39,,16,,,,16,,787,,787,16,787,,787,,301',
',,,,,220,777,,39,,14,220,,,,14,,,,16,,,,,,14,,,,,,,,,,,220,787,,1000',
',1001,,1002,,,786,,,,,,,,,,866,868,870,1010,,,,,38,,,875,,38,,,,14,',
',,,,15,,15,,,,1022,14,304,,,,,,,,304,,38,300,300,,,,,,,,,,,,,,,,,,220',
',14,14,,,14,,,,,,14,,,345,361,361,361,,,,,,,,,,,,,,15,,,15,,937,,,,',
',,,14,,,,945,,,14,14,,,,15,38,,,,,39,744,39,,38,38,,,301,,,16,,16,,13',
'301,,,,13,,,970,972,974,976,,977,,,,,,,,,,,,,,14,710,,,712,,13,,,15',
',,,,15,15,,14,,,,,,14,,14,,304,39,,,39,,,,,,,304,16,,220,16,,,,,,38',
',,,,39,1016,1017,1018,1019,,,,,,,16,,,,,,,38,,,,,,1023,,,,,,790,13,',
',,794,795,,15,,13,13,,15,,,,,,,,,,15,429,,,39,,,,,39,39,,,,,16,,,,,16',
'16,301,,,,38,,,,38,,,301,300,38,,,,,,,358,,,,,,15,,,300,,,,,,,,,38,15',
',,,,,,,,,,,13,855,,,,,,,,,,,,39,,,,,39,,,15,15,13,16,15,,,39,16,,15',
',,,,,,,16,,,,,,,,,,878,,,,,,,358,,,,,,884,,15,,,,947,,362,15,15,,,,39',
',,,,,,,13,,,16,13,39,,,,13,,910,911,,,913,16,,,,,,,,,,,,,,,,,,13,,,',
'39,39,15,,39,,,,,,39,16,16,,,16,941,,,15,,16,,949,950,15,,15,,,,,,,',
'362,,38,,38,,,,39,,300,,944,,,39,39,,300,16,,,,948,,,16,16,,,,,,,,,',
',,,,982,,,,,,,,,,,,,,,,,996,,,,,,997,,,,39,,,,38,,,38,,,,16,,,,,,39',
',,,,,39,,39,,,16,38,,,,,16,,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,13,,',
',,,,,,,,,,,,,,,,38,,,,,38,38,,,,,,,,,,,,300,,,,,,,,,,,300,,,,,,,,,,',
',,,,,,,,,13,,,13,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,38,,,,,38,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,13,13,,361,,,,,,38,,,,,,,,,',
',,,38,,,,,227,,,,,,,,,274,274,274,,,,,,,,,,,320,321,322,,,,38,38,,,38',
',,,,,38,274,274,,,,,,,,,,13,,,,,13,,,,,,,,361,,13,,,,,,38,,,,943,,,38',
'38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,,13,,,,,38,,,,,,,',
',,,,,,,,,38,,,,,,38,,38,,,13,13,,,13,,,,,,13,,,,,,,,,,,,,,,,,,274,408',
'274,,,427,432,,,,,,,,,13,,,,,,227,13,13,447,448,449,450,451,452,453',
'454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470',
'471,472,,,,,,,274,274,,,,,,,,274,,,,,,,274,,274,13,,274,274,,,,,,,,',
',,,,,13,,,,,,13,,13,,,,,,,,,,,,,,,,519,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,274,,427,643,408,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,274,,274,,274,,,,,,,,,,,,,,,,274,,,,,,,,,678,679,,,,,,,',
',,274,,,274,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,274,274,',
',,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,755,,,274,274,760,762',
',,,765,767,,,643,769,,,,,,,,,,,,,,,,,,,,,,,,274,,,274,,,,,,,,,,,,,,',
',,,,,274,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,274,,858,,,,,,,,,,,,,,760,762,767,765,,861,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,',
',,,,,,,,274,858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,274' ]
        racc_goto_table = arr = ::Array.new(3023, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,67,61,61,41,138,92,56,18,41,33,33,33,8,15,15,23,37,37,86,60,60,96',
'24,41,2,31,10,178,57,57,89,89,41,41,41,73,41,39,163,27,90,7,36,29,29',
'27,7,29,70,70,70,49,169,137,6,71,71,68,68,68,38,38,38,63,4,37,41,41',
'178,23,41,91,91,95,64,64,20,126,70,70,54,51,69,69,50,11,69,68,17,17',
'174,57,17,46,114,151,29,29,29,29,74,131,74,40,117,47,116,132,64,64,64',
'40,40,12,41,110,11,5,111,41,41,41,41,41,41,44,44,44,4,155,155,175,121',
'121,112,45,129,95,113,152,108,17,17,17,17,2,152,107,166,166,166,106',
'7,55,55,105,118,127,104,103,47,7,7,178,102,101,124,100,99,98,73,156',
'156,156,156,97,117,156,129,130,94,93,133,47,134,135,136,88,85,33,139',
'140,141,143,29,29,29,29,144,145,146,147,150,84,127,72,127,131,153,41',
'41,41,41,132,154,41,41,41,41,41,41,114,65,5,169,1,66,117,157,158,159',
'57,41,175,92,68,163,74,74,71,160,68,161,33,33,162,37,37,23,62,42,137',
'33,167,30,24,116,28,169,19,171,172,16,20,20,117,41,41,20,20,51,14,109',
',129,41,,,51,8,,40,24,70,,,,31,174,,,70,68,41,,,126,41,151,,68,,41,',
',29,31,,54,,,,23,37,,,,11,,,29,29,,37,,47,90,41,41,,,7,49,24,169,63',
',71,64,6,29,71,24,41,41,,91,50,,4,96,,,,46,64,29,,95,46,44,,,41,,17',
'17,47,44,65,,47,121,121,,65,127,,127,41,,23,37,,,,,47,61,31,37,23,36',
'47,,,45,156,178,156,15,45,39,4,127,,60,39,,,,89,95,121,73,57,,,8,,,',
'33,8,,,,,18,95,166,166,51,166,166,,166,,163,163,69,65,,65,71,41,65,65',
',38,71,,31,137,137,38,,,,,,57,,22,,,,,22,71,,,,74,,,,,,,127,,47,22,',
',33,10,,,,,22,22,22,,22,22,22,41,29,41,,71,,70,,,38,41,,,,,27,,73,,',
'121,,49,2,41,,,22,22,57,49,22,22,22,22,,,71,8,57,7,,,,,64,70,71,,,,',
',64,,,33,,,,,166,166,166,166,,33,65,,47,41,,,41,,22,92,,89,41,22,22',
'22,22,22,22,,,,41,,,,,47,41,,168,57,,,89,,68,57,,71,,86,,61,,,,71,,',
',,24,166,,15,31,67,,,31,60,41,41,,138,,41,41,,57,41,,,95,95,70,,,,,',
'65,31,65,41,65,,,8,41,41,,95,95,115,,,31,,,,31,22,22,22,22,56,,22,22',
'22,22,22,22,20,20,49,,,20,20,65,,20,65,22,,49,,,,,,31,71,,,71,29,64',
',122,31,68,29,,,,,65,64,47,,,,,,,,22,22,41,,,,,41,41,22,65,,41,,47,',
',,,67,,,41,67,17,122,,22,122,,17,22,57,41,,22,22,,31,,25,,,,,25,,,,',
',,22,,,65,,,,65,65,22,22,23,37,,,,168,,41,,,25,25,25,,22,22,,,,,41,',
'115,20,,115,,,29,,,120,65,,22,65,,,64,,,,,,,25,25,25,,,22,41,,41,41',
'65,,41,,,,,170,41,,,,,,,,,65,17,120,,,,53,,,,,53,9,,,,25,26,,,,,26,',
'41,25,25,,,,,41,41,,,,,,125,53,53,53,,,22,168,,,,,26,,31,64,95,65,,95',
',,,,95,122,,64,122,,122,,122,,,,53,53,53,53,,,115,,115,,41,26,,125,',
'125,,,168,,168,,,57,22,,22,41,33,,,,22,41,22,41,,25,,,22,,,53,,,,,22',
',31,41,53,53,26,,,,,,25,168,168,26,26,,,,,65,57,,,,,,,,71,115,115,,',
',,,65,,,,,,,,22,,122,22,122,,122,120,122,22,120,,120,,120,,,9,,22,,',
',,,22,,25,,,,25,,,,25,25,115,170,115,9,170,,170,53,170,,,122,,,,25,',
',26,,,,22,22,25,26,,22,22,,53,22,,,,,,,115,,,26,,,,22,,,,,22,22,,,125',
',125,,,168,,168,,22,,,,,9,,,,,9,22,,,120,,120,125,120,125,120,125,,',
'168,,,,53,,,,53,,,,53,53,,26,,,,26,,170,,170,26,170,,170,,53,,,,,,22',
'120,,53,,22,22,,,,22,,,,26,,,,,,22,,,,,,,,,,,22,170,,125,,125,,125,',
',168,,,,,,,,,,123,123,123,125,,,,,52,,,22,,52,,,,22,,,,,,25,,25,,,,125',
'22,25,,,,,,,,25,,52,52,52,,,,,,,,,,,,,,,,,,22,,22,22,,,22,,,,,,22,,',
'52,52,52,52,,,,,,,,,,,,,,25,,,25,,22,,,,,,,,22,,,,22,,,22,22,,,,25,52',
',,,,53,25,53,,52,52,,,53,,,26,,26,,21,53,,,,21,,,123,123,123,123,,123',
',,,,,,,,,,,,,22,9,,,9,,21,,,25,,,,,25,25,,22,,,,,,22,,22,,25,53,,,53',
',,,,,,25,26,,22,26,,,,,,52,,,,,53,123,123,123,123,,,,,,,26,,,,,,,52',
',,,,,123,,,,,,9,21,,,,9,9,,25,,21,21,,25,,,,,,,,,,25,26,,,53,,,,,53',
'53,,,,,26,,,,,26,26,53,,,,52,,,,52,,,53,52,52,,,,,,,25,,,,,,25,,,52',
',,,,,,,,52,25,,,,,,,,,,,,21,9,,,,,,,,,,,,53,,,,,53,,,25,25,21,26,25',
',,53,26,,25,,,,,,,,26,,,,,,,,,,9,,,,,,,25,,,,,,9,,25,,,,25,,53,25,25',
',,,53,,,,,,,,21,,,26,21,53,,,,21,,9,9,,,9,26,,,,,,,,,,,,,,,,,,21,,,',
'53,53,25,,53,,,,,,53,26,26,,,26,9,,,25,,26,,9,9,25,,25,,,,,,,,53,,52',
',52,,,,53,,52,,53,,,53,53,,52,26,,,,26,,,26,26,,,,,,,,,,,,,,9,,,,,,',
',,,,,,,,,,9,,,,,,9,,,,53,,,,52,,,52,,,,26,,,,,,53,,,,,,53,,53,,,26,52',
',,,,26,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,21,,,,,,,,,,,,,,,,,,,52,',
',,,52,52,,,,,,,,,,,,52,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,21,,,21,,,,,',
',,,,,,,,,,,,,,,,21,,,,,,,,52,,,,,52,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,21,,,,,21,21,,52,,,,,,52,,,,,,,,,,,,,52,,,,,32,,,,,,,,',
'32,32,32,,,,,,,,,,,32,32,32,,,,52,52,,,52,,,,,,52,32,32,,,,,,,,,,21',
',,,,21,,,,,,,,52,,21,,,,,,52,,,,52,,,52,52,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,21,,,,,,,,,,,,,21,,,,,52,,,,,,,,,,,,,,,,,52,,,,,,52,,52,,,21',
'21,,,21,,,,,,21,,,,,,,,,,,,,,,,,,32,32,32,,,32,32,,,,,,,,,21,,,,,,32',
'21,21,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,,,,,,,32,32,,,,,,,,32,,,,,,,32,,32,21,,32,32,,,,,,,,',
',,,,,21,,,,,,21,,21,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,32,,32,,32,,,,,,,,,,,,,,,,32,,,,,,,,,32,32,,,,,,,,,,32,,,32,,',
',,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,32,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32,,,32,32,,,,',
',,,,,,,,,,,,,,,,,,,32,,,32,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,,,,,',
',,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(3023, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   226,    25,   nil,    62,   113,    52,    42,  -311,   841,
  -494,  -595,  -690,   nil,  -224,     6,   254,    26,  -205,   192,
    57,  1379,   464,  -193,  -386,   767,   879,  -167,    51,   -19,
   133,   -19,  2039,   -19,   nil,   nil,    19,  -193,    35,  -224,
  -369,     4,  -226,   nil,    97,   103,    61,  -111,   nil,    18,
    50,  -233,  1248,   868,  -274,    85,   -64,    21,   nil,   nil,
    12,    -6,  -149,    23,    41,   163,   168,   -58,    29,  -245,
    20,    30,  -268,  -241,  -385,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   133,   129,   -42,   nil,   126,  -307,
  -669,  -498,  -337,   114,  -178,    71,  -570,   105,   113,   111,
  -355,   108,   100,  -553,    93,  -560,  -427,  -766,  -445,  -460,
  -247,  -254,  -458,  -715,  -736,   111,  -444,  -728,  -489,   nil,
   175,  -403,    63,   461,  -479,   254,  -568,  -488,   nil,  -509,
  -693,  -771,  -765,  -153,  -502,   124,  -346,  -282,   -17,  -623,
  -623,   -64,   nil,   -73,   -69,  -713,  -481,  -606,   nil,   nil,
   126,    17,    58,   126,   131,  -251,  -207,   144,   144,   144,
  -357,  -356,  -342,  -297,   nil,   nil,  -390,  -439,   261,  -640,
   206,  -428,  -600,   nil,  -604,  -735,   nil,   nil,  -460 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   344,   291,   nil,   521,
   nil,   836,   nil,   288,   289,   nil,   nil,   nil,    11,    12,
    18,   226,   319,   nil,   nil,   224,   225,   nil,   nil,    17,
   nil,   439,    21,    22,    23,    24,   nil,   675,   nil,   nil,
   nil,   308,   nil,    25,   410,    32,   nil,   nil,    34,    37,
    36,   nil,   221,   222,   356,   nil,   129,   418,   128,   131,
    75,    76,   nil,    90,    46,   280,   nil,   805,   411,   nil,
   412,   423,   629,   485,   278,   264,    47,    48,    49,    50,
    51,    52,    53,    54,    55,   nil,   265,    61,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   567,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   702,   549,   nil,   703,   925,   776,
   537,   nil,   538,   nil,   nil,   539,   nil,   541,   645,   nil,
   nil,   nil,   547,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   422,   nil,   nil,   nil,   nil,   nil,    74,    77,
    78,   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,
   nil,   nil,   nil,   820,   737,   536,   nil,   540,   828,   552,
   554,   555,   788,   558,   559,   789,   562,   565,   283 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 145, :_reduce_none,
  2, 146, :_reduce_2,
  0, 147, :_reduce_3,
  1, 147, :_reduce_4,
  3, 147, :_reduce_5,
  2, 147, :_reduce_6,
  1, 149, :_reduce_none,
  4, 149, :_reduce_8,
  4, 152, :_reduce_9,
  2, 153, :_reduce_10,
  0, 157, :_reduce_11,
  1, 157, :_reduce_12,
  3, 157, :_reduce_13,
  2, 157, :_reduce_14,
  1, 158, :_reduce_none,
  4, 158, :_reduce_16,
  0, 174, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 162, :_reduce_41,
  3, 162, :_reduce_42,
  1, 173, :_reduce_none,
  3, 173, :_reduce_44,
  3, 173, :_reduce_45,
  3, 173, :_reduce_46,
  2, 173, :_reduce_47,
  1, 173, :_reduce_none,
  1, 161, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 178, :_reduce_none,
  4, 178, :_reduce_53,
  0, 186, :_reduce_54,
  5, 183, :_reduce_55,
  1, 185, :_reduce_none,
  2, 177, :_reduce_57,
  3, 177, :_reduce_58,
  4, 177, :_reduce_59,
  5, 177, :_reduce_60,
  4, 177, :_reduce_61,
  5, 177, :_reduce_62,
  2, 177, :_reduce_63,
  2, 177, :_reduce_64,
  2, 177, :_reduce_65,
  2, 177, :_reduce_66,
  2, 177, :_reduce_67,
  1, 163, :_reduce_68,
  3, 163, :_reduce_69,
  1, 190, :_reduce_70,
  3, 190, :_reduce_71,
  1, 189, :_reduce_none,
  2, 189, :_reduce_73,
  3, 189, :_reduce_74,
  5, 189, :_reduce_75,
  2, 189, :_reduce_76,
  4, 189, :_reduce_77,
  2, 189, :_reduce_78,
  4, 189, :_reduce_79,
  1, 189, :_reduce_80,
  3, 189, :_reduce_81,
  1, 193, :_reduce_none,
  3, 193, :_reduce_83,
  2, 192, :_reduce_84,
  3, 192, :_reduce_85,
  1, 195, :_reduce_86,
  3, 195, :_reduce_87,
  1, 194, :_reduce_88,
  1, 194, :_reduce_89,
  4, 194, :_reduce_90,
  3, 194, :_reduce_91,
  3, 194, :_reduce_92,
  3, 194, :_reduce_93,
  3, 194, :_reduce_94,
  2, 194, :_reduce_95,
  1, 194, :_reduce_96,
  1, 170, :_reduce_97,
  1, 170, :_reduce_98,
  4, 170, :_reduce_99,
  3, 170, :_reduce_100,
  3, 170, :_reduce_101,
  3, 170, :_reduce_102,
  3, 170, :_reduce_103,
  2, 170, :_reduce_104,
  1, 170, :_reduce_105,
  1, 198, :_reduce_106,
  1, 198, :_reduce_none,
  2, 199, :_reduce_108,
  1, 199, :_reduce_109,
  3, 199, :_reduce_110,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 203, :_reduce_116,
  1, 203, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_120,
  0, 206, :_reduce_121,
  4, 160, :_reduce_122,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  3, 176, :_reduce_194,
  5, 176, :_reduce_195,
  3, 176, :_reduce_196,
  5, 176, :_reduce_197,
  6, 176, :_reduce_198,
  5, 176, :_reduce_199,
  5, 176, :_reduce_200,
  5, 176, :_reduce_201,
  5, 176, :_reduce_202,
  4, 176, :_reduce_203,
  3, 176, :_reduce_204,
  3, 176, :_reduce_205,
  3, 176, :_reduce_206,
  3, 176, :_reduce_207,
  3, 176, :_reduce_208,
  3, 176, :_reduce_209,
  3, 176, :_reduce_210,
  3, 176, :_reduce_211,
  3, 176, :_reduce_212,
  4, 176, :_reduce_213,
  2, 176, :_reduce_214,
  2, 176, :_reduce_215,
  3, 176, :_reduce_216,
  3, 176, :_reduce_217,
  3, 176, :_reduce_218,
  3, 176, :_reduce_219,
  3, 176, :_reduce_220,
  3, 176, :_reduce_221,
  3, 176, :_reduce_222,
  3, 176, :_reduce_223,
  3, 176, :_reduce_224,
  3, 176, :_reduce_225,
  3, 176, :_reduce_226,
  3, 176, :_reduce_227,
  3, 176, :_reduce_228,
  2, 176, :_reduce_229,
  2, 176, :_reduce_230,
  3, 176, :_reduce_231,
  3, 176, :_reduce_232,
  3, 176, :_reduce_233,
  3, 176, :_reduce_234,
  3, 176, :_reduce_235,
  6, 176, :_reduce_236,
  1, 176, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  4, 210, :_reduce_241,
  2, 210, :_reduce_242,
  3, 215, :_reduce_243,
  0, 216, :_reduce_244,
  1, 216, :_reduce_none,
  0, 167, :_reduce_246,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  4, 167, :_reduce_249,
  2, 167, :_reduce_250,
  1, 188, :_reduce_251,
  2, 188, :_reduce_252,
  2, 188, :_reduce_253,
  4, 188, :_reduce_254,
  1, 188, :_reduce_255,
  0, 219, :_reduce_256,
  2, 182, :_reduce_257,
  2, 218, :_reduce_258,
  2, 217, :_reduce_259,
  0, 217, :_reduce_260,
  1, 212, :_reduce_261,
  2, 212, :_reduce_262,
  3, 212, :_reduce_263,
  4, 212, :_reduce_264,
  1, 172, :_reduce_265,
  1, 172, :_reduce_none,
  3, 171, :_reduce_267,
  4, 171, :_reduce_268,
  2, 171, :_reduce_269,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_280,
  0, 242, :_reduce_281,
  4, 208, :_reduce_282,
  0, 243, :_reduce_283,
  0, 244, :_reduce_284,
  6, 208, :_reduce_285,
  0, 245, :_reduce_286,
  4, 208, :_reduce_287,
  3, 208, :_reduce_288,
  3, 208, :_reduce_289,
  2, 208, :_reduce_290,
  3, 208, :_reduce_291,
  3, 208, :_reduce_292,
  1, 208, :_reduce_293,
  4, 208, :_reduce_294,
  3, 208, :_reduce_295,
  1, 208, :_reduce_296,
  5, 208, :_reduce_297,
  4, 208, :_reduce_298,
  3, 208, :_reduce_299,
  2, 208, :_reduce_300,
  1, 208, :_reduce_none,
  2, 208, :_reduce_302,
  2, 208, :_reduce_303,
  6, 208, :_reduce_304,
  6, 208, :_reduce_305,
  0, 246, :_reduce_306,
  0, 247, :_reduce_307,
  7, 208, :_reduce_308,
  0, 248, :_reduce_309,
  0, 249, :_reduce_310,
  7, 208, :_reduce_311,
  5, 208, :_reduce_312,
  4, 208, :_reduce_313,
  0, 250, :_reduce_314,
  0, 251, :_reduce_315,
  9, 208, :_reduce_316,
  0, 252, :_reduce_317,
  6, 208, :_reduce_318,
  0, 253, :_reduce_319,
  7, 208, :_reduce_320,
  0, 254, :_reduce_321,
  5, 208, :_reduce_322,
  0, 255, :_reduce_323,
  6, 208, :_reduce_324,
  0, 256, :_reduce_325,
  0, 257, :_reduce_326,
  9, 208, :_reduce_327,
  1, 208, :_reduce_328,
  1, 208, :_reduce_329,
  1, 208, :_reduce_330,
  1, 208, :_reduce_331,
  1, 166, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_335,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 234, :_reduce_none,
  5, 234, :_reduce_339,
  1, 155, :_reduce_none,
  2, 155, :_reduce_341,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 258, :_reduce_344,
  3, 258, :_reduce_345,
  1, 261, :_reduce_346,
  3, 261, :_reduce_347,
  1, 260, :_reduce_none,
  4, 260, :_reduce_349,
  6, 260, :_reduce_350,
  3, 260, :_reduce_351,
  5, 260, :_reduce_352,
  2, 260, :_reduce_353,
  4, 260, :_reduce_354,
  1, 260, :_reduce_355,
  3, 260, :_reduce_356,
  4, 262, :_reduce_357,
  2, 262, :_reduce_358,
  2, 262, :_reduce_359,
  1, 262, :_reduce_360,
  2, 267, :_reduce_361,
  0, 267, :_reduce_362,
  6, 268, :_reduce_363,
  8, 268, :_reduce_364,
  4, 268, :_reduce_365,
  6, 268, :_reduce_366,
  4, 268, :_reduce_367,
  2, 268, :_reduce_none,
  6, 268, :_reduce_369,
  2, 268, :_reduce_370,
  4, 268, :_reduce_371,
  6, 268, :_reduce_372,
  2, 268, :_reduce_373,
  4, 268, :_reduce_374,
  2, 268, :_reduce_375,
  4, 268, :_reduce_376,
  1, 268, :_reduce_none,
  0, 184, :_reduce_378,
  1, 184, :_reduce_379,
  3, 272, :_reduce_380,
  1, 272, :_reduce_381,
  4, 272, :_reduce_382,
  1, 273, :_reduce_383,
  4, 273, :_reduce_384,
  1, 274, :_reduce_385,
  3, 274, :_reduce_386,
  1, 275, :_reduce_387,
  1, 275, :_reduce_none,
  0, 279, :_reduce_389,
  0, 280, :_reduce_390,
  4, 232, :_reduce_391,
  4, 277, :_reduce_392,
  1, 277, :_reduce_393,
  0, 283, :_reduce_394,
  4, 278, :_reduce_395,
  0, 284, :_reduce_396,
  4, 278, :_reduce_397,
  0, 285, :_reduce_398,
  5, 282, :_reduce_399,
  2, 179, :_reduce_400,
  4, 179, :_reduce_401,
  5, 179, :_reduce_402,
  5, 179, :_reduce_403,
  2, 231, :_reduce_404,
  4, 231, :_reduce_405,
  4, 231, :_reduce_406,
  3, 231, :_reduce_407,
  3, 231, :_reduce_408,
  3, 231, :_reduce_409,
  2, 231, :_reduce_410,
  1, 231, :_reduce_411,
  4, 231, :_reduce_412,
  0, 287, :_reduce_413,
  5, 230, :_reduce_414,
  0, 288, :_reduce_415,
  5, 230, :_reduce_416,
  5, 236, :_reduce_417,
  1, 289, :_reduce_418,
  1, 289, :_reduce_none,
  6, 154, :_reduce_420,
  0, 154, :_reduce_421,
  1, 290, :_reduce_422,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 291, :_reduce_425,
  1, 291, :_reduce_none,
  2, 156, :_reduce_427,
  1, 156, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 221, :_reduce_432,
  1, 293, :_reduce_433,
  2, 293, :_reduce_434,
  3, 294, :_reduce_435,
  1, 294, :_reduce_436,
  1, 294, :_reduce_437,
  3, 222, :_reduce_438,
  4, 223, :_reduce_439,
  3, 224, :_reduce_440,
  0, 298, :_reduce_441,
  3, 298, :_reduce_442,
  1, 299, :_reduce_443,
  2, 299, :_reduce_444,
  3, 226, :_reduce_445,
  0, 301, :_reduce_446,
  3, 301, :_reduce_447,
  3, 225, :_reduce_448,
  3, 227, :_reduce_449,
  0, 302, :_reduce_450,
  3, 302, :_reduce_451,
  0, 303, :_reduce_452,
  3, 303, :_reduce_453,
  0, 295, :_reduce_454,
  2, 295, :_reduce_455,
  0, 296, :_reduce_456,
  2, 296, :_reduce_457,
  0, 297, :_reduce_458,
  2, 297, :_reduce_459,
  1, 300, :_reduce_460,
  2, 300, :_reduce_461,
  0, 305, :_reduce_462,
  4, 300, :_reduce_463,
  1, 304, :_reduce_464,
  1, 304, :_reduce_465,
  1, 304, :_reduce_466,
  1, 304, :_reduce_none,
  1, 204, :_reduce_468,
  3, 205, :_reduce_469,
  1, 292, :_reduce_470,
  2, 292, :_reduce_471,
  1, 207, :_reduce_472,
  1, 207, :_reduce_473,
  1, 207, :_reduce_474,
  1, 207, :_reduce_475,
  1, 196, :_reduce_476,
  1, 196, :_reduce_477,
  1, 196, :_reduce_478,
  1, 196, :_reduce_479,
  1, 196, :_reduce_480,
  1, 197, :_reduce_481,
  1, 197, :_reduce_482,
  1, 197, :_reduce_483,
  1, 197, :_reduce_484,
  1, 197, :_reduce_485,
  1, 197, :_reduce_486,
  1, 197, :_reduce_487,
  1, 228, :_reduce_488,
  1, 228, :_reduce_489,
  1, 165, :_reduce_490,
  1, 165, :_reduce_491,
  1, 169, :_reduce_492,
  1, 169, :_reduce_493,
  1, 238, :_reduce_494,
  0, 306, :_reduce_495,
  4, 238, :_reduce_496,
  2, 238, :_reduce_497,
  3, 240, :_reduce_498,
  0, 308, :_reduce_499,
  3, 240, :_reduce_500,
  4, 307, :_reduce_501,
  2, 307, :_reduce_502,
  2, 307, :_reduce_503,
  1, 307, :_reduce_504,
  2, 310, :_reduce_505,
  0, 310, :_reduce_506,
  6, 281, :_reduce_507,
  8, 281, :_reduce_508,
  4, 281, :_reduce_509,
  6, 281, :_reduce_510,
  4, 281, :_reduce_511,
  6, 281, :_reduce_512,
  2, 281, :_reduce_513,
  4, 281, :_reduce_514,
  6, 281, :_reduce_515,
  2, 281, :_reduce_516,
  4, 281, :_reduce_517,
  2, 281, :_reduce_518,
  4, 281, :_reduce_519,
  1, 281, :_reduce_520,
  0, 281, :_reduce_521,
  1, 276, :_reduce_522,
  1, 276, :_reduce_523,
  1, 276, :_reduce_524,
  1, 276, :_reduce_525,
  1, 259, :_reduce_none,
  1, 259, :_reduce_527,
  1, 312, :_reduce_528,
  1, 313, :_reduce_529,
  3, 313, :_reduce_530,
  1, 269, :_reduce_531,
  3, 269, :_reduce_532,
  1, 314, :_reduce_533,
  2, 315, :_reduce_534,
  1, 315, :_reduce_535,
  2, 316, :_reduce_536,
  1, 316, :_reduce_537,
  1, 263, :_reduce_538,
  3, 263, :_reduce_539,
  1, 309, :_reduce_540,
  3, 309, :_reduce_541,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  2, 264, :_reduce_544,
  1, 264, :_reduce_545,
  3, 318, :_reduce_546,
  3, 319, :_reduce_547,
  1, 270, :_reduce_548,
  3, 270, :_reduce_549,
  1, 311, :_reduce_550,
  3, 311, :_reduce_551,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 271, :_reduce_554,
  1, 271, :_reduce_555,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  2, 266, :_reduce_558,
  2, 265, :_reduce_559,
  0, 265, :_reduce_560,
  1, 241, :_reduce_none,
  3, 241, :_reduce_562,
  0, 229, :_reduce_563,
  2, 229, :_reduce_none,
  1, 214, :_reduce_565,
  3, 214, :_reduce_566,
  3, 322, :_reduce_567,
  2, 322, :_reduce_568,
  4, 322, :_reduce_569,
  2, 322, :_reduce_570,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 175, :_reduce_none,
  1, 175, :_reduce_none,
  2, 191, :_reduce_587,
  2, 168, :_reduce_588,
  0, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 239, :_reduce_592,
  1, 239, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_none,
  0, 211, :_reduce_596 ]

racc_reduce_n = 597

racc_shift_n = 1024

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@28",
  "@29",
  "args_tail",
  "@30",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_312(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_317(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_318(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_319(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = []
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_379(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = []
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_387(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_390(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_391(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_394(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_396(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_398(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_413(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_415(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 419 omitted

def _reduce_420(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = []
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_436(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_439(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = []
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = []
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_463(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_471(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_495(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_500(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = []
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_521(val, _values, result)
                      result = []
                    
    result
end

def _reduce_522(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_523(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_533(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 542 omitted

# reduce 543 omitted

def _reduce_544(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 552 omitted

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 556 omitted

# reduce 557 omitted

def _reduce_558(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = []
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

def _reduce_592(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

def _reduce_596(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby22
  end   # module Parser
