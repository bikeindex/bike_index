# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby25 < Parser::Base


  def version
    25
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-584,579,-110,-108,220,-102,-103,-584,-584,-584,274,-107,274,-584,-584',
'222,-584,274,799,622,212,213,212,213,-88,-584,579,-102,819,-108,620',
'274,-103,-106,-74,-105,-584,-584,906,-584,-584,-584,-584,-584,-109,-109',
'223,579,908,986,-104,-101,-110,798,-105,-107,223,-106,-104,579,579,-110',
'538,575,574,537,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,-581,269,-584,-584,-584,621,646,725,842,811,-584,212',
'213,-584,-581,269,619,273,-584,273,-584,407,-584,-584,273,-584,-584',
'-584,-584,-584,-580,-584,-584,-584,-96,-94,223,799,273,115,-110,-108',
'-580,-102,114,-110,-108,-584,-102,-107,-584,-584,-584,-584,-107,-584',
'-93,818,-99,-584,-584,-584,-584,-106,115,-584,-584,845,-584,114,-103',
'-106,798,-105,-100,-103,-106,-584,-105,-95,-95,-101,-109,-96,-98,115',
'-97,-109,-584,-584,114,-584,-584,-584,-584,-584,-104,115,115,115,-96',
'-104,114,114,114,223,910,212,213,-97,-98,115,115,212,213,394,114,114',
'-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584',
'913,641,-584,-584,-584,218,646,607,-96,914,-584,-96,267,-584,-95,917',
'525,-490,-584,220,-584,-96,-584,-584,-490,-584,-584,-584,-584,-584,115',
'-584,-584,-584,559,114,556,555,554,223,557,-489,-580,-97,-98,607,538',
'-584,-489,540,-584,-584,-584,-97,-95,-584,921,-95,-107,-584,-584,-584',
'-584,-106,-584,-584,-584,-95,-584,115,219,609,608,-109,114,223,-110',
'-584,-584,-584,-584,759,-490,-97,-98,115,-97,-98,-584,-584,114,-584',
'-584,-584,-584,-584,-97,-98,559,-272,556,555,554,607,557,607,-489,115',
'607,609,608,605,114,93,94,811,838,586,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,-584,-584,-584,-584,-584,93,94,-584,-584,-584,592,787',
'-584,-488,593,-584,607,772,-584,-584,-488,-584,607,-584,958,-584,223',
'-584,-584,607,-584,-584,-584,-584,-584,785,-584,-584,-584,786,609,608',
'609,608,605,609,608,610,607,1025,757,772,-584,956,-491,-584,-584,-584',
'-584,673,-584,-491,-584,-296,95,96,-497,-584,-106,923,-296,-296,-296',
'702,-104,-296,-296,-296,-488,-296,609,608,612,95,96,926,609,608,614',
'-296,-296,-296,-105,609,608,623,-107,640,-95,-296,-296,641,-296,-296',
'-296,-296,-296,864,-104,928,-496,930,609,608,618,842,811,-496,-494,-491',
'-492,-498,457,-102,932,-494,-496,-492,223,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,934,-96,-296,-296,-296,-98,788',
'-296,640,538,-296,-105,540,-296,-296,-107,-296,-493,-296,639,-296,-104',
'-296,-296,-493,-296,-296,-296,-296,-296,-296,-296,-496,-296,323,-103',
'-110,-296,-296,-296,-494,322,-492,-296,-296,538,-296,-296,540,638,-296',
'-296,-296,-296,-486,-296,223,-296,-578,212,213,-486,-296,-108,-498,-105',
'-296,-296,-497,-296,-296,-296,-296,-296,958,1003,963,218,746,-297,974',
'-483,-493,263,633,218,-297,1003,-483,977,1003,111,267,631,982,-297,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-486',
'-94,-296,-296,-296,-93,645,-486,983,-486,-296,-103,-578,-296,984,-102',
'-486,525,-296,987,-296,900,-296,-296,900,-296,-296,-296,-296,-296,-483',
'-296,219,-296,-297,-578,-483,-483,-483,-483,219,900,-483,-483,-483,218',
'-483,-296,243,992,-296,-296,595,-99,-483,-296,-483,-483,-483,958,214',
'597,-296,-108,-100,-486,-483,-483,702,-483,-483,-483,-483,-483,-109',
'-297,997,999,1001,218,240,1003,-297,1003,242,241,589,238,239,243,243',
'-297,243,243,1003,587,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483',
'-483,-483,-483,-483,219,218,-483,-483,-483,-287,-483,-483,528,223,-483',
'223,-287,-483,-483,624,-483,455,-483,627,-483,-287,-483,-483,223,-483',
'-483,-483,-483,-483,-297,-483,-486,-483,219,-88,676,223,692,-486,-486',
'-486,81,531,-486,-486,-486,-483,-486,211,-483,-483,-483,-483,82,-483',
'-486,-483,-486,-486,-486,687,-483,-483,83,210,219,692,-486,-486,-287',
'-486,-486,-486,-486,-486,260,261,404,-296,693,218,223,406,405,695,-296',
'699,518,702,559,-581,556,555,554,-296,557,516,-486,-486,-486,-486,-486',
'-486,-486,-486,-486,-486,-486,-486,-486,-486,259,258,-486,-486,-486',
'703,-486,-486,705,707,-486,709,958,-486,-486,711,-486,717,-486,718,-486',
'719,-486,-486,905,-486,-486,-486,-486,-486,-296,-486,-296,-486,219,721',
'1018,-296,-296,-296,599,726,727,-296,-296,586,-296,-486,729,591,-486',
'-486,-486,-486,590,-486,396,-486,-584,746,586,756,-486,-486,650,-269',
'-296,-296,760,-296,-296,-296,-296,-296,761,-270,500,-495,542,-296,773',
'541,223,487,-495,243,-296,487,526,223,790,-581,791,-495,263,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-584',
'629,-296,-296,-296,796,645,-584,801,498,-296,500,-580,-296,522,630,-584',
'687,-296,223,-296,269,-296,-296,269,-296,-296,-296,-296,-296,-288,-296',
'-495,-296,-296,-584,269,-288,-288,-288,223,-581,-288,-288,-288,218,-288',
'-296,269,687,-296,-296,454,-296,278,-296,-288,-288,-288,243,-580,455',
'-296,-108,811,-584,-288,-288,519,-288,-288,-288,-288,-288,223,-333,223',
'218,836,218,634,223,-333,811,976,844,981,209,223,512,511,-333,223,597',
'-73,979,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,219,218,-288,-288,-288,243,124,-288,217,124,-288,223,243,-288',
'-288,-577,-288,215,-288,500,-288,853,-288,-288,498,-288,-288,-288,-288',
'-288,-333,-288,219,-288,219,496,-271,240,218,487,223,242,241,222,240',
'976,459,-288,242,241,-288,-288,-288,-288,597,-288,-252,-288,863,458',
'456,867,-288,-252,-252,-252,219,-483,-252,-252,-252,900,-252,687,-483',
'883,-269,564,887,-577,564,-252,-252,-483,891,892,702,567,894,896,567',
'898,-252,-252,900,-252,-252,-252,-252,-252,900,223,-577,219,559,,556',
'555,554,564,557,751,752,,,753,109,110,,567,575,574,,575,574,568,,243',
'568,,,,-483,-252,,-303,,,,,-252,562,-303,-303,-303,269,-252,-303,-303',
'-303,,-303,575,574,,,,568,,240,,-303,-303,242,241,,238,239,-252,-252',
',-303,-303,,-303,-303,-303,-303,-303,,,,,-252,,,-252,,,,559,-252,556',
'555,554,,557,,-252,,,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,,,-303,-303,-303,,,-303,,278,-303,,711,-303,-303',
',-303,,-303,,-303,714,-303,-303,,-303,-303,-303,-303,-303,,-303,-252',
'-303,118,119,120,121,122,-252,-252,-252,,,-252,-252,-252,-303,-252,',
'-303,-303,,-303,,-303,,-252,-252,-252,,949,-303,556,555,554,,557,-252',
'-252,,-252,-252,-252,-252,-252,559,,556,555,554,559,557,556,555,554',
'559,557,556,555,554,949,557,556,555,554,,557,-252,-252,-252,-252,-252',
'-252,-252,-252,-252,-252,-252,-252,-252,-252,,711,-252,-252,-252,,711',
'-252,,269,-252,711,,-252,-252,714,-252,,-252,,-252,,-252,-252,,-252',
'-252,-252,-252,-252,,-252,-252,-252,559,,556,555,554,564,557,118,119',
'120,121,122,,-252,,567,-252,-252,-586,-252,,-252,,,,-586,-586,-586,-252',
',-586,-586,-586,,-586,243,559,562,556,555,554,,557,-586,-586,-586,-586',
',575,574,,253,254,568,-586,-586,,-586,-586,-586,-586,-586,559,,556,555',
'554,240,557,246,,242,241,711,238,239,,,244,,245,,,,-586,-586,-586,-586',
'-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,,711,-586,-586,-586',
',,-586,,,-586,,,-586,-586,,-586,,-586,,-586,,-586,-586,,-586,-586,-586',
'-586,-586,,-586,-586,-586,,,559,,556,555,554,,557,,,,,-586,,,-586,-586',
'-586,-586,,-586,-413,-586,,,,,-586,-413,-413,-413,,,-413,-413,-413,243',
'-413,711,118,119,120,121,122,,,-413,-413,-413,,,,253,254,,,,-413,-413',
',-413,-413,-413,-413,-413,,,,240,,246,,242,241,,238,239,,,244,,245,118',
'119,120,121,122,-413,-413,-413,-413,-413,-413,-413,-413,-413,-413,-413',
'-413,-413,-413,,,-413,-413,-413,,,-413,,269,-413,,,-413,-413,,-413,',
'-413,,-413,,-413,-413,,-413,-413,-413,-413,-413,,-413,-413,-413,559',
',556,555,554,564,557,,,,,,,-413,,567,-413,-413,-585,-413,,-413,,,,-585',
'-585,-585,-413,,-585,-585,-585,,-585,243,,562,,,,,,-585,-585,-585,-585',
',575,574,,253,254,568,-585,-585,,-585,-585,-585,-585,-585,,,,,,240,',
',,242,241,,238,239,,,,,,,,,-585,-585,-585,-585,-585,-585,-585,-585,-585',
'-585,-585,-585,-585,-585,,,-585,-585,-585,,,-585,,,-585,,,-585,-585',
',-585,,-585,,-585,,-585,-585,,-585,-585,-585,-585,-585,,-585,-585,-585',
',,,,,,,,,,,,,-585,,,-585,-585,-585,-585,,-585,,-585,,,,,-585,296,70',
'71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102',
'104,105,,,19,,,,,635,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236',
'237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239',
'259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,-244',
',,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,103,102,104,105,,,19,,,,,635,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261',
'255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248',
'249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60',
',,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,223,257,,,,,63,,83,95,96,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253',
'254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258',
'244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95',
'96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28',
'27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251',
'252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241',
',238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257',
',,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261',
'255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248',
'249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,300,,,59,60',
',,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,',
',64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19',
',,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254',
',40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20',
'245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,',
',253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259',
'258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95',
'96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28',
'27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251',
'252,,-605,-605,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241',
',238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,243,-605,-605,-605,-605,260',
'261,,,-605,-605,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242',
'241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,-605,-605,-605,-605',
'260,261,,,-605,-605,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249',
'250,260,261,255,256,251,252,,-605,-605,,,253,254,,40,,,33,,,59,60,,',
'61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
'8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
'243,-605,-605,-605,-605,260,261,,,-605,-605,,,,,,253,254,,40,,,33,,',
'59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,243,247,248,249,250,260,261,255,,251,252,,,,,,253,254,,40,',
',33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104',
'105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,',
'93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,',
',253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259',
'258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95',
'96,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,243,247,248,249,250,260,261,,,251,252,,,,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,,,,,,,,,,,,,,,,253,254,,40,,,33,,,59,60,,,61',
',35,240,,246,45,242,241,,238,239,,,,20,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,,,,,,,,,,,',
',,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70',
'71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102',
'104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,5',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96',
'296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83',
'95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,',
',,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46',
'298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61',
',,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105',
',,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285',
',45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,',
'285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287',
',285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,223',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105',
',,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,',
'64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19',
',,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,',
'64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19',
',,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,',
',,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,',
',,,,,,,,,,,,,,936,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106',
'108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,',
',,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,',
'91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,',
',,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,304,,,,,,,,,,,,,,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,',
',,,,,,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,,,,,,,',
',567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,321,,562,63,,83,95,96,70',
'71,72,,58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,942,,,234,,,59,60,,,61,,,,,',
',,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
',,319,,,,,,,,,,,,,,,,,,,,936,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88',
'87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,287,,,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,115,,,,,114,63,,83,95',
'96,70,71,72,,58,,,,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318',
'103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,356,,,33,,,59,60,,,61,,35,,,,,,',
',,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105',
',,235,,,,,,,313,,,107,106,108,361,57,99,98,362,,101,109,110,,93,94,',
',319,,,,,,,,,,,,,,,,,368,,,363,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,313,,,107,106,108,361,57,99,98,362,,101,109,110,,93,94,,,319,',
',,,,,,,,,,,,,,,,,,363,,,234,,,59,60,,,61,,,559,,556,555,554,564,557',
',,,,,,,,567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,562,63,,83,95,96',
'70,71,72,9,58,575,574,,64,65,568,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61',
',35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,396',
'63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,',
'75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105',
',,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
',46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
'8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,412,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,412,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,',
',82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60',
',,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46',
',,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,223,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,412,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316',
'73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305',
',,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61',
',,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63',
'58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
',,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,531,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45',
',,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63',
'58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,',
'285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83',
'95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28',
'27,103,102,104,105,,,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285',
',45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,764,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,',
',,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,,,,,,,233,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
',46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,',
',,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233,,,,,91,288',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,291,,,,,,233,,,',
',91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
',46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309',
',,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
'290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60',
',,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,',
'82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,',
',,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60',
',,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,559',
',556,555,554,564,557,,,,,,,,,567,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,562,63,,83,95,96,70,71,72,9,58,575,574,,64,65,568,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,,,396,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,,,91,288,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,',
',,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,285,,45,,,291,,,,,,233,,,,',
'91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313',
',,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,',
',,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,,,,,,,,,567',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,514,,562,63,,83,95,96,70,71,72',
',58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,160,161,,157',
'139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,,,,,154',
'153,,138,159,156,155,164,151,152,146,144,136,158,137,,,165,91,,,,,,',
',,,,,,,90,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,160,161',
',157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,',
',,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,,,165,91',
',,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199',
'184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,',
',,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150',
',,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137',
',,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158',
'137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'379,378,380,377,172,191,190,,,,,,171,178,169,170,374,375,376,372,129',
'99,98,373,,101,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,',
',,162,163,149,150,,,,,,384,,,,,,,,154,153,,138,159,156,155,164,151,152',
'146,144,136,158,137,,,165,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,559,,556,555,554,564,557,,,,,,,154,153,567,138,159,156,155,164,151',
'152,146,144,136,158,137,,,165,,,,,,,562,,1010,438,,,1011,,,572,571,575',
'574,,160,161,568,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,,,,,,269,,223,,,,,,154,153,,138,159,156,155,164,151,152,146,144',
'136,158,137,651,438,165,,652,,,,,,,,160,161,,157,139,140,141,148,145',
'147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156',
'155,164,151,152,146,144,136,158,137,683,445,165,,684,,,,,,,,160,161',
',157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,',
',,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,1012',
'445,165,,1013,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143',
',,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151',
'152,146,144,136,158,137,653,445,165,,654,,,,,,,,160,161,,157,139,140',
'141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153',
',138,159,156,155,164,151,152,146,144,136,158,137,485,438,165,,486,,',
',,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150',
',,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137',
'1007,445,165,,1006,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142',
'143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164',
'151,152,146,144,136,158,137,653,445,165,,654,,,,,,,,160,161,,157,139',
'140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154',
'153,,138,159,156,155,164,151,152,146,144,136,158,137,737,445,165,,738',
',,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136',
'158,137,485,438,165,,486,,,,,,,,160,161,,157,139,140,141,148,145,147',
',,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155',
'164,151,152,146,144,136,158,137,680,438,165,,681,,,,,,,,160,161,,157',
'139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,',
',154,153,,138,159,156,155,164,151,152,146,144,136,158,137,769,445,165',
',768,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163',
'149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144',
'136,158,137,766,438,165,,767,,,,,,,,160,161,,157,139,140,141,148,145',
'147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156',
'155,164,151,152,146,144,136,158,137,651,438,165,,652,,,,,,,,160,161',
',157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,',
',,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,732,438',
'165,,733,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162',
'163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146',
'144,136,158,137,434,438,165,,435,,,,,,,,160,161,,157,139,140,141,148',
'145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159',
'156,155,164,151,152,146,144,136,158,137,441,445,165,,440,,,,,,,,160',
'161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269',
',,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,734',
'445,165,,735,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,',
',,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152',
'146,144,136,158,137,,559,165,556,555,554,564,557,,559,,556,555,554,564',
'557,567,,,,,,,,567,,559,,556,555,554,564,557,,,,,,562,,,567,,,,,562',
'572,571,575,574,,,,568,572,571,575,574,,,,568,562,,559,,556,555,554',
'564,557,572,571,575,574,,,,568,567,,559,,556,555,554,564,557,,559,,556',
'555,554,564,557,567,,,,,562,,,567,,,,,,572,571,575,574,,,,568,562,,',
',,,,,562,572,571,575,574,,,,568,572,571,575,574,,,559,568,556,555,554',
'564,557,559,,556,555,554,564,557,559,567,556,555,554,564,557,559,567',
'556,555,554,564,557,,567,,,,,,,567,562,,,,,,,562,,572,571,575,574,,562',
',568,,575,574,,562,,568,,575,574,,,,568,,575,574,,,559,568,556,555,554',
'564,557,,559,,556,555,554,564,557,567,,,,,,,,567,,559,,556,555,554,564',
'557,,,,,,562,545,,567,,,,,562,572,571,575,574,,,,568,572,571,575,574',
',,,568,562,,,,,,,,,572,571,575,574,,,,568' ]
        racc_action_table = arr = ::Array.new(24615, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'769,886,943,1013,17,939,354,769,769,769,660,1011,62,769,769,19,769,314',
'664,392,14,14,604,604,675,769,730,353,697,735,391,26,940,1012,675,1010',
'769,769,837,769,769,769,769,769,982,590,947,909,840,947,847,17,357,664',
'732,733,19,734,1023,346,345,17,335,702,702,335,769,769,769,769,769,769',
'769,769,769,769,769,769,769,769,1013,314,769,769,769,392,769,581,720',
'720,769,450,450,769,735,26,391,660,769,62,769,207,769,769,314,769,769',
'769,769,769,1012,769,769,769,680,354,604,792,26,886,943,1013,734,939',
'886,943,1013,769,939,1011,769,769,441,769,1011,769,353,697,735,441,441',
'441,769,769,730,441,441,730,441,730,940,1012,792,1010,590,940,1012,441',
'1010,847,806,357,982,732,733,909,734,982,441,441,909,441,441,441,441',
'441,1023,346,345,350,680,1023,346,345,350,450,843,600,600,683,681,581',
'856,690,690,111,581,856,441,441,441,441,441,441,441,441,441,441,441',
'441,441,441,848,767,441,441,441,382,441,617,680,850,441,680,382,441',
'806,854,456,380,441,419,441,680,441,441,380,441,441,441,441,441,294',
'441,441,441,714,294,714,714,714,855,714,379,683,683,681,386,339,441',
'379,339,441,441,653,441,806,441,858,806,767,653,653,653,441,441,653',
'653,653,806,653,600,382,617,617,456,600,690,419,653,653,653,653,617',
'380,683,681,851,683,681,653,653,851,653,653,653,653,653,683,681,905',
'859,905,905,905,615,905,502,379,3,387,386,386,386,3,319,319,912,714',
'912,653,653,653,653,653,653,653,653,653,653,653,653,653,653,41,41,653',
'653,653,363,653,653,378,363,653,388,860,653,653,378,653,389,653,1016',
'653,46,653,653,393,653,653,653,653,653,651,653,653,653,652,615,615,502',
'502,502,387,387,387,390,1019,615,636,653,905,377,653,653,653,653,502',
'653,377,653,654,319,319,226,653,653,868,654,654,654,869,860,654,654',
'654,378,654,388,388,388,41,41,871,389,389,389,654,654,654,651,393,393',
'393,652,434,636,654,654,435,654,654,654,654,654,789,636,872,307,873',
'390,390,390,994,994,307,376,377,375,227,229,226,875,376,307,375,876',
'654,654,654,654,654,654,654,654,654,654,654,654,654,654,877,434,654',
'654,654,435,654,654,766,696,654,434,696,654,654,435,654,374,654,433',
'654,789,654,654,374,654,654,654,654,654,440,654,307,654,40,227,229,440',
'440,440,376,37,375,440,440,336,440,654,336,432,654,654,654,654,373,654',
'430,654,362,344,344,373,654,654,39,766,440,440,38,440,440,440,440,440',
'907,1020,916,418,920,519,933,372,374,22,418,24,519,1021,372,936,1022',
'1,24,418,942,519,440,440,440,440,440,440,440,440,440,440,440,440,440',
'440,362,39,440,440,440,38,440,362,945,373,440,39,362,440,946,38,362',
'323,440,951,440,952,440,440,953,440,440,440,440,440,97,440,418,440,519',
'362,372,97,97,97,24,954,97,97,97,365,97,440,478,955,440,440,365,440',
'97,440,97,97,97,957,15,365,440,440,323,362,97,97,965,97,97,97,97,97',
'323,593,968,969,970,355,478,971,593,973,478,478,355,478,478,464,465',
'593,466,467,1030,355,97,97,97,97,97,97,97,97,97,97,97,97,97,97,365,325',
'97,97,97,310,97,97,325,489,97,493,310,97,97,402,97,325,97,408,97,310',
'97,97,509,97,97,97,97,97,593,97,100,97,355,510,513,515,978,100,100,100',
'79,520,100,100,100,97,100,13,97,97,97,97,79,97,100,97,100,100,100,523',
'97,97,79,12,325,532,100,100,310,100,100,100,100,100,44,44,126,684,533',
'308,534,126,126,535,684,547,308,548,836,684,836,836,836,684,836,308',
'100,100,100,100,100,100,100,100,100,100,100,100,100,100,44,44,100,100',
'100,550,100,100,551,552,100,561,993,100,100,836,100,569,100,573,100',
'576,100,100,836,100,100,100,100,100,768,100,684,100,308,578,995,768',
'768,768,367,582,583,768,768,584,768,100,585,358,100,100,100,100,356',
'100,352,100,737,602,351,612,100,100,452,411,768,768,620,768,768,768',
'768,768,622,628,340,306,338,738,637,337,333,642,306,327,738,647,324',
'655,656,738,657,306,659,738,768,768,768,768,768,768,768,768,768,768',
'768,768,768,768,737,413,768,768,768,663,768,737,665,667,768,669,737',
'768,320,416,737,677,768,679,768,318,768,768,442,768,768,768,768,768',
'57,768,306,768,738,737,682,57,57,57,313,1006,57,57,57,225,57,768,685',
'686,768,768,225,768,312,768,57,57,57,689,1007,225,768,768,691,737,57',
'57,309,57,57,57,57,57,1009,47,698,935,713,941,420,715,47,722,935,728',
'941,10,731,303,302,47,301,935,299,941,57,57,57,57,57,57,57,57,57,57',
'57,57,57,57,225,16,57,57,57,462,298,57,16,7,57,740,463,57,57,361,57',
'16,57,286,57,744,57,57,283,57,57,57,57,57,47,57,935,57,941,282,763,462',
'975,268,765,462,462,235,463,975,231,57,463,463,57,57,57,57,975,57,484',
'57,774,230,228,795,57,484,484,484,16,361,484,484,484,1015,484,805,361',
'809,812,699,813,361,923,484,484,361,820,821,822,699,826,827,923,829',
'484,484,830,484,484,484,484,484,832,835,361,975,930,,930,930,930,930',
'930,608,608,,,608,608,608,,930,699,699,,923,923,699,,477,923,,,,361',
'484,,28,,,,,484,930,28,28,28,484,484,28,28,28,,28,930,930,,,,930,,477',
',28,28,477,477,,477,477,484,484,,28,28,,28,28,28,28,28,,,,,484,,,484',
',,,562,484,562,562,562,,562,,484,,,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,,,28,28,28,,,28,,28,28,,562,28,28,,28,,28,,28,562,28,28,,28',
'28,28,28,28,,28,436,28,332,332,332,332,332,436,436,436,,,436,436,436',
'28,436,,28,28,,28,,28,,436,436,436,,891,28,891,891,891,,891,436,436',
',436,436,436,436,436,838,,838,838,838,711,838,711,711,711,992,711,992',
'992,992,986,992,986,986,986,,986,436,436,436,436,436,436,436,436,436',
'436,436,436,436,436,,838,436,436,436,,711,436,,436,436,992,,436,436',
'711,436,,436,,436,,436,436,,436,436,436,436,436,,436,436,436,896,,896',
'896,896,896,896,297,297,297,297,297,,436,,896,436,436,446,436,,436,',
',,446,446,446,436,,446,446,446,,446,529,958,896,958,958,958,,958,446',
'446,446,446,,896,896,,529,529,896,446,446,,446,446,446,446,446,956,',
'956,956,956,529,956,529,,529,529,958,529,529,,,529,,529,,,,446,446,446',
'446,446,446,446,446,446,446,446,446,446,446,,956,446,446,446,,,446,',
',446,,,446,446,,446,,446,,446,,446,446,,446,446,446,446,446,,446,446',
'446,,,906,,906,906,906,,906,,,,,446,,,446,446,446,446,,446,27,446,,',
',,446,27,27,27,,,27,27,27,482,27,906,6,6,6,6,6,,,27,27,27,,,,482,482',
',,,27,27,,27,27,27,27,27,,,,482,,482,,482,482,,482,482,,,482,,482,507',
'507,507,507,507,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27',
',,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,898',
',898,898,898,898,898,,,,,,,27,,898,27,27,445,27,,27,,,,445,445,445,27',
',445,445,445,,445,470,,898,,,,,,445,445,445,445,,898,898,,470,470,898',
'445,445,,445,445,445,445,445,,,,,,470,,,,470,470,,470,470,,,,,,,,,445',
'445,445,445,445,445,445,445,445,445,445,445,445,445,,,445,445,445,,',
'445,,,445,,,445,445,,445,,445,,445,,445,445,,445,445,445,445,445,,445',
'445,445,,,,,,,,,,,,,,445,,,445,445,445,445,,445,,445,,,,,445,601,601',
'601,601,601,601,,,,601,601,,,,601,,601,601,601,601,601,601,601,,,,,',
'601,601,601,601,601,601,601,,,601,,,,,423,601,601,601,601,601,601,601',
'601,601,601,601,601,,601,601,601,,601,601,601,601,601,423,423,423,423',
'423,423,423,423,423,423,423,,423,423,,,423,423,,601,,,601,,,601,601',
',,601,,601,423,,423,601,423,423,,423,423,423,423,423,601,423,,,,601',
'601,601,601,,601,601,601,601,,,,,601,601,,423,,423,,,601,,601,601,601',
'349,349,349,349,349,349,,,,349,349,,,,349,,349,349,349,349,349,349,349',
',,,,,349,349,349,349,349,349,349,,,349,,,,,429,349,349,349,349,349,349',
'349,349,349,349,349,349,,349,349,349,,349,349,349,349,349,429,429,429',
'429,429,429,429,429,429,429,429,,429,429,,,429,429,,349,,,349,,,349',
'349,,,349,,349,429,,429,349,429,429,,429,429,429,429,429,349,429,,,',
'349,349,349,349,,349,349,349,349,,,,,349,349,,429,,,,,349,,349,349,349',
'811,811,811,811,811,811,,,,811,811,,,,811,,811,811,811,811,811,811,811',
',,,,,811,811,811,811,811,811,811,,,811,,,,,,811,811,811,811,811,811',
'811,811,811,811,811,811,,811,811,811,,811,811,811,811,811,481,481,481',
'481,481,481,481,481,481,481,481,,481,481,,,481,481,,811,,,811,,,811',
'811,,,811,,811,481,,481,811,481,481,,481,481,481,481,481,811,481,,,',
'811,811,811,811,,811,811,811,811,,,,,811,811,481,481,,,,,811,,811,811',
'811,305,305,305,305,305,305,,,,305,305,,,,305,,305,305,305,305,305,305',
'305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,305,305,305,305,305',
'305,305,305,305,305,305,305,,305,305,305,,305,305,305,305,305,530,530',
'530,530,530,530,530,530,530,530,530,,530,530,,,530,530,,305,,,305,,',
'305,305,,,305,,305,530,,530,305,530,530,,530,530,530,530,530,305,530',
',,,305,305,305,305,,305,305,305,305,,,,,305,305,,530,,,,,305,,305,305',
'305,938,938,938,938,938,938,,,,938,938,,,,938,,938,938,938,938,938,938',
'938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,938,938,938,938,938',
'938,938,938,938,938,938,938,,938,938,938,,938,938,938,938,938,280,280',
'280,280,280,280,280,280,280,280,280,,280,280,,,280,280,,938,,,938,,',
'938,938,,,938,,938,280,,280,938,280,280,,280,280,280,280,280,938,280',
',,,938,938,938,938,,938,938,938,938,,,,,938,938,,280,,,,,938,,938,938',
'938,755,755,755,755,755,755,,,,755,755,,,,755,,755,755,755,755,755,755',
'755,,,,,,755,755,755,755,755,755,755,,,755,,,,,,755,755,755,755,755',
'755,755,755,755,755,755,755,,755,755,755,,755,755,755,755,755,771,771',
'771,771,771,771,771,771,771,771,771,,771,771,,,771,771,,755,,,755,,',
'755,755,,,755,,755,771,,771,755,771,771,,771,771,771,771,771,755,771',
',,,755,755,755,755,,755,755,755,755,,,,,755,755,,771,,,,,755,,755,755',
'755,300,300,300,300,300,300,,,,300,300,,,,300,,300,300,300,300,300,300',
'300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,300,300,300,300,300',
'300,300,300,300,300,300,300,,300,300,300,,300,300,300,300,300,865,865',
'865,865,865,865,865,865,865,865,865,,865,865,,,865,865,,300,,,300,,',
'300,300,,,300,,300,865,,865,300,865,865,,865,865,865,865,865,300,865',
',,,300,300,300,300,,300,300,300,300,,,,,300,300,,865,,,,,300,,300,300',
'300,745,745,745,745,745,745,,,,745,745,,,,745,,745,745,745,745,745,745',
'745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,745,745,745,745,745',
'745,745,745,745,745,745,745,,745,745,745,,745,745,745,745,745,21,21',
'21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,745,,,745,,,745,745,,,745',
',745,21,,21,745,21,21,,21,21,21,21,21,745,21,,,,745,745,745,745,,745',
'745,745,745,,,,,745,745,,21,,,,,745,,745,745,745,800,800,800,800,800',
'800,,,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800,800',
'800,800,800,800,,,800,,,,,,800,800,800,800,800,800,800,800,800,800,800',
'800,,800,800,800,,800,800,800,800,800,473,473,473,473,473,473,473,,',
'473,473,,,,,,473,473,,800,,,800,,,800,800,,,800,,800,473,,473,800,473',
'473,,473,473,473,473,473,800,473,,,,800,800,800,800,,800,800,800,800',
',,,,800,800,,,,,,,800,,800,800,800,348,348,348,348,348,348,,,,348,348',
',,,348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348,348',
',,348,,,,,,348,348,348,348,348,348,348,348,348,348,348,348,,348,348',
'348,,348,348,348,348,348,460,460,460,460,460,460,460,460,460,460,460',
',460,460,,,460,460,,348,,,348,,,348,348,,,348,,348,460,,460,348,460',
'460,,460,460,460,460,460,348,460,,,,348,348,348,348,,348,348,348,348',
',,,,348,348,,,,,,,348,,348,348,348,852,852,852,852,852,852,,,,852,852',
',,,852,,852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852',
',,852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852,,852,852',
'852,,852,852,852,852,852,474,474,474,474,474,474,474,,,474,474,,,,,',
'474,474,,852,,,852,,,852,852,,,852,,852,474,,474,852,474,474,,474,474',
'474,474,474,852,474,,,,852,852,852,852,,852,852,852,852,,,,,852,852',
',,,,,,852,,852,852,852,890,890,890,890,890,890,,,,890,890,,,,890,,890',
'890,890,890,890,890,890,,,,,,890,890,890,890,890,890,890,,,890,,,,,',
'890,890,890,890,890,890,890,890,890,890,890,890,,890,890,890,,890,890',
'890,890,890,475,475,475,475,475,475,475,,,475,475,,,,,,475,475,,890',
',,890,,,890,890,,,890,,890,475,,475,890,475,475,,475,475,475,475,475',
'890,475,,,,890,890,890,890,,890,890,890,890,,,,,890,890,,,,,,,890,,890',
'890,890,741,741,741,741,741,741,,,,741,741,,,,741,,741,741,741,741,741',
'741,741,,,,,,741,741,741,741,741,741,741,,,741,,,,,,741,741,741,741',
'741,741,741,741,741,741,741,741,,741,741,741,,741,741,741,741,741,461',
'461,461,461,461,461,461,461,461,461,461,,461,461,,,461,461,,741,,,741',
',,741,741,,,741,,741,461,,461,741,461,461,,461,461,461,461,461,741,461',
',,,741,741,741,741,,741,741,741,741,,,,,741,741,,,,,,,741,,741,741,741',
'736,736,736,736,736,736,,,,736,736,,,,736,,736,736,736,736,736,736,736',
',,,,,736,736,736,736,736,736,736,,,736,,,,,,736,736,736,736,736,736',
'736,736,736,736,736,736,,736,736,736,,736,736,736,736,736,476,476,476',
'476,476,476,476,,,476,476,,,,,,476,476,,736,,,736,,,736,736,,,736,,736',
'476,,476,736,476,476,,476,476,476,476,476,736,476,,,,736,736,736,736',
',736,736,736,736,,,,,736,736,,,,,,,736,,736,736,736,234,234,234,234',
'234,234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234',
'234,234,234,234,234,,,234,,,,,,234,234,234,234,234,234,234,234,234,234',
'234,234,,234,234,234,,234,234,234,234,234,480,480,480,480,480,480,480',
'480,,480,480,,,,,,480,480,,234,,,234,,,234,234,,,234,,234,480,,480,234',
'480,480,,480,480,480,480,480,234,480,,,,234,234,234,234,,234,234,234',
'234,,,,,234,234,,,,,,,234,,234,234,234,846,846,846,846,846,846,,,,846',
'846,,,,846,,846,846,846,846,846,846,846,,,,,,846,846,846,846,846,846',
'846,,,846,,,,,,846,846,846,846,846,846,846,846,846,846,846,846,,846',
'846,846,,846,846,846,846,846,471,471,471,471,471,471,471,,,471,471,',
',,,,471,471,,846,,,846,,,846,846,,,846,,846,471,,471,846,471,471,,471',
'471,471,471,471,846,471,,,,846,846,846,846,,846,846,846,846,,,,,846',
'846,,,,,,,846,,846,846,846,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33',
'33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33',
'33,33,33,33,33,,33,33,33,,33,33,33,33,33,472,472,472,472,472,472,472',
',,472,472,,,,,,472,472,,33,,,33,,,33,33,,,33,,33,472,,472,33,472,472',
',472,472,472,472,472,33,472,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,',
',,,,33,,33,33,33,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0',
'0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,479,479,479',
'479,479,479,479,,,479,479,,,,,,479,479,,0,,,0,,,0,0,,,0,,0,479,,479',
'0,479,479,,479,479,479,479,479,0,479,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,',
',,,0,,0,0,0,577,577,577,577,577,577,,,,577,577,,,,577,,577,577,577,577',
'577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,577,577,577',
'577,577,577,577,577,577,577,577,577,,577,577,577,,577,577,577,577,577',
'468,,,,,,,,,,,,,,,,468,468,,577,,,577,,,577,577,,,577,,577,468,,468',
'577,468,468,,468,468,,,,577,,,,,577,577,577,577,,577,577,577,577,,,',
',577,577,,,,,,,577,,577,577,577,889,889,889,889,889,889,,,,889,889,',
',,889,,889,889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889',
',,889,,,,,,889,889,889,889,889,889,889,889,889,889,889,889,,889,889',
'889,,889,889,889,889,889,469,,,,,,,,,,,,,,,,469,469,,889,,,889,,,889',
'889,,,889,,889,469,,469,889,469,469,,469,469,,,,889,,,,,889,889,889',
'889,,889,889,889,889,,,,,889,889,,,,,,,889,,889,889,889,331,331,331',
'331,331,331,,,,331,331,,,,331,,331,331,331,331,331,331,331,,,,,,331',
'331,331,331,331,331,331,,,331,,,,,,331,331,331,331,331,331,331,331,331',
'331,331,331,,331,331,331,,331,331,331,331,331,,,,,,,,,,,,,,,,,,,,331',
',,331,,,331,331,,,331,,331,,,,331,,,,,,,,,331,,,,,331,331,331,331,,331',
'331,331,331,,,,,331,331,,,,,,,331,,331,331,331,124,124,124,124,124,124',
',,,124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124',
'124,124,124,,,124,,,,,,124,124,124,124,124,124,124,124,124,124,124,124',
',124,124,124,,124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124',
'124,,,124,,124,,,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124',
',,,,124,124,,,,,,,124,,124,124,124,883,883,883,883,883,883,,,,883,883',
',,,883,,883,883,883,883,883,883,883,,,,,,883,883,883,883,883,883,883',
',,883,,,,,,883,883,883,883,883,883,883,883,883,883,883,883,,883,883',
'883,,883,883,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883,883,,,883',
',883,,,,883,,,,,,,,,883,,,,,883,883,883,883,,883,883,883,883,,,,,883',
'883,,,,,,,883,,883,883,883,964,964,964,964,964,964,,,,964,964,,,,964',
',964,964,964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964',
',,,,,964,964,964,964,964,964,964,964,964,964,964,964,,964,964,964,,964',
'964,964,964,964,,,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,',
',964,,,,,,,,,964,,,,,964,964,964,964,,964,964,964,964,,,,,964,964,,',
',,,,964,,964,964,964,209,209,209,209,209,209,,,,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
'209,209,209,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209',
'209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,209,,,,209',
',,,,,,,,209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,,,,,,209',
',209,209,209,959,959,959,959,959,959,,,,959,959,,,,959,,959,959,959',
'959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959,,,,,,959,959',
'959,959,959,959,959,959,959,959,959,959,,959,959,959,,959,959,959,959',
'959,,,,,,,,,,,,,,,,,,,,959,,,959,,,959,959,,,959,,959,,,,959,,,,,,,',
',959,,,,,959,959,959,959,,959,959,959,959,,,,,959,959,,,,,,,959,,959',
'959,959,580,580,580,580,580,580,,,,580,580,,,,580,,580,580,580,580,580',
'580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,580,580,580,580',
'580,580,580,580,580,580,580,580,,580,580,580,,580,580,580,580,580,,',
',,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580,,,,580,,,,,,,,,580,',
',,,580,580,580,580,,580,580,580,580,,,,,580,580,,,,,,,580,,580,580,580',
'866,866,866,866,866,866,,,,866,866,,,,866,,866,866,866,866,866,866,866',
',,,,,866,866,866,866,866,866,866,,,866,,,,,,866,866,866,866,866,866',
'866,866,866,866,866,866,,866,866,866,,866,866,866,866,866,,,,,,,,,,',
',,,,,,,,,866,,,866,,,866,866,,,866,,866,,,,866,,,,,,,,,866,,,,,866,866',
'866,866,,866,866,866,866,,,,,866,866,,,,790,790,790,866,790,866,866',
'866,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790',
'790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790',
'790,,790,790,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790',
',,,,,790,,,,,,,,,790,,,,,790,790,790,790,,790,790,790,790,,,,,790,790',
',,,788,788,788,790,788,790,790,790,788,788,,,,788,,788,788,788,788,788',
'788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,,,788,,,788,788,788',
'788,788,788,788,788,,788,788,788,,788,788,788,788,788,,,,,,,,,,,,,,',
',,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,,788,,,,,788,788,788',
'788,,788,788,788,788,,,,,788,788,,,,787,787,787,788,787,788,788,788',
'787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787',
'787,787,,,787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787,787',
',787,787,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,',
',,,787,,,,,,,,,787,,,,,787,787,787,787,,787,787,787,787,,,,,787,787',
',,,786,786,786,787,786,787,787,787,786,786,,,,786,,786,786,786,786,786',
'786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786',
'786,786,786,786,786,,786,786,786,,786,786,786,786,786,,,,,,,,,,,,,,',
',,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,,786,,,,,786,786,786',
'786,,786,786,786,786,,,,,786,786,,,,785,785,785,786,785,786,786,786',
'785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785',
'785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785',
',785,785,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,',
',,,785,,,,,,,,,785,,,,,785,785,785,785,,785,785,785,785,,,,,785,785',
',,,772,772,772,785,772,785,785,785,772,772,,,,772,,772,772,772,772,772',
'772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772',
'772,772,772,772,772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,',
',,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772',
'772,,772,772,772,772,,,,,772,772,,,,233,233,233,772,233,772,772,772',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233',
',,,236,236,236,233,236,233,233,233,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,',
',,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,',
',,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,262,262,262,257,262,257,257,257,262,262,,,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,262,262,262,,,,,,,,,,,,,,',
',,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,,262,,,,,262,262,262',
'262,,262,262,262,262,,,,,262,262,,,,764,764,764,262,764,262,262,262',
'764,764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764',
'764,764,,,764,,,,,,,764,,,764,764,764,764,764,764,764,764,,764,764,764',
',764,764,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764,,,764,,',
',,,764,,,,,,,,,764,,,,,764,764,764,764,,764,764,764,764,,,,,764,764',
',,,269,269,269,764,269,764,764,764,269,269,,,,269,,269,269,269,269,269',
'269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269',
'269,269,269,269,269,269,269,269,269,,269,269,269,269,269,,,,,,,,,,,',
',,,,,,,,269,,,269,,,269,269,,,269,,269,,269,,269,,,269,,,,,,269,,,,',
'269,269,269,269,,269,269,269,269,,,,,269,269,,,,270,270,270,269,270',
'269,269,269,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270',
'270,270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,',
'270,270,,,270,,270,,270,,270,,,270,,,,,,270,,,,,270,270,270,270,,270',
'270,270,270,,,,,270,270,,,,278,278,278,270,278,270,270,270,278,278,',
',,278,,278,278,278,278,278,278,278,,,,,,278,278,278,278,278,278,278',
',,278,,,,,,,278,,,278,278,278,278,278,278,278,278,278,278,278,278,,278',
'278,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,,278,,278,,278',
',278,,,278,,,,,,278,,,,,278,278,278,278,,278,278,278,278,,,,,278,278',
'278,,,285,285,285,278,285,278,278,278,285,285,,,,285,,285,285,285,285',
'285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285',
'285,285,285,285,285,285,,285,285,285,,285,285,285,285,285,,,,,,,,,,',
',,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285',
'285,285,,285,285,285,285,,,,,285,285,,,,742,742,742,285,742,285,285',
'285,742,742,,,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742',
'742,742,742,,,742,,,,,,,742,,,742,742,742,742,742,742,742,742,,742,742',
'742,,742,742,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742',
',,,,,742,,,,,,,,,742,,,,,742,742,742,742,,742,742,742,742,,,,,742,742',
',,,287,287,287,742,287,742,742,742,287,287,,,,287,,287,287,287,287,287',
'287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287',
'287,287,287,287,287,,287,287,287,,287,287,287,287,287,,,,,,,,,,,,,,',
',,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,,,,287,287,287',
'287,,287,287,287,287,,,,,287,287,,,,290,290,290,287,290,287,287,287',
'290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290',
'290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290,290',
',290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,',
',,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290,290,290,,,,,290,290',
',,,291,291,291,290,291,290,290,290,291,291,,,,291,,291,291,291,291,291',
'291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291,291,291',
'291,291,291,291,291,,291,291,291,,291,291,291,291,291,,,,,,,,,,,,,,',
',,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,,291,,,,,291,291,291',
'291,,291,291,291,291,,,,,291,291,,,,,,,291,,291,291,291,296,296,296',
'296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296',
'296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296,296,296,296',
'296,296,,296,296,296,,296,296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296',
',,296,296,,,296,,296,,,,296,,,,,,,,,296,,,,,296,296,296,296,,296,296',
'296,296,,,,,296,296,,,,565,565,565,296,565,296,296,296,565,565,,,,565',
',565,565,565,565,565,565,565,,,,,,565,565,565,565,565,565,565,,,565',
',,,,,,565,,,565,565,565,565,565,565,565,565,,565,565,565,,565,565,565',
'565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565,565,,,565,,,,,,565,,,,,,',
',,565,,,,,565,565,565,565,,565,565,565,565,,,,,565,565,,,,,,,565,,565',
'565,565,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5',
',,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5',
',,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,979',
'979,979,5,979,5,5,5,979,979,,,,979,,979,979,979,979,979,979,979,,,,',
',979,979,979,979,979,979,979,,,979,,,,,,,979,,,979,979,979,979,979,979',
'979,979,979,979,979,979,,979,979,979,979,979,,,,,,,,,,,,,,,,,,,,979',
',,979,,,979,979,,,979,,979,,979,,979,,,979,,,,,,979,,,,,979,979,979',
'979,,979,979,979,979,,,,,979,979,,,,20,20,20,979,20,979,979,979,20,20',
',,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20',
',,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,',
',,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20',
'20,,,,,20,20,,,,934,934,934,20,934,20,20,20,934,934,,,,934,,934,934',
'934,934,934,934,934,,,,,,934,934,934,934,934,934,934,,,934,,,,,,,934',
',,934,934,934,934,934,934,934,934,,934,934,934,,934,934,,,934,,,,,,',
',,,,,,,,,,,,,934,,,934,,,934,934,,,934,,,,,,,,,,,,,,,,,,,,934,934,934',
'934,,934,934,934,934,,,,,934,934,,,,29,29,29,934,29,934,934,934,29,29',
',,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29',
',,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,',
',,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,',
'29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30',
'30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30',
'30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,',
',30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,',
',,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31',
'31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31',
',31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34',
'34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34',
'34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35',
',35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35',
'35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,',
',35,35,,,35,,,900,,900,900,900,900,900,,,,,,,,,900,,35,35,35,35,,35',
'35,35,35,,,,,35,35,,,,35,,900,35,,35,35,35,887,887,887,,887,900,900',
',887,887,900,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887',
'887,887,887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,,887,887',
'887,,887,887,,,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,,,',
',,,,,,,,,,,,,,,887,887,887,887,,887,887,887,887,,,,,887,887,,,,878,878',
'878,887,878,887,887,887,878,878,,,,878,,878,878,878,878,878,878,878',
',,,,,878,878,878,878,878,878,878,,,878,,,,,,,878,,,878,878,878,878,878',
'878,878,878,,878,878,878,,878,878,,,878,,,,,,,,,,,,,,,,,,,,878,,,878',
',,878,878,,,878,,,,,,,,,,,,,,,,,,,,878,878,878,878,,878,878,878,878',
',,,,878,878,,,,42,42,42,878,42,878,878,878,42,42,,,,42,,42,42,42,42',
'42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42',
'42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,',
',42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43',
'43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43',
'43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43',
'43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43',
',,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45,45,45,43,45,43,43,43,45',
'45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,',
'45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,',
',,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45',
'45,45,,,,,45,45,,,,864,864,864,45,864,45,45,45,864,864,,,,864,,864,864',
'864,864,864,864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,,864',
',,864,864,864,864,864,864,864,864,,864,864,864,,864,864,864,864,864',
',,,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,864,,,,,,,,,864,,',
',,864,864,864,864,,864,864,864,864,,,,,864,864,,,,863,863,863,864,863',
'864,864,864,863,863,,,,863,,863,863,863,863,863,863,863,,,,,,863,863',
'863,863,863,863,863,,,863,,,,,,,863,,,863,863,863,863,863,863,863,863',
'863,863,863,863,,863,863,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,',
'863,863,,,863,,,,863,,863,,,863,,,,,,863,,,,,863,863,863,863,,863,863',
'863,863,,,,,863,863,,,,,,,863,,863,863,863,59,59,59,59,59,,,,59,59,',
',,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,59,59',
',59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,',
',,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,,59,59,59,59,,59,59',
'59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60,60,60',
'60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60',
'60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60',
',,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,',
',,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61',
'61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,61,61',
',61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,61',
',,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,64,64,64,61,64,61',
'61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,',
'64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,',
',,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64',
'64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65,65,,,,65,,65',
'65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65',
'65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65,,,65',
',,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65,65,65,,,,,65',
'65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68,68,68,68,68,68,,,,',
',68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68',
'68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,',
',,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68,,,,,68,68,,68,68',
'68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69',
'69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,',
'69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,,,,,,,,,,,,,69,69',
'69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,70,,,70,,,70',
',,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,',
',,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,707,,707,707,707',
'707,707,,,,,,,,,707,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,,,707,71',
',71,71,71,113,113,113,113,113,707,707,,113,113,707,,,113,,113,113,113',
'113,113,113,113,,,,,,113,113,113,113,113,113,113,,,113,,,,,,113,113',
'113,113,113,113,113,113,113,113,113,113,,113,113,113,,113,113,113,113',
'113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,113,,,,113,,,,,,,',
',113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,,,,,113,113,',
'113,113,113,118,118,118,,118,,,,118,118,,,,118,,118,118,118,118,118',
'118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118',
'118,118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,',
',,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118',
'118,,118,118,118,118,,,,,118,118,,,,119,119,119,118,119,118,118,118',
'119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119',
'119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119',
',119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,',
',,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,,,,,119,119',
',,,120,120,120,119,120,119,119,119,120,120,,,,120,,120,120,120,120,120',
'120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120',
'120,120,120,120,120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,',
',,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,,120,,,,,120,120,120',
'120,,120,120,120,120,,,,,120,120,,,,121,121,121,120,121,120,120,120',
'121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121',
'121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121',
',121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121',
',,,,,,121,,121,121,121,122,122,122,122,122,,,,122,122,,,,122,,122,122',
'122,122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,122',
'122,,122,122,122,122,122,122,122,122,122,,122,122,122,,122,122,122,122',
'122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122,,,,122,,,,,,,',
',122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122,,,,845,845,845',
'122,845,122,122,122,845,845,,,,845,,845,845,845,845,845,845,845,,,,',
',845,845,845,845,845,845,845,,,845,,,,,,,845,,,845,845,845,845,845,845',
'845,845,,845,845,845,,845,845,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845',
',,845,845,,,845,,845,,,,845,,,,,,,,,845,,,,,845,845,845,845,,845,845',
'845,845,,,,,845,845,,,,842,842,842,845,842,845,845,845,842,842,,,,842',
',842,842,842,842,842,842,842,,,,,,842,842,842,842,842,842,842,,,842',
',,,,,,842,,,842,842,842,842,842,842,842,842,,842,842,842,,842,842,842',
'842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,,,,,842,,,,,,',
',,842,,,,,842,842,842,842,,842,842,842,842,,,,,842,842,,,,210,210,210',
'842,210,842,842,842,210,210,,,,210,,210,210,210,210,210,210,210,,,,',
',210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210',
'210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210',
',,210,210,,,210,,210,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210',
'210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210,211,211,,,,211',
',211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211',
',,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,211',
'211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,211,,,,211,,,',
',,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211,,,,212,212',
'212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212',
',,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212',
'212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212,213,213,',
',,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213',
',,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213',
'213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213',
',,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213,,,,214',
'214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214,214',
'214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214',
'214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,',
',214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214',
',214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214,215',
'215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215',
'215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,215,215',
',215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215',
',215,,215,,,215,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215',
'215,,,,220,220,220,215,220,215,215,215,220,220,,,,220,,220,220,220,220',
'220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220',
'220,220,220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,',
',,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,,,,220,220',
'220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221,220,220',
'220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221',
'221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221',
'221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221',
',,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221,,,,,221,221',
',,,222,222,222,221,222,221,221,221,222,222,,,,222,,222,222,222,222,222',
'222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222',
'222,222,222,222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,',
',,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,,222,,,,,222,222,222',
'222,,222,222,222,222,,,,,222,222,222,,,692,692,692,222,692,222,222,222',
'692,692,,,,692,,692,692,692,692,692,692,692,,,,,,692,692,692,692,692',
'692,692,,,692,,,,,,,692,,,692,692,692,692,692,692,692,692,,692,692,692',
',692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,692',
',,,692,,,,,,,,,692,,,,,692,692,692,692,,692,692,692,692,,,,,692,692',
',,,687,687,687,692,687,692,692,692,687,687,,,,687,,687,687,687,687,687',
'687,687,,,,,,687,687,687,687,687,687,687,,,687,,,,,,,687,,,687,687,687',
'687,687,687,687,687,,687,687,687,,687,687,,,687,,,,,,,,,,,,,,,,,,,,687',
',,687,,,687,687,,,687,,,,,,,,,,,,,,,,,,,,687,687,687,687,,687,687,687',
'687,,,,,687,687,,,,676,676,676,687,676,687,687,687,676,676,,,,676,,676',
'676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,',
',676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,,676,',
',,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,,,,,,,,,,,,,,,676,676',
'676,676,,676,676,676,676,,,,,676,676,,,,673,673,673,676,673,676,676',
'676,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673',
'673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673,673',
'673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673',
',,,,,673,,,,,,,,,673,,,,,673,673,673,673,,673,673,673,673,,,,,673,673',
',,,321,321,321,673,321,673,673,673,321,321,,,,321,,321,321,321,321,321',
'321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,,321,,,321,321,321',
'321,321,321,321,321,,321,321,321,,321,321,,,321,,,,,,,,,,,,,,,,,,,,321',
',,321,,,321,321,,,321,,,,,,,,,,,,,,,,,,,,321,321,321,321,,321,321,321',
'321,,,,,321,321,,,,670,670,670,321,670,321,321,321,670,670,,,,670,,670',
'670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,',
',670,,,670,670,670,670,670,670,670,670,,670,670,670,,670,670,670,670',
'670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,,670',
',,,,670,670,670,670,,670,670,670,670,,,,,670,670,,,,646,646,646,670',
'646,670,670,670,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646',
'646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646',
'646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,',
',646,646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646',
'646,,,,,646,646,,,,328,328,328,646,328,646,646,646,328,328,,,,328,,328',
'328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,',
',328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328,328,328',
'328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,,328',
',,,,328,328,328,328,,328,328,328,328,,,,,328,328,,,,330,330,330,328',
'330,328,328,328,330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330',
'330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330,330,330,330,330',
'330,,330,330,330,,330,330,330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,330',
',330,330,,,330,,,,,,330,,,,,,,,,330,,,,,330,330,330,330,,330,330,330',
'330,,,,,330,330,,,,645,645,645,330,645,330,330,330,645,645,,,,645,,645',
'645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,',
',645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,645,645',
'645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,,645',
',,,,645,645,645,645,,645,645,645,645,,,,,645,645,,,,641,641,641,645',
'641,645,645,645,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641',
'641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641,641',
'641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,',
',641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641,641,641',
'641,,,,,641,641,,,,640,640,640,641,640,641,641,641,640,640,,,,640,,640',
'640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,',
',640,,,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640,640',
'640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,,,,,640,,,,,,,,,640',
',,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,639,639,639,640',
'639,640,640,640,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639',
'639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639',
'639,639,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639',
',,639,639,,,639,,,,639,,639,,,639,,,,,,639,,,,,639,639,639,639,,639',
'639,639,639,,,,,639,639,,,,638,638,638,639,638,639,639,639,638,638,',
',,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638,638',
',,638,,,,,,,638,,,638,638,638,638,638,638,638,638,638,638,638,638,,638',
'638,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,638,,638',
',638,,,638,,,,,,638,,,,,638,638,638,638,,638,638,638,638,,,,,638,638',
',,,635,635,635,638,635,638,638,638,635,635,,,,635,,635,635,635,635,635',
'635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635',
'635,635,635,635,635,,635,635,635,,635,635,635,635,635,,,,,,,,,,,,,,',
',,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635,,,,,635,635,635',
'635,,635,635,635,635,,,,,635,635,,,,,,,635,,635,635,635,634,634,634',
'634,634,,,,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634',
'634,634,634,634,634,,,634,,,,,,634,634,,634,634,634,634,634,634,634',
'634,634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634',
',,634,634,,,634,,634,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634',
'634,634,,,,,634,634,,,,631,631,631,634,631,634,634,634,631,631,,,,631',
',631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631',
',,,,,,631,,,631,631,631,631,631,631,631,631,631,631,631,631,,631,631',
'631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631,,631,',
'631,,,631,,,,,,631,,,,,631,631,631,631,,631,631,631,631,,,,,631,631',
',,,630,630,630,631,630,631,631,631,630,630,,,,630,,630,630,630,630,630',
'630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630',
'630,630,630,630,630,,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,',
',,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630',
'630,,630,630,630,630,,,,,630,630,,,,629,629,629,630,629,630,630,630',
'629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629,629,629,629,629',
'629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629,629,,629,629,629',
',629,629,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,629',
',,,629,,,,,,,,,629,,,,,629,629,629,629,,629,629,629,629,,,,,629,629',
',,,347,347,347,629,347,629,629,629,347,347,,,,347,,347,347,347,347,347',
'347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347',
'347,347,347,347,347,,347,347,347,,347,347,347,347,347,,,,,,,,,,,,,,',
',,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,,347,,,,,347,347,347',
'347,,347,347,347,347,,,,,347,347,,,,597,597,597,347,597,347,347,347',
'597,597,,,,597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597',
'597,597,,,597,,,,,,,597,,,597,597,597,597,597,597,597,597,597,597,597',
'597,,597,597,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597',
',597,,597,,597,,,597,,,,,,597,,,,,597,597,597,597,,597,597,597,597,',
',,,597,597,,,,587,587,587,597,587,597,597,597,587,587,,,,587,,587,587',
'587,587,587,587,587,,,,,,587,587,587,587,587,587,587,,,587,,,,,,,587',
',,587,587,587,587,587,587,587,587,587,587,587,587,,587,587,587,587,587',
',,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,,587,,587,,587,,,587,,',
',,,587,,,,,587,587,587,587,,587,587,587,587,,,,,587,587,,,,586,586,586',
'587,586,587,587,587,586,586,,,,586,,586,586,586,586,586,586,586,,,,',
',586,586,586,586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586',
'586,586,,586,586,586,,586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586',
',,586,586,,,586,,586,,,,586,,,,,,,,,586,,,,,586,586,586,586,,586,586',
'586,586,,,,,586,586,,,,368,368,368,586,368,586,586,586,368,368,,,,368',
',368,368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368,,,368',
',,,,,,368,,,368,368,368,368,368,368,368,368,,368,368,368,,368,368,368',
'368,368,,,,,,,,,,,,,,,,,,,,368,,,368,,,368,368,,,368,,,,,,368,,,,,,',
',,368,,,,,368,368,368,368,,368,368,368,368,,,,,368,368,,,,540,540,540',
'368,540,368,368,368,540,540,,,,540,,540,540,540,540,540,540,540,,,,',
',540,540,540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540',
'540,540,540,540,540,540,,540,540,540,540,540,,,,,,,,,,,,,,,,,,,,540',
',,540,,,540,540,,,540,,,,,,540,,,540,,,,,,540,,,,,540,540,540,540,,540',
'540,540,540,,,,,540,540,,,,537,537,537,540,537,540,540,540,537,537,',
',,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537',
',,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537,537,,537',
'537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,537,,',
',537,,,537,,,,,,537,,,,,537,537,537,537,,537,537,537,537,,,,,537,537',
',,,531,531,531,537,531,537,537,537,531,531,,,,531,,531,531,531,531,531',
'531,531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531',
'531,531,531,531,531,,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,',
',,,,,531,,,531,,,531,531,,,531,,,,,,531,,,,,,,,,531,,,,,531,531,531',
'531,,531,531,531,531,,,,,531,531,,,,526,526,526,531,526,531,531,531',
'526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526',
'526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526',
',526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,',
',,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526',
',,,525,525,525,526,525,526,526,526,525,525,,,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525',
'525,525,525,525,525,,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,',
',,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,,525,,,,,525,525,525',
'525,,525,525,525,525,,,,,525,525,,,,522,522,522,525,522,525,525,525',
'522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522',
',522,522,,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,,,,,,,',
',,,,,,,,,,,522,522,522,522,,522,522,522,522,,,,,522,522,,,,516,516,516',
'522,516,522,522,522,516,516,,,,516,,516,516,516,516,516,516,516,,,,',
',516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516,516,516,516',
'516,516,516,516,516,516,,516,516,516,516,516,,,,,,,,,,,,,,,,,,,,516',
',,516,,,516,516,,,516,,516,,516,,516,,,516,,,,,,516,,,,,516,516,516',
'516,,516,516,516,516,,,,,516,516,,,,384,384,384,516,384,516,516,516',
'384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384,384,384,384,384',
'384,384,,,384,,,,,,,384,,,384,384,384,384,384,384,384,384,,384,384,384',
',384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,,,384,384,,,384,,',
',,,384,,,,,,,,,384,,,,,384,384,384,384,,384,384,384,384,,,,,384,384',
',,,514,514,514,384,514,384,384,384,514,514,,,,514,,514,514,514,514,514',
'514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514',
'514,514,514,514,514,,514,514,514,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514',
',,514,,,514,514,,,514,,,1025,,1025,1025,1025,1025,1025,,,,,,,,,1025',
',514,514,514,514,,514,514,514,514,,,,,514,514,,,,,,1025,514,,514,514',
'514,506,506,506,506,506,1025,1025,,506,506,1025,,,506,,506,506,506,506',
'506,506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,506,506,506',
'506,506,506,506,506,506,506,506,506,,506,506,506,,506,506,506,506,506',
',,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,,506',
',,,,506,506,506,506,,506,506,506,506,,,,,506,506,,,,,,506,506,,506,506',
'506,500,500,500,,500,,,,500,500,,,,500,,500,500,500,500,500,500,500',
',,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500',
'500,500,500,,500,500,500,,500,500,500,500,500,,,,,,,,,,,,,,,,,,,,500',
',,500,,,500,500,,,500,,,,,,500,,,,,,,,,500,,,,,500,500,500,500,,500',
'500,500,500,,,,,500,500,,,,498,498,498,500,498,500,500,500,498,498,',
',,498,,498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498',
',,498,,,,,,,498,,,498,498,498,498,498,498,498,498,498,498,498,498,,498',
'498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,,,498',
',498,,,498,,,,,,498,,,,,498,498,498,498,,498,498,498,498,,,,,498,498',
',,,496,496,496,498,496,498,498,498,496,496,,,,496,,496,496,496,496,496',
'496,496,,,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496,496',
'496,496,496,496,496,496,496,496,496,,496,496,496,496,496,,,,,,,,,,,',
',,,,,,,,496,,,496,,,496,496,,,496,,496,,496,,496,,,496,,,,,,496,,,,',
'496,496,496,496,,496,496,496,496,,,,,496,496,,,,459,459,459,496,459',
'496,496,496,459,459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459',
'459,459,459,459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459',
',459,459,459,,459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459',
'459,,,459,,,,,,459,,,,,,,,,459,,,,,459,459,459,459,,459,459,459,459',
',,,,459,459,,,,458,458,458,459,458,459,459,459,458,458,,,,458,,458,458',
'458,458,458,458,458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458',
',,458,458,458,458,458,458,458,458,,458,458,458,,458,458,458,458,458',
',,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,,,,,458,,,,,,,,,458,,',
',,458,458,458,458,,458,458,458,458,,,,,458,458,,,,457,457,457,458,457',
'458,458,458,457,457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457',
'457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457',
',457,457,457,,457,457,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457',
'457,,,457,,,,,,457,,,,,,,,,457,,,,,457,457,457,457,,457,457,457,457',
',,,,457,457,,,,455,455,455,457,455,457,457,457,455,455,,,,455,,455,455',
'455,455,455,455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455',
',,455,455,455,455,455,455,455,455,455,455,455,455,,455,455,455,455,455',
',,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,455,,455,,455,,,455,,',
',,,455,,,,,455,455,455,455,,455,455,455,455,,,,,455,455,,,,412,412,412',
'455,412,455,455,455,412,412,,,,412,,412,412,412,412,412,412,412,,,,',
',412,412,412,412,412,412,412,,,412,,,,,,,412,,,412,412,412,412,412,412',
'412,412,,412,412,412,,412,412,412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412',
',,412,412,,,412,,,,,,412,,,,,,,,,412,,,,,412,412,412,412,,412,412,412',
'412,,,,,412,412,,,,304,304,304,412,304,412,412,412,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,',
',304,,,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,,304,',
',,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,999,,999,999,999,999,999',
',,,,,,,,999,,304,304,304,304,,304,304,304,304,,,,,304,304,,,,304,,999',
'304,,304,304,304,709,709,709,,709,999,999,,709,709,999,,,709,,709,709',
'709,709,709,709,709,,,,,,709,709,709,709,709,709,709,,,709,,,,,,,709',
',,709,709,709,709,709,709,709,709,,709,709,709,,709,709,709,709,709',
',,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,709,,,,,,,,,709,,',
',,709,709,709,709,,709,709,709,709,,,,,709,709,,,,,,,709,,709,709,709',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8',
'8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9',
',,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9',
'9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,626',
'626,626,626,626,626,626,626,626,626,626,626,626,626,626,626,626,626',
'626,626,626,626,626,626,,,,626,626,626,626,626,626,626,626,626,626,',
',,,,626,626,626,626,626,626,626,626,626,,,626,,,,,,,,626,626,,626,626',
'626,626,626,626,626,,,626,626,,,,626,626,626,626,,,,,,,,,,,,,,626,626',
',626,626,626,626,626,626,626,626,626,626,626,626,,,626,626,,,,,,,,,',
',,,,626,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,,,,403,403,403,403,403,403,403,403',
'403,403,,,,,,403,403,403,403,403,403,403,403,403,,,403,,,,,,,,403,403',
',403,403,403,403,403,403,403,,,403,403,,,,403,403,403,403,,,,,,,,,,',
',,,403,403,,403,403,403,403,403,403,403,403,403,403,403,403,,,403,403',
',,,,,,,,,,,,,403,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,72,72,72,72,72,72,,,,72,72,72,72,72,72,72,72,72,72,,,,,,72,72,72',
'72,72,72,72,72,72,72,72,72,,72,,,,,,72,72,,72,72,72,72,72,72,72,,,72',
'72,,,,72,72,72,72,,,,,,72,,,,,,,,72,72,,72,72,72,72,72,72,72,72,72,72',
'72,72,,,72,748,748,748,748,748,748,748,748,748,748,748,748,748,748,748',
'748,748,748,748,748,748,748,748,748,,,,748,748,748,748,748,748,748,748',
'748,748,,,,,,748,748,748,748,748,748,748,748,748,,,748,,,,,,,,748,748',
',748,748,748,748,748,748,748,,,748,748,,,,748,748,748,748,798,,798,798',
'798,798,798,,,,,,,748,748,798,748,748,748,748,748,748,748,748,748,748',
'748,748,,,748,,,,,,,798,,980,980,,,980,,,798,798,798,798,,980,980,798',
'980,980,980,980,980,980,980,,,980,980,,,,980,980,980,980,,,,,,980,,798',
',,,,,980,980,,980,980,980,980,980,980,980,980,980,980,980,980,527,527',
'980,,527,,,,,,,,527,527,,527,527,527,527,527,527,527,,,527,527,,,,527',
'527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527,527,527,527',
'527,527,527,527,518,518,527,,518,,,,,,,,518,518,,518,518,518,518,518',
'518,518,,,518,518,,,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518',
'518,518,518,518,518,518,518,518,518,518,981,981,518,,981,,,,,,,,981',
'981,,981,981,981,981,981,981,981,,,981,981,,,,981,981,981,981,,,,,,981',
',,,,,,,981,981,,981,981,981,981,981,981,981,981,981,981,981,981,454',
'454,981,,454,,,,,,,,454,454,,454,454,454,454,454,454,454,,,454,454,',
',,454,454,454,454,,,,,,454,,,,,,,,454,454,,454,454,454,454,454,454,454',
'454,454,454,454,454,265,265,454,,265,,,,,,,,265,265,,265,265,265,265',
'265,265,265,,,265,265,,,,265,265,265,265,,,,,,,,,,,,,,265,265,,265,265',
'265,265,265,265,265,265,265,265,265,265,976,976,265,,976,,,,,,,,976',
'976,,976,976,976,976,976,976,976,,,976,976,,,,976,976,976,976,,,,,,976',
',,,,,,,976,976,,976,976,976,976,976,976,976,976,976,976,976,976,528',
'528,976,,528,,,,,,,,528,528,,528,528,528,528,528,528,528,,,528,528,',
',,528,528,528,528,,,,,,528,,,,,,,,528,528,,528,528,528,528,528,528,528',
'528,528,528,528,528,595,595,528,,595,,,,,,,,595,595,,595,595,595,595',
'595,595,595,,,595,595,,,,595,595,595,595,,,,,,595,,,,,,,,595,595,,595',
'595,595,595,595,595,595,595,595,595,595,595,596,596,595,,596,,,,,,,',
'596,596,,596,596,596,596,596,596,596,,,596,596,,,,596,596,596,596,,',
',,,596,,,,,,,,596,596,,596,596,596,596,596,596,596,596,596,596,596,596',
'517,517,596,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,,,517,517',
',,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517',
'517,517,517,517,517,517,633,633,517,,633,,,,,,,,633,633,,633,633,633',
'633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,633,,,,,,,,633,633',
',633,633,633,633,633,633,633,633,633,633,633,633,632,632,633,,632,,',
',,,,,632,632,,632,632,632,632,632,632,632,,,632,632,,,,632,632,632,632',
',,,,,632,,,,,,,,632,632,,632,632,632,632,632,632,632,632,632,632,632',
'632,453,453,632,,453,,,,,,,,453,453,,453,453,453,453,453,453,453,,,453',
'453,,,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453',
'453,453,453,453,453,453,453,588,588,453,,588,,,,,,,,588,588,,588,588',
'588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,,,588',
'588,,588,588,588,588,588,588,588,588,588,588,588,588,216,216,588,,216',
',,,,,,,216,216,,216,216,216,216,216,216,216,,,216,216,,,,216,216,216',
'216,,,,,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,216,216,216',
'216,216,217,217,216,,217,,,,,,,,217,217,,217,217,217,217,217,217,217',
',,217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217,,217,217,217,217',
'217,217,217,217,217,217,217,217,589,589,217,,589,,,,,,,,589,589,,589',
'589,589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,',
',589,589,,589,589,589,589,589,589,589,589,589,589,589,589,,926,589,926',
'926,926,926,926,,997,,997,997,997,997,997,926,,,,,,,,997,,894,,894,894',
'894,894,894,,,,,,926,,,894,,,,,997,926,926,926,926,,,,926,997,997,997',
'997,,,,997,894,,746,,746,746,746,746,746,894,894,894,894,,,,894,746',
',747,,747,747,747,747,747,,545,,545,545,545,545,545,747,,,,,746,,,545',
',,,,,746,746,746,746,,,,746,747,,,,,,,,545,747,747,747,747,,,,747,545',
'545,545,545,,,703,545,703,703,703,703,703,1001,,1001,1001,1001,1001',
'1001,1003,703,1003,1003,1003,1003,1003,987,1001,987,987,987,987,987',
',1003,,,,,,,987,703,,,,,,,1001,,703,703,703,703,,1003,,703,,1001,1001',
',987,,1001,,1003,1003,,,,1003,,987,987,,,343,987,343,343,343,343,343',
',705,,705,705,705,705,705,343,,,,,,,,705,,928,,928,928,928,928,928,',
',,,,343,343,,928,,,,,705,343,343,343,343,,,,343,705,705,705,705,,,,705',
'928,,,,,,,,,928,928,928,928,,,,928' ]
        racc_action_check = arr = ::Array.new(24615, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4203,   573,   nil,   189,   nil, 11121,  1528,   931, 22475, 22603,
   899,   nil,   624,   608,   -16,   566,   958,   -82,   nil,   -74,
 11383,  2803,   538,   nil,   490,   nil,     6,  1549,  1169, 11645,
 11776, 11907,   nil,  4063, 12038, 12169,   nil,   390,   464,   460,
   461,   283, 12570, 12701,   707, 12832,   235,   922,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   954,   nil, 13233,
 13364, 13495,   -13,   nil, 13626, 13757,   nil,   nil, 13888, 14027,
 14158, 14289, 22987,   nil,   nil,   nil,   nil,   nil,   nil,   628,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   622,   nil,   nil,
   734,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   195,   nil, 14428,   nil,   nil,   nil,   nil, 14567, 14698,
 14829, 14960, 15099,   nil,  4763,   nil,   727,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -32,   nil,  5183,
 15492, 15623, 15754, 15885, 16016, 16147, 24087, 24148,   nil,   nil,
 16278, 16409, 16540,   nil,   nil,   892,   319,   374,  1039,   375,
   950,   994,   nil,  6520,  3783,   988,  6651,  6782,  6913,  7044,
  7175,  7306,  7437,  7568,  7699,  7830,  7961,  8092,  8223,  8354,
  8485,  8616,  8747,  8878,  9009,  9140,  9271,  9402,   nil,   nil,
   nil,   nil,  9533,   nil,   nil, 23477,   nil,   nil,   977,  9795,
  9926,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 10057,   nil,
  2383,   nil,   936,   925,   nil, 10188,   966, 10450,   nil,   nil,
 10581, 10712,   nil,   nil,   112,   nil, 10851,  1363,   928,   875,
  2663,   886,   924,   880, 22197,  2243,   814,   372,   706,   937,
   630,   nil,   889,   834,    -8,   nil,   nil,   nil,   856,   264,
   805, 17195,   nil,   523,   836,   626,   nil,   833, 17588,   nil,
 17719,  4623,  1244,   766,   nil,   -68,   397,   801,   779,   128,
   803,   nil,   nil, 24485,   505,    48,    47, 19168,  3083,  1963,
    49,   858,   735,     3,   -18,   594,   813,    28,   839,   nil,
   nil,  1024,   515,   298,   nil,   560,   nil,   747, 19692,   nil,
   nil,   nil,   486,   459,   422,   382,   380,   316,   275,   176,
   152,   nil,   140,   nil, 20740,   nil,   197,   260,   295,   301,
   327,   -30,   -41,   308,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   604, 22859,   nil,   nil,   nil,   nil,   608,   nil,
   nil,   746, 22066,   792,   nil,   nil,   796,   nil,   482,   145,
   961,   nil,   nil,  1823,   nil,   nil,   nil,   nil,   nil,  1963,
   408,   nil,   398,   368,   350,   354,  1281,   nil,   nil,   nil,
   512,   132,   859,   nil,   nil,  1681,  1413,   nil,   nil,   nil,
    55,   nil,   788, 23965, 23416, 21935,   142, 21804, 21673, 21542,
  3083,  3503,   973,   980,   615,   616,   618,   619,  4343,  4483,
  1632,  3923,  4063,  2943,  3223,  3363,  3643,  1095,   574,  4203,
  3783,  2103,  1498,   nil,  1090,   nil,   nil,   nil,   nil,   581,
   nil,   nil,   nil,   583,   nil,   nil, 21411,   nil, 21280,   nil,
 21149,   nil,   257,   nil,   nil,   nil, 21010,  1571,   nil,   596,
   604,   nil,   nil,   605, 20871,   609, 20609, 23782, 23294,   484,
   656,   nil, 20478,   630,   nil, 20347, 20216, 23233, 23599,  1364,
  2243, 20085,   762,   773,   654,   697,   nil, 19954,   nil,   nil,
 19823,   nil,   nil,   nil,   nil, 24360,   nil,   656,   658,   nil,
   686,   689,   690,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   682,  1173,   nil,   nil, 10982,   nil,   nil,   nil,   780,
   nil,   nil,   nil,   782,   nil,   nil,   784,  4343,   837,   nil,
  5463,    61,   846,   847,   843,   853, 19561, 19430, 24026, 24209,
    21,   nil,   nil,   590,   nil, 23660, 23721, 19299,   nil,   nil,
   151,  1823,   784,   nil,   -14,   nil,   nil,   nil,  1092,   nil,
   nil,   nil,   756,   nil,   nil,   255,   nil,   159,   nil,   nil,
   748,   nil,   754,   nil,   nil,   nil, 22731,   nil,   756, 19037,
 18906, 18775, 23904, 23843, 18644, 18505,   304,   800, 18374, 18243,
 18112, 17981,   801,   nil,   nil, 17850, 17457,   805,   nil,   nil,
   nil,   288,   292,   264,   402,   773,   772,   897,   nil,   881,
   -15,   nil,   nil,   816,   -56,   923,   nil,   800,   nil,   848,
 17326,   nil,   nil, 17064,   nil,  -109, 16933,   808,   nil,   813,
    90,   166,   871,   165,   704,   883,   840, 16802,   nil,   917,
   157,   974, 16671,   nil,   nil,   nil,   361,     0,   870,  1055,
   nil,   nil,   -36, 24412,   nil, 24493,   nil, 14336,   nil, 22336,
   nil,  1279,   nil,   869,   195,   875,   nil,   nil,   nil,   nil,
    75,   nil,   993,   nil,   nil,   nil,   nil,   nil,  1000,   nil,
    14,   882,    30,    31,    33,     5,  3643,   847,   816,   nil,
   915,  3503, 10319,   nil,  1046,  2803, 24335, 24352, 23100,   nil,
   nil,   nil,   nil,   nil,   nil,  2523,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   937,  9664,   944,   404,   127,   844,     0,
   nil,  2523,  6389,   nil,   959,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  6258,  6127,  5996,  5865,   360,
  5734,   nil,    43,   nil,   nil,   982,   nil,   nil, 23133,   nil,
  2943,   nil,   nil,   nil,   nil,   974,   136,   nil,   nil,  1101,
   nil,  2103,   977,  1025,   nil,   nil,   nil,   nil,   nil,   nil,
   983,  1029,   987,   nil,   nil,   nil,   989,   990,   nil,   992,
   995,   nil,  1001,   nil,   nil,  1005,   741,   -95,  1274,   nil,
    39,   nil, 15361,   177,   nil, 15230,  3923,    26,   203,   nil,
   212,   167,  3223,   nil,   218,   121,    62,   nil,   141,   178,
   270,   nil,   nil, 13094, 12963,  2663,  5603,   nil,   275,   279,
   nil,   291,   315,   317,   nil,   354,   337,   339, 12439,   nil,
   nil,   nil,   nil,  4903,   nil,   nil,   -11, 12308,   nil,  4483,
  3363,  1259,   nil,   nil, 24296,   nil,  1344,   nil,  1612,   nil,
 12216,   nil,   nil,   nil,   nil,   259,  1478,   423,   nil,    35,
   nil,   nil,   313,   nil,   nil,   nil,   549,   nil,   nil,   nil,
   471,   nil,   nil,  1058,   nil,   nil, 24271,   nil, 24510,   nil,
  1087,   nil,   nil,   453, 11514,   924,   516,   nil,  2383,    -7,
    20,   926,   521,   -10,   nil,   487,   597,   -84,   nil,   nil,
   nil,   478,   480,   483,   500,   508,  1406,   518,  1380,  5323,
   nil,   nil,   nil,   nil,  5043,   527,   nil,   nil,   535,   536,
   537,   540,   nil,   542,   nil,   995, 23538,   nil,   733, 11252,
 23172, 23355,    32,   nil,   nil,   nil,  1289, 24433,   nil,   nil,
   nil,   nil,  1284,   693,   441,   841,   nil, 24279,   nil, 22244,
   nil, 24419,   nil, 24426,   nil,   nil,   876,   895,   nil,   868,
    23,    -1,    21,    -9,   nil,   972,   230,   nil,   nil,   255,
   424,   436,   439,    46,   nil, 20918,   nil,   nil,   nil,   nil,
   553,   nil ]

racc_action_default = [
    -3,  -605,    -1,  -591,    -4,  -605,    -7,  -605,  -605,  -605,
  -605,   -30,  -605,  -605,   -34,  -605,  -605,  -287,   -46,  -593,
  -605,   -51,   -55,   -56,   -57,   -61,  -264,  -264,  -264,  -300,
  -329,  -330,   -73,   -12,   -77,   -85,   -87,  -605,  -495,  -496,
  -605,  -605,  -605,  -605,  -223,  -605,  -593,  -237,  -278,  -279,
  -280,  -281,  -282,  -283,  -284,  -285,  -286,  -579,  -289,  -293,
  -604,  -569,  -308,  -391,  -605,  -605,   -53,   -53,  -591,  -605,
  -605,  -605,  -605,  -331,  -332,  -334,  -436,  -437,  -438,  -439,
  -440,  -461,  -443,  -444,  -463,  -465,  -448,  -453,  -457,  -459,
  -475,  -463,  -477,  -479,  -480,  -481,  -482,  -577,  -484,  -485,
  -578,  -487,  -488,  -489,  -490,  -491,  -492,  -493,  -494,  -499,
  -500,  -605,    -2,  -592,  -600,  -601,  -602,    -6,  -605,  -605,
  -605,  -605,  -605,    -8,    -3,   -18,  -605,  -116,  -117,  -118,
  -119,  -120,  -121,  -122,  -123,  -124,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,   -23,  -125,   -12,
  -605,  -605,  -605,  -605,  -605,  -254,  -605,  -605,  -589,  -590,
  -605,  -605,  -593,  -594,   -50,  -605,  -495,  -496,  -605,  -287,
  -605,  -605,  -229,  -605,   -12,  -605,  -605,  -605,  -605,  -605,
  -605,  -605,  -605,  -605,  -605,  -605,  -605,  -605,  -605,  -605,
  -605,  -605,  -605,  -605,  -605,  -605,  -605,  -605,  -238,  -239,
  -240,  -241,  -605,  -400,  -402,  -605,  -587,  -588,   -62,  -254,
  -605,  -307,  -406,  -415,  -417,   -68,  -412,   -69,  -593,   -70,
  -244,  -259,  -268,  -268,  -263,  -605,  -269,  -605,  -461,  -571,
  -605,  -605,   -71,   -72,  -591,   -13,  -605,   -16,  -605,   -75,
   -12,  -593,  -605,   -78,   -81,   -12,   -93,   -94,  -605,  -605,
  -101,  -300,  -303,  -593,  -605,  -329,  -330,  -333,  -413,  -605,
   -83,  -605,   -89,  -297,  -478,  -605,  -217,  -218,  -605,  -230,
  -605,   -12,  -291,  -593,  -245,  -597,  -597,  -605,  -605,  -597,
  -605,  -309,  -310,  -527,   -52,  -605,  -605,  -605,   -12,   -12,
  -591,  -605,  -592,  -495,  -496,  -605,  -605,  -287,  -605,  -344,
  -345,  -111,  -112,  -605,  -114,  -605,  -287,  -503,  -605,  -495,
  -496,  -322,  -116,  -117,  -158,  -159,  -160,  -176,  -181,  -188,
  -191,  -324,  -605,  -567,  -605,  -441,  -605,  -605,  -605,  -605,
  -605,  -605,  -605,  -605,  1032,    -5,  -603,   -24,   -25,   -26,
   -27,   -28,  -605,  -605,   -20,   -21,   -22,  -126,  -605,   -31,
   -33,  -274,  -605,  -605,  -273,   -32,  -605,   -35,  -605,  -287,
   -43,   -45,  -199,  -249,  -269,   -47,   -48,   -36,  -200,  -249,
  -593,  -255,  -268,  -268,  -580,  -581,  -264,  -410,  -582,  -583,
  -581,  -580,  -264,  -409,  -411,  -582,  -583,   -42,  -207,   -49,
  -593,  -306,  -605,  -605,  -605,  -254,  -297,  -605,  -605,  -605,
  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -219,  -220,
  -221,  -222,  -224,  -225,  -226,  -227,  -228,  -231,  -232,  -233,
  -234,  -593,  -242,  -421,  -264,  -580,  -581,   -59,   -63,  -593,
  -265,  -419,  -421,  -593,  -302,  -260,  -605,  -261,  -605,  -266,
  -605,  -270,  -605,  -574,  -576,   -11,  -592,   -15,   -17,  -593,
   -74,  -295,   -90,   -79,  -605,  -593,  -254,  -605,  -605,  -100,
  -605,  -478,  -605,   -86,   -91,  -605,  -605,  -605,  -605,  -243,
  -235,  -605,  -428,  -605,  -593,  -605,  -246,  -599,  -598,  -248,
  -599,  -298,  -299,  -570,  -392,  -527,  -395,  -566,  -566,  -510,
  -512,  -512,  -512,  -526,  -528,  -529,  -530,  -531,  -532,  -533,
  -534,  -535,  -605,  -537,  -539,  -541,  -546,  -548,  -549,  -551,
  -556,  -558,  -559,  -561,  -562,  -563,  -605,   -12,  -335,  -336,
   -12,  -605,  -605,  -605,  -605,  -605,  -605,  -254,  -605,  -605,
  -297,   -53,  -111,  -112,  -113,  -605,  -605,  -254,  -318,  -501,
  -605,   -12,  -505,  -326,  -593,  -442,  -462,  -467,  -605,  -469,
  -445,  -464,  -605,  -466,  -447,  -605,  -450,  -605,  -452,  -455,
  -605,  -456,  -605,  -476,    -9,   -19,  -605,   -29,  -277,  -605,
  -605,  -254,  -605,  -605,  -605,  -605,  -414,  -605,  -256,  -258,
  -605,  -605,   -64,  -253,  -407,  -605,  -605,   -66,  -408,  -305,
  -595,  -580,  -581,  -580,  -581,  -593,  -605,  -605,  -422,   -58,
  -403,  -419,  -251,  -605,  -380,  -605,  -301,  -268,  -267,  -271,
  -605,  -572,  -573,  -605,   -14,   -76,  -605,   -82,   -88,  -593,
  -580,  -581,  -252,  -584,   -99,  -605,   -84,  -605,  -206,  -216,
  -593,  -604,  -604,  -290,  -292,  -294,  -597,  -605,  -593,  -605,
  -508,  -509,  -605,  -605,  -519,  -605,  -522,  -605,  -524,  -605,
  -346,  -605,  -348,  -350,  -357,  -593,  -540,  -550,  -560,  -564,
  -604,  -337,  -604,   -54,  -338,  -339,  -313,  -314,  -605,  -316,
  -605,  -593,  -580,  -581,  -584,  -296,   -12,  -111,  -112,  -115,
  -593,   -12,  -605,  -320,  -605,   -12,  -527,  -527,  -605,  -568,
  -468,  -471,  -472,  -473,  -474,   -12,  -446,  -449,  -451,  -454,
  -458,  -460,  -127,  -275,  -605,  -593,  -580,  -581,  -581,  -580,
   -44,  -250,  -605,  -596,  -268,   -38,  -202,   -39,  -203,   -65,
   -40,  -205,   -41,  -204,   -67,  -605,  -605,  -605,  -605,  -414,
  -605,  -401,  -380,  -405,  -404,  -605,  -416,  -381,  -593,  -383,
   -12,  -418,  -262,  -272,  -575,   -80,  -414,   -92,  -304,  -604,
  -342,   -12,  -429,  -604,  -430,  -431,  -247,  -393,  -396,  -398,
  -385,  -605,  -566,  -547,  -565,  -511,  -512,  -512,  -538,  -512,
  -512,  -557,  -512,  -535,  -552,  -593,  -605,  -355,  -605,  -536,
  -605,  -340,  -605,  -605,  -315,  -605,   -12,  -414,  -605,  -414,
  -605,  -605,   -12,  -323,  -605,  -593,  -605,  -327,  -605,  -276,
  -414,   -37,  -201,  -257,  -605,  -236,   -12,   -60,  -566,  -566,
  -362,  -364,  -364,  -364,  -379,  -605,  -593,  -535,  -543,  -544,
  -554,  -420,   -10,   -12,  -435,  -343,  -605,  -605,  -433,   -12,
   -12,  -605,  -394,  -507,  -605,  -515,  -605,  -517,  -605,  -520,
  -605,  -523,  -525,  -347,  -349,  -353,  -605,  -358,  -311,  -605,
  -312,  -271,  -604,  -317,  -319,  -502,  -605,  -325,  -504,  -506,
  -505,  -470,  -423,  -605,  -360,  -361,  -370,  -372,  -605,  -375,
  -605,  -377,  -382,  -605,  -605,  -542,  -605,  -434,   -12,  -495,
  -496,  -605,  -605,  -287,  -432,  -605,  -605,  -593,  -387,  -389,
  -390,  -512,  -512,  -512,  -512,  -351,  -605,  -356,  -605,   -12,
  -424,  -425,  -426,  -321,   -12,  -566,  -545,  -363,  -364,  -364,
  -364,  -364,  -555,  -364,  -384,  -553,  -605,  -297,  -428,  -254,
  -605,  -605,  -297,  -397,  -399,  -386,  -605,  -605,  -513,  -516,
  -518,  -521,  -605,  -354,  -604,  -605,  -359,  -605,  -367,  -605,
  -369,  -605,  -373,  -605,  -376,  -378,  -296,  -584,  -427,  -593,
  -580,  -581,  -584,  -296,  -388,  -512,  -352,  -341,  -328,  -364,
  -364,  -364,  -364,  -414,  -514,  -605,  -365,  -368,  -371,  -374,
  -364,  -366 ]

clist = [
'221,216,334,303,381,130,130,264,16,266,272,276,341,16,533,281,281,281',
'116,317,317,585,436,442,636,6,430,330,225,497,6,691,345,346,135,135',
'350,225,225,225,428,16,308,308,553,822,448,414,415,344,344,348,349,344',
'317,317,317,224,125,208,577,580,282,282,282,265,546,16,745,130,488,484',
'225,225,302,671,225,355,365,365,489,320,113,116,332,324,397,398,399',
'400,133,133,123,335,268,275,277,668,594,668,840,663,831,344,344,344',
'344,421,112,821,421,386,715,301,561,299,421,671,536,539,950,16,543,283',
'283,283,225,225,225,225,16,427,16,117,907,700,701,447,6,809,904,2,872',
'523,869,391,387,401,392,6,948,657,800,393,336,339,279,292,293,755,665',
'828,972,611,613,616,616,615,617,611,843,367,371,351,742,826,823,966',
'750,497,661,1,626,723,827,328,829,403,337,410,360,207,674,660,882,383',
'338,425,426,342,437,281,957,358,598,382,449,450,331,875,453,534,333',
'741,446,950,671,16,225,418,225,225,418,225,852,601,451,602,418,225,225',
'972,748,920,874,876,947,544,817,668,668,395,16,413,413,1014,553,409',
'420,789,408,420,993,343,728,281,281,420,697,436,442,835,904,889,281',
'402,655,890,698,965,968,795,869,806,869,302,869,225,225,873,866,483',
'494,448,744,428,225,933,1016,317,524,831,491,517,520,492,792,960,272',
'813,886,385,276,282,16,510,317,388,16,116,527,282,308,16,535,581,561',
'389,502,390,,507,,682,,847,,679,,308,739,,344,682,849,,677,,,16,588',
'302,,869,686,869,302,869,,869,513,688,,600,,225,16,16,828,860,961,,',
'521,283,116,,266,,604,,869,283,506,1017,951,225,,,,509,,299,508,828',
'515,964,299,,582,583,758,225,758,682,,,490,731,505,130,,682,632,,493',
',969,740,970,893,637,,802,,,,,,,643,,,603,850,,648,,854,135,,,,,,,,437',
'436,442,671,281,765,,779,846,,553,553,784,,446,,625,649,584,924,925',
',,,828,656,225,668,,776,778,643,855,856,781,783,,561,,561,1008,1019',
'816,,,830,524,832,133,,,,,,524,,662,,,,666,805,317,,437,281,,642,,,317',
',,647,437,,675,16,446,690,561,561,678,802,,308,,225,446,421,,,814,308',
',,,,916,421,421,694,225,,421,421,,,,704,706,708,922,,,659,996,,,,775',
'777,,,,780,782,,,,,,877,,,437,281,,871,736,,,,437,,962,281,,16,446,',
'16,,667,,446,,,225,724,,862,,,938,,1023,,225,,,749,16,794,776,778,783',
'781,743,437,281,720,730,,722,,130,959,,,,,,446,696,,,815,,637,,418,225',
',,16,,793,524,,995,418,418,,,135,418,418,,807,,,770,637,317,,,,561,643',
'420,421,648,,952,317,953,,954,762,420,420,820,857,,420,420,308,,,,,861',
'862,,,26,808,308,,877,26,877,,,,,,971,,973,133,710,851,,637,26,,,,,',
'839,,637,26,26,26,413,26,344,,,,,774,,,,,,,,,,,,16,130,637,,,16,225',
'884,26,16,,888,,26,26,,,26,,16,1015,,,,877,,824,,,824,1020,,1021,848',
'1022,820,418,,,,,,682,,,,1009,,,,,,858,,,,,,1030,,,,26,,16,420,909,26',
'26,26,26,26,29,26,,16,,29,895,897,,899,901,344,902,,,,,,,,29,,,903,',
'881,,,,29,29,29,,29,225,,885,,16,,,820,710,918,16,837,,317,,,915,,,870',
',919,317,,16,29,,,,,29,29,,,29,,935,912,878,,,16,,,,941,,16,16,,,,26',
'26,26,26,26,26,26,,,,,26,26,26,,,,317,,,,,937,,980,26,985,29,945,946',
',,29,29,29,29,29,,29,,975,,,,16,988,989,990,991,,,,,,,,927,929,931,',
'26,26,437,281,,16,,,,26,16,446,,,,,446,978,,,,710,,710,,225,,26,637',
',,26,824,,,870,26,870,994,870,,,,,,,,,39,1024,,878,,39,878,,878,,878',
',,,26,29,29,29,29,29,29,29,,,,,29,29,29,,26,26,26,39,307,307,,,,,29',
',955,710,,998,1000,1002,1004,,1005,26,,,,,,,870,39,870,,870,,870,,,26',
',354,370,370,370,,,29,29,878,,878,,878,,878,29,,870,,,,,,,710,,710,1026',
'1027,1028,1029,,,29,,,878,29,1031,,,,29,,39,,,,,,,,,39,,39,,,,,710,',
',,,,,,29,26,,,,,,,,,,,,,,,29,29,29,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,',
',,26,29,,,,,,,,,26,,,,,,,,,,39,,,,,26,,,,,,,,,,,,,,,,,,,,39,,,,,,,,',
',,,,,,,,,,,,,,,,,26,29,,26,,,,,,,26,,,,,,,,,,26,,,,26,,,,,,,,38,,,,39',
'38,,,39,,,,307,39,,,,,,,29,26,26,,,26,,,,307,29,26,26,38,306,306,26',
'26,,39,,,,,,29,,,,,,,,,,,39,39,,38,,,,,,,,,,353,369,369,369,,,,,,,,',
',,,,,,,,,,29,,,29,,,,,,,29,,,,,,,,,,29,,38,,29,,,,,,,38,,38,,,26,,,',
',26,26,,,26,,,,,,,,29,29,26,,29,,,,,,29,29,,,,29,29,,,26,,,,,,,,,,,',
',,,,,,,,,,340,,,,,,26,,,,,,,,,,,26,,,,,,,38,,,,,39,,,,,,,,307,,,,,,',
',307,,,26,38,,,26,,,,,,26,,,,,,,29,,,,,29,29,26,,29,,,,,,,,,17,29,,',
',17,26,,,,,,26,26,,,,39,29,,39,,,,,,,,38,,,,38,17,310,310,306,38,,,',
'39,,,,,29,,,,,,,306,,,,29,,17,,26,,38,,,411,424,,357,366,366,,,39,,',
',,,38,38,26,,,,,26,29,,,,29,,,,,,29,,,,26,,,,,,,,,,29,17,,,307,,,,,',
'17,,17,,,307,,29,,,,,,29,29,,,,,499,,501,,,503,504,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,39,,,,,39,,,29,39,13,,,,,13,,,,39,,,,,,,,,,29,,,,17,29,419',
',,419,,,,,13,419,,,,,29,,,,,,,,,17,,,,38,,39,,,,,13,306,,,,,39,,,306',
'359,,,,,,,,,,,,,628,,,,,,,,,,,,,,,,,,39,,,,,,39,,,,17,,,13,17,,,,310',
'17,39,,13,38,13,,38,,,,,,370,,,310,,39,,,,940,,39,39,17,,38,,,,,,,,',
',,,,,,17,17,,,669,,340,,672,,,15,,,,,15,,38,,,,,,,,370,,,,39,,,,,,,',
',,,,,,15,669,,13,340,416,,39,416,,,,39,,416,,306,,,,,,,,,,15,306,13',
'716,,,,,,,,,,,,,,,,,,,,,424,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,15,38,,,',
'38,,,,15,13,15,,763,13,38,,,,13,,,669,340,,,,,,,,,,,17,,,,,,,,310,,',
'13,,,,,310,,,,803,,,804,,,38,,13,13,,,,,,,,38,,,,,812,,,,,,,,,,,,,,',
',,834,,,15,,15,,,15,,,,17,38,15,17,,,,38,,,,,,,,,15,,,,,38,,,17,,,,',
',,754,,369,,,,,38,,,,939,859,38,38,,,,,,,,419,,,,17,,,,,,419,419,,,',
'419,419,,,,,,,,,15,,,,15,,,,,15,,369,,,,38,,,,,,310,,,,,,,,,,,310,,',
'15,38,13,,,,38,,,,,911,,,,,,15,15,,,,,,,,,,,340,,,,,,,,,,,,,,,,,17,',
',,,17,,,,17,,,,,,,,,,17,,,,,,,,13,,,13,,,,,,419,,,,,,,,,,,,,,,13,,,',
',,,,,,,,,17,,,,,,,,,,,17,,,,,416,,,,13,,,,,,416,416,,,,416,416,,,,,',
',,,,,,,,17,,,,,,17,,,,,,,,,,,,,15,17,,,,,,,,,,,,366,,,,,17,,,,943,,17',
'17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,13,,,,13,,,366,,15,,17,15,',
'13,,,,,,,,,,,,,,,,,416,17,15,,,,17,,,,,,,,,,,,,,,,,,,,,,13,,,15,,,,15',
',,,13,,15,15,,,,15,15,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,232,13,,,,,,',
',280,280,280,,,,13,,,,,,,326,327,,329,,,,,,,13,,,,944,,13,13,280,280',
',,,,,,,,,,,,,,,,15,,,,,15,,,,15,,,,,,,,,,15,,,,,,,,,,13,,,,,,,15,,,',
',,,,,,,,,,13,,,,,13,,,,,,,,,15,,,,,,,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,15,,,,,,15,,,,,,,,,,,,,,15,,280,423,,,429,280,,,,,429,,,,',
'15,,,,,,15,15,232,,,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,475,476,477,478,479,480,481,,,,,482,,,,,,,280,280,,,,,,',
',280,,15,,,,,280,,280,,,280,280,,,,,,,,,,15,,,,,15,,,,,,,,,,,,,,,,,',
',,,,529,,530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,280,,429,429,429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,280,,280',
',,,,,,,,,,,,,,,280,,,,,,,,,429,689,,,,,,,,,,,280,,,280,,,,,,,,,,,,,',
',,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,280,280,,,,,,,,,,280,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,280,429,280,,,,771,,,280,280,429,429,,,,429,429,',
',,,,,,,,,,,,,,,,,,,,,,280,,,280,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,',
',,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,',
',,,429,,,,,,,,,,,,,429,429,429,429,,865,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,280,429,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280' ]
        racc_goto_table = arr = ::Array.new(3567, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,32,77,56,63,64,64,141,29,32,81,81,96,29,9,39,39,39,104,73,73,101',
'43,43,31,7,30,34,29,83,7,11,18,18,68,68,18,29,29,29,70,29,29,29,170',
'122,70,23,23,25,25,36,36,25,73,73,73,21,16,16,99,99,78,78,78,42,140',
'29,105,64,45,43,29,29,10,185,29,29,29,29,30,57,6,104,7,71,18,18,18,18',
'67,67,8,78,44,44,44,84,61,84,100,46,181,25,25,25,25,19,4,132,19,158',
'118,53,175,52,19,185,79,79,135,29,79,80,80,80,29,29,29,29,29,27,29,5',
'119,123,123,27,7,12,116,2,128,58,122,165,159,7,166,7,134,144,130,159',
'80,80,51,51,51,168,144,176,182,163,163,163,163,162,162,163,12,62,62',
'4,169,174,178,179,167,83,48,1,69,37,129,74,129,26,76,24,20,17,15,82',
'13,94,95,25,25,98,81,39,119,102,103,106,25,25,107,132,32,108,109,110',
'64,135,185,29,29,29,29,29,29,29,111,112,54,113,29,29,29,182,114,115',
'120,126,133,136,137,84,84,5,29,78,78,134,170,21,21,31,10,21,119,138',
'101,39,39,21,139,43,43,118,116,142,39,2,30,143,140,122,128,46,122,31',
'122,10,122,29,29,129,130,145,54,70,9,70,29,132,119,73,56,181,147,32',
'34,148,151,152,81,153,154,157,81,78,29,54,73,160,29,104,32,78,29,29',
'34,18,175,161,158,164,,7,,43,,31,,30,,29,61,,25,43,31,,58,,,29,32,10',
',122,58,122,10,122,,122,57,70,,25,,29,29,29,176,31,12,,,71,80,104,,32',
',25,,122,80,6,100,129,29,,,,53,,52,8,176,53,105,52,,10,10,163,29,163',
'43,,,51,30,4,64,,43,32,,51,,129,30,129,123,34,,83,,,,,,,81,,,42,9,,81',
',9,68,,,,,,,,81,43,43,185,39,30,,45,99,,170,170,45,,64,,16,54,4,123',
'123,,,,176,34,29,84,,70,70,81,140,140,70,70,,175,,175,11,129,79,,,127',
'56,127,67,,,,,,56,,54,,,,54,58,73,,81,39,,44,,,73,,,44,81,,54,29,64',
'25,175,175,54,83,,29,,29,64,19,,,23,29,,,,,9,19,19,54,29,,19,19,,,,173',
'173,173,9,,,44,123,,,,27,27,,,,27,27,,,,,,175,,,81,39,,127,36,,,,81',
',101,39,,29,64,,29,,80,,64,,,29,104,,70,,,99,,31,,29,,,54,29,96,70,70',
'70,70,104,81,39,10,78,,10,,64,99,,,,,,64,80,,,77,,34,,29,29,,,29,,141',
'56,,9,29,29,,,68,29,29,,56,,,7,34,73,,,,175,81,21,19,81,,127,73,127',
',127,16,21,21,34,63,,21,21,29,,,,,27,70,,,47,54,29,,175,47,175,,,,,',
'127,,127,67,117,18,,34,47,,,,,,54,,34,47,47,47,78,47,25,,,,,80,,,,,',
',,,,,,29,64,34,,,29,29,77,47,29,,77,,47,47,,,47,,29,127,,,,175,,124',
',,124,127,,127,10,127,34,29,,,,,,43,,,,30,,,,,,10,,,,,,127,,,,47,,29',
'21,18,47,47,47,47,47,50,47,,29,,50,173,173,,173,173,25,173,,,,,,,,50',
',,54,,10,,,,50,50,50,,50,29,,10,,29,,,34,117,54,29,117,,73,,,104,,,124',
',104,73,,29,50,,,,,50,50,,,50,,29,10,177,,,29,,,,29,,29,29,,,,47,47',
'47,47,47,47,47,,,,,47,47,47,,,,73,,,,,10,,32,47,34,50,10,10,,,50,50',
'50,50,50,,50,,29,,,,29,173,173,173,173,,,,,,,,125,125,125,,47,47,81',
'39,,29,,,,47,29,64,,,,,64,10,,,,117,,117,,29,,47,34,,,47,124,,,124,47',
'124,10,124,,,,,,,,,60,173,,177,,60,177,,177,,177,,,,47,50,50,50,50,50',
'50,50,,,,,50,50,50,,47,47,47,60,60,60,,,,,50,,117,117,,125,125,125,125',
',125,47,,,,,,,124,60,124,,124,,124,,,47,,60,60,60,60,,,50,50,177,,177',
',177,,177,50,,124,,,,,,,117,,117,125,125,125,125,,,50,,,177,50,125,',
',,50,,60,,,,,,,,,60,,60,,,,,117,,,,,,,,50,47,,,,,,,,,,,,,,,50,50,50',
',,,,,,,,,,,,,,,,,,50,,,,,,,,,,,,,,,47,50,,,,,,,,,47,,,,,,,,,,60,,,,',
'47,,,,,,,,,,,,,,,,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,47,50,,47,,,,,,,47',
',,,,,,,,,47,,,,47,,,,,,,,59,,,,60,59,,,60,,,,60,60,,,,,,,50,47,47,,',
'47,,,,60,50,47,47,59,59,59,47,47,,60,,,,,,50,,,,,,,,,,,60,60,,59,,,',
',,,,,,59,59,59,59,,,,,,,,,,,,,,,,,,,50,,,50,,,,,,,50,,,,,,,,,,50,,59',
',50,,,,,,,59,,59,,,47,,,,,47,47,,,47,,,,,,,,50,50,47,,50,,,,,,50,50',
',,,50,50,,,47,,,,,,,,,,,,,,,,,,,,,,75,,,,,,47,,,,,,,,,,,47,,,,,,,59',
',,,,60,,,,,,,,60,,,,,,,,60,,,47,59,,,47,,,,,,47,,,,,,,50,,,,,50,50,47',
',50,,,,,,,,,33,50,,,,33,47,,,,,,47,47,,,,60,50,,60,,,,,,,,59,,,,59,33',
'33,33,59,59,,,,60,,,,,50,,,,,,,59,,,,50,,33,,47,,59,,,75,75,,33,33,33',
',,60,,,,,,59,59,47,,,,,47,50,,,,50,,,,,,50,,,,47,,,,,,,,,,50,33,,,60',
',,,,,33,,33,,,60,,50,,,,,,50,50,,,,,75,,75,,,75,75,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,60,,,,,60,,,50,60,22,,,,,22,,,,60,,,,,,,,,,50,,,,33,50,33',
',,33,,,,,22,33,,,,,50,,,,,,,,,33,,,,59,,60,,,,,22,59,,,,,60,,,59,22',
',,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,60,,,,,,60,,,,33,,,22,33,,,,33,33,60',
',22,59,22,,59,,,,,,60,,,33,,60,,,,60,,60,60,33,,59,,,,,,,,,,,,,,,33',
'33,,,75,,75,,75,,,28,,,,,28,,59,,,,,,,,60,,,,60,,,,,,,,,,,,,,28,75,',
'22,75,22,,60,22,,,,60,,22,,59,,,,,,,,,,28,59,22,75,,,,,,,,,,,,,,,,,',
',,,75,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,28,59,,,,59,,,,28,22,28,,75,22',
'59,,,,22,,,75,75,,,,,,,,,,,33,,,,,,,,33,,,22,,,,,33,,,,75,,,75,,,59',
',22,22,,,,,,,,59,,,,,75,,,,,,,,,,,,,,,,,75,,,28,,28,,,28,,,,33,59,28',
'33,,,,59,,,,,,,,,28,,,,,59,,,33,,,,,,,33,,59,,,,,59,,,,59,75,59,59,',
',,,,,,33,,,,33,,,,,,33,33,,,,33,33,,,,,,,,,28,,,,28,,,,,28,,59,,,,59',
',,,,,33,,,,,,,,,,,33,,,28,59,22,,,,59,,,,,75,,,,,,28,28,,,,,,,,,,,75',
',,,,,,,,,,,,,,,,33,,,,,33,,,,33,,,,,,,,,,33,,,,,,,,22,,,22,,,,,,33,',
',,,,,,,,,,,,,22,,,,,,,,,,,,,33,,,,,,,,,,,33,,,,,22,,,,22,,,,,,22,22',
',,,22,22,,,,,,,,,,,,,,33,,,,,,33,,,,,,,,,,,,,28,33,,,,,,,,,,,,33,,,',
',33,,,,33,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,,22,,,,22,,,33',
',28,,33,28,,22,,,,,,,,,,,,,,,,,22,33,28,,,,33,,,,,,,,,,,,,,,,,,,,,,22',
',,28,,,,28,,,,22,,28,28,,,,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,,35',
'22,,,,,,,,35,35,35,,,,22,,,,,,,35,35,,35,,,,,,,22,,,,22,,22,22,35,35',
',,,,,,,,,,,,,,,,28,,,,,28,,,,28,,,,,,,,,,28,,,,,,,,,,22,,,,,,,28,,,',
',,,,,,,,,,22,,,,,22,,,,,,,,,28,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,28,,,,,,28,,,,,,,,,,,,,,28,,35,35,,,35,35,,,,,35,,,,,28,,',
',,,28,28,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,,,,,35,,,,,,,35,35,,,,,,,,35,,28,,,,,35,,35,,,35,35,,,,',
',,,,,28,,,,,28,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,,35',
',,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,',
'35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35',
',,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3567, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   181,   141,   nil,   105,   128,    79,    25,    85,  -317,
    41,  -501,  -552,  -615,   nil,  -314,    50,   182,   -32,  -104,
   121,    37,  1756,  -163,   -21,   -15,    62,   -83,  1929,     8,
  -189,  -406,   -15,  1570,   -19,  2587,   -15,  -398,   nil,   -14,
   nil,   nil,    41,  -194,    68,  -198,  -390,   693,  -307,   nil,
   816,   127,    82,    80,     4,   nil,   -31,    46,  -178,  1302,
  1010,  -265,   101,   -68,    -3,   nil,   nil,    82,    26,  -225,
  -174,    44,   nil,   -15,   141,  1426,   128,   -58,    33,  -217,
    94,   -16,  -291,  -254,  -399,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   135,   -50,   nil,   136,  -285,
  -620,  -330,   134,  -163,    15,  -534,   133,   150,  -121,   153,
  -385,  -519,  -146,  -154,  -371,  -624,  -696,   147,  -450,  -704,
  -564,   nil,  -654,  -412,    71,    87,  -563,  -223,  -656,  -519,
  -512,   nil,  -589,  -655,  -741,  -771,  -106,  -459,   190,  -286,
  -277,   -15,  -555,  -552,  -332,    18,   nil,    19,    21,   nil,
   nil,  -362,  -615,  -393,  -513,   nil,   nil,   222,    30,    62,
   222,   231,  -222,  -224,   232,    57,    59,  -430,  -450,  -425,
  -299,   nil,   nil,    -4,  -528,  -229,  -542,    90,  -523,  -746,
   nil,  -603,  -766,   nil,   nil,  -423 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   352,   297,   nil,   nil,
   532,   nil,   841,   nil,   294,   295,   nil,   nil,   nil,    11,
    12,    18,   230,   nil,   nil,    14,   nil,   417,   231,   325,
   nil,   nil,   596,   229,   452,    21,   nil,   nil,   347,    22,
    23,    24,   nil,   685,   nil,   nil,   nil,   314,   nil,    25,
   311,   431,    32,   nil,   nil,    34,    37,    36,   nil,   226,
   227,   364,   nil,   132,   439,   131,   134,    77,    78,   nil,
   422,    92,    44,    47,   262,   286,   nil,   810,   432,   nil,
   433,   444,   644,   495,   284,   270,    48,    49,    50,    51,
    52,    53,    54,    55,    56,   nil,   271,    62,   nil,   nil,
   nil,   nil,   nil,   nil,   578,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   712,   560,   nil,   713,
   967,   868,   548,   nil,   549,   nil,   nil,   550,   nil,   552,
   nil,   797,   nil,   nil,   nil,   558,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   443,   nil,   nil,   664,
   658,   nil,   nil,   nil,   nil,    76,    79,    80,   nil,   nil,
   nil,   nil,   nil,   606,   nil,   nil,   nil,   nil,   nil,   nil,
   825,   747,   547,   nil,   551,   833,   563,   565,   566,   879,
   569,   570,   880,   573,   576,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  2, 150, :_reduce_8,
  3, 153, :_reduce_9,
  4, 154, :_reduce_10,
  2, 155, :_reduce_11,
  0, 159, :_reduce_12,
  1, 159, :_reduce_13,
  3, 159, :_reduce_14,
  2, 159, :_reduce_15,
  1, 160, :_reduce_none,
  2, 160, :_reduce_17,
  0, 171, :_reduce_18,
  4, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  3, 152, :_reduce_22,
  2, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  3, 152, :_reduce_28,
  4, 152, :_reduce_29,
  1, 152, :_reduce_none,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  1, 152, :_reduce_none,
  3, 164, :_reduce_35,
  3, 164, :_reduce_36,
  6, 164, :_reduce_37,
  5, 164, :_reduce_38,
  5, 164, :_reduce_39,
  5, 164, :_reduce_40,
  5, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 172, :_reduce_none,
  3, 172, :_reduce_44,
  1, 172, :_reduce_none,
  1, 170, :_reduce_none,
  3, 170, :_reduce_47,
  3, 170, :_reduce_48,
  3, 170, :_reduce_49,
  2, 170, :_reduce_50,
  1, 170, :_reduce_none,
  1, 163, :_reduce_none,
  0, 183, :_reduce_53,
  3, 181, :_reduce_54,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 185, :_reduce_none,
  4, 185, :_reduce_58,
  0, 193, :_reduce_59,
  4, 190, :_reduce_60,
  1, 192, :_reduce_none,
  2, 184, :_reduce_62,
  3, 184, :_reduce_63,
  4, 184, :_reduce_64,
  5, 184, :_reduce_65,
  4, 184, :_reduce_66,
  5, 184, :_reduce_67,
  2, 184, :_reduce_68,
  2, 184, :_reduce_69,
  2, 184, :_reduce_70,
  2, 184, :_reduce_71,
  2, 184, :_reduce_72,
  1, 165, :_reduce_73,
  3, 165, :_reduce_74,
  1, 198, :_reduce_75,
  3, 198, :_reduce_76,
  1, 197, :_reduce_none,
  2, 197, :_reduce_78,
  3, 197, :_reduce_79,
  5, 197, :_reduce_80,
  2, 197, :_reduce_81,
  4, 197, :_reduce_82,
  2, 197, :_reduce_83,
  4, 197, :_reduce_84,
  1, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 201, :_reduce_none,
  3, 201, :_reduce_88,
  2, 200, :_reduce_89,
  3, 200, :_reduce_90,
  1, 203, :_reduce_91,
  3, 203, :_reduce_92,
  1, 202, :_reduce_93,
  1, 202, :_reduce_94,
  4, 202, :_reduce_95,
  3, 202, :_reduce_96,
  3, 202, :_reduce_97,
  3, 202, :_reduce_98,
  3, 202, :_reduce_99,
  2, 202, :_reduce_100,
  1, 202, :_reduce_101,
  1, 167, :_reduce_102,
  1, 167, :_reduce_103,
  4, 167, :_reduce_104,
  3, 167, :_reduce_105,
  3, 167, :_reduce_106,
  3, 167, :_reduce_107,
  3, 167, :_reduce_108,
  2, 167, :_reduce_109,
  1, 167, :_reduce_110,
  1, 206, :_reduce_111,
  1, 206, :_reduce_none,
  2, 207, :_reduce_113,
  1, 207, :_reduce_114,
  3, 207, :_reduce_115,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 211, :_reduce_121,
  1, 211, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_125,
  0, 214, :_reduce_126,
  4, 162, :_reduce_127,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  3, 180, :_reduce_199,
  3, 180, :_reduce_200,
  6, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  5, 180, :_reduce_204,
  5, 180, :_reduce_205,
  4, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  3, 180, :_reduce_214,
  3, 180, :_reduce_215,
  4, 180, :_reduce_216,
  2, 180, :_reduce_217,
  2, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  1, 180, :_reduce_none,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  2, 180, :_reduce_229,
  2, 180, :_reduce_230,
  3, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  6, 180, :_reduce_236,
  1, 180, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 217, :_reduce_242,
  3, 217, :_reduce_243,
  1, 220, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_none,
  4, 221, :_reduce_247,
  2, 221, :_reduce_248,
  1, 215, :_reduce_none,
  3, 215, :_reduce_250,
  3, 226, :_reduce_251,
  0, 227, :_reduce_252,
  1, 227, :_reduce_none,
  0, 175, :_reduce_254,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  4, 175, :_reduce_257,
  2, 175, :_reduce_258,
  1, 196, :_reduce_259,
  2, 196, :_reduce_260,
  2, 196, :_reduce_261,
  4, 196, :_reduce_262,
  1, 196, :_reduce_263,
  0, 230, :_reduce_264,
  2, 189, :_reduce_265,
  2, 229, :_reduce_266,
  2, 228, :_reduce_267,
  0, 228, :_reduce_268,
  1, 223, :_reduce_269,
  2, 223, :_reduce_270,
  3, 223, :_reduce_271,
  4, 223, :_reduce_272,
  1, 169, :_reduce_273,
  1, 169, :_reduce_none,
  3, 168, :_reduce_275,
  4, 168, :_reduce_276,
  2, 168, :_reduce_277,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_288,
  0, 252, :_reduce_289,
  4, 218, :_reduce_290,
  0, 253, :_reduce_291,
  4, 218, :_reduce_292,
  0, 254, :_reduce_293,
  4, 218, :_reduce_294,
  3, 218, :_reduce_295,
  3, 218, :_reduce_296,
  2, 218, :_reduce_297,
  3, 218, :_reduce_298,
  3, 218, :_reduce_299,
  1, 218, :_reduce_300,
  4, 218, :_reduce_301,
  3, 218, :_reduce_302,
  1, 218, :_reduce_303,
  5, 218, :_reduce_304,
  4, 218, :_reduce_305,
  3, 218, :_reduce_306,
  2, 218, :_reduce_307,
  1, 218, :_reduce_none,
  2, 218, :_reduce_309,
  2, 218, :_reduce_310,
  6, 218, :_reduce_311,
  6, 218, :_reduce_312,
  4, 218, :_reduce_313,
  4, 218, :_reduce_314,
  5, 218, :_reduce_315,
  4, 218, :_reduce_316,
  6, 218, :_reduce_317,
  0, 255, :_reduce_318,
  6, 218, :_reduce_319,
  0, 256, :_reduce_320,
  7, 218, :_reduce_321,
  0, 257, :_reduce_322,
  5, 218, :_reduce_323,
  0, 258, :_reduce_324,
  6, 218, :_reduce_325,
  0, 259, :_reduce_326,
  0, 260, :_reduce_327,
  9, 218, :_reduce_328,
  1, 218, :_reduce_329,
  1, 218, :_reduce_330,
  1, 218, :_reduce_331,
  1, 218, :_reduce_332,
  1, 174, :_reduce_none,
  1, 195, :_reduce_334,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  2, 244, :_reduce_337,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 245, :_reduce_none,
  5, 245, :_reduce_341,
  1, 157, :_reduce_none,
  2, 157, :_reduce_343,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 261, :_reduce_346,
  3, 261, :_reduce_347,
  1, 264, :_reduce_348,
  3, 264, :_reduce_349,
  1, 263, :_reduce_none,
  4, 263, :_reduce_351,
  6, 263, :_reduce_352,
  3, 263, :_reduce_353,
  5, 263, :_reduce_354,
  2, 263, :_reduce_355,
  4, 263, :_reduce_356,
  1, 263, :_reduce_357,
  3, 263, :_reduce_358,
  4, 265, :_reduce_359,
  2, 265, :_reduce_360,
  2, 265, :_reduce_361,
  1, 265, :_reduce_362,
  2, 270, :_reduce_363,
  0, 270, :_reduce_364,
  6, 271, :_reduce_365,
  8, 271, :_reduce_366,
  4, 271, :_reduce_367,
  6, 271, :_reduce_368,
  4, 271, :_reduce_369,
  2, 271, :_reduce_none,
  6, 271, :_reduce_371,
  2, 271, :_reduce_372,
  4, 271, :_reduce_373,
  6, 271, :_reduce_374,
  2, 271, :_reduce_375,
  4, 271, :_reduce_376,
  2, 271, :_reduce_377,
  4, 271, :_reduce_378,
  1, 271, :_reduce_none,
  0, 275, :_reduce_380,
  1, 275, :_reduce_381,
  3, 276, :_reduce_382,
  1, 276, :_reduce_383,
  4, 276, :_reduce_384,
  1, 277, :_reduce_385,
  4, 277, :_reduce_386,
  1, 278, :_reduce_387,
  3, 278, :_reduce_388,
  1, 279, :_reduce_389,
  1, 279, :_reduce_none,
  0, 283, :_reduce_391,
  0, 284, :_reduce_392,
  4, 243, :_reduce_393,
  4, 281, :_reduce_394,
  1, 281, :_reduce_395,
  0, 287, :_reduce_396,
  4, 282, :_reduce_397,
  0, 288, :_reduce_398,
  4, 282, :_reduce_399,
  0, 290, :_reduce_400,
  4, 286, :_reduce_401,
  2, 186, :_reduce_402,
  4, 186, :_reduce_403,
  5, 186, :_reduce_404,
  5, 186, :_reduce_405,
  2, 242, :_reduce_406,
  4, 242, :_reduce_407,
  4, 242, :_reduce_408,
  3, 242, :_reduce_409,
  3, 242, :_reduce_410,
  3, 242, :_reduce_411,
  2, 242, :_reduce_412,
  1, 242, :_reduce_413,
  4, 242, :_reduce_414,
  0, 292, :_reduce_415,
  4, 241, :_reduce_416,
  0, 293, :_reduce_417,
  4, 241, :_reduce_418,
  0, 294, :_reduce_419,
  3, 191, :_reduce_420,
  0, 295, :_reduce_421,
  0, 296, :_reduce_422,
  4, 289, :_reduce_423,
  5, 246, :_reduce_424,
  1, 297, :_reduce_425,
  1, 297, :_reduce_none,
  6, 156, :_reduce_427,
  0, 156, :_reduce_428,
  1, 298, :_reduce_429,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  2, 299, :_reduce_432,
  1, 299, :_reduce_none,
  2, 158, :_reduce_434,
  1, 158, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 232, :_reduce_439,
  1, 301, :_reduce_440,
  2, 301, :_reduce_441,
  3, 302, :_reduce_442,
  1, 302, :_reduce_443,
  1, 302, :_reduce_444,
  3, 233, :_reduce_445,
  4, 234, :_reduce_446,
  3, 235, :_reduce_447,
  0, 306, :_reduce_448,
  3, 306, :_reduce_449,
  1, 307, :_reduce_450,
  2, 307, :_reduce_451,
  3, 237, :_reduce_452,
  0, 309, :_reduce_453,
  3, 309, :_reduce_454,
  3, 236, :_reduce_455,
  3, 238, :_reduce_456,
  0, 310, :_reduce_457,
  3, 310, :_reduce_458,
  0, 311, :_reduce_459,
  3, 311, :_reduce_460,
  0, 303, :_reduce_461,
  2, 303, :_reduce_462,
  0, 304, :_reduce_463,
  2, 304, :_reduce_464,
  0, 305, :_reduce_465,
  2, 305, :_reduce_466,
  1, 308, :_reduce_467,
  2, 308, :_reduce_468,
  0, 313, :_reduce_469,
  4, 308, :_reduce_470,
  1, 312, :_reduce_471,
  1, 312, :_reduce_472,
  1, 312, :_reduce_473,
  1, 312, :_reduce_none,
  1, 212, :_reduce_475,
  3, 213, :_reduce_476,
  1, 300, :_reduce_477,
  2, 300, :_reduce_478,
  1, 216, :_reduce_479,
  1, 216, :_reduce_480,
  1, 216, :_reduce_481,
  1, 216, :_reduce_482,
  1, 204, :_reduce_483,
  1, 204, :_reduce_484,
  1, 204, :_reduce_485,
  1, 204, :_reduce_486,
  1, 204, :_reduce_487,
  1, 205, :_reduce_488,
  1, 205, :_reduce_489,
  1, 205, :_reduce_490,
  1, 205, :_reduce_491,
  1, 205, :_reduce_492,
  1, 205, :_reduce_493,
  1, 205, :_reduce_494,
  1, 239, :_reduce_495,
  1, 239, :_reduce_496,
  1, 173, :_reduce_497,
  1, 173, :_reduce_498,
  1, 178, :_reduce_499,
  1, 178, :_reduce_500,
  0, 314, :_reduce_501,
  4, 248, :_reduce_502,
  0, 248, :_reduce_503,
  3, 250, :_reduce_504,
  0, 316, :_reduce_505,
  3, 250, :_reduce_506,
  4, 315, :_reduce_507,
  2, 315, :_reduce_508,
  2, 315, :_reduce_509,
  1, 315, :_reduce_510,
  2, 318, :_reduce_511,
  0, 318, :_reduce_512,
  6, 285, :_reduce_513,
  8, 285, :_reduce_514,
  4, 285, :_reduce_515,
  6, 285, :_reduce_516,
  4, 285, :_reduce_517,
  6, 285, :_reduce_518,
  2, 285, :_reduce_519,
  4, 285, :_reduce_520,
  6, 285, :_reduce_521,
  2, 285, :_reduce_522,
  4, 285, :_reduce_523,
  2, 285, :_reduce_524,
  4, 285, :_reduce_525,
  1, 285, :_reduce_526,
  0, 285, :_reduce_527,
  1, 280, :_reduce_528,
  1, 280, :_reduce_529,
  1, 280, :_reduce_530,
  1, 280, :_reduce_531,
  1, 262, :_reduce_none,
  1, 262, :_reduce_533,
  1, 320, :_reduce_534,
  1, 321, :_reduce_535,
  3, 321, :_reduce_536,
  1, 272, :_reduce_537,
  3, 272, :_reduce_538,
  1, 322, :_reduce_539,
  2, 323, :_reduce_540,
  1, 323, :_reduce_541,
  2, 324, :_reduce_542,
  1, 324, :_reduce_543,
  1, 266, :_reduce_544,
  3, 266, :_reduce_545,
  1, 317, :_reduce_546,
  3, 317, :_reduce_547,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 267, :_reduce_550,
  1, 267, :_reduce_551,
  3, 326, :_reduce_552,
  3, 327, :_reduce_553,
  1, 273, :_reduce_554,
  3, 273, :_reduce_555,
  1, 319, :_reduce_556,
  3, 319, :_reduce_557,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 274, :_reduce_560,
  1, 274, :_reduce_561,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 269, :_reduce_564,
  2, 268, :_reduce_565,
  0, 268, :_reduce_566,
  1, 251, :_reduce_none,
  3, 251, :_reduce_568,
  0, 240, :_reduce_569,
  2, 240, :_reduce_none,
  1, 225, :_reduce_571,
  3, 225, :_reduce_572,
  3, 330, :_reduce_573,
  2, 330, :_reduce_574,
  4, 330, :_reduce_575,
  2, 330, :_reduce_576,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 177, :_reduce_589,
  1, 177, :_reduce_590,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 199, :_reduce_595,
  2, 176, :_reduce_596,
  0, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 249, :_reduce_600,
  1, 249, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 222, :_reduce_604 ]

racc_reduce_n = 605

racc_shift_n = 1032

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_126(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_127(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

def _reduce_199(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 223 omitted

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_248(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      result = []
                    
    result
end

# reduce 255 omitted

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_262(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_265(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = []
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

def _reduce_288(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_289(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_290(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_307(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 308 omitted

def _reduce_309(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_310(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_311(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_312(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_316(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_319(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_323(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 335 omitted

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      result = val
                    
    result
end

# reduce 344 omitted

# reduce 345 omitted

def _reduce_346(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = []
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_381(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = []
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_389(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_392(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_393(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_396(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_398(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_415(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_417(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_419(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_421(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_422(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = []
                    
    result
end

def _reduce_429(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_443(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_446(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = []
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_470(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_478(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_506(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = []
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = []
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_530(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 532 omitted

def _reduce_533(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_539(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 548 omitted

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 558 omitted

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 562 omitted

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_565(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = []
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = []
                    
    result
end

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_590(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

def _reduce_595(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_596(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby25
  end   # module Parser
