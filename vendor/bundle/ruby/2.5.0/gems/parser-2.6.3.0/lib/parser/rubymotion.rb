# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class RubyMotion < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-453,5,63,64,65,7,51,-453,-453,-453,57,58,-453,-453,-453,61,-453,59',
'60,62,23,24,66,67,-453,272,-453,-453,-453,22,28,27,90,89,91,92,-453',
'-453,17,-453,-453,-453,-453,-453,6,41,8,9,94,93,95,84,50,86,85,87,551',
'88,96,97,-86,82,83,38,39,37,-453,-453,-453,-453,-453,-453,-453,-453',
'-453,-453,-453,-453,-453,-453,458,451,-453,-453,-453,36,-453,-453,30',
'-86,-453,52,53,-453,-453,54,-453,32,-453,572,-453,40,-453,-453,-453',
'-453,-453,-453,-453,18,-453,271,-453,-90,81,73,76,77,207,78,79,204,205',
'751,74,80,-453,-453,-453,-453,-450,-453,56,-453,75,-453,-453,-450,-450',
'-450,815,733,-450,-450,-450,682,-450,541,-93,604,-91,204,205,604,-450',
'208,-450,-450,-450,204,205,550,571,480,481,-88,-450,-450,682,-450,-450',
'-450,-450,-450,-86,530,-87,-89,530,-86,-87,102,655,603,530,-92,101,603',
'542,914,-87,-88,543,416,-78,-91,-450,-450,-450,-450,-450,-450,-450,-450',
'-450,-450,-450,-450,-450,-450,576,208,-450,-450,-450,-92,-450,-450,-82',
'530,-450,-90,-80,-450,-450,-93,-450,-525,-450,646,-450,536,-450,-450',
'-450,-450,-450,-450,-450,-279,-450,208,-450,-93,530,102,-279,-279,-279',
'208,101,577,-279,-279,-524,-279,-450,-450,-450,-450,-525,-450,-93,-450',
'-91,-450,-450,-93,102,-91,-80,-89,682,101,917,-279,-279,665,-279,-279',
'-279,-279,-279,-88,580,-79,-259,654,-80,102,-87,-89,102,-79,101,-87',
'-89,101,102,-92,-83,798,208,101,-92,-279,-279,-279,-279,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,485,-84,-279,-279,-279,-80,592,825',
'-80,-463,-279,-85,561,-279,102,-80,-90,-524,-279,101,-279,-90,-279,-279',
'-279,-279,-279,-279,-279,-528,-279,561,-279,204,205,734,-528,-528,-528',
'102,-79,585,-528,-528,101,-528,-279,-279,375,-83,-92,-279,272,102,-528',
'-279,-91,-81,101,-86,272,498,-528,267,497,-528,-528,584,-528,-528,-528',
'-528,-528,563,562,604,-79,498,-88,-79,500,561,714,-88,-82,-90,-79,-81',
'561,793,646,-90,563,562,568,-528,-528,-528,-528,-528,-528,-528,-528',
'-528,-528,-528,-528,-528,-528,603,-80,-528,-528,-528,-528,589,267,-88',
'363,-528,594,-528,-528,102,267,561,-524,-528,101,-528,-528,-528,-528',
'-528,-528,-528,-528,-528,271,-528,-528,-528,563,562,573,604,271,561',
'-528,563,562,566,-524,-81,-279,-528,-528,919,-81,853,-528,-279,-279',
'-279,-528,-89,-279,-279,-279,485,-279,673,-528,513,512,511,517,514,372',
'603,-279,-279,-279,374,373,665,563,562,564,-81,-279,-279,-81,-279,-279',
'-279,-279,-279,853,-81,673,-82,513,512,511,517,514,-459,563,562,559',
'-458,-84,498,-459,227,500,227,-458,-92,-279,-279,-279,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,-279,666,-73,-279,-279,-279,227,592',
'-279,-59,227,-279,923,-455,-279,-279,789,-279,203,-279,-455,-279,904',
'-279,-279,-279,-279,-279,-279,-279,208,-279,-459,-279,-82,744,-458,513',
'512,511,517,514,204,205,493,902,201,-279,-279,-279,-279,-528,-279,545',
'-279,722,-279,-91,-528,-528,-528,-85,547,-528,-528,-528,73,-528,-93',
'102,-82,-455,519,-82,101,74,-528,-528,-528,-528,-82,523,522,526,525',
'75,208,-528,-528,-463,-528,-528,-528,-528,-528,793,646,774,-79,513,512',
'511,-457,514,202,-87,-456,-450,208,-457,-73,102,628,-456,-450,657,101',
'-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528',
'102,-78,-528,-528,-528,101,735,-528,-86,853,-528,208,201,-528,-528,491',
'-528,639,-528,265,-528,932,-528,-528,-528,-528,-528,-528,-528,-457,-528',
'-528,-528,-456,-450,102,201,-460,-462,498,101,853,500,892,-460,-462',
'-528,-528,-528,-528,-274,-528,890,-528,-462,-528,-89,-274,-274,-274',
'102,853,-274,-274,-274,101,-274,646,227,853,202,208,-279,201,204,205',
'-274,-274,-274,-279,557,298,299,936,-525,657,-274,-274,-279,-274,-274',
'-274,-274,-274,202,-460,-462,204,205,659,224,-453,661,-461,226,225,222',
'223,-453,774,-461,513,512,511,664,514,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-279,202,-274,-274,-274,227',
'667,-274,675,676,-274,678,208,-274,-274,536,-274,685,-274,904,-274,713',
'-274,-274,-274,-274,-274,-274,-274,-453,-274,-461,-274,716,98,-260,201',
'224,-273,723,458,226,225,477,449,-273,-274,-274,-274,-274,-286,-274',
'475,-274,-273,-274,458,-286,-286,-286,208,297,-286,-286,-286,673,-286',
'513,512,511,517,514,201,227,208,737,-286,-286,296,922,748,451,449,-521',
'208,639,-286,-286,547,-286,-286,-286,-286,-286,202,208,-273,104,105',
'106,107,108,519,267,267,224,639,227,227,226,225,222,223,526,525,762',
'-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'202,227,-286,-286,-286,-450,246,-286,-522,276,-286,-259,-450,-286,-286',
'766,-286,-521,-286,657,-286,-450,-286,-286,-286,-286,-286,-286,-286',
'784,-286,787,-286,224,201,665,208,226,225,-521,646,489,797,208,208,-232',
'-286,-286,806,-286,414,-286,-232,-232,-232,-286,-261,-232,-232,-232',
'-453,-232,-279,-450,904,952,953,-453,955,-279,817,-232,-522,819,-525',
'822,-453,823,-279,657,826,-232,-232,201,-232,-232,-232,-232,-232,-280',
'200,853,202,853,-522,-322,-280,201,208,198,-280,201,-322,833,539,-280',
'834,-280,413,639,853,-322,197,537,196,208,-280,414,-453,845,-279,846',
'-232,849,-232,851,853,853,208,-232,858,-232,-232,-232,267,-232,-232',
'-232,-232,860,-232,202,104,105,106,107,108,-280,-525,-232,-232,-232',
'862,-322,195,202,194,-232,-280,202,-232,-232,-524,-232,-232,-232,-232',
'-232,708,709,193,-232,710,96,97,415,-232,417,418,673,-232,513,512,511',
'517,514,868,207,870,208,-232,-232,-232,-232,-232,-232,-232,-232,-232',
'-232,-232,-232,-232,-232,873,-262,-232,-232,-232,880,853,-232,884,267',
'-232,885,669,-232,-232,887,-232,449,-232,893,-232,857,-232,-232,-232',
'-232,-232,-232,-232,894,-232,-232,-232,895,447,449,451,673,540,513,512',
'511,517,514,904,-529,-232,-232,-58,-232,208,-232,-529,-529,-529,-232',
'470,-529,-529,-529,516,-529,513,512,511,517,514,471,478,276,-529,-529',
'-529,-529,669,104,105,106,107,108,208,-529,-529,672,-529,-529,-529,-529',
'-529,673,267,513,512,511,517,514,482,519,703,673,906,513,512,511,517',
'514,523,522,526,525,486,-529,-529,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,-529,-529,-529,487,669,-529,-529,-529,227,907,-529,493,494',
'-529,669,501,-529,-529,502,-529,451,-529,912,-529,536,-529,-529,-529',
'-529,-529,-529,-529,365,-529,-529,-529,744,,513,512,511,517,514,,,,',
',,-529,-529,-529,-529,-232,-529,,-529,,-529,,-232,-232,-232,,,-232,-232',
'-232,,-232,,,744,519,513,512,511,517,514,-232,,,523,522,526,525,,,,-232',
'-232,,-232,-232,-232,-232,-232,,,,,673,,513,512,511,517,514,,519,673',
',513,512,511,517,514,,523,522,526,525,,,,,,,,,-232,,-530,,,,,-232,519',
'-530,-530,-530,267,-232,-530,-530,-530,669,-530,526,525,,,,,,672,-530',
'-530,-530,-530,,,,,-232,,,-530,-530,,-530,-530,-530,-530,-530,,,,-232',
',,,,-232,,,673,-232,513,512,511,517,514,,,,,-530,-530,-530,-530,-530',
'-530,-530,-530,-530,-530,-530,-530,-530,-530,,,-530,-530,-530,,,-530',
',,-530,,669,-530,-530,,-530,,-530,,-530,,-530,-530,-530,-530,-530,-530',
'-530,,-530,-530,-530,516,,513,512,511,517,514,,,,,,,-530,-530,-530,-530',
'-393,-530,,-530,,-530,,-393,-393,-393,,,-393,-393,-393,,-393,227,,,519',
',,,,-393,-393,-393,,523,522,526,525,241,242,,-393,-393,,-393,-393,-393',
'-393,-393,,,,,,224,,230,,226,225,222,223,,,228,,229,,,,,-393,-393,-393',
'-393,-393,-393,-393,-393,-393,-393,-393,-393,-393,-393,,,-393,-393,-393',
',,-393,,267,-393,,,-393,-393,,-393,,-393,,-393,,-393,-393,-393,-393',
'-393,-393,-393,,-393,-393,-393,,516,,513,512,511,517,514,,,,,,-393,-393',
',-393,,-393,,,,-393,5,63,64,65,7,51,,,,57,58,,,,61,519,59,60,62,23,24',
'66,67,,523,522,526,525,22,28,27,90,89,91,92,,673,17,513,512,511,517',
'514,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,673,',
'513,512,511,517,514,673,669,513,512,511,517,514,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,673,669,513,512,511,517,514,18,519,,,,81,73,76,77,,78',
'79,526,525,,74,80,5,63,64,65,7,51,56,,75,57,58,,,519,61,,59,60,62,23',
'24,66,67,,526,525,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,673,,513,512,511,517',
'514,,,,,,36,,,278,,,52,53,,,54,,32,,,,40,673,,513,512,511,517,514,18',
'519,,,,81,73,76,77,,78,79,526,525,,74,80,5,63,64,65,7,51,56,,75,57,58',
',,519,61,,59,60,62,23,24,66,67,,526,525,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,',
',,,673,,513,512,511,517,514,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,673',
',513,512,511,517,514,18,519,,,,81,73,76,77,,78,79,526,525,,74,80,5,63',
'64,65,7,51,56,,75,57,58,,,519,61,,59,60,62,23,24,66,67,,526,525,,,22',
'28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,227,,,,,,,673,,513,512,511,517,514,,,241,242,,36',
',,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,,,,18,519,,,,81,73',
'76,77,,78,79,526,525,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,231,236,237,238,233,235',
'243,244,239,240,,-549,-549,,,241,242,,36,,,30,,,52,53,,,54,,32,224,',
'230,40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74',
'80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,227,231,236,237,238,233,235,,,239,240,,,,,,241,242',
',36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18',
'229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,-549,-549,-549,-549',
'233,235,,,-549,-549,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230',
'40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80',
'5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,227,-549,-549,-549,-549,233,235,,,-549,-549,,,,,,241',
'242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228',
'18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41',
'8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,231,236,237',
'238,233,235,243,244,239,240,,-549,-549,,,241,242,,36,,,30,,,52,53,,',
'54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77',
',78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,227,-549,-549,-549,-549,233,235,,,-549',
'-549,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222',
'223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
'227,-549,-549,-549,-549,233,235,,,-549,-549,,,,,,241,242,,36,,,30,,',
'52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36',
',,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36',
',,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36',
',,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,-549,-549,-549,-549,233,235',
',,-549,-549,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225',
'222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,227,-549,-549,-549,-549,233,235,,,-549,-549,,,,,,241,242,,36,,,278',
',,52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,231,236,237,238,233,235,243',
',239,240,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225',
'222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,227,,,,,,,,,,,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40',
'226,225,222,223,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
'227,,,,,,,,,,,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,,40,226,225',
'222,223,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,',
',,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77',
',78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54',
',32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
'53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64',
'65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,',
',,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80',
'5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,278,,,52,53,,,54,,32,,,,40,',
',,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41',
'8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,',
',,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,',
',,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,',
'256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,7',
'51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92',
',,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,',
'256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,516,293',
'513,512,511,517,514,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,282,,,,519',
',,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,578,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,,241,242,286',
',,218,,,52,53,,,54,,,,224,,230,,226,225,222,223,234,232,228,,229,,,81',
'73,76,77,,78,79,,,,74,80,,,245,295,-226,,56,,75,63,64,65,,51,,,,57,58',
',,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,',
',,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,',
'78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66',
'67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89',
'91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,',
',94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,',
',,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,578,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,227,231,236,237,238,233,235,243,244,239,240,,220',
'221,,,241,242,,212,,,218,,,52,53,,,54,,,224,,230,40,226,225,222,223',
'234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,102,245,,,,101,56',
',75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,516,293,513,512,511,517,514,,,,,,,,,,,,,,,328,,,30,,,52,53,',
',54,,32,,,,519,703,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,333,50,86,85,334,,88,96,97',
',82,83,,744,293,513,512,511,517,514,,,,,,,,,,,,340,,,335,,,218,,,52',
'53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,333,50,86,85,334,,88,96,97',
',82,83,,516,293,513,512,511,517,514,,,,,,,,,,,,,,,335,,,218,,,52,53',
',,54,,,,,,519,505,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,17,,,,,581,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,227,231,236,237,238,233,235,243,244,239,240,,220,221',
',,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234',
'232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,,245,,,,365,56,,75,63',
'64,65,,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,382,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,382,,,,40,,,,,,,,217,,,,',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,208,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,463,53,,,54',
',256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,',
'51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,208,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293,227,231,236,237,238',
'233,235,243,244,239,240,,220,221,,,241,242,,286,,,218,,,52,53,,,54,',
',224,,230,,226,225,222,223,234,232,228,,229,,,,81,73,76,77,,78,79,,',
',74,80,,245,,473,,,56,,75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,516,293,513,512,511,517,514,,,,,,,,,,',
',,,,286,,,283,,,52,53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,491,,52',
'53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50',
'86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,609,,254,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',212,,,218,,,52,53,,,54,,,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,',
',,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,254,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,516,293,513,512,511,517,514,,,,,,,,,,',
',,,,286,,,283,,,52,53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82',
'83,,,293,,,,,,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,,,,,,,,,,,,,,,,',
',81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,',
',218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,',
',,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,',
',40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57',
'58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219',
',,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,',
',,,,,,,,,,,,212,,,218,,,52,53,,,54,,382,,,,40,,,,,,,,217,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,609,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,256,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74',
'80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257',
'28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254',
',40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75',
'57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219',
',,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89',
'91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,',
',218,,,52,53,,,54,,720,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74',
'80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257',
'288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40',
',,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40',
',,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,',
',,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,,293,,,,,,,,,,,,,,,,,,,,286,,,283,,,52',
'53,,,54,,,,,,,,,,,,,,,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293',
',,,,,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,,,,,,,,,,,,,,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,293,,,,,,,,,,,,,,,,,,,,839,,,218,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,609,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,293,,,,,,,,,,,,,,,,,,,,882,,,218,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,609,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,',
'609,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
'227,231,236,237,238,233,235,243,244,239,240,,220,221,,,241,242,,212',
',-226,218,,,52,53,,,54,,256,224,254,230,40,226,225,222,223,234,232,228',
'217,229,,,,81,73,76,77,,78,79,,,,74,80,,245,,-226,,,56,,75,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,111,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171',
'161,184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158',
'172,176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,',
'155,162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,160,171,161,184,157,177',
'167,166,187,188,182,165,164,159,185,189,190,169,158,172,176,178,170',
'163,,,,179,186,181,350,349,351,348,156,175,174,,,,,,155,162,153,154',
'345,346,347,343,114,86,85,344,,88,,,,,,145,146,,142,124,125,126,133',
'130,132,,,127,128,,,,147,148,134,135,,,,,,355,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,391,395,149,,392,,,,,,,,145,146',
',142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,',
',,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,927,395,149',
',928,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148',
'134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121',
'143,122,632,395,149,,633,,,,,,,,145,146,,142,124,125,126,133,130,132',
',,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140',
'136,137,131,129,121,143,122,635,402,149,,636,,,,,,,,145,146,,142,124',
'125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139',
'138,,123,144,141,140,136,137,131,129,121,143,122,929,402,149,,930,,',
',,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135',
',,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122',
'595,395,149,,596,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137',
'131,129,121,143,122,597,402,149,,598,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,595,395,149,,596,,,,,,,,145',
'146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267',
',,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,597,402',
'149,,598,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147',
'148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129',
'121,143,122,688,395,149,,689,,,,,,,,145,146,,142,124,125,126,133,130',
'132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141',
'140,136,137,131,129,121,143,122,690,402,149,,691,,,,,,,,145,146,,142',
'124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,',
',139,138,,123,144,141,140,136,137,131,129,121,143,122,693,402,149,,694',
',,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134',
'135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143',
'122,455,395,149,,456,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127',
'128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136',
'137,131,129,121,143,122,455,395,149,,456,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,455,395,149,,456,,,,,,,,145',
'146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,',
',,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,397,402',
'149,,399,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147',
'148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129',
'121,143,122,946,402,149,,945,,,,,,,,145,146,,142,124,125,126,133,130',
'132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141',
'140,136,137,131,129,121,143,122,,,149,227,231,236,237,238,233,235,243',
'244,239,240,,220,221,,,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223',
'234,232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221',
',245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,227,231,236',
'237,238,233,235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,',
'224,,230,,226,225,222,223,234,232,228,,229,,227,231,236,237,238,233',
'235,243,244,239,240,,220,221,208,245,241,242,,,,,,,,,,,,,,,224,,230',
',226,225,222,223,234,232,228,,229,,227,231,236,237,238,233,235,243,244',
'239,240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223',
'234,232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221',
',245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,227,231,236',
'237,238,233,235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,',
'224,,230,,226,225,222,223,234,232,228,,229,,227,231,236,237,238,233',
'235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226',
'225,222,223,234,232,228,,229,,227,231,236,237,238,233,235,243,244,239',
'240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234',
'232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221,',
'245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,,,,,,,,,,,',
',,,,245' ]
        racc_action_table = arr = ::Array.new(23312, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'87,799,799,799,799,799,799,87,87,87,799,799,87,87,87,799,87,799,799',
'799,799,799,799,799,87,55,87,87,87,799,799,799,799,799,799,799,87,87',
'799,87,87,87,87,87,799,799,799,799,799,799,799,799,799,799,799,799,339',
'799,799,799,837,799,799,799,799,799,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,266,619,87,87,87,799,87,87,799,326,87,799,799,87,87,799,87',
'799,87,361,87,799,87,87,87,87,87,87,87,799,87,55,87,689,799,799,799',
'799,17,799,799,409,409,619,799,799,87,87,87,87,84,87,799,87,799,87,87',
'84,84,84,736,595,84,84,84,533,84,330,840,464,930,558,558,465,84,17,84',
'84,84,643,643,339,361,293,293,688,84,84,532,84,84,84,84,84,837,320,948',
'929,765,837,800,339,504,464,686,893,339,465,335,874,736,595,335,213',
'326,691,84,84,84,84,84,84,84,84,84,84,84,84,84,84,376,409,84,84,84,540',
'84,84,689,861,84,928,632,84,84,329,84,930,84,866,84,866,84,84,84,84',
'84,84,84,399,84,558,84,213,319,533,399,399,399,643,533,377,399,399,929',
'399,84,84,84,84,691,84,840,84,930,84,84,840,532,930,688,690,801,532',
'875,399,399,744,399,399,399,399,399,927,383,800,385,504,632,320,948',
'929,765,758,320,948,929,765,686,893,691,686,389,686,893,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,415,540,399,399,399,632',
'399,744,632,211,399,329,569,399,861,632,928,690,399,861,399,928,399',
'399,399,399,399,399,399,397,399,360,399,552,552,596,397,397,397,319',
'758,392,397,397,319,397,399,399,191,399,415,399,290,801,397,399,399',
'690,801,211,26,309,693,398,309,397,397,391,397,397,397,397,397,569,569',
'445,758,652,927,758,652,362,569,927,392,596,758,635,359,938,938,392',
'360,360,360,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'445,391,397,397,397,693,397,290,391,98,397,411,693,397,552,26,358,693',
'397,552,397,693,397,397,397,397,397,397,397,290,397,397,397,362,362',
'362,616,26,357,693,359,359,359,635,635,598,397,397,876,397,877,397,598',
'598,598,397,397,598,598,598,297,598,672,693,672,672,672,672,672,111',
'616,598,598,598,111,111,516,358,358,358,635,598,598,635,598,598,598',
'598,598,879,635,857,633,857,857,857,857,857,346,357,357,357,348,297',
'313,346,423,313,424,348,297,598,598,598,598,598,598,598,598,598,598',
'598,598,598,598,516,627,598,598,598,425,598,598,627,426,598,882,349',
'598,598,672,598,14,598,349,598,950,598,598,598,598,598,598,598,460,598',
'346,598,633,603,348,603,603,603,603,603,318,318,889,857,337,598,598',
'598,598,597,598,337,598,582,598,598,597,597,597,14,337,597,597,597,71',
'597,14,704,633,349,603,633,704,71,597,597,597,597,633,603,603,603,603',
'71,466,597,597,35,597,597,597,597,597,677,677,657,582,657,657,657,351',
'657,337,582,350,343,468,351,469,3,472,350,343,603,3,597,597,597,597',
'597,597,597,597,597,597,597,597,597,597,551,35,597,597,597,551,597,597',
'35,960,597,474,25,597,597,479,597,483,597,25,597,897,597,597,597,597',
'597,597,597,351,597,597,597,350,343,698,838,345,284,310,698,898,310',
'838,345,284,597,597,597,597,50,597,838,597,284,597,597,50,50,50,323',
'899,50,50,50,323,50,492,441,900,25,495,694,353,307,307,50,50,50,694',
'353,37,37,901,694,506,50,50,694,50,50,50,50,50,838,345,284,15,15,507',
'441,344,508,347,441,441,441,441,344,845,347,845,845,845,509,845,50,50',
'50,50,50,50,50,50,50,50,50,50,50,50,694,353,50,50,50,422,517,50,524',
'527,50,529,41,50,50,534,50,535,50,903,50,566,50,50,50,50,50,50,50,344',
'50,347,50,572,1,579,285,422,287,583,586,422,422,285,924,287,50,50,50',
'50,28,50,285,50,287,50,590,28,28,28,926,36,28,28,28,932,28,932,932,932',
'932,932,881,440,599,601,28,28,34,881,606,608,620,333,622,629,28,28,881',
'28,28,28,28,28,285,631,287,4,4,4,4,4,932,634,637,440,638,641,642,440',
'440,440,440,932,932,644,28,28,28,28,28,28,28,28,28,28,28,28,28,28,881',
'421,28,28,28,333,20,28,334,28,28,647,333,28,28,648,28,333,28,656,28',
'333,28,28,28,28,28,28,28,665,28,671,28,421,300,673,674,421,421,333,679',
'300,684,687,696,457,28,28,701,28,300,28,457,457,457,28,719,457,457,457',
'334,457,636,333,937,939,940,334,941,636,738,457,334,739,636,740,334',
'742,636,743,746,457,457,13,457,457,457,457,457,543,13,942,300,943,334',
'42,543,327,754,13,478,210,42,755,327,543,756,478,210,757,944,42,12,327',
'11,771,478,210,334,772,636,776,457,777,393,780,781,783,786,457,788,393',
'393,393,457,457,393,393,393,791,393,13,364,364,364,364,364,543,945,393',
'393,393,794,42,10,327,9,457,478,210,393,393,946,393,393,393,393,393',
'562,562,8,457,562,562,562,212,457,214,215,787,457,787,787,787,787,787',
'803,219,807,808,393,393,393,393,393,393,393,393,393,393,393,393,393',
'393,811,812,393,393,393,824,949,393,827,393,393,828,787,393,393,829',
'393,831,393,839,393,787,393,393,393,393,393,393,393,842,393,393,393',
'843,251,252,255,669,328,669,669,669,669,669,859,402,393,393,277,393',
'279,393,402,402,402,393,280,402,402,402,872,402,872,872,872,872,872',
'281,286,288,402,402,402,402,669,109,109,109,109,109,289,402,402,669',
'402,402,402,402,402,902,292,902,902,902,902,902,294,872,872,858,863',
'858,858,858,858,858,872,872,872,872,298,402,402,402,402,402,402,402',
'402,402,402,402,402,402,402,299,902,402,402,402,302,864,402,305,306',
'402,858,311,402,402,312,402,314,402,869,402,324,402,402,402,402,402',
'402,402,325,402,402,402,817,,817,817,817,817,817,,,,,,,402,402,402,402',
'454,402,,402,,402,,454,454,454,,,454,454,454,,454,,,819,817,819,819',
'819,819,819,454,,,817,817,817,817,,,,454,454,,454,454,454,454,454,,',
',,822,,822,822,822,822,822,,819,519,,519,519,519,519,519,,819,819,819',
'819,,,,,,,,,454,,403,,,,,454,822,403,403,403,454,454,403,403,403,519',
'403,822,822,,,,,,519,403,403,403,403,,,,,454,,,403,403,,403,403,403',
'403,403,,,,454,,,,,454,,,936,454,936,936,936,936,936,,,,,403,403,403',
'403,403,403,403,403,403,403,403,403,403,403,,,403,403,403,,,403,,,403',
',936,403,403,,403,,403,,403,,403,403,403,403,403,403,403,,403,403,403',
'659,,659,659,659,659,659,,,,,,,403,403,403,403,27,403,,403,,403,,27',
'27,27,,,27,27,27,,27,431,,,659,,,,,27,27,27,,659,659,659,659,431,431',
',27,27,,27,27,27,27,27,,,,,,431,,431,,431,431,431,431,,,431,,431,,,',
',27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,',
'27,27,,27,,27,,27,,27,27,27,27,27,27,27,,27,27,27,,661,,661,661,661',
'661,661,,,,,,27,27,,27,,27,,,,27,0,0,0,0,0,0,,,,0,0,,,,0,661,0,0,0,0',
'0,0,0,,661,661,661,661,0,0,0,0,0,0,0,,904,0,904,904,904,904,904,0,0',
'0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,789,,789,789,789,789,789,849,904',
'849,849,849,849,849,,,,,,0,,,0,,,0,0,,,0,,0,,,,0,851,789,851,851,851',
'851,851,0,849,,,,0,0,0,0,,0,0,849,849,,0,0,283,283,283,283,283,283,0',
',0,283,283,,,851,283,,283,283,283,283,283,283,283,,851,851,,,283,283',
'283,283,283,283,283,,,283,,,,,,283,283,283,283,283,283,283,283,283,283',
'283,283,,283,283,283,,283,283,283,283,283,,,,,,,,853,,853,853,853,853',
'853,,,,,,283,,,283,,,283,283,,,283,,283,,,,283,664,,664,664,664,664',
'664,283,853,,,,283,283,283,283,,283,283,853,853,,283,283,712,712,712',
'712,712,712,283,,283,712,712,,,664,712,,712,712,712,712,712,712,712',
',664,664,,,712,712,712,712,712,712,712,,,712,,,,,,712,712,712,712,712',
'712,712,712,712,712,712,712,,712,712,712,,712,712,712,712,712,,,,,,',
',955,,955,955,955,955,955,,,,,,712,,,712,,,712,712,,,712,,712,,,,712',
'917,,917,917,917,917,917,712,955,,,,712,712,712,712,,712,712,955,955',
',712,712,605,605,605,605,605,605,712,,712,605,605,,,917,605,,605,605',
'605,605,605,605,605,,917,917,,,605,605,605,605,605,605,605,,,605,,,',
',,605,605,605,605,605,605,605,605,605,605,605,605,,605,605,605,,605',
'605,605,605,605,428,,,,,,,919,,919,919,919,919,919,,,428,428,,605,,',
'605,,,605,605,,,605,,605,428,,428,605,428,428,428,428,,,,605,919,,,',
'605,605,605,605,,605,605,919,919,,605,605,553,553,553,553,553,553,605',
',605,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553',
'553,553,553,,,553,,,,,,553,553,553,553,553,553,553,553,553,553,553,553',
',553,553,553,,553,553,553,553,553,419,419,419,419,419,419,419,419,419',
'419,419,,419,419,,,419,419,,553,,,553,,,553,553,,,553,,553,419,,419',
'553,419,419,419,419,419,419,419,553,419,,,,553,553,553,553,,553,553',
',,,553,553,796,796,796,796,796,796,553,,553,796,796,,,,796,,796,796',
'796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,796',
'796,796,796,796,796,796,796,796,796,796,796,,796,796,796,,796,796,796',
'796,796,442,442,442,442,442,442,442,,,442,442,,,,,,442,442,,796,,,796',
',,796,796,,,796,,796,442,,442,796,442,442,442,442,442,442,442,796,442',
',,,796,796,796,796,,796,796,,,,796,796,218,218,218,218,218,218,796,',
'796,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218',
'218,218,218,,,218,,,,,,218,218,218,218,218,218,218,218,218,218,218,218',
',218,218,218,,218,218,218,218,218,430,430,430,430,430,430,430,,,430',
'430,,,,,,430,430,,218,,,218,,,218,218,,,218,,218,430,,430,218,430,430',
'430,430,430,430,430,218,430,,,,218,218,218,218,,218,218,,,,218,218,795',
'795,795,795,795,795,218,,218,795,795,,,,795,,795,795,795,795,795,795',
'795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,795,795,795,795,795',
'795,795,795,795,795,795,795,,795,795,795,,795,795,795,795,795,439,439',
'439,439,439,439,439,,,439,439,,,,,,439,439,,795,,,795,,,795,795,,,795',
',795,439,,439,795,439,439,439,439,439,439,439,795,439,,,,795,795,795',
'795,,795,795,,,,795,795,770,770,770,770,770,770,795,,795,770,770,,,',
'770,,770,770,770,770,770,770,770,,,,,,770,770,770,770,770,770,770,,',
'770,,,,,,770,770,770,770,770,770,770,770,770,770,770,770,,770,770,770',
',770,770,770,770,770,420,420,420,420,420,420,420,420,420,420,420,,420',
'420,,,420,420,,770,,,770,,,770,770,,,770,,770,420,,420,770,420,420,420',
'420,420,420,420,770,420,,,,770,770,770,770,,770,770,,,,770,770,531,531',
'531,531,531,531,770,,770,531,531,,,,531,,531,531,531,531,531,531,531',
',,,,,531,531,531,531,531,531,531,,,531,,,,,,531,531,531,531,531,531',
'531,531,531,531,531,531,,531,531,531,,531,531,531,531,531,438,438,438',
'438,438,438,438,,,438,438,,,,,,438,438,,531,,,531,,,531,531,,,531,,531',
'438,,438,531,438,438,438,438,438,438,438,531,438,,,,531,531,531,531',
',531,531,,,,531,531,528,528,528,528,528,528,531,,531,528,528,,,,528',
',528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528',
',,,,,528,528,528,528,528,528,528,528,528,528,528,528,,528,528,528,,528',
'528,528,528,528,435,435,435,435,435,435,435,,,435,435,,,,,,435,435,',
'528,,,528,,,528,528,,,528,,528,435,,435,528,435,435,435,435,435,435',
'435,528,435,,,,528,528,528,528,,528,528,,,,528,528,51,51,51,51,51,51',
'528,,528,51,51,,,,51,,51,51,51,51,51,51,51,,,,,,51,51,51,51,51,51,51',
',,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,,51,51,51,,51,51,51,51',
'51,433,,,,,,,,,,,,,,,,433,433,,51,,,51,,,51,51,,,51,,51,433,,433,51',
'433,433,433,433,,,433,51,433,,,,51,51,51,51,,51,51,,,,51,51,769,769',
'769,769,769,769,51,,51,769,769,,,,769,,769,769,769,769,769,769,769,',
',,,,769,769,769,769,769,769,769,,,769,,,,,,769,769,769,769,769,769,769',
'769,769,769,769,769,,769,769,769,,769,769,769,769,769,432,,,,,,,,,,',
',,,,,432,432,,769,,,769,,,769,769,,,769,,769,432,,432,769,432,432,432',
'432,,,432,769,432,,,,769,769,769,769,,769,769,,,,769,769,762,762,762',
'762,762,762,769,,769,762,762,,,,762,,762,762,762,762,762,762,762,,,',
',,762,762,762,762,762,762,762,,,762,,,,,,762,762,762,762,762,762,762',
'762,762,762,762,762,,762,762,762,,762,762,762,762,762,434,,,,,,,,,,',
',,,,,434,434,,762,,,762,,,762,762,,,762,,762,434,,434,762,434,434,434',
'434,,,434,762,434,,,,762,762,762,762,,762,762,,,,762,762,750,750,750',
'750,750,750,762,,762,750,750,,,,750,,750,750,750,750,750,750,750,,,',
',,750,750,750,750,750,750,750,,,750,,,,,,750,750,750,750,750,750,750',
'750,750,750,750,750,,750,750,750,,750,750,750,750,750,437,437,437,437',
'437,437,437,,,437,437,,,,,,437,437,,750,,,750,,,750,750,,,750,,750,437',
',437,750,437,437,437,437,437,437,437,750,437,,,,750,750,750,750,,750',
'750,,,,750,750,278,278,278,278,278,278,750,,750,278,278,,,,278,,278',
'278,278,278,278,278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,',
'278,278,278,278,278,278,278,278,278,278,278,278,,278,278,278,,278,278',
'278,278,278,436,436,436,436,436,436,436,,,436,436,,,,,,436,436,,278',
',,278,,,278,278,,,278,,278,436,,436,278,436,436,436,436,436,436,436',
'278,436,,,,278,278,278,278,,278,278,,,,278,278,702,702,702,702,702,702',
'278,,278,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702',
'702,702,702,702,,,702,,,,,,702,702,702,702,702,702,702,702,702,702,702',
'702,,702,702,702,,702,702,702,702,702,443,443,443,443,443,443,443,443',
',443,443,,,,,,443,443,,702,,,702,,,702,702,,,702,,702,443,,443,702,443',
'443,443,443,443,443,443,702,443,,,,702,702,702,702,,702,702,,,,702,702',
'911,911,911,911,911,911,702,,702,911,911,,,,911,,911,911,911,911,911',
'911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,,911,911,911,911',
'911,911,911,911,911,911,911,911,,911,911,911,,911,911,911,911,911,427',
',,,,,,,,,,,,,,,427,427,,911,,,911,,,911,911,,,911,,911,427,,427,911',
'427,427,427,427,,,,911,,,,,911,911,911,911,,911,911,,,,911,911,697,697',
'697,697,697,697,911,,911,697,697,,,,697,,697,697,697,697,697,697,697',
',,,,,697,697,697,697,697,697,697,,,697,,,,,,697,697,697,697,697,697',
'697,697,697,697,697,697,,697,697,697,,697,697,697,697,697,429,,,,,,',
',,,,,,,,,429,429,,697,,,697,,,697,697,,,697,,697,429,,,697,429,429,429',
'429,,,,697,,,,,697,697,697,697,,697,697,,,,697,697,646,646,646,646,646',
'646,697,,697,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646,646',
'646,646,646,646,646,,,646,,,,,,646,646,646,646,646,646,646,646,646,646',
'646,646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646',
',,646,646,,,646,,646,,,,646,,,,,,,,646,,,,,646,646,646,646,,646,646',
',,,646,646,905,905,905,905,905,905,646,,646,905,905,,,,905,,905,905',
'905,905,905,905,905,,,,,,905,905,905,905,905,905,905,,,905,,,,,,905',
'905,905,905,905,905,905,905,905,905,905,905,,905,905,905,,905,905,905',
'905,905,,,,,,,,,,,,,,,,,,,,905,,,905,,,905,905,,,905,,905,,,,905,,,',
',,,,905,,,,,905,905,905,905,,905,905,,,,905,905,913,913,913,913,913',
'913,905,,905,913,913,,,,913,,913,913,913,913,913,913,913,,,,,,913,913',
'913,913,913,913,913,,,913,,,,,,913,913,913,913,913,913,913,913,913,913',
'913,913,,913,913,913,,913,913,913,913,913,,,,,,,,,,,,,,,,,,,,913,,,913',
',,913,913,,,913,,913,,,,913,,,,,,,,913,,,,,913,913,913,913,,913,913',
',,,913,913,836,836,836,836,836,836,913,,913,836,836,,,,836,,836,836',
'836,836,836,836,836,,,,,,836,836,836,836,836,836,836,,,836,,,,,,836',
'836,836,836,836,836,836,836,836,836,836,836,,836,836,836,,836,836,836',
'836,836,,,,,,,,,,,,,,,,,,,,836,,,836,,,836,836,,,836,,836,,,,836,,,',
',,,,836,,,,,836,836,836,836,,836,836,,,,836,836,625,625,625,625,625',
'625,836,,836,625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625',
'625,625,625,625,625,,,625,,,,,,625,625,625,625,625,625,625,625,625,625',
'625,625,,625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625',
',,625,625,,,625,,625,,,,625,,,,,,,,625,,,,,625,625,625,625,,625,625',
',,,625,625,624,624,624,624,624,624,625,,625,624,624,,,,624,,624,624',
'624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,624',
'624,624,624,624,624,624,624,624,624,624,624,,624,624,624,,624,624,624',
'624,624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,624,,,,624,,,',
',,,,624,,,,,624,624,624,624,,624,624,,,,624,624,193,193,193,193,193',
'193,624,,624,193,193,,,,193,,193,193,193,193,193,193,193,,,,,,193,193',
'193,193,193,193,193,,,193,,,,,,193,193,193,193,193,193,193,193,193,193',
'193,193,,193,193,193,,193,193,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193',
',,193,193,,,193,,193,,,,193,,,,,,,,193,,,,,193,193,193,193,,193,193',
',,,193,193,194,194,194,194,194,194,193,,193,194,194,,,,194,,194,194',
'194,194,194,194,194,,,,,,194,194,194,194,194,194,194,,,194,,,,,,194',
'194,194,194,194,194,194,194,194,194,194,194,,194,194,194,,194,194,194',
'194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,,194,,,,194,,,',
',,,,194,,,,,194,194,194,194,,194,194,,,,194,194,30,30,30,30,30,30,194',
',194,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30',
',,,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,,30,30,30,30,30,',
',,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,,,30,,,,,,,,30,,,,,30,30',
'30,30,,30,30,,,,30,30,805,805,805,805,805,805,30,,30,805,805,,,,805',
',805,805,805,805,805,805,805,,,,,,805,805,805,805,805,805,805,,,805',
',,,,,805,805,805,805,805,805,805,805,805,805,805,805,,805,805,805,,805',
'805,805,805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,,,805,,805,,',
',805,,,,,,,,805,,,,,805,805,805,805,,805,805,,,,805,805,,198,198,198',
',198,805,,805,198,198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198',
'198,198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198',
'198,198,198,198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,',
'198,198,,,198,,198,,198,,198,,,,,,,,198,,,,,198,198,198,198,,198,198',
',,,198,198,,5,5,5,5,5,198,,198,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5',
'5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,',
',,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,18',
'18,18,,18,5,,5,18,18,,,,18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18',
'18,18,,,18,,,,,,,18,,,18,18,18,18,18,18,18,18,,18,18,18,,18,18,18,18',
'18,,,,,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18,,,,,,18,,,,,,,,18,,,,,18',
'18,18,18,,18,18,,,,18,18,,22,22,22,,22,18,,18,22,22,,,,22,,22,22,22',
'22,22,22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22',
'22,22,22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22',
'22,,,22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,,22,22,,,,22,22,,23,23',
'23,,23,22,,22,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23',
'23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,23,23,,23,23,23',
'23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23',
',,,,23,23,23,23,,23,23,,,,23,23,,24,24,24,,24,23,,23,24,24,,,,24,,24',
'24,24,24,24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24',
'24,24,24,24,24,24,24,24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24',
',,24,24,,,24,,24,,24,,24,,,,,,,,24,,,,,24,24,24,24,,24,24,,,,24,24,',
'31,31,31,,31,24,,24,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31',
'31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,,31,31,31,,31,31',
',846,31,846,846,846,846,846,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,',
',,846,,,,,,,,,846,846,846,846,31,31,31,31,,31,31,,,,31,31,,32,32,32',
',32,31,,31,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32',
'32,,,32,,,,,,380,32,,,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,,32',
',380,380,380,380,380,380,380,380,380,380,380,,380,380,,,380,380,32,',
',32,,,32,32,,,32,,,,380,,380,,380,380,380,380,380,380,380,,380,,,32',
'32,32,32,,32,32,,,,32,32,,,380,32,380,,32,,32,38,38,38,,38,,,,38,38',
',,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38',
',,38,38,38,38,38,38,38,38,,38,38,38,,38,38,38,38,38,,,,,,,,,,,,,,,,',
',,,38,,,38,,,38,38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,,38,38,,,',
'38,38,,39,39,39,,39,38,,38,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39',
'39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39',
',39,39,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,',
',,,39,,,,,39,39,39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40,,,',
'40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40',
'40,40,40,40,40,40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40',
',,40,,,40,40,,,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,,40,40',
',52,52,52,,52,40,,40,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52',
'52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52',
'52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,52,',
',,,52,52,52,52,,52,52,,,,52,52,,53,53,53,,53,52,,52,53,53,,,,53,,53',
'53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53',
'53,53,53,53,53,53,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53',
',,53,53,,,53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54',
'54,54,,54,53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54',
'54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54,54',
'54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,,54,',
',,,54,54,54,54,,54,54,,,,54,54,,57,57,57,,57,54,,54,57,57,,,,57,,57',
'57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57',
'57,57,57,57,57,,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57',
',,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,58,58',
'58,,58,57,,57,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58',
'58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58',
'58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58',
'58,58,58,,58,58,,,,58,58,,61,61,61,,61,58,,58,61,61,,,,61,,61,61,61',
'61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,600,,61,,,61,61,61,61',
'61,61,61,61,,61,61,61,,61,61,61,61,61,600,600,600,600,600,600,600,600',
'600,600,600,,600,600,,,600,600,,61,,,61,,,61,61,,,61,,,600,,600,61,600',
'600,600,600,600,600,600,61,600,,,,61,61,61,61,,61,61,,,,61,61,61,600',
',,,61,61,,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,',
'62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62',
'62,,62,62,,554,62,554,554,554,554,554,,,,,,,,,,,,,,,62,,,62,,,62,62',
',,62,,62,,,,554,554,,,,,,,,554,554,554,554,62,62,62,62,,62,62,,,,62',
'62,,63,63,63,,63,62,,62,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63',
'63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63',
'63,,914,63,914,914,914,914,914,,,,,,,,,,,,63,,,63,,,63,,,63,63,,,63',
',,,,,914,,,,,,,,,914,914,914,914,63,63,63,63,,63,63,,,,63,63,,64,64',
'64,,64,63,,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64',
'64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,317',
'64,317,317,317,317,317,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,317,317',
',,,,,,,317,317,317,317,64,64,64,64,,64,64,,,,64,64,,100,100,100,100',
'100,64,,64,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100',
'100,100,100,100,100,,,100,,,,,388,100,100,100,100,100,100,100,100,100',
'100,100,100,,100,100,100,,100,100,100,100,100,388,388,388,388,388,388',
'388,388,388,388,388,,388,388,,,388,388,,100,,,100,,,100,100,,,100,,100',
'388,,388,100,388,388,388,388,388,388,388,100,388,,,,100,100,100,100',
',100,100,,,,100,100,,388,,,,100,100,,100,104,104,104,,104,,,,104,104',
',,,104,,104,104,104,104,104,104,104,,,,,,104,104,104,104,104,104,104',
',,104,,,,,,,104,,,104,104,104,104,104,104,104,104,,104,104,104,,104',
'104,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104,,,,,,104',
',,,,,,,104,,,,,104,104,104,104,,104,104,,,,104,104,,105,105,105,,105',
'104,,104,105,105,,,,105,,105,105,105,105,105,105,105,,,,,,105,105,105',
'105,105,105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,,105',
'105,105,,105,105,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105',
',,105,,,,,,105,,,,,,,,105,,,,,105,105,105,105,,105,105,,,,105,105,,106',
'106,106,,106,105,,105,106,106,,,,106,,106,106,106,106,106,106,106,,',
',,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106',
'106,106,106,,106,106,106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106',
',,106,,,106,106,,,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106,,106,106',
',,,106,106,,107,107,107,,107,106,,106,107,107,,,,107,,107,107,107,107',
'107,107,107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107',
'107,107,107,107,107,107,,107,107,107,,107,107,107,107,107,,,,,,,,,,',
',,,,,,,,,107,,,107,,,107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107',
'107,,107,107,,,,107,107,,108,108,108,108,108,107,,107,108,108,,,,108',
',108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108',
',,,,,108,108,108,108,108,108,108,108,108,108,108,108,,108,108,108,,108',
'108,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,,108,,',
',108,,,,,,,,108,,,,,108,108,108,108,,108,108,,,,108,108,,195,195,195',
',195,108,,108,195,195,,,,195,,195,195,195,195,195,195,195,,,,,,195,195',
'195,195,195,195,195,,,195,,,,,,,195,,,195,195,195,195,195,195,195,195',
',195,195,195,,195,195,195,195,195,,,,,,,,,,,,,,,,,,,,195,,,195,,,195',
'195,,,195,,195,,,,195,,,,,,,,195,,,,,195,195,195,195,,195,195,,,,195',
'195,,196,196,196,,196,195,,195,196,196,,,,196,,196,196,196,196,196,196',
'196,,,,,,196,196,196,196,196,196,196,,,196,,,,,,,196,,,196,196,196,196',
'196,196,196,196,,196,196,196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,',
',196,,,196,,,196,196,,,196,,196,,,,196,,,,,,,,196,,,,,196,196,196,196',
',196,196,,,,196,196,,197,197,197,,197,196,,196,197,197,,,,197,,197,197',
'197,197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197',
',,197,197,197,197,197,197,197,197,,197,197,197,,197,197,197,197,197',
',,,,,,,,,,,,,,,,,,,197,,,197,,,197,197,,,197,,,,,,197,,,,,,,,197,,,',
',197,197,197,197,,197,197,,,,197,197,,203,203,203,,203,197,,197,203',
'203,,,,203,,203,203,203,203,203,203,203,,,,,,203,203,203,203,203,203',
'203,,,203,,,,,,,203,,,203,203,203,203,203,203,203,203,,203,203,203,',
'203,203,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,,,',
',,203,,,,,,,,203,,,,,203,203,203,203,,203,203,,,,203,203,,204,204,204',
',204,203,,203,204,204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204',
'204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204',
',204,204,204,,204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204',
'204,,,204,,,,,,204,,,,,,,,204,,,,,204,204,204,204,,204,204,,,,204,204',
',205,205,205,,205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205',
',,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205',
'205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,,,,,,,,,,,205',
',,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,,205,205',
',,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206',
'206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206',
'206,206,206,206,206,206,,206,206,206,,206,206,206,206,206,,,,,,,,,,',
',,,,,,,,,206,,,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,,,206,206,206',
'206,,206,206,,,,206,206,,207,207,207,,207,206,,206,207,207,,,,207,,207',
'207,207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,',
',207,,,207,207,207,207,207,207,207,207,,207,207,207,,207,207,207,207',
'207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207',
',,,,207,207,207,207,,207,207,,,,207,207,207,217,217,217,,217,207,,207',
'217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217',
'217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217',
',217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,217,,,,,217,217,217,217,,217,217,,,,217,217,,220,220,220',
',220,217,,217,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220',
'220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220',
',220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220',
'220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,,220,220,,,,220,220',
',221,221,221,,221,220,,220,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221',
'221,221,221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221',
',,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,,221,221',
',,,221,221,,222,222,222,,222,221,,221,222,222,,,,222,,222,222,222,222',
'222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222',
'222,222,222,222,222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,',
',,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222',
'222,,222,222,,,,222,222,,223,223,223,,223,222,,222,223,223,,,,223,,223',
'223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,',
',223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,223,223',
'223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223',
',,,,223,223,223,223,,223,223,,,,223,223,,224,224,224,,224,223,,223,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,',
',,224,,,,,,,,224,,,,,224,224,224,224,,224,224,,,,224,224,,225,225,225',
',225,224,,224,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225',
',225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225',
'225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,,225,225,,,,225,225',
',226,226,226,,226,225,,225,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,,226,226',
',,,226,226,,227,227,227,,227,226,,226,227,227,,,,227,,227,227,227,227',
'227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227',
'227,227,227,227,227,227,,227,227,227,,227,227,227,227,227,,,,,,,,,,',
',,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227',
'227,,227,227,,,,227,227,,228,228,228,,228,227,,227,228,228,,,,228,,228',
'228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,',
',228,,,228,228,228,228,228,228,228,228,,228,228,228,,228,228,228,228',
'228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228',
',,,,228,228,228,228,,228,228,,,,228,228,,229,229,229,,229,228,,228,229',
'229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229',
'229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,',
'229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,',
',,229,,,,,,,,229,,,,,229,229,229,229,,229,229,,,,229,229,,230,230,230',
',230,229,,229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230',
',230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230',
'230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230,230',
',231,231,231,,231,230,,230,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231',
'231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231',
',,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,,231,231',
',,,231,231,,232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232',
'232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232',
'232,232,232,232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,',
',,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232',
'232,,232,232,,,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233',
',,,,233,233,233,233,,233,233,,,,233,233,,234,234,234,,234,233,,233,234',
'234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,',
'234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,',
',,234,,,,,,,,234,,,,,234,234,234,234,,234,234,,,,234,234,,235,235,235',
',235,234,,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,,235,235,,,,235,235',
',236,236,236,,236,235,,235,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236',
',,,236,236,,237,237,237,,237,236,,236,237,237,,,,237,,237,237,237,237',
'237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237',
'237,237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,',
',,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,,237,237,,,,237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238',
',,,,238,238,238,238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,239,,,,,239,239,239,239,,239,239,,,,239,239,,240,240,240',
',240,239,,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240',
',240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240',
'240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240',
',241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241',
',,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242',
'242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242',
'242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,',
',,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,,242,242,,,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,,243,243,,,,243,243,,244,244,244,,244,243,,243,244',
'244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244',
'244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,',
'244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,',
',,244,,,,,,,,244,,,,,244,244,244,244,,244,244,,,,244,244,,245,245,245',
',245,244,,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,,245,245,,,,245,245',
',254,254,254,,254,245,,245,254,254,,,,254,,254,254,254,254,254,254,254',
',,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254',
'254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,,254,254',
',,,254,254,,256,256,256,,256,254,,254,256,256,,,,256,,256,256,256,256',
'256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256',
'256,256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,',
',,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,,256,256,,,,256,256,,261,261,261,,261,256,,256,261,261,,,,261,,261',
'261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,',
',261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,261,261',
'261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261',
',,,,261,261,261,261,,261,261,,,,261,261,,267,267,267,,267,261,,261,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267,267',
',267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,267',
',267,,267,,,,,,,,267,,,,,267,267,267,267,,267,267,,,,267,267,,268,268',
'268,,268,267,,267,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,268,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,268,,268,,268,,,,,,,,268,,,,,268,268,268,268,,268,268',
',,,268,268,,276,276,276,,276,268,,268,276,276,,,,276,,276,276,276,276',
'276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276',
'276,276,276,276,276,276,276,276,276,276,,276,276,276,276,276,,,,,,,',
',,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276,,,,',
'276,276,276,276,,276,276,,,,276,276,276,282,282,282,,282,276,,276,282',
'282,,,,282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282',
'282,,,282,,,,,,,282,,,282,282,282,282,282,282,282,282,,282,282,282,',
'282,282,,,282,19,19,19,19,19,19,19,19,19,19,19,,19,19,,,19,19,,282,',
',282,,,282,282,,,282,,,19,,19,,19,19,19,19,19,19,19,,19,,,,282,282,282',
'282,,282,282,,,,282,282,,19,,282,,,282,,282,295,295,295,,295,,,,295',
'295,,,,295,,295,295,295,295,295,295,295,,,,,,295,295,295,295,295,295',
'295,,,295,,,,,,,295,,,295,295,295,295,295,295,295,295,,295,295,295,',
'295,295,,703,295,703,703,703,703,703,,,,,,,,,,,,,,,295,,,295,,,295,295',
',,295,,,,,,703,,,,,,,,,703,703,703,703,295,295,295,295,,295,295,,,,295',
'295,,304,304,304,,304,295,,295,304,304,,,,304,,304,304,304,304,304,304',
'304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304',
'304,304,304,304,,304,304,304,,304,304,304,304,304,,,,,,,,,,,,,,,,,,',
',304,,,304,304,,304,304,,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304',
',304,304,,,,304,304,,321,321,321,,321,304,,304,321,321,,,,321,,321,321',
'321,321,321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,,321',
',,321,321,321,321,321,321,321,321,,321,321,321,,321,321,321,321,321',
',,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,321,,,,,,,,321,,,',
',321,321,321,321,,321,321,,,,321,321,,322,322,322,,322,321,,321,322',
'322,,,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322,322,322',
'322,,,322,,,,,,,322,,,322,322,322,322,322,322,322,322,,322,322,322,',
'322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,,',
',,322,,,,,,,,322,,,,,322,322,322,322,,322,322,,,,322,322,,340,340,340',
',340,322,,322,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340',
'340,340,340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340,340,340',
',340,340,340,,340,340,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340',
'340,,,340,,,,,,340,,,,,,,,340,,,,,340,340,340,340,,340,340,,,,340,340',
',355,355,355,,355,340,,340,355,355,,,,355,,355,355,355,355,355,355,355',
',,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355,355,355',
'355,355,355,,355,355,355,,355,355,355,355,355,,,,,,,,,,,,,,,,,,,,355',
',,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,,,355,355,355,355,,355,355',
',,,355,355,,382,382,382,,382,355,,355,382,382,,,,382,,382,382,382,382',
'382,382,382,,,,,,382,382,382,382,382,382,382,,,382,,,,,,,382,,,382,382',
'382,382,382,382,382,382,,382,382,382,,382,382,382,382,382,,,,,,,,,,',
',,,,,,,,,382,,,382,,,382,382,,,382,,,,,,382,,,,,,,,382,,,,,382,382,382',
'382,,382,382,,,,382,382,,414,414,414,,414,382,,382,414,414,,,,414,,414',
'414,414,414,414,414,414,,,,,,414,414,414,414,414,414,414,,,414,,,,,',
',414,,,414,414,414,414,414,414,414,414,414,414,414,414,,414,414,414',
'414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,414,,,414,,414,,414,,414',
',,,,,,,414,,,,,414,414,414,414,,414,414,,,,414,414,,416,416,416,,416',
'414,,414,416,416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416',
'416,416,416,416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416',
'416,416,,416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416',
',,416,,,,,,416,,,,,,,,416,,,,,416,416,416,416,,416,416,,,,416,416,,417',
'417,417,,417,416,,416,417,417,,,,417,,417,417,417,417,417,417,417,,',
',,,417,417,417,417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417',
'417,417,417,,417,417,417,,417,417,417,417,417,,,,,,,,,,,,,,,,,,,,417',
',,417,,,417,417,,,417,,,,,,417,,,,,,,,417,,,,,417,417,417,417,,417,417',
',,,417,417,,418,418,418,,418,417,,417,418,418,,,,418,,418,418,418,418',
'418,418,418,,,,,,418,418,418,418,418,418,418,,,418,,,,,,,418,,,418,418',
'418,418,418,418,418,418,,418,418,418,,418,418,418,418,418,,,,,,,,,,',
',,,,,,,,,418,,,418,,,418,418,,,418,,,,,,418,,,,,,,,418,,,,,418,418,418',
'418,,418,418,,,,418,418,,447,447,447,,447,418,,418,447,447,,,,447,,447',
'447,447,447,447,447,447,,,,,,447,447,447,447,447,447,447,,,447,,,,,',
',447,,,447,447,447,447,447,447,447,447,447,447,447,447,,447,447,447',
'447,447,,,,,,,,,,,,,,,,,,,,447,,,447,,,447,447,,,447,,447,,447,,447',
',,,,,,,447,,,,,447,447,447,447,,447,447,,,,447,447,,449,449,449,,449',
'447,,447,449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449,449,449',
'449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449,449',
'449,449,449,,449,449,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449,,,449',
'449,,,449,,,,449,,449,,,,,,,,449,,,,,449,449,449,449,,449,449,,,,449',
'449,,451,451,451,,451,449,,449,451,451,,,,451,,451,451,451,451,451,451',
'451,,,,,,451,451,451,451,451,451,451,,,451,,,,,,,451,,,451,451,451,451',
'451,451,451,451,,451,451,451,,451,451,451,451,451,,,,,,,,,,,,,,,,,,',
',451,,,451,,,451,451,,,451,,,,,,451,,,,,,,,451,,,,,451,451,451,451,',
'451,451,,,,451,451,,463,463,463,,463,451,,451,463,463,,,,463,,463,463',
'463,463,463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463',
',,463,463,463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463',
',,,,,,,,,,,,,,,,,,,463,,,463,,,463,463,,,463,,,,463,,463,,,,,,,,463',
',,,,463,463,463,463,,463,463,,,,463,463,,473,473,473,,473,463,,463,473',
'473,,,,473,,473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473',
'473,,,473,,,,,,,473,,,473,473,473,473,473,473,473,473,,473,473,473,',
'473,473,,505,473,505,505,505,505,505,,,,,,,,,,,,,,,473,,,473,,,473,473',
',,473,,,,,,505,,,,,,,,,505,505,505,505,473,473,473,473,,473,473,,,,473',
'473,,475,475,475,,475,473,,473,475,475,,,,475,,475,475,475,475,475,475',
'475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475',
'475,475,475,475,475,475,475,475,,475,475,475,475,475,,,,,,,,,,,,,,,',
',,,,475,,,475,,,475,475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475',
'475,475,,475,475,,,,475,475,,482,482,482,,482,475,,475,482,482,,,,482',
',482,482,482,482,482,482,482,,,,,,482,482,482,482,482,482,482,,,482',
',,,,,,482,,,482,482,482,482,482,482,482,482,,482,482,482,,482,482,,',
'482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482,,,482,,,,,,,,,,,,,,,,,,,482',
'482,482,482,,482,482,,,,482,482,,485,485,485,,485,482,,482,485,485,',
',,485,,485,485,485,485,485,485,485,,,,,,485,485,485,485,485,485,485',
',,485,,,,,,,485,,,485,485,485,485,485,485,485,485,,485,485,485,,485',
'485,485,485,485,,,,,,,,,,,,,,,,,,,,485,,,485,,,485,485,,,485,,,,,,485',
',,,,,,,485,,,,,485,485,485,485,,485,485,,,,485,485,,486,486,486,,486',
'485,,485,486,486,,,,486,,486,486,486,486,486,486,486,,,,,,486,486,486',
'486,486,486,486,,,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486',
'486,486,,486,486,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486',
',,486,,,,,,486,,,,,,,,486,,,,,486,486,486,486,,486,486,,,,486,486,,487',
'487,487,,487,486,,486,487,487,,,,487,,487,487,487,487,487,487,487,,',
',,,487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487',
'487,487,487,,487,487,487,,487,487,487,487,487,,,,,,,,,,,,,,,,,,,,487',
',,487,,,487,487,,,487,,,,,,487,,,,,,,,487,,,,,487,487,487,487,,487,487',
',,,487,487,,491,491,491,,491,487,,487,491,491,,,,491,,491,491,491,491',
'491,491,491,,,,,,491,491,491,491,491,491,491,,,491,,,,,,,491,,,491,491',
'491,491,491,491,491,491,,491,491,491,,491,491,491,491,491,,,,,,,,,,',
',,,,,,,,,491,,,491,,,491,491,,,491,,,,,,491,,,,,,,,491,,,,,491,491,491',
'491,,491,491,,,,491,491,,493,493,493,,493,491,,491,493,493,,,,493,,493',
'493,493,493,493,493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,',
',493,,,493,493,493,493,493,493,493,493,,493,493,493,,493,493,493,493',
'493,,,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,,493,,493,,,,493,,,,,,,',
'493,,,,,493,493,493,493,,493,493,,,,493,493,,497,497,497,,497,493,,493',
'497,497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497',
'497,497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,497,497,497,497',
'497,,497,497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497',
',497,,,,497,,,,,,,,497,,,,,497,497,497,497,,497,497,,,,497,497,,500',
'500,500,,500,497,,497,500,500,,,,500,,500,500,500,500,500,500,500,,',
',,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500',
'500,500,500,500,500,500,500,,500,500,500,500,500,,,,,,,,,,,,,,,,,,,',
'500,,,500,,,500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500,500,,500',
'500,,,,500,500,,536,536,536,,536,500,,500,536,536,,,,536,,536,536,536',
'536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536',
'536,536,536,536,536,536,536,,536,536,536,,536,536,536,536,536,,,,,,',
',,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,,,,536',
'536,536,536,,536,536,,,,536,536,,537,537,537,,537,536,,536,537,537,',
',,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537',
',,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537,537,,537',
'537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,537,,537',
',537,,,,,,,,537,,,,,537,537,537,537,,537,537,,,,537,537,,547,547,547',
',547,537,,537,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547',
'547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547',
'547,547,547,547,,547,547,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,',
'547,547,,,547,,547,,547,,547,,,,,,,,547,,,,,547,547,547,547,,547,547',
',,,547,547,,550,550,550,,550,547,,547,550,550,,,,550,,550,550,550,550',
'550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550,,,550,550',
'550,550,550,550,550,550,,550,550,550,,550,550,550,550,550,,,,,,,,,,',
',,,,,,,,,550,,,550,,,550,550,,,550,,,,,,550,,,,,,,,550,,,,,550,550,550',
'550,,550,550,,,,550,550,,578,578,578,,578,550,,550,578,578,,,,578,,578',
'578,578,578,578,578,578,,,,,,578,578,578,578,578,578,578,,,578,,,,,',
',578,,,578,578,578,578,578,578,578,578,,578,578,578,,578,578,578,578',
'578,,,,,,,,,,,,,,,,,,,,578,,,578,,,578,578,,,578,,,,,,578,,,,,,,,578',
',,,,578,578,578,578,,578,578,,,,578,578,,580,580,580,,580,578,,578,580',
'580,,,,580,,580,580,580,580,580,580,580,,,,,,580,580,580,580,580,580',
'580,,,580,,,,,,,580,,,580,580,580,580,580,580,580,580,,580,580,580,',
'580,580,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580',
',,,580,,,,,,,,580,,,,,580,580,580,580,,580,580,,,,580,580,,581,581,581',
',581,580,,580,581,581,,,,581,,581,581,581,581,581,581,581,,,,,,581,581',
'581,581,581,581,581,,,581,,,,,,,581,,,581,581,581,581,581,581,581,581',
',581,581,581,,581,581,581,581,581,,,,,,,,,,,,,,,,,,,,581,,,581,,,581',
'581,,,581,,,,,,581,,,,,,,,581,,,,,581,581,581,581,,581,581,,,,581,581',
',584,584,584,,584,581,,581,584,584,,,,584,,584,584,584,584,584,584,584',
',,,,,584,584,584,584,584,584,584,,,584,,,,,,,584,,,584,584,584,584,584',
'584,584,584,,584,584,584,,584,584,584,584,584,,,,,,,,,,,,,,,,,,,,584',
',,584,,,584,584,,,584,,,,,,584,,,,,,,,584,,,,,584,584,584,584,,584,584',
',,,584,584,,585,585,585,,585,584,,584,585,585,,,,585,,585,585,585,585',
'585,585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585',
'585,585,585,585,585,585,,585,585,585,,585,585,585,585,585,,,,,,,,,,',
',,,,,,,,,585,,,585,,,585,585,,,585,,,,,,585,,,,,,,,585,,,,,585,585,585',
'585,,585,585,,,,585,585,,589,589,589,,589,585,,585,589,589,,,,589,,589',
'589,589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,',
',589,,,589,589,589,589,589,589,589,589,,589,589,589,,589,589,589,589',
'589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589',
',,,,589,589,589,589,,589,589,,,,589,589,,592,592,592,,592,589,,589,592',
'592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592,592',
'592,,,592,,,,,,,592,,,592,592,592,592,592,592,592,592,,592,592,592,',
'592,592,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,,',
',,592,,,,,,,,592,,,,,592,592,592,592,,592,592,,,,592,592,,609,609,609',
',609,592,,592,609,609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609',
'609,609,609,609,609,,,609,,,,,,,609,,,609,609,609,609,609,609,609,609',
',609,609,609,,609,609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609',
'609,,,609,,,,,,609,,,,,,,,609,,,,,609,609,609,609,,609,609,,,,609,609',
',628,628,628,,628,609,,609,628,628,,,,628,,628,628,628,628,628,628,628',
',,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628,628,628',
'628,628,628,,628,628,628,,628,628,,,628,,,,,,,,,,,,,,,,,,,,628,,,628',
',,628,628,,,628,,,,,,,,,,,,,,,,,,,628,628,628,628,,628,628,,,,628,628',
',639,639,639,,639,628,,628,639,639,,,,639,,639,639,639,639,639,639,639',
',,,,,639,639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639',
'639,639,639,,639,639,639,,639,639,,,639,,,,,,,,,,,,,,,,,,,,639,,,639',
',,639,639,,,639,,,,,,,,,,,,,,,,,,,639,639,639,639,,639,639,,,,639,639',
',666,666,666,,666,639,,639,666,666,,,,666,,666,666,666,666,666,666,666',
',,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666',
'666,666,666,,666,666,666,,666,666,666,666,666,,,,,,,,,,,,,,,,,,,,666',
',,666,,,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666,,666,666',
',,,666,666,,692,692,692,,692,666,,666,692,692,,,,692,,692,692,692,692',
'692,692,692,,,,,,692,692,692,692,692,692,692,,,692,,,,,,,692,,,692,692',
'692,692,692,692,692,692,,692,692,692,,692,692,692,692,692,,,,,,,,,,',
',,,,,,,,,692,,,692,,,692,692,,,692,,,,,,692,,,,,,,,692,,,,,692,692,692',
'692,,692,692,,,,692,692,,720,720,720,,720,692,,692,720,720,,,,720,,720',
'720,720,720,720,720,720,,,,,,720,720,720,720,720,720,720,,,720,,,,,',
',720,,,720,720,720,720,720,720,720,720,,720,720,720,,720,720,720,720',
'720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720,,,,,,720,,,,,,,,720',
',,,,720,720,720,720,,720,720,,,,720,720,,722,722,722,,722,720,,720,722',
'722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722,722,722,722,722',
'722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722,,722,722,722,',
'722,722,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722,,,722,,,',
',,722,,,,,,,,722,,,,,722,722,722,722,,722,722,,,,722,722,,733,733,733',
',733,722,,722,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733',
'733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733',
',733,733,733,,733,733,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733',
'733,,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733,,733,733,,,,733,733',
',734,734,734,,734,733,,733,734,734,,,,734,,734,734,734,734,734,734,734',
',,,,,734,734,734,734,734,734,734,,,734,,,,,,,734,,,734,734,734,734,734',
'734,734,734,,734,734,734,,734,734,734,734,734,,,,,,,,,,,,,,,,,,,,734',
',,734,,,734,734,,,734,,,,,,734,,,,,,,,734,,,,,734,734,734,734,,734,734',
',,,734,734,,735,735,735,,735,734,,734,735,735,,,,735,,735,735,735,735',
'735,735,735,,,,,,735,735,735,735,735,735,735,,,735,,,,,,,735,,,735,735',
'735,735,735,735,735,735,,735,735,735,,735,735,735,735,735,,,,,,,,,,',
',,,,,,,,,735,,,735,,,735,735,,,735,,,,,,735,,,,,,,,735,,,,,735,735,735',
'735,,735,735,,,,735,735,,737,737,737,,737,735,,735,737,737,,,,737,,737',
'737,737,737,737,737,737,,,,,,737,737,737,737,737,737,737,,,737,,,,,',
',737,,,737,737,737,737,737,737,737,737,,737,737,737,,737,737,737,737',
'737,,,,,,,,,,,,,,,,,,,,737,,,737,,,737,737,,,737,,,,,,737,,,,,,,,737',
',,,,737,737,737,737,,737,737,,,,737,737,,748,748,748,,748,737,,737,748',
'748,,,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748,748,748',
'748,,,748,,,,,,,748,,,748,748,748,748,748,748,748,748,748,748,748,748',
',748,748,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,,748',
',748,,748,,,,,,,,748,,,,,748,748,748,748,,748,748,,,,748,748,,751,751',
'751,,751,748,,748,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751',
'751,751,751,751,751,751,,,751,,,,,,,751,,,751,751,751,751,751,751,751',
'751,751,751,751,751,,751,751,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751',
',,751,751,,,751,,751,,751,,751,,,,,,,,751,,,,,751,751,751,751,,751,751',
',,,751,751,,766,766,766,,766,751,,751,766,766,,,,766,,766,766,766,766',
'766,766,766,,,,,,766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766',
'766,766,766,766,766,766,,766,766,766,,766,766,,,766,,,,,,,,,,,,,,,,',
',,,766,,,766,,,766,766,,,766,,,,,,,,,,,,,,,,,,,766,766,766,766,,766',
'766,,,,766,766,,793,793,793,,793,766,,766,793,793,,,,793,,793,793,793',
'793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793',
'793,793,793,793,793,793,793,,793,793,793,,793,793,793,793,793,,,,,,',
',,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,793,,,,,793,793',
'793,793,,793,793,,,,793,793,,798,798,798,,798,793,,793,798,798,,,,798',
',798,798,798,798,798,798,798,,,,,,798,798,798,798,798,798,798,,,798',
',,,,,,798,,,798,798,798,798,798,798,798,798,,798,798,798,,798,798,798',
'798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798,,798,,,,798,,,',
',,,,798,,,,,798,798,798,798,,798,798,,,,798,798,,815,815,815,,815,798',
',798,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815,815,815',
'815,815,815,,,815,,,,,,,815,,,815,815,815,815,815,815,815,815,,815,815',
'815,,815,815,815,815,815,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,815,,,815',
',,,,,815,,,,,,,,815,,,,,815,815,815,815,,815,815,,,,815,815,,825,825',
'825,,825,815,,815,825,825,,,,825,,825,825,825,825,825,825,825,,,,,,825',
'825,825,825,825,825,825,,,825,,,,,,,825,,,825,825,825,825,825,825,825',
'825,,825,825,825,,825,825,,,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825',
',,825,,,,,,,,,,,,,,,,,,,825,825,825,825,,825,825,,,,825,825,,884,884',
'884,,884,825,,825,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884',
'884,884,884,884,884,884,,,884,,,,,,,884,,,884,884,884,884,884,884,884',
'884,,884,884,884,,884,884,884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884,',
',884,884,,,884,,884,,884,,884,,,,,,,,884,,,,,884,884,884,884,,884,884',
',,,884,884,,887,887,887,,887,884,,884,887,887,,,,887,,887,887,887,887',
'887,887,887,,,,,,887,887,887,887,887,887,887,,,887,,,,,,,887,,,887,887',
'887,887,887,887,887,887,887,887,887,887,,887,887,887,887,887,,,,,,,',
',,,,,,,,,,,,887,,,887,,,887,887,,,887,,887,,887,,887,,,,,,,,887,,,,',
'887,887,887,887,,887,887,,,,887,887,,890,890,890,,890,887,,887,890,890',
',,,890,,890,890,890,890,890,890,890,,,,,,890,890,890,890,890,890,890',
',,890,,,,,,,890,,,890,890,890,890,890,890,890,890,890,890,890,890,,890',
'890,890,890,890,618,618,618,618,618,618,618,618,618,618,618,,618,618',
',,618,618,,890,,618,890,,,890,890,,,890,,890,618,890,618,890,618,618',
'618,618,618,618,618,890,618,,,,890,890,890,890,,890,890,,,,890,890,',
'618,,618,,,890,,890,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
',,,7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,7,7,,,7,,,,,,,,7,7,,7,7,7',
'7,7,7,7,,,7,7,,,,7,7,7,7,,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7',
'7,,,,,,,,,,,7,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,,,,371,371,371,371,371,371,371',
'371,371,371,,,,,,371,371,371,371,371,371,371,371,371,,,371,,,,,,,,371',
'371,,371,371,371,371,371,371,371,,,371,371,,,,371,371,371,371,,,,,,',
',,,,,,,371,371,,371,371,371,371,371,371,371,371,371,371,371,,,371,371',
',,,,,,,,,,371,575,575,575,575,575,575,575,575,575,575,575,575,575,575',
'575,575,575,575,575,575,575,575,575,575,,,,575,575,575,575,575,575,575',
'575,575,575,,,,,,575,575,575,575,575,575,575,575,575,,,575,,,,,,,,575',
'575,,575,575,575,575,575,575,575,,,575,575,,,,575,575,575,575,,,,,,',
',,,,,,,575,575,,575,575,575,575,575,575,575,575,575,575,575,,,575,575',
',,,,,,,,,,575,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,,,,6,6',
'6,6,6,6,6,6,6,6,,,,,,6,6,6,6,6,6,6,6,6,6,,6,,,,,,,,6,6,,6,6,6,6,6,6',
'6,,,6,6,,,,6,6,6,6,,,,,,,,,,,,,,6,6,,6,6,6,6,6,6,6,6,6,6,6,,,6,6,,,',
',,,,,,,6,705,705,705,705,705,705,705,705,705,705,705,705,705,705,705',
'705,705,705,705,705,705,705,705,705,,,,705,705,705,705,705,705,705,705',
'705,705,,,,,,705,705,705,705,705,705,705,705,705,,,705,,,,,,,,705,705',
',705,705,705,705,705,705,705,,,705,705,,,,705,705,705,705,,,,,,,,,,',
',,,705,705,,705,705,705,705,705,705,705,705,705,705,705,,,705,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,,',
',65,65,65,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,65,65,65,65',
'65,,65,,,,,,65,65,,65,65,65,65,65,65,65,,,65,65,,,,65,65,65,65,,,,,',
'65,,,,,,,,65,65,,65,65,65,65,65,65,65,65,65,65,65,199,199,65,,199,,',
',,,,,199,199,,199,199,199,199,199,199,199,,,199,199,,,,199,199,199,199',
',,,,,199,,,,,,,,199,199,,199,199,199,199,199,199,199,199,199,199,199',
'891,891,199,,891,,,,,,,,891,891,,891,891,891,891,891,891,891,,,891,891',
',,,891,891,891,891,,,,,,891,,,,,,,,891,891,,891,891,891,891,891,891',
'891,891,891,891,891,476,476,891,,476,,,,,,,,476,476,,476,476,476,476',
'476,476,476,,,476,476,,,,476,476,476,476,,,,,,476,,,,,,,,476,476,,476',
'476,476,476,476,476,476,476,476,476,476,477,477,476,,477,,,,,,,,477',
'477,,477,477,477,477,477,477,477,,,477,477,,,,477,477,477,477,,,,,,477',
',,,,,,,477,477,,477,477,477,477,477,477,477,477,477,477,477,892,892',
'477,,892,,,,,,,,892,892,,892,892,892,892,892,892,892,,,892,892,,,,892',
'892,892,892,,,,,,892,,,,,,,,892,892,,892,892,892,892,892,892,892,892',
'892,892,892,488,488,892,,488,,,,,,,,488,488,,488,488,488,488,488,488',
'488,,,488,488,,,,488,488,488,488,,,,,,488,,,,,,,,488,488,,488,488,488',
'488,488,488,488,488,488,488,488,489,489,488,,489,,,,,,,,489,489,,489',
'489,489,489,489,489,489,,,489,489,,,,489,489,489,489,,,,,,489,,,,,,',
',489,489,,489,489,489,489,489,489,489,489,489,489,489,412,412,489,,412',
',,,,,,,412,412,,412,412,412,412,412,412,412,,,412,412,,,,412,412,412',
'412,,,,,,412,,,,,,,,412,412,,412,412,412,412,412,412,412,412,412,412',
'412,413,413,412,,413,,,,,,,,413,413,,413,413,413,413,413,413,413,,,413',
'413,,,,413,413,413,413,,,,,,413,,,,,,,,413,413,,413,413,413,413,413',
'413,413,413,413,413,413,538,538,413,,538,,,,,,,,538,538,,538,538,538',
'538,538,538,538,,,538,538,,,,538,538,538,538,,,,,,538,,,,,,,,538,538',
',538,538,538,538,538,538,538,538,538,538,538,539,539,538,,539,,,,,,',
',539,539,,539,539,539,539,539,539,539,,,539,539,,,,539,539,539,539,',
',,,,539,,,,,,,,539,539,,539,539,539,539,539,539,539,539,539,539,539',
'545,545,539,,545,,,,,,,,545,545,,545,545,545,545,545,545,545,,,545,545',
',,,545,545,545,545,,,,,,545,,,,,,,,545,545,,545,545,545,545,545,545',
'545,545,545,545,545,546,546,545,,546,,,,,,,,546,546,,546,546,546,546',
'546,546,546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546',
'546,546,546,546,546,546,546,546,546,546,264,264,546,,264,,,,,,,,264',
'264,,264,264,264,264,264,264,264,,,264,264,,,,264,264,264,264,,,,,,',
',,,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264,265,265',
'264,,265,,,,,,,,265,265,,265,265,265,265,265,265,265,,,265,265,,,,265',
'265,265,265,,,,,,,,,,,,,,265,265,,265,265,265,265,265,265,265,265,265',
'265,265,200,200,265,,200,,,,,,,,200,200,,200,200,200,200,200,200,200',
',,200,200,,,,200,200,200,200,,,,,,200,,,,,,,,200,200,,200,200,200,200',
'200,200,200,200,200,200,200,922,922,200,,922,,,,,,,,922,922,,922,922',
'922,922,922,922,922,,,922,922,,,,922,922,922,922,,,,,,922,,,,,,,,922',
'922,,922,922,922,922,922,922,922,922,922,922,922,,,922,730,730,730,730',
'730,730,730,730,730,730,730,,730,730,,,730,730,,,,,,,,,,,,,,,730,,730',
',730,730,730,730,730,730,730,,730,,718,718,718,718,718,718,718,718,718',
'718,718,,718,718,,730,718,718,,,,,,,,,,,,,,,718,,718,,718,718,718,718',
'718,718,718,,718,,640,640,640,640,640,640,640,640,640,640,640,,640,640',
',718,640,640,,,,,,,,,,,,,,,640,,640,,640,640,640,640,640,640,640,,640',
',444,444,444,444,444,444,444,444,444,444,444,,444,444,,640,444,444,',
',,,,,,,,,,,,,444,,444,,444,444,444,444,444,444,444,,444,,727,727,727',
'727,727,727,727,727,727,727,727,,727,727,444,444,727,727,,,,,,,,,,,',
',,,727,,727,,727,727,727,727,727,727,727,,727,,814,814,814,814,814,814',
'814,814,814,814,814,,814,814,,727,814,814,,,,,,,,,,,,,,,814,,814,,814',
'814,814,814,814,814,814,,814,,725,725,725,725,725,725,725,725,725,725',
'725,,725,725,,814,725,725,,,,,,,,,,,,,,,725,,725,,725,725,725,725,725',
'725,725,,725,,490,490,490,490,490,490,490,490,490,490,490,,490,490,',
'725,490,490,,,,,,,,,,,,,,,490,,490,,490,490,490,490,490,490,490,,490',
',721,721,721,721,721,721,721,721,721,721,721,,721,721,,490,721,721,',
',,,,,,,,,,,,,721,,721,,721,721,721,721,721,721,721,,721,,405,405,405',
'405,405,405,405,405,405,405,405,,405,405,,721,405,405,,,,,,,,,,,,,,',
'405,,405,,405,405,405,405,405,405,405,,405,,732,732,732,732,732,732',
'732,732,732,732,732,,732,732,,405,732,732,,,,,,,,,,,,,,,732,,732,,732',
'732,732,732,732,732,732,,732,,816,816,816,816,816,816,816,816,816,816',
'816,,816,816,,732,816,816,,,,,,,,,,,,,,,816,,816,,816,816,816,816,816',
'816,816,,816,,249,249,249,249,249,249,249,249,249,249,249,,249,249,',
'816,249,249,,,,,,,,,,,,,,,249,,249,,249,249,249,249,249,249,249,,249',
',,,,,,,,,,,,,,,,249' ]
        racc_action_check = arr = ::Array.new(23312, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1666,   847,   nil,   537,   871,  5416, 21328, 20956,  1002,   988,
   961,   921,   969,   949,   484,   744,   nil,    29,  5541, 13690,
   922,   nil,  5666,  5791,  5916,   618,   354,  1531,   863,   nil,
  5041,  6041,  6166,   nil,   762,   555,   819,   703,  6299,  6424,
  6549,   699,   961,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   733,  3041,  6674,  6799,  6924,     0,   nil,  7049,  7174,   nil,
   nil,  7299,  7432,  7557,  7682, 21564,   nil,   nil,   nil,   nil,
   nil,   503,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130,   nil,   nil,     0,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   437,   nil,
  7807,   nil,   nil,   nil,  7940,  8065,  8190,  8315,  8440,  1183,
   nil,   444,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   238,   nil,  4791,  4916,  8565,  8690,  8815,  5291, 21624,
 22524,   nil,   nil,  8940,  9065,  9190,  9315,  9440,   nil,   nil,
   967,   242,  1063,   107,   984,  1035,   nil,  9565,  2416,  1041,
  9690,  9815,  9940, 10065, 10190, 10315, 10440, 10565, 10690, 10815,
 10940, 11065, 11190, 11315, 11440, 11565, 11690, 11815, 11940, 12065,
 12190, 12315, 12440, 12565, 12690, 12815,   nil,   nil,   nil, 23184,
   nil,  1052,  1053,   nil, 12940,  1096, 13065,   nil,   nil,   nil,
   nil, 13190,   nil,   nil, 22404, 22464,   -16, 13315, 13440,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 13565,  1059,  3541,  1071,
  1113,  1085, 13690,  1791,   644,   772,  1160,   774,  1127,  1101,
   346,   nil,  1148,   102,  1114, 13823,   nil,   402,  1191,  1206,
   900,   nil,  1211,   nil, 13948,  1273,  1272,   721,   nil,   254,
   596,  1190,  1175,   406,  1202,   nil,   nil,  7695,   558,   232,
   163, 14073, 14198,   617,  1277,  1170,    65,   963,  1130,   201,
   123,   nil,   nil,   871,   926,   137,   nil,   521,   nil,    55,
 14323,   nil,   nil,   582,   707,   643,   449,   709,   453,   488,
   581,   577,   nil,   679,   nil, 14448,   nil,   406,   384,   347,
   290,    39,   340,   nil,  1046,   nil,   nil,   nil,   nil,   nil,
   nil, 21080,   nil,   nil,   nil,   nil,    98,   139,   nil,   nil,
  6167,   nil, 14573,   155,   nil,   157,   nil,   nil,  7807,   176,
   nil,   300,   274,  1067,   nil,   nil,   nil,   348,   293,   239,
   nil,   nil,  1192,  1401,   nil, 23046,   nil,   nil,   nil,    85,
   nil,   349, 22044, 22104, 14698,   233, 14823, 14948, 15073,  2166,
  2666,   878,   752,   468,   470,   492,   496,  3791,  2041,  3916,
  2416,  1482,  3166,  3041,  3291,  2916,  3541,  3416,  2791,  2541,
   820,   685,  2291,  3666, 22770,   320,   nil, 15198,   nil, 15323,
   nil, 15448,   nil,   nil,  1322,   nil,   nil,   988,   nil,   nil,
   456,   nil,   nil, 15573,    75,    79,   512,   nil,   534,   533,
   nil,   nil,   535, 15698,   568, 15823, 21744, 21804,   966,   609,
   nil,   nil, 15948,   571,   nil, 16073, 16198, 16323, 21924, 21984,
 22954, 16448,   736, 16573,   nil,   628,   nil, 16698,   nil,   nil,
 16823,   nil,   nil,   nil,   154, 15711,   637,   653,   656,   668,
   nil,   nil,   nil,   nil,   nil,   nil,   417,   768,   nil,  1328,
   nil,   nil,   nil,   nil,   770,   nil,   nil,   771,  2916,   812,
   nil,  2791,   142,   119,   812,   821, 16948, 17073, 22164, 22224,
   191,   nil,   nil,   955,   nil, 22284, 22344, 17198,   nil,   nil,
 17323,   557,   316,  2166,  7445,   nil,   nil,   nil,   115,   nil,
   nil,   nil,  1058,   nil,   nil,   nil,   716,   nil,   nil,   271,
   nil,   nil,   716,   nil,   nil, 21204,   nil,   nil, 17448,   719,
 17573, 17698,   521,   758, 17823, 17948,   757,   nil,   nil, 18073,
   773,   nil, 18198,   nil,   nil,    55,   268,   603,   473,   761,
  7299,   760,   nil,   536,   nil,  2041,   764,   nil,   807, 18323,
   nil,   nil,   nil,   nil,   nil,   nil,   390,   nil, 20823,    -6,
   766,   nil,   771,   nil,  4666,  4541,   nil,   425, 18448,   769,
   nil,   782,   198,   496,   827,   382,   928,   828,   790, 18573,
 22724,   854,   855,   123,   920,   nil,  4041,   825,   871,   nil,
   nil,   nil,   270,   nil,   nil,   nil,   831,   598,   nil,  1463,
   nil,  1594,   nil,   nil,  1842,   921, 18698,   nil,   nil,  1133,
   nil,   845,   439,   891,   853,   nil,   nil,   634,   nil,   969,
   nil,   nil,   nil,   nil,   976,   nil,   172,   860,   141,    89,
   247,   171, 18823,   356,   678,   nil,   861,  3916,   592,   nil,
   nil,   982,  3666, 13836,   495, 21452,   nil,   nil,   nil,   nil,
   nil,   nil,  1916,   nil,   nil,   nil,   nil,   nil, 22678,   870,
 18948, 23000, 19073,   nil,   nil, 22908,   nil, 22816,   nil,   nil,
 22632,   nil, 23092, 19198, 19323, 19448,    54, 19573,   884,   887,
   889,   nil,   912,   891,   190,   nil,  1014,   nil, 19698,   nil,
  3416, 19823,   nil,   nil,   915,   934,  1040,   923,   269,   nil,
   nil,   nil,  3291,   nil,   nil,   166, 19948,   nil,   nil,  3166,
  2666,   932,   933,   nil,   nil,   nil,   935,   937,   nil,   nil,
   939,   940,   nil,   941,   nil,   nil,   945,  1071,   944,  1681,
   nil,  1073,   nil, 20073,  1086,  2541,  2291,   nil, 20198,     0,
   156,   246,   nil,  1120,   nil,  5166,   nil,  1122,  1006,   nil,
   nil,  1035,  1019,   nil, 22862, 20323, 23138,  1254,   nil,  1290,
   nil,   nil,  1319,   nil,  1044, 20448,   nil,  1026,  1046,  1033,
   nil,  1035,   nil,   nil,   nil,   nil,  4416,    48,   642,  1111,
   136,   nil,  1064,  1171,   nil,   741,  6054,   nil,   nil,  1688,
   nil,  1717,   nil,  1813,   nil,   nil,   nil,   468,  1195,  1062,
   nil,   207,   nil,  1238,  1269,   nil,   215,   nil,   nil,  1282,
   nil,   nil,  1156,   nil,    60,   145,   347,   349,   nil,   388,
   nil,   808,   509,   nil, 20573,   nil,   nil, 20698,   nil,   589,
 20823, 21684, 21864,   173,   nil,   nil,   nil,   575,   595,   615,
   623,   637,  1185,   703,  1652,  4166,   nil,   nil,   nil,   nil,
   nil,  3791,   nil,  4291,  7570,   nil,   nil,  1967,   nil,  2063,
   nil,   nil, 22584,   nil,   728,   nil,   747,   271,   209,   165,
   138,   nil,   827,   nil,   nil,   nil,  1405,   878,   395,   999,
  1000,   882,   905,   907,   924,  1002,  1016,   nil,   164,  1024,
   445,   nil,   nil,   nil,   nil,  1938,   nil,   nil,   nil,   nil,
   563,   nil ]

racc_action_default = [
    -4,  -549,    -1,  -535,    -5,  -549,  -549,  -549,  -549,  -549,
  -549,  -549,  -549,  -549,  -273,   -32,   -33,  -537,  -549,   -38,
   -40,   -41,  -283,  -318,  -319,   -45,  -248,  -248,  -248,   -58,
    -4,   -62,   -70,   -72,  -549,  -462,  -549,  -549,  -549,  -549,
  -549,  -537,  -225,  -266,  -267,  -268,  -269,  -270,  -271,  -272,
  -523,    -4,  -549,  -548,  -515,  -291,  -373,  -549,  -549,  -296,
  -299,  -535,  -549,  -549,  -549,  -549,  -320,  -321,  -411,  -412,
  -413,  -414,  -415,  -430,  -418,  -419,  -432,  -434,  -423,  -428,
  -444,  -432,  -446,  -447,  -521,  -451,  -452,  -522,  -454,  -455,
  -456,  -457,  -458,  -459,  -460,  -461,  -464,  -465,  -549,    -3,
  -536,  -544,  -545,  -546,  -549,  -549,  -549,  -549,  -549,    -7,
    -8,  -549,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,   -13,  -108,    -4,    -4,  -549,  -549,  -549,  -234,  -549,
  -549,  -533,  -534,  -549,  -549,  -549,  -549,  -537,  -538,   -37,
  -549,  -462,  -549,  -273,  -549,  -549,  -217,  -549,    -4,  -549,
  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
  -549,  -549,  -549,  -549,  -549,  -549,  -381,  -383,   -42,  -226,
  -236,  -258,  -258,  -241,  -549,  -259,  -549,  -283,  -318,  -319,
  -517,  -549,   -43,   -44,  -549,  -549,   -50,  -234,  -549,  -290,
  -386,  -395,  -397,   -56,  -392,   -57,  -537,   -60,    -4,  -537,
  -549,   -63,   -66,    -4,   -78,  -549,  -549,   -85,  -286,  -537,
  -549,  -322,  -393,  -549,   -68,  -549,   -74,  -280,  -448,  -449,
  -549,  -202,  -203,  -218,  -549,  -403,  -549,  -276,  -227,  -541,
  -541,  -549,  -549,  -541,  -549,  -292,  -293,  -485,   -39,  -549,
  -549,  -549,  -549,  -535,  -549,  -536,  -462,  -549,  -549,  -273,
  -549,  -332,  -333,   -94,   -95,  -549,   -97,  -549,  -273,  -549,
  -549,  -462,  -311,   -99,  -100,  -140,  -141,  -142,  -158,  -163,
  -170,  -173,  -313,  -549,  -513,  -549,  -416,  -549,  -549,  -549,
  -549,  -549,  -549,   962,    -6,  -547,   -14,   -15,   -16,   -17,
   -18,  -549,   -10,   -11,   -12,  -109,  -549,  -549,   -21,   -29,
  -181,  -259,  -549,  -549,   -22,   -30,   -31,   -23,  -183,  -537,
  -235,  -524,  -525,  -248,  -390,  -526,  -527,  -524,  -248,  -525,
  -389,  -391,  -526,  -527,   -28,  -191,   -34,   -35,   -36,  -537,
  -289,  -549,  -549,  -549,  -234,  -280,  -549,  -549,  -549,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -204,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,
  -219,  -220,  -221,  -222,  -537,  -362,  -237,  -257,  -238,  -257,
  -255,  -549,  -260,  -520,  -248,  -524,  -525,  -248,   -48,   -51,
  -537,  -249,  -250,  -251,  -362,  -362,  -537,  -285,  -537,   -59,
  -278,   -75,   -64,  -549,  -537,  -234,  -549,  -549,   -84,  -549,
  -448,  -449,  -549,   -71,   -76,  -549,  -549,  -549,  -549,  -549,
  -223,  -549,  -548,  -548,  -275,  -537,  -228,  -543,  -542,  -230,
  -543,  -281,  -282,  -516,  -549,  -485,  -367,  -512,  -512,  -512,
  -484,  -486,  -487,  -488,  -489,  -490,  -491,  -549,  -494,  -549,
  -496,  -502,  -504,  -505,  -507,  -508,  -509,  -549,    -4,  -323,
  -324,    -4,  -549,  -549,  -549,  -549,  -549,  -234,  -549,  -549,
  -280,  -304,   -94,   -95,   -96,  -549,  -549,  -234,  -307,  -466,
  -549,  -549,  -549,    -4,  -485,  -315,  -531,  -532,  -537,  -417,
  -431,  -436,  -549,  -438,  -420,  -433,  -549,  -435,  -422,  -549,
  -425,  -427,  -549,  -445,    -9,  -549,   -19,   -20,  -549,  -265,
  -549,  -549,  -394,  -549,  -549,  -549,   -52,  -233,  -387,  -549,
   -54,  -388,  -549,  -288,  -539,  -524,  -525,  -524,  -525,  -537,
  -181,  -549,  -363,  -367,  -365,    -4,  -258,  -256,  -261,  -549,
  -518,  -519,   -46,  -384,   -47,  -385,  -362,  -231,   -38,  -549,
  -258,  -247,  -537,  -253,    -4,    -4,  -284,   -61,  -549,   -67,
   -73,  -537,  -524,  -525,  -232,  -528,   -83,  -549,   -69,  -549,
  -190,  -200,  -201,  -537,  -548,  -330,    -4,  -404,  -548,  -405,
  -406,  -277,  -541,  -374,  -377,  -379,  -367,  -549,  -376,  -549,
  -477,  -549,  -480,  -482,  -549,  -549,  -549,  -493,  -334,  -549,
  -336,  -338,  -345,  -491,  -537,  -506,  -510,  -548,  -325,  -548,
  -297,  -326,  -327,  -300,  -549,  -303,  -549,  -537,  -524,  -525,
  -528,  -279,  -549,   -94,   -95,   -98,  -537,    -4,  -549,  -468,
  -309,  -549,    -4,  -485,  -549,  -549,  -514,  -437,  -440,  -441,
  -442,  -443,    -4,  -421,  -424,  -426,  -429,  -110,  -182,  -263,
  -549,  -184,  -549,  -540,   -25,  -186,   -26,  -187,   -53,   -27,
  -188,   -55,  -189,  -549,  -549,  -549,  -394,  -549,  -512,  -512,
  -512,  -361,  -549,  -367,  -491,  -500,  -549,  -239,  -257,  -262,
    -4,  -549,  -244,  -252,  -537,  -549,  -549,   -65,  -394,   -77,
  -287,    -2,    -4,  -410,  -331,  -549,  -549,  -408,  -229,    -4,
    -4,  -537,  -368,  -369,  -371,  -372,  -512,  -512,  -497,  -511,
  -512,  -512,  -503,  -512,  -492,  -498,  -537,  -549,  -343,  -549,
  -495,  -549,  -328,  -549,  -549,    -4,    -4,  -302,  -549,    -4,
  -394,  -549,  -394,  -549,  -467,    -4,  -312,  -549,  -537,  -470,
  -316,  -549,  -264,   -24,  -185,  -549,  -224,  -352,  -354,  -549,
  -357,  -359,  -549,  -364,  -549,  -549,  -382,  -258,  -549,  -258,
  -243,  -258,  -254,  -396,  -398,  -409,    -4,  -462,  -549,  -549,
  -273,  -407,  -549,  -549,  -375,  -549,  -549,  -473,  -475,  -549,
  -478,  -549,  -481,  -549,  -483,  -335,  -337,  -341,  -549,  -346,
  -294,  -549,  -295,  -549,  -549,  -261,  -548,  -305,  -308,  -549,
  -314,  -469,  -485,  -439,  -512,  -512,  -512,  -512,  -501,  -512,
  -366,  -499,  -549,  -240,  -257,   -49,  -242,  -257,  -245,  -403,
  -234,  -549,  -549,  -280,  -378,  -380,  -370,  -512,  -512,  -512,
  -512,  -339,  -549,  -344,  -549,    -4,  -298,  -301,  -399,  -400,
  -401,    -4,  -310,    -4,  -549,  -349,  -351,  -549,  -355,  -549,
  -358,  -360,  -549,  -280,  -258,  -402,  -537,  -524,  -525,  -528,
  -279,  -471,  -549,  -474,  -476,  -479,  -549,  -342,  -548,  -549,
  -549,  -512,  -512,  -512,  -512,  -279,  -528,  -246,  -394,  -512,
  -340,  -329,  -306,  -317,  -347,  -549,  -350,  -353,  -356,  -472,
  -512,  -348 ]

clist = [
'115,115,309,306,14,352,281,310,313,14,308,199,103,319,320,492,206,323',
'389,250,250,250,535,264,510,291,291,277,270,274,582,610,702,739,14,287',
'287,118,118,506,304,209,99,294,110,192,644,791,120,120,544,528,531,680',
'683,14,291,291,291,115,366,367,368,369,878,782,329,338,338,459,103,674',
'778,279,607,483,607,393,398,773,496,499,610,307,503,446,448,460,318',
'318,621,775,318,266,273,275,379,386,605,353,324,248,262,263,14,560,555',
'567,570,13,859,856,14,613,13,358,615,624,625,495,362,339,342,321,795',
'322,796,210,692,911,697,210,210,210,805,318,318,318,318,13,285,285,454',
'457,383,383,658,740,553,554,705,12,872,109,461,743,12,623,311,878,13',
'210,575,616,772,1,210,210,371,504,210,327,337,337,653,317,332,247,769',
'903,410,12,770,445,464,465,908,648,765,356,357,359,360,569,403,250,191',
'14,14,361,707,394,12,777,712,780,776,100,412,13,316,761,510,210,210',
'210,210,13,378,384,387,786,14,937,315,312,404,656,856,354,778,330,684',
'794,599,406,407,408,409,548,736,754,622,742,,,,874,364,467,782,12,469',
'629,,,370,950,,12,695,510,638,,250,250,778,896,,750,484,,758,250,,277',
'291,532,533,775,277,,14,476,,668,287,14,479,291,393,398,270,472,274',
'631,771,,488,287,,,13,13,210,210,210,210,951,,741,,210,210,210,210,210',
'715,,10,,468,867,,10,538,474,13,800,,610,,103,,,,,802,,,,,,,12,12,,462',
'549,10,913,556,318,318,634,466,,687,,,,875,534,876,,115,634,696,,12',
'10,552,,,,607,210,210,830,,,331,593,824,,210,558,13,583,728,897,285',
'13,731,649,587,,,,,591,606,118,,285,,,403,757,574,510,250,,120,394,',
'634,620,799,10,909,,,768,634,808,,10,,12,210,210,,617,12,668,,,788,626',
'747,627,383,601,,,,630,484,210,650,652,,,752,,587,484,941,587,586,,',
',210,590,,291,651,,,403,250,,,,291,287,394,,,,,403,,686,287,,,,394,',
',,307,,,836,,,,,,,,701,698,,,,,607,10,10,607,,,,,,,612,643,210,614,',
',,,,,706,14,403,250,14,,10,,403,394,681,681,,250,,,,394,,,,,668,,668',
',14,,,699,700,,,910,,711,948,,115,,,210,,2,,,,,510,,318,285,,210,,,',
',,,285,,905,,753,,10,583,925,210,763,10,484,280,767,118,724,726,14,',
',729,717,759,,760,120,,,,,291,901,668,,,,14,14,583,,287,291,,,587,13',
',591,13,,,287,,810,210,790,801,803,14,,,,807,,210,,,210,,883,13,886',
',888,,,668,,668,,,,,,,,,12,,,12,,,,583,,,,,,,210,210,583,,827,210,115',
'829,14,668,,12,831,14,804,,,926,,,809,13,,14,,,,,,,318,,,,832,,,,,738',
'13,13,,,285,,,,,,,844,813,,,285,861,,,,,14,13,12,869,947,855,291,,,',
',,14,376,377,634,840,,,14,14,12,12,,,,,871,,,,,,,,,781,,280,783,,,,12',
',14,14,210,,14,,,13,,,14,681,13,,,,,,,,291,,13,,,318,,314,,,338,,210',
',,,,891,,,,14,924,,,,,,10,12,,10,,280,12,,,,280,,13,,,,12,,940,,,,,',
'13,10,,,838,,,13,13,,,,,,,403,250,,,,,,394,,,,,,,,12,210,,13,13,,,13',
'14,,,,12,13,14,403,14,,,12,12,,,10,583,,,,,,,,,881,,,,,,,,,10,10,13',
'12,12,877,,12,879,,,,,12,,,,,,,,,10,26,381,385,,,26,,,,898,,,899,,900',
',,,26,,,12,26,26,26,,,,,,26,,,210,,,,,,,,,,,,,,,13,,10,26,26,,13,10',
'13,26,26,,450,26,452,,,10,,453,,,,,,,,,,942,,35,943,,944,,35,,,,,,12',
',,,,949,12,,12,,26,,,10,26,26,26,26,26,35,284,284,,,,10,,,960,841,,',
'10,10,,,,,,,35,,,,,,677,,,679,,326,341,341,341,,,,10,10,,,10,,,,,,10',
',,,,,,,660,662,663,,,,,,,,,,,35,,,,,,,,35,579,10,,,,26,26,26,26,26,26',
',,,,26,26,26,26,26,,,,,,746,,,,,26,,,,,,,,,,,,,,755,756,,,,,,,,,,,,',
',,,,,,,608,764,314,,611,10,,,,,,10,,10,26,26,619,,,35,35,,,26,,26,,',
',,26,,,,,,,,,,,,,,35,,647,,,,608,,,314,,,,,,,,,,,,,,811,26,26,,,,,,',
',,,,,,,,,,,26,,381,,,,,,,,,,,,,26,,35,828,,,284,35,,,,,,,,835,,,,284',
',,842,843,,,,,,,,719,,,,,,,,,,,818,820,821,,,,863,864,,,866,,,,,,,26',
'749,,,,,,,,,,,,,,,,,,,,847,848,,,850,852,,854,,889,,,,,,,,,,,,,,,,,',
',26,,,,,,,,,785,,,26,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,938,,,,',
',939,,,,,,,812,,26,,,26,,915,916,918,920,26,921,,,,,,,,,26,,,26,,284',
'26,,,931,933,934,935,,284,,,,,,,,,,,,,,,,,,,,,,,26,26,,,,26,,,,,,,,',
',,954,956,957,958,865,26,,35,959,,35,,,,,,,,,961,,,,,26,26,,,,,,,35',
',,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,865,,26',
'608,,,,26,,,,,26,35,35,,,284,,,,,26,,,,,,284,,,,26,216,,35,,249,249',
'249,,,,,,,,,,,,,,301,302,303,,,,,26,,,,,,,,249,249,,,26,,,,,,,26,26',
',,,,,35,,,,,35,,,,,,,,,,35,,26,,26,26,,,26,,,,,,26,,,,,,,,,,,,,,,,,',
',,,,,,35,,,,,,,26,,,,,35,,,,837,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
',,35,,,,,,35,,,,,,26,,,,,,,,,,380,249,388,249,341,26,,,405,,,26,,26',
',35,,,,,,,216,,,419,420,421,422,423,424,425,426,427,428,429,430,431',
'432,433,434,435,436,437,438,439,440,441,442,443,444,,,,,,,,,249,,249',
',,,,249,,,,,,249,249,,,,,,,,249,,,35,,,,,,35,,35,,,,,,,,,,,,,,,,,490',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,405,600,388,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,249,,249,,249,,,,,,,,,,,,618,,,,,,,,,,,,249,,,',
',,,,,,640,641,642,,,,,,249,,,,249,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,249,249,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,718,,249,721',
',,725,727,,,,730,,,732,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,249,,814,,,,,,,,,,,725,727,730,,816,,,,,,,,,,,249',
',,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,',
',,,,814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,249,,,249,,,249' ]
        racc_goto_table = arr = ::Array.new(2562, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'50,50,59,3,22,49,43,61,61,22,58,21,88,13,13,4,27,13,19,29,29,29,85,21',
'114,56,56,39,62,62,20,152,89,111,22,22,22,53,53,123,27,15,8,44,11,11',
'5,83,54,54,47,82,82,84,84,22,56,56,56,50,13,13,13,13,149,148,22,22,22',
'35,88,107,147,40,65,45,65,33,33,118,60,60,152,25,60,64,64,19,25,25,65',
'119,25,34,34,34,23,23,36,90,8,31,31,31,22,142,91,142,142,18,108,105',
'22,63,18,138,63,36,36,92,138,48,48,93,94,95,96,18,97,98,99,18,18,18',
'100,25,25,25,25,18,18,18,33,33,59,59,116,112,101,102,103,17,104,9,67',
'109,17,66,57,149,18,18,55,37,117,1,18,18,26,120,18,18,18,18,121,122',
'16,124,125,108,41,17,126,127,129,130,131,132,133,136,137,139,140,141',
'50,29,12,22,22,143,144,62,17,112,145,112,146,10,21,18,81,6,114,18,18',
'18,18,18,15,15,15,107,22,108,79,78,15,123,105,77,147,86,85,5,19,25,25',
'25,25,87,20,70,69,116,,,,111,9,41,148,17,41,45,,,9,108,,17,47,114,45',
',29,29,147,118,,36,43,,20,29,,39,56,13,13,119,39,,22,21,,106,22,22,27',
'56,33,33,62,44,62,19,116,,21,22,,,18,18,18,18,18,18,83,,114,,18,18,18',
'18,18,142,,14,,40,84,,14,21,40,18,20,,152,,88,,,,,20,,,,,,,17,17,,31',
'88,14,89,21,25,25,33,31,,19,,,,112,8,112,,50,33,19,,17,14,25,,,,65,18',
'18,65,,,14,41,116,,18,25,18,27,35,112,18,18,35,23,62,,,,,62,61,53,,18',
',,50,45,11,114,29,,54,62,,33,61,82,14,5,,,60,33,123,,14,,17,18,18,,41',
'17,106,,,106,41,64,41,59,27,,,,41,43,18,58,61,,,64,,62,43,112,62,34',
',,,18,34,,56,41,,,50,29,,,,56,22,62,,,,,50,,59,22,,,,62,,,,25,,,82,',
',,,,,,3,13,,,,,65,14,14,65,,,,,,,34,25,18,34,,,,,,,41,22,50,29,22,,14',
',50,62,88,88,,29,,,,62,,,,,106,,106,,22,,,88,88,,,85,,22,20,,50,,,18',
',2,,,,,114,,25,18,,18,,,,,,,18,,82,,41,,14,27,4,18,58,14,43,2,58,53',
'15,15,22,,,15,11,43,,41,54,,,,,56,106,106,,,,22,22,27,,22,56,,,62,18',
',62,18,,,22,,49,18,41,13,3,22,,,,3,,18,,,18,,64,18,64,,64,,,106,,106',
',,,,,,,,17,,,17,,,,27,,,,,,,18,18,27,,59,18,50,59,22,106,,17,61,22,88',
',,19,,,88,18,,22,,,,,,,25,,,,41,,,,,110,18,18,,,18,,,,,,,41,15,,,18',
'13,,,,,22,18,17,3,64,41,56,,,,,,22,2,2,33,22,,,22,22,17,17,,,,,41,,',
',,,,,,110,,2,110,,,,17,,22,22,18,,22,,,18,,,22,88,18,,,,,,,,56,,18,',
',25,,24,,,22,,18,,,,,21,,,,22,61,,,,,,14,17,,14,,2,17,,,,2,,18,,,,17',
',3,,,,,,18,14,,,18,,,18,18,,,,,,,50,29,,,,,,62,,,,,,,,17,18,,18,18,',
',18,22,,,,17,18,22,50,22,,,17,17,,,14,27,,,,,,,,,18,,,,,,,,,14,14,18',
'17,17,110,,17,110,,,,,17,,,,,,,,,14,38,24,24,,,38,,,,110,,,110,,110',
',,,38,,,17,38,38,38,,,,,,38,,,18,,,,,,,,,,,,,,,18,,14,38,38,,18,14,18',
'38,38,,24,38,24,,,14,,24,,,,,,,,,,110,,46,110,,110,,46,,,,,,17,,,,,110',
'17,,17,,38,,,14,38,38,38,38,38,46,46,46,,,,14,,,110,14,,,14,14,,,,,',
',46,,,,,,2,,,2,,46,46,46,46,,,,14,14,,,14,,,,,,14,,,,,,,,113,113,113',
',,,,,,,,,,46,,,,,,,,46,24,14,,,,38,38,38,38,38,38,,,,,38,38,38,38,38',
',,,,,2,,,,,38,,,,,,,,,,,,,,2,2,,,,,,,,,,,,,,,,,,,,24,2,24,,24,14,,,',
',,14,,14,38,38,24,,,46,46,,,38,,38,,,,,38,,,,,,,,,,,,,,46,,24,,,,24',
',,24,,,,,,,,,,,,,,2,38,38,,,,,,,,,,,,,,,,,,38,,24,,,,,,,,,,,,,38,,46',
'2,,,46,46,,,,,,,,2,,,,46,,,2,2,,,,,,,,24,,,,,,,,,,,113,113,113,,,,2',
'2,,,2,,,,,,,38,24,,,,,,,,,,,,,,,,,,,,113,113,,,113,113,,113,,2,,,,,',
',,,,,,,,,,,,,38,,,,,,,,,24,,,38,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,',
',,,2,,,,,,2,,,,,,,24,,38,,,38,,113,113,113,113,38,113,,,,,,,,,38,,,38',
',46,38,,,113,113,113,113,,46,,,,,,,,,,,,,,,,,,,,,,,38,38,,,,38,,,,,',
',,,,,113,113,113,113,24,38,,46,113,,46,,,,,,,,,113,,,,,38,38,,,,,,,46',
',,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,46,,,,,,24,,38',
'24,,,,38,,,,,38,46,46,,,46,,,,,38,,,,,,46,,,,38,28,,46,,28,28,28,,,',
',,,,,,,,,,28,28,28,,,,,38,,,,,,,,28,28,,,38,,,,,,,38,38,,,,,,46,,,,',
'46,,,,,,,,,,46,,38,,38,38,,,38,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,46,,,',
',,,38,,,,,46,,,,46,,,46,46,,,,,,,,,,,,,,,,,,,,,,,,,46,46,,,46,,,,,,46',
',,,,,38,,,,,,,,,,28,28,28,28,46,38,,,28,,,38,,38,,46,,,,,,,28,,,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,,,,,,,,,28,,28,,,,,28,,,,,,28,28,,,,,,,,28,,,46,,,,,,46,,46,,,,,',
',,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,28,28',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,,28,,,,,,,,,,,,28,,,,,,,,,,,,28,',
',,,,,,,,28,28,28,,,,,,28,,,,28,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,28,28,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,28,,,28,28',
',,,28,,,28,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,28,,28,,,,,,,,,,,28,28,28,,28,,,,,,,,,,,28,,,28,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,28,,,28' ]
        racc_goto_check = arr = ::Array.new(2562, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   165,   574,   -48,  -290,  -446,  -433,   nil,    39,   148,
   204,    38,   189,   -44,   319,    23,   114,   151,   109,  -180,
  -359,    -2,     4,   -99,   772,    31,    58,    -1,  1671,    -3,
   nil,    79,   nil,  -122,    67,  -197,  -347,  -295,   966,    -3,
    43,   -27,   nil,   -25,    11,  -220,  1045,  -285,    58,   -60,
    -6,   nil,   nil,    31,    42,  -213,    -6,   105,   -43,   -51,
  -229,   -46,     2,  -341,  -166,  -373,  -306,  -114,   nil,  -221,
  -382,   nil,   nil,   nil,   nil,   nil,   nil,   164,   171,   169,
   nil,   154,  -268,  -630,  -479,  -302,   169,  -100,     9,  -522,
    34,  -247,  -188,    64,  -556,    65,  -557,  -413,  -738,  -418,
  -566,  -194,  -203,  -405,  -658,  -676,  -234,  -448,  -679,  -448,
   129,  -570,  -456,   625,  -293,   nil,  -360,  -493,  -578,  -566,
  -148,  -330,   119,  -278,   157,  -476,  -473,   -63,   nil,   -87,
   -87,  -680,  -306,  -460,   nil,   nil,   118,   117,    39,   114,
   114,  -167,  -252,   120,  -362,  -359,  -453,  -587,  -596,  -755,
   nil,   nil,  -418 ]

racc_goto_default = [
   nil,   nil,   305,   nil,   nil,   792,   nil,     3,   nil,     4,
   325,   nil,   nil,   nil,   214,    16,    11,   215,   300,   nil,
   nil,   546,   213,   nil,   255,    15,   nil,   411,    19,    20,
    21,   390,    25,   637,   nil,   nil,   nil,   nil,   290,    29,
   nil,   nil,    31,    34,    33,   nil,   211,   336,   nil,   117,
   396,   116,   119,    69,    70,   nil,    42,   nil,   645,   251,
   nil,   252,   401,   588,   nil,   253,   nil,   nil,   268,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,   nil,   269,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   529,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   670,   518,   nil,   671,   nil,
   507,   nil,   509,   nil,   779,   602,   nil,   nil,   nil,   515,
   nil,   nil,   nil,   704,   nil,   nil,   nil,   nil,   400,   nil,
   nil,   nil,   nil,   nil,    68,    71,    72,   nil,   nil,   nil,
   nil,   nil,   565,   nil,   nil,   nil,   508,   520,   521,   745,
   524,   527,   260 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 139, :_reduce_none,
  4, 141, :_reduce_2,
  2, 140, :_reduce_3,
  0, 145, :_reduce_4,
  1, 145, :_reduce_5,
  3, 145, :_reduce_6,
  2, 145, :_reduce_7,
  0, 164, :_reduce_8,
  4, 147, :_reduce_9,
  3, 147, :_reduce_10,
  3, 147, :_reduce_11,
  3, 147, :_reduce_12,
  2, 147, :_reduce_13,
  3, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  3, 147, :_reduce_18,
  4, 147, :_reduce_19,
  4, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  6, 147, :_reduce_24,
  5, 147, :_reduce_25,
  5, 147, :_reduce_26,
  5, 147, :_reduce_27,
  3, 147, :_reduce_28,
  3, 147, :_reduce_29,
  3, 147, :_reduce_30,
  3, 147, :_reduce_31,
  1, 147, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  3, 163, :_reduce_36,
  2, 163, :_reduce_37,
  1, 163, :_reduce_none,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_42,
  2, 153, :_reduce_43,
  2, 153, :_reduce_44,
  1, 168, :_reduce_none,
  4, 168, :_reduce_46,
  4, 168, :_reduce_47,
  0, 175, :_reduce_48,
  5, 173, :_reduce_49,
  2, 167, :_reduce_50,
  3, 167, :_reduce_51,
  4, 167, :_reduce_52,
  5, 167, :_reduce_53,
  4, 167, :_reduce_54,
  5, 167, :_reduce_55,
  2, 167, :_reduce_56,
  2, 167, :_reduce_57,
  1, 154, :_reduce_58,
  3, 154, :_reduce_59,
  1, 178, :_reduce_60,
  3, 178, :_reduce_61,
  1, 177, :_reduce_none,
  2, 177, :_reduce_63,
  3, 177, :_reduce_64,
  5, 177, :_reduce_65,
  2, 177, :_reduce_66,
  4, 177, :_reduce_67,
  2, 177, :_reduce_68,
  4, 177, :_reduce_69,
  1, 177, :_reduce_70,
  3, 177, :_reduce_71,
  1, 181, :_reduce_none,
  3, 181, :_reduce_73,
  2, 180, :_reduce_74,
  3, 180, :_reduce_75,
  1, 183, :_reduce_76,
  3, 183, :_reduce_77,
  1, 182, :_reduce_78,
  4, 182, :_reduce_79,
  3, 182, :_reduce_80,
  3, 182, :_reduce_81,
  3, 182, :_reduce_82,
  3, 182, :_reduce_83,
  2, 182, :_reduce_84,
  1, 182, :_reduce_85,
  1, 152, :_reduce_86,
  4, 152, :_reduce_87,
  3, 152, :_reduce_88,
  3, 152, :_reduce_89,
  3, 152, :_reduce_90,
  3, 152, :_reduce_91,
  2, 152, :_reduce_92,
  1, 152, :_reduce_93,
  1, 185, :_reduce_94,
  1, 185, :_reduce_none,
  2, 186, :_reduce_96,
  1, 186, :_reduce_97,
  3, 186, :_reduce_98,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 190, :_reduce_104,
  1, 190, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 150, :_reduce_108,
  0, 193, :_reduce_109,
  4, 150, :_reduce_110,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  3, 166, :_reduce_181,
  5, 166, :_reduce_182,
  3, 166, :_reduce_183,
  5, 166, :_reduce_184,
  6, 166, :_reduce_185,
  5, 166, :_reduce_186,
  5, 166, :_reduce_187,
  5, 166, :_reduce_188,
  5, 166, :_reduce_189,
  4, 166, :_reduce_190,
  3, 166, :_reduce_191,
  3, 166, :_reduce_192,
  3, 166, :_reduce_193,
  3, 166, :_reduce_194,
  3, 166, :_reduce_195,
  3, 166, :_reduce_196,
  3, 166, :_reduce_197,
  3, 166, :_reduce_198,
  3, 166, :_reduce_199,
  4, 166, :_reduce_200,
  4, 166, :_reduce_201,
  2, 166, :_reduce_202,
  2, 166, :_reduce_203,
  3, 166, :_reduce_204,
  3, 166, :_reduce_205,
  3, 166, :_reduce_206,
  3, 166, :_reduce_207,
  3, 166, :_reduce_208,
  3, 166, :_reduce_209,
  3, 166, :_reduce_210,
  3, 166, :_reduce_211,
  3, 166, :_reduce_212,
  3, 166, :_reduce_213,
  3, 166, :_reduce_214,
  3, 166, :_reduce_215,
  3, 166, :_reduce_216,
  2, 166, :_reduce_217,
  2, 166, :_reduce_218,
  3, 166, :_reduce_219,
  3, 166, :_reduce_220,
  3, 166, :_reduce_221,
  3, 166, :_reduce_222,
  3, 166, :_reduce_223,
  6, 166, :_reduce_224,
  1, 166, :_reduce_none,
  1, 162, :_reduce_none,
  1, 195, :_reduce_none,
  2, 195, :_reduce_none,
  4, 195, :_reduce_229,
  2, 195, :_reduce_230,
  3, 200, :_reduce_231,
  0, 201, :_reduce_232,
  1, 201, :_reduce_none,
  0, 157, :_reduce_234,
  1, 157, :_reduce_none,
  1, 169, :_reduce_236,
  2, 169, :_reduce_237,
  2, 169, :_reduce_238,
  4, 169, :_reduce_239,
  6, 169, :_reduce_240,
  1, 169, :_reduce_241,
  4, 204, :_reduce_242,
  3, 204, :_reduce_243,
  2, 204, :_reduce_244,
  4, 204, :_reduce_245,
  6, 204, :_reduce_246,
  1, 204, :_reduce_247,
  0, 206, :_reduce_248,
  2, 172, :_reduce_249,
  1, 205, :_reduce_250,
  0, 207, :_reduce_251,
  3, 205, :_reduce_252,
  0, 208, :_reduce_253,
  4, 205, :_reduce_254,
  2, 203, :_reduce_255,
  2, 202, :_reduce_256,
  1, 202, :_reduce_257,
  0, 202, :_reduce_258,
  1, 197, :_reduce_259,
  2, 197, :_reduce_260,
  3, 197, :_reduce_261,
  4, 197, :_reduce_262,
  3, 161, :_reduce_263,
  4, 161, :_reduce_264,
  2, 161, :_reduce_265,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_274,
  3, 194, :_reduce_275,
  0, 230, :_reduce_276,
  4, 194, :_reduce_277,
  3, 194, :_reduce_278,
  3, 194, :_reduce_279,
  2, 194, :_reduce_280,
  3, 194, :_reduce_281,
  3, 194, :_reduce_282,
  1, 194, :_reduce_283,
  4, 194, :_reduce_284,
  3, 194, :_reduce_285,
  1, 194, :_reduce_286,
  5, 194, :_reduce_287,
  4, 194, :_reduce_288,
  3, 194, :_reduce_289,
  2, 194, :_reduce_290,
  1, 194, :_reduce_none,
  2, 194, :_reduce_292,
  2, 194, :_reduce_293,
  6, 194, :_reduce_294,
  6, 194, :_reduce_295,
  0, 231, :_reduce_296,
  0, 232, :_reduce_297,
  7, 194, :_reduce_298,
  0, 233, :_reduce_299,
  0, 234, :_reduce_300,
  7, 194, :_reduce_301,
  5, 194, :_reduce_302,
  4, 194, :_reduce_303,
  0, 235, :_reduce_304,
  0, 236, :_reduce_305,
  9, 194, :_reduce_306,
  0, 237, :_reduce_307,
  6, 194, :_reduce_308,
  0, 238, :_reduce_309,
  7, 194, :_reduce_310,
  0, 239, :_reduce_311,
  5, 194, :_reduce_312,
  0, 240, :_reduce_313,
  6, 194, :_reduce_314,
  0, 241, :_reduce_315,
  0, 242, :_reduce_316,
  9, 194, :_reduce_317,
  1, 194, :_reduce_318,
  1, 194, :_reduce_319,
  1, 194, :_reduce_320,
  1, 194, :_reduce_321,
  1, 156, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_325,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 221, :_reduce_none,
  5, 221, :_reduce_329,
  1, 143, :_reduce_none,
  2, 143, :_reduce_331,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 243, :_reduce_none,
  3, 243, :_reduce_335,
  1, 246, :_reduce_336,
  3, 246, :_reduce_337,
  1, 245, :_reduce_none,
  4, 245, :_reduce_339,
  6, 245, :_reduce_340,
  3, 245, :_reduce_341,
  5, 245, :_reduce_342,
  2, 245, :_reduce_343,
  4, 245, :_reduce_344,
  1, 245, :_reduce_345,
  3, 245, :_reduce_346,
  6, 247, :_reduce_347,
  8, 247, :_reduce_348,
  4, 247, :_reduce_349,
  6, 247, :_reduce_350,
  4, 247, :_reduce_351,
  2, 247, :_reduce_none,
  6, 247, :_reduce_353,
  2, 247, :_reduce_354,
  4, 247, :_reduce_355,
  6, 247, :_reduce_356,
  2, 247, :_reduce_357,
  4, 247, :_reduce_358,
  2, 247, :_reduce_359,
  4, 247, :_reduce_360,
  1, 247, :_reduce_361,
  0, 174, :_reduce_362,
  1, 174, :_reduce_363,
  3, 253, :_reduce_364,
  1, 253, :_reduce_365,
  4, 253, :_reduce_366,
  0, 254, :_reduce_367,
  2, 254, :_reduce_368,
  1, 255, :_reduce_369,
  3, 255, :_reduce_370,
  1, 256, :_reduce_371,
  1, 256, :_reduce_none,
  0, 260, :_reduce_373,
  3, 219, :_reduce_374,
  4, 258, :_reduce_375,
  2, 258, :_reduce_376,
  0, 263, :_reduce_377,
  4, 259, :_reduce_378,
  0, 264, :_reduce_379,
  4, 259, :_reduce_380,
  0, 265, :_reduce_381,
  5, 262, :_reduce_382,
  2, 170, :_reduce_383,
  4, 170, :_reduce_384,
  4, 170, :_reduce_385,
  2, 218, :_reduce_386,
  4, 218, :_reduce_387,
  4, 218, :_reduce_388,
  3, 218, :_reduce_389,
  3, 218, :_reduce_390,
  3, 218, :_reduce_391,
  2, 218, :_reduce_392,
  1, 218, :_reduce_393,
  4, 218, :_reduce_394,
  0, 267, :_reduce_395,
  5, 217, :_reduce_396,
  0, 268, :_reduce_397,
  5, 217, :_reduce_398,
  5, 223, :_reduce_399,
  1, 269, :_reduce_400,
  1, 269, :_reduce_none,
  6, 142, :_reduce_402,
  0, 142, :_reduce_403,
  1, 270, :_reduce_404,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 271, :_reduce_407,
  1, 271, :_reduce_none,
  2, 144, :_reduce_409,
  1, 144, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_414,
  1, 273, :_reduce_415,
  2, 273, :_reduce_416,
  3, 274, :_reduce_417,
  1, 274, :_reduce_418,
  1, 274, :_reduce_419,
  3, 211, :_reduce_420,
  4, 212, :_reduce_421,
  3, 213, :_reduce_422,
  0, 278, :_reduce_423,
  3, 278, :_reduce_424,
  1, 279, :_reduce_425,
  2, 279, :_reduce_426,
  3, 214, :_reduce_427,
  0, 281, :_reduce_428,
  3, 281, :_reduce_429,
  0, 275, :_reduce_430,
  2, 275, :_reduce_431,
  0, 276, :_reduce_432,
  2, 276, :_reduce_433,
  0, 277, :_reduce_434,
  2, 277, :_reduce_435,
  1, 280, :_reduce_436,
  2, 280, :_reduce_437,
  0, 283, :_reduce_438,
  4, 280, :_reduce_439,
  1, 282, :_reduce_440,
  1, 282, :_reduce_441,
  1, 282, :_reduce_442,
  1, 282, :_reduce_none,
  1, 191, :_reduce_444,
  3, 192, :_reduce_445,
  1, 272, :_reduce_446,
  1, 272, :_reduce_447,
  2, 272, :_reduce_448,
  2, 272, :_reduce_449,
  1, 184, :_reduce_450,
  1, 184, :_reduce_451,
  1, 184, :_reduce_452,
  1, 184, :_reduce_453,
  1, 184, :_reduce_454,
  1, 184, :_reduce_455,
  1, 184, :_reduce_456,
  1, 184, :_reduce_457,
  1, 184, :_reduce_458,
  1, 184, :_reduce_459,
  1, 184, :_reduce_460,
  1, 184, :_reduce_461,
  1, 215, :_reduce_462,
  1, 155, :_reduce_463,
  1, 160, :_reduce_464,
  1, 160, :_reduce_465,
  1, 225, :_reduce_466,
  3, 225, :_reduce_467,
  2, 225, :_reduce_468,
  3, 227, :_reduce_469,
  2, 227, :_reduce_470,
  6, 261, :_reduce_471,
  8, 261, :_reduce_472,
  4, 261, :_reduce_473,
  6, 261, :_reduce_474,
  4, 261, :_reduce_475,
  6, 261, :_reduce_476,
  2, 261, :_reduce_477,
  4, 261, :_reduce_478,
  6, 261, :_reduce_479,
  2, 261, :_reduce_480,
  4, 261, :_reduce_481,
  2, 261, :_reduce_482,
  4, 261, :_reduce_483,
  1, 261, :_reduce_484,
  0, 261, :_reduce_485,
  1, 257, :_reduce_486,
  1, 257, :_reduce_487,
  1, 257, :_reduce_488,
  1, 257, :_reduce_489,
  1, 244, :_reduce_none,
  1, 244, :_reduce_491,
  3, 244, :_reduce_492,
  2, 244, :_reduce_493,
  1, 285, :_reduce_none,
  3, 285, :_reduce_495,
  1, 248, :_reduce_496,
  3, 248, :_reduce_497,
  3, 286, :_reduce_498,
  3, 287, :_reduce_499,
  1, 249, :_reduce_500,
  3, 249, :_reduce_501,
  1, 284, :_reduce_502,
  3, 284, :_reduce_503,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 250, :_reduce_506,
  1, 250, :_reduce_507,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  2, 252, :_reduce_510,
  2, 251, :_reduce_511,
  0, 251, :_reduce_512,
  1, 228, :_reduce_none,
  3, 228, :_reduce_514,
  0, 216, :_reduce_515,
  2, 216, :_reduce_none,
  1, 199, :_reduce_517,
  3, 199, :_reduce_518,
  3, 290, :_reduce_519,
  2, 290, :_reduce_520,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 159, :_reduce_533,
  1, 159, :_reduce_534,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 165, :_reduce_none,
  1, 165, :_reduce_none,
  2, 179, :_reduce_539,
  2, 158, :_reduce_540,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 226, :_reduce_544,
  1, 226, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  0, 196, :_reduce_548 ]

racc_reduce_n = 549

racc_shift_n = 962

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tANDDOT => 135,
  :tEQL => 136,
  :tLOWEST => 137 }

racc_nt_base = 138

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "@22",
  "@23",
  "operation3",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@26",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if @context.indirectly_in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_53(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 95 omitted

def _reduce_96(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

def _reduce_104(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_109(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

def _reduce_181(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_189(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_190(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_231(val, _values, result)
                      result = val
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 233 omitted

def _reduce_234(val, _values, result)
                      result = []
                    
    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_239(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_240(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_249(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_251(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_276(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_293(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_294(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_295(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_302(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_303(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_307(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_308(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_312(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_313(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_316(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

def _reduce_325(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      result = val
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_337(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_340(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_344(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_345(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_363(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = []
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_371(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.args(nil, val[0].concat(val[1]), nil)
                    
    result
end

def _reduce_377(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_378(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_379(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_381(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_383(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_384(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_385(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_386(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_387(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_388(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_392(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_395(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_397(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 401 omitted

def _reduce_402(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = []
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 405 omitted

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

def _reduce_414(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = []
                    
    result
end

def _reduce_424(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = []
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_432(val, _values, result)
                      result = []
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = []
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_438(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_439(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_449(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_467(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_468(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = []
                    
    result
end

def _reduce_486(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_487(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_488(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_489(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_493(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_498(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_499(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 504 omitted

# reduce 505 omitted

def _reduce_506(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = []
                    
    result
end

# reduce 513 omitted

def _reduce_514(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = []
                    
    result
end

# reduce 516 omitted

def _reduce_517(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

def _reduce_533(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

def _reduce_544(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 545 omitted

# reduce 546 omitted

# reduce 547 omitted

def _reduce_548(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyMotion
  end   # module Parser
