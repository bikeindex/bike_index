# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby21 < Parser::Base


  def version
    21
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-576,888,-100,214,215,-102,810,-576,-576,-576,586,890,268,-576,-576',
'644,-576,268,217,-97,-83,607,565,-103,-286,-576,395,644,-69,113,594',
'397,396,-105,112,609,-576,-576,565,-576,-576,-576,-576,-576,565,565',
'-99,892,-102,577,643,711,-101,578,214,215,-101,894,260,218,214,215,643',
'-99,-286,261,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576',
'-576,-576,-576,113,-104,-576,-576,-576,112,628,606,-573,-98,-576,565',
'-100,-576,596,595,597,218,-576,267,-576,608,-576,-576,267,-576,-576',
'-576,-576,-576,-476,-576,-576,-576,-93,809,585,-476,-476,-476,-100,-572',
'-476,-476,-476,-100,-476,-576,-88,-572,-576,-576,-94,-92,-476,-576,-476',
'-476,-476,113,113,-101,-96,837,112,112,-476,-476,218,-476,-476,-476',
'-476,-476,218,113,113,894,-91,-93,112,112,113,113,-99,-92,-102,112,112',
'-99,-101,-102,-90,711,711,-101,-476,-476,-476,-476,-476,-476,-476,-476',
'-476,-476,-476,-476,-476,-476,-95,-490,-476,-476,-476,443,-476,-476',
'-89,766,-476,-91,113,-476,-476,218,-476,112,-476,113,-476,-491,-476',
'-476,112,-476,-476,-476,-476,-476,-289,-476,900,-476,-91,-93,767,-289',
'-289,-289,91,92,525,-289,-289,527,-289,-476,-88,644,-476,-476,-476,-476',
'902,-476,-97,-476,-576,644,-105,-476,525,268,-100,527,-289,-289,904',
'-289,-289,-289,-289,-289,-91,-93,-98,-91,-93,214,215,489,268,-481,643',
'-91,-93,113,113,-490,-481,-102,112,112,643,487,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-576,485,-289,-289,-289',
'513,627,-576,93,94,-289,476,-572,-289,113,594,-576,263,-289,112,-289',
'594,-289,-289,-576,-289,-289,-289,-289,-289,-479,-289,513,-289,-97,-576',
'263,-479,-479,-479,267,-484,-479,-479,-479,238,-479,-289,-484,217,-289',
'-289,-95,-94,-479,-289,-479,-479,-479,267,-104,-103,525,113,855,524',
'-479,-479,112,-479,-479,-479,-479,-479,91,92,-576,235,910,596,595,237',
'236,-576,260,596,595,-104,-572,745,-570,261,-576,214,215,743,-479,-479',
'-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,445,-576',
'-479,-479,-479,-487,-479,-479,-290,-99,-479,594,-487,-479,-479,-290',
'-479,913,-479,-412,-479,-569,-479,-479,-290,-479,-479,-479,-479,-479',
'113,-479,-479,-479,546,112,543,542,541,-479,544,113,93,94,-570,594,112',
'-479,-479,594,-479,-479,-479,-479,594,-479,-576,-479,801,-485,571,-479',
'218,-576,-576,-576,-485,-570,-576,-576,-576,-412,-576,-476,917,596,595',
'601,-412,79,-476,-576,-576,-576,-576,-569,-264,-412,444,-476,623,80',
'-576,-576,442,-576,-576,-576,-576,-576,622,81,561,560,218,581,-412,974',
'-569,596,595,605,580,596,595,610,951,398,596,595,592,582,-576,-576,-576',
'-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,970,-93,-576',
'-576,-576,970,768,-576,573,-102,-576,-91,238,-576,-576,574,-576,218',
'-576,-100,-576,927,-576,-576,572,-576,-576,-576,-576,-576,934,-576,-576',
'-576,546,-486,543,542,541,-479,544,935,-486,385,235,218,-479,-576,237',
'236,-576,-576,-576,-576,316,-576,-289,-576,69,70,71,-101,57,-289,-289',
'-289,63,64,-289,-289,-289,67,-289,65,66,68,308,309,72,73,832,801,-289',
'-289,-289,304,305,311,101,100,102,103,-289,-289,230,-289,-289,-289,-289',
'-289,525,45,121,527,105,104,106,95,56,97,96,98,315,99,107,108,828,91',
'92,42,43,41,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,214,215,-289,-289,-289,223,769,-289,229,594,-289,58,59,-289',
'-289,60,-289,-476,-289,953,-289,44,-289,-289,-476,-289,-289,-289,-289',
'-289,228,-289,-482,-289,955,89,79,82,83,-482,84,86,85,87,214,215,956',
'-289,80,88,-289,-289,-289,-289,961,-289,62,-289,81,93,94,-103,289,69',
'70,71,9,57,832,801,581,63,64,596,595,599,67,933,65,66,68,30,31,72,73',
'732,582,688,964,966,29,28,27,101,100,102,103,737,738,19,212,739,107',
'108,632,8,45,291,10,105,104,106,95,56,97,96,98,968,99,107,108,970,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,752,231,232',
'-491,970,252,253,257,40,-96,981,33,-483,982,58,59,983,-105,60,-483,35',
'235,984,241,44,237,236,550,233,234,245,243,239,20,240,894,894,553,89',
'79,82,83,894,84,86,85,87,-90,989,953,-89,80,88,213,256,-99,-238,894',
'-98,62,953,81,93,94,289,69,70,71,9,57,561,560,210,63,64,554,970,-573',
'67,211,65,66,68,30,31,72,73,-572,209,678,208,207,29,28,27,101,100,102',
'103,206,109,19,673,518,218,662,632,8,45,291,10,105,104,106,95,56,97',
'96,98,-83,99,107,108,218,91,92,42,43,41,238,242,247,248,249,244,246',
'254,255,250,251,-290,231,232,505,678,252,253,-290,40,679,506,33,550',
'681,58,59,-290,218,60,504,35,235,553,241,44,237,236,953,233,234,245',
'243,239,20,240,685,688,689,89,79,82,83,-489,84,86,85,87,693,691,-489',
'695,80,88,703,256,561,560,704,-489,62,554,81,93,94,289,69,70,71,9,57',
'705,707,-488,63,64,218,571,714,67,-488,65,66,68,30,31,72,73,732,-488',
'742,746,747,29,28,27,101,100,102,103,-262,238,19,753,238,238,238,617',
'8,45,291,10,105,104,106,95,56,97,96,98,476,99,107,108,476,91,92,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,-289,231,232,515,634',
'252,253,-289,40,631,516,33,-573,263,58,59,-289,621,60,441,35,235,620',
'241,44,237,236,218,233,234,245,243,239,20,240,218,771,616,89,79,82,83',
'-332,84,86,85,87,-261,257,-332,614,80,88,611,256,487,489,794,-332,62',
'673,81,93,94,289,69,70,71,9,57,218,263,439,63,64,263,673,238,67,440',
'65,66,68,30,31,72,73,801,441,218,218,1008,29,28,27,101,100,102,103,1009',
'930,19,543,542,541,826,544,8,45,291,10,105,104,106,95,56,97,96,98,576',
'99,107,108,218,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250',
'251,-289,231,232,-290,801,252,253,-289,40,836,-290,33,-573,575,58,59',
'-289,218,60,-290,35,235,387,241,44,237,236,571,233,234,245,243,239,20',
'240,489,218,529,89,79,82,83,-279,84,86,85,87,845,528,-279,1010,80,88',
'970,256,-263,218,238,-279,62,854,81,93,94,289,69,70,71,9,57,514,510',
'-488,63,64,263,218,272,67,-488,65,66,68,30,31,72,73,507,-488,500,857',
'688,29,28,27,101,100,102,103,860,930,19,543,542,541,862,544,8,45,291',
'10,105,104,106,95,56,97,96,98,864,99,107,108,866,91,92,42,43,41,238',
'242,247,248,249,244,246,254,255,250,251,-289,231,232,-489,218,252,253',
'-289,40,868,-489,33,-573,869,58,59,-289,499,60,-489,35,235,872,241,44',
'237,236,218,233,234,245,243,239,20,240,874,875,673,89,79,82,83,979,84',
'86,85,87,-68,877,980,496,80,88,-261,256,881,883,886,978,62,688,81,93',
'94,289,69,70,71,9,57,,,-279,63,64,,,,67,-279,65,66,68,30,31,72,73,,-279',
',,,29,28,27,101,100,102,103,,,19,116,117,118,119,120,8,45,291,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249',
'244,246,254,255,250,251,581,231,232,,,252,253,933,40,,,33,,,58,59,582',
',60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,116,117,118,119,120,29,28,27,101',
'100,102,103,,,19,116,117,118,119,120,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244',
'246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247',
'248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59',
',,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40',
',,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231',
'232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,218,256,,,',
',62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254',
'255,250,251,,231,232,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44',
'237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249',
'244,246,254,255,250,251,,231,232,,,252,253,,40,,,293,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,256,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,242,247',
'248,249,244,246,254,255,250,251,,231,232,,,252,253,,40,,,33,,,58,59',
',,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252,253,,40',
',,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,231,232,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,256,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,546,19,543,542,541,,544,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,546,,543,542,541,,544,,697,,546,,543',
'542,541,,544,899,,40,,,33,,,58,59,,,60,,35,,,,44,,697,,,,,,,20,,700',
'697,,89,79,82,83,,84,86,85,87,,,,,80,88,,546,,543,542,541,62,544,81',
'93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,697',
'29,28,27,101,100,102,103,,700,19,,,238,,,8,45,291,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,238,-595,-595,-595,-595,244',
'246,235,,-595,-595,237,236,,233,234,252,253,,40,,,293,,,58,59,,238,60',
',35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82,83,',
'84,86,85,87,,,235,,80,88,237,236,,233,234,,62,,81,93,94,289,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,546,19,543,542,541,,544,8,45,291,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254,697,250',
'251,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233',
'234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,546,,543',
'542,541,62,544,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,697,29,28,27,101,100,102,103,,546,19,543,542,541,,544,8',
'45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238',
'242,247,248,249,244,246,,697,250,251,,,,,,252,253,,40,,,33,,,58,59,',
',60,,35,235,,241,44,237,236,,233,234,245,243,239,20,240,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,546,,543,542,541,62,544,81,93,94,5,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,697,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,238,-595,-595,-595,-595,244,246,,,-595,-595,,,,,,252',
'253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245,243,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,-595,-595,-595,-595,244,246,,,-595,-595,,,,',
',252,253,,40,,,293,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,245',
'243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255,250,251,,-595',
'-595,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234',
'245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,238,-595,-595,-595,-595,244,246,,,-595',
'-595,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233',
'234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,238,242,247,248,249,244,246,254,255',
'250,251,,-595,-595,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-595,-595,-595,-595,244',
'246,,,-595,-595,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,-595,-595,-595,-595,244',
'246,,,-595,-595,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237',
'236,,233,234,245,243,239,20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253',
',40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,,,239,20,240',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,289,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,291,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35,235',
',241,44,237,236,,233,234,,,239,20,240,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,,,,62,,81,93,94,289,69,70,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,238,,,,,,,,,,,,,',
',,252,253,,40,,,33,,,58,59,,,60,,35,235,,241,44,237,236,,233,234,,,239',
'20,240,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,306,,238,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,252,253,312,,,,,,,,,,,,,,235,,241,,237,236,302,233,234,298,,,58,59',
',238,60,,,546,,543,542,541,550,544,,,,,,252,253,,553,,89,79,82,83,,84',
'86,85,87,,,235,,80,88,237,236,,233,234,548,62,,81,93,94,69,70,71,9,57',
'561,560,,63,64,554,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253,,40,,,33,,,58,59,,,60,,35',
'235,,241,44,237,236,,233,234,,,239,20,240,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,42,43,41,238,,,,,,,,,,,,,,,,252,253,',
'223,,,229,,,58,59,,,60,,281,235,279,241,44,237,236,284,233,234,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,',
',105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,312,,,,,,',
',,,,,,,,,,,,,302,,,298,,,58,59,,,60,,297,,,,,,,,,,,,,,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,312,,,,,,,,,,,,,,,,',
',,,302,,,229,,,58,59,,,60,,,546,,543,542,541,550,544,,,,,,,,,553,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,314,,548,62,,81,93,94,69,70,71,,57',
'561,560,,63,64,554,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,312,,,,,,',
',,,,,,,,,,,,,941,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,281,,,,44,,,284,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,,,,,44,,,284,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,113,,,,,112,62,,81,93',
'94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305',
'311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,,312,,,,,,,,,,,,,,,,,,,,347,,,33,,,58,59,,,60,,35,,',
',,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,306,,,105,104,106,352,56,97,96,353,,99,107,108,',
'91,92,,,312,,,,,,,,,,,,,,,,,359,,,354,,,229,,,58,59,,,60,,,,,,,,,,,',
',,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103',
',,230,,,,,,,306,,,105,104,106,352,56,97,96,353,,99,107,108,,91,92,,',
'312,,,,,,,,,,,,,,,,,,,,354,,,229,,,58,59,,,60,,,546,,543,542,541,550',
'544,,,,,,,,,553,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,548,62,,81',
'93,94,69,70,71,9,57,561,560,,63,64,554,,,67,,65,66,68,30,31,72,73,,',
',,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59',
',,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
',,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
',10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,312,,,,,,,,,,,,,,,,',
',,,871,,,229,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,403,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279',
',44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,218,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,283,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,279,,44',
',,284,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304',
'305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304',
'305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,',
'230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,223,,,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,218,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,,,,,,,228,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,',
'304,305,311,101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,,,312,,,,,,,,,,,,,,,,,,,,871,,,229,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101',
'100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,',
',,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,312,,,,,,,,,,,,,,,,,,,,302,,,229,,,58,59,,,60,,,546,,543,542,541,550',
'544,,,,,,,,,553,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,502,,548,62,',
'81,93,94,69,70,71,,57,561,560,,63,64,554,,,67,,65,66,68,308,309,72,73',
',,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,',
'58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,',
'304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305',
'311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,',
',,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44',
',,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100',
'102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,',
',,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,',
',,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,518,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309',
'72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305',
'311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,403',
',,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311',
'101,100,102,103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102',
'103,,,230,,,,,,,306,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309',
'72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72',
'73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309,72,73,,',
',,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58',
'59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,',
',,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,',
',,228,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',230,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,',
',,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,750,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223',
',,229,,,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,281,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,,,,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308',
'309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104',
'106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',223,,,229,,,58,59,,,60,,656,,279,,44,,,284,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,223,,,229,,,58,59,,,60,,,,279,,44,,,284,,,,,,228,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,291,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,,,387,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67',
',65,66,68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,',
',45,,,105,104,106,95,56,97,96,98,283,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,223,,,229,,,58,59,,,60,,656,,,,44,,,284,,,,,,228,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,223,,,229,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,308,309,72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,306,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,312,,,,,,,,,,,,,,,,',
',,,302,,,298,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,230,,,,,,,45,,,105,104,106,95,56',
'97,96,98,283,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,,229',
',,58,59,,,60,,281,,279,,44,,,284,,,,,,228,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,308,309',
'72,73,,,,,,304,305,311,101,100,102,103,,,230,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,223,,',
'229,,,58,59,,,60,,,,,,44,,,,,,,,,228,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,,-577,,62,,81,93,94,-577,-577,-577,,,-577,-577,-577,,-577',
',,,,,,,,-577,-577,-577,-577,,,,,,,,-577,-577,,-577,-577,-577,-577,-577',
',,,,,,,,,,,,,,,,,,,,,,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577',
'-577,-577,-577,-577,,,-577,-577,-577,,,-577,,,-577,,,-577,-577,,-577',
',-577,,-577,,-577,-577,,-577,-577,-577,-577,-577,,-577,-577,-577,,,',
',,,,,,,,,,-577,,,-577,-577,-577,-577,-280,-577,,-577,,,,-280,-280,-280',
',,-280,-280,-280,,-280,,,,,,,,,,-280,-280,-280,,,,,,,,-280,-280,,-280',
'-280,-280,-280,-280,,,,,,,,,,,,,,,,,,,,,,,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280',
',,-280,-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,',
'-280,,-280,,,,,,,,,,,,,,-280,,,-280,-280,-280,-280,-578,-280,,-280,',
',,-578,-578,-578,,,-578,-578,-578,,-578,,,,,,,,,-578,-578,-578,-578',
',,,,,,,-578,-578,,-578,-578,-578,-578,-578,,,,,,,,,,,,,,,,,,,,,,,-578',
'-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,,,-578',
'-578,-578,,,-578,,,-578,,,-578,-578,,-578,,-578,,-578,,-578,-578,,-578',
'-578,-578,-578,-578,,-578,-578,-578,546,,543,542,541,550,544,,,,,,,-578',
',553,-578,-578,-578,-578,-411,-578,,-578,,,,-411,-411,-411,,,-411,-411',
'-411,,-411,548,,,,,,,,-411,-411,-411,561,560,,,,554,,,-411,-411,,-411',
'-411,-411,-411,-411,,,,,,,,,,,,,,,,,,,,,,,-411,-411,-411,-411,-411,-411',
'-411,-411,-411,-411,-411,-411,-411,-411,,,-411,-411,-411,,,-411,,263',
'-411,,,-411,-411,,-411,,-411,,-411,,-411,-411,,-411,-411,-411,-411,-411',
'-296,-411,-411,-411,,,,-296,-296,-296,,,-296,-296,-296,,-296,-411,,',
'-411,-411,,-411,,-411,-296,-296,,,,,,,,,-296,-296,,-296,-296,-296,-296',
'-296,,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,272,-296,,,-296,-296',
',-296,,-296,,-296,,-296,-296,,-296,-296,-296,-296,-296,,-296,-244,-296',
',,,,,-244,-244,-244,,,-244,-244,-244,-296,-244,,-296,-296,,-296,,-296',
',-244,-244,,,,,,,,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,,,,,',
',,,,,546,,543,542,541,550,544,,,,,,,,,553,-244,,-244,,,,,-244,,-244',
'-244,-244,263,-244,-244,-244,-244,,-244,,,548,,,,,,-244,-244,-244,558',
'557,561,560,,-244,-244,554,-244,-244,,-244,-244,-244,-244,-244,,,,,-244',
',,-244,,,,,-244,,,,,218,,,,,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,-244,-244,-244,-244,-244,,,-244,-244,-244,,,-244,,263,-244,,,-244',
'-244,,-244,,-244,,-244,,-244,-244,,-244,-244,-244,-244,-244,,-244,-244',
'-244,,,,,,,,,,,,,,-244,,,-244,-244,,-244,,-244,173,184,174,197,170,190',
'180,179,200,201,195,178,177,172,198,202,203,182,171,185,189,191,183',
'176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168,175,166,167',
'163,164,165,124,126,123,,125,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174',
'197,170,190,180,179,200,201,195,178,177,172,198,202,203,182,171,185',
'189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168',
'175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173',
'184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203,182',
'171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,',
',,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,',
',,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,370,369,371,368,169',
'188,187,,,,,,168,175,166,167,365,366,367,363,126,97,96,364,,99,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,375,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,669,423,162,,670',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,635,416,162,,636,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,1001,416,162,,1002,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,635,416,162',
',636,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,474,416,162,,475,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,722,423,162,,723,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,976,423',
'162,,975,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,412,416,162,,413,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,637,423,162,,638,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,474',
'416,162,,475,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,719,423,162,,720,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,637,423,162,,638,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'717,416,162,,718,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,419,423,162,,418,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,1003,423,162,,1004',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,263,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,666,416,162,,667,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,263,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,,546,162,543,542,541,550,544,,,,,,,',
'546,553,543,542,541,550,544,,,,,,,,546,553,543,542,541,550,544,,,548',
',,,,,553,,,558,557,561,560,,548,532,554,,,,,,,558,557,561,560,,548,',
'554,,,,,,,558,557,561,560,,,546,554,543,542,541,550,544,,546,,543,542',
'541,550,544,553,,,,,,,,553,,546,,543,542,541,550,544,,,,,,548,,,553',
',,,,548,558,557,561,560,,,,554,558,557,561,560,,,,554,548,,546,,543',
'542,541,550,544,558,557,561,560,,,,554,553,,546,,543,542,541,550,544',
',546,,543,542,541,550,544,553,,,,,548,,,553,,,,,,558,557,561,560,,,',
'554,548,,,,,,,,548,558,557,561,560,,,,554,558,557,561,560,,,546,554',
'543,542,541,550,544,546,,543,542,541,550,544,546,553,543,542,541,550',
'544,546,553,543,542,541,550,544,546,553,543,542,541,550,544,,553,548',
',,,,,553,548,,558,557,561,560,,548,,554,,561,560,,548,,554,,561,560',
',548,,554,,561,560,,,,554,,561,560,,,546,554,543,542,541,550,544,,,',
',,,,,553,,,,,,,,,,,,,,,,,,,,,,548,,,,,,,,,,,561,560,,,,554' ]
        racc_action_table = arr = ::Array.new(24831, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'419,816,1001,436,436,718,683,419,419,419,358,817,647,419,419,481,419',
'61,19,344,661,382,715,720,58,419,123,648,661,848,378,123,123,348,848',
'383,419,419,903,419,419,419,419,419,880,338,1015,819,1002,354,481,840',
'1003,354,591,591,719,820,373,19,676,676,648,839,58,373,419,419,419,419',
'419,419,419,419,419,419,419,419,419,419,341,575,419,419,419,341,419',
'382,720,345,419,337,717,419,378,378,378,436,419,647,419,383,419,419',
'61,419,419,419,419,419,95,419,419,419,718,683,358,95,95,95,1001,719',
'95,95,95,1001,95,419,344,1003,419,419,720,419,95,419,95,95,95,358,715',
'419,348,715,358,715,95,95,591,95,95,95,95,95,676,840,903,822,666,667',
'840,903,880,338,1015,719,1002,880,338,1015,1003,1002,839,568,567,1003',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,575,38,95,95,95,224,95,95',
'345,635,95,717,843,95,95,825,95,843,95,337,95,222,95,95,337,95,95,95',
'95,95,418,95,827,95,666,667,636,418,418,418,41,41,331,418,418,331,418',
'95,38,480,95,95,95,95,830,95,38,95,722,472,224,95,682,307,635,682,418',
'418,833,418,418,418,418,418,666,667,222,666,667,587,587,280,26,369,480',
'666,667,568,567,221,369,636,568,567,472,277,418,418,418,418,418,418',
'418,418,418,418,418,418,418,418,722,276,418,418,418,316,418,722,41,41',
'418,262,722,418,3,604,722,307,418,3,418,602,418,418,669,418,418,418',
'418,418,98,418,442,418,221,722,26,98,98,98,307,368,98,98,98,448,98,418',
'368,230,418,418,316,418,98,418,98,98,98,26,316,418,327,587,770,327,98',
'98,587,98,98,98,98,98,312,312,669,448,842,604,604,448,448,669,24,602',
'602,442,669,604,353,24,669,336,336,602,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,226,669,98,98,98,367,98,98,578,770,98,380,367,98,98,578',
'98,846,98,796,98,352,98,98,578,98,98,98,98,98,287,98,353,98,899,287',
'899,899,899,353,899,586,312,312,353,381,586,98,353,384,98,98,98,98,377',
'98,637,98,908,366,908,98,847,637,637,637,366,353,637,637,637,796,637',
'352,850,380,380,380,796,77,352,637,637,637,637,352,851,796,225,352,413',
'77,637,637,223,637,637,637,637,637,412,77,688,688,928,356,796,928,352',
'381,381,381,356,384,384,384,899,204,377,377,377,356,637,637,637,637',
'637,637,637,637,637,637,637,637,637,637,996,413,637,637,637,997,637',
'637,346,413,637,412,449,637,637,346,637,1000,637,412,637,867,637,637',
'346,637,637,637,637,637,871,637,637,637,700,365,700,700,700,364,700',
'873,365,109,449,45,364,637,449,449,637,637,637,637,40,637,638,637,514',
'514,514,637,514,638,638,638,514,514,638,638,638,514,638,514,514,514',
'514,514,514,514,991,991,638,638,638,514,514,514,514,514,514,514,638',
'638,514,638,638,638,638,638,328,514,7,328,514,514,514,514,514,514,514',
'514,37,514,514,514,700,514,514,514,514,514,638,638,638,638,638,638,638',
'638,638,638,638,638,638,638,17,17,638,638,638,514,638,638,514,379,638',
'514,514,638,638,514,638,363,638,901,638,514,638,638,363,638,638,638',
'638,638,514,638,370,638,905,514,514,514,514,370,514,514,514,514,521',
'521,906,638,514,514,638,638,638,638,912,638,514,638,514,514,514,638',
'834,834,834,834,834,834,706,706,932,834,834,379,379,379,834,932,834',
'834,834,834,834,834,834,916,932,918,921,922,834,834,834,834,834,834',
'834,595,595,834,15,595,595,595,431,834,834,834,834,834,834,834,834,834',
'834,834,834,923,834,834,834,924,834,834,834,834,834,431,431,431,431',
'431,431,431,431,431,431,431,618,431,431,39,926,431,431,22,834,15,941',
'834,371,944,834,834,945,15,834,371,834,431,946,431,834,431,431,685,431',
'431,431,431,431,834,431,947,948,685,834,834,834,834,949,834,834,834',
'834,618,950,952,39,834,834,16,431,618,431,1005,39,834,1006,834,834,834',
'563,563,563,563,563,563,685,685,14,563,563,685,1017,975,563,14,563,563',
'563,563,563,563,563,976,14,977,13,12,563,563,563,563,563,563,563,10',
'1,563,511,508,503,501,640,563,563,563,563,563,563,563,563,563,563,563',
'563,498,563,563,563,497,563,563,563,563,563,640,640,640,640,640,640',
'640,640,640,640,640,981,640,640,301,519,640,640,981,563,520,301,563',
'857,522,563,563,981,482,563,301,563,640,857,640,563,640,640,990,640',
'640,640,640,640,563,640,534,535,537,563,563,563,563,300,563,563,563',
'563,539,538,300,547,563,563,555,640,857,857,559,300,563,857,563,563',
'563,645,645,645,645,645,645,562,564,299,645,645,478,569,570,645,299',
'645,645,645,645,645,645,645,589,299,599,607,609,645,645,645,645,645',
'645,645,615,453,645,619,452,451,450,407,645,645,645,645,645,645,645',
'645,645,645,645,645,624,645,645,645,629,645,645,645,645,645,407,407',
'407,407,407,407,407,407,407,407,407,1004,407,407,318,438,407,407,1004',
'645,428,318,645,1004,420,645,645,1004,411,645,318,645,407,410,407,645',
'407,407,639,407,407,407,407,407,645,407,408,641,404,645,645,645,645',
'46,645,645,645,645,402,646,46,399,645,645,393,407,653,655,660,46,645',
'663,645,645,645,650,650,650,650,650,650,665,668,220,650,650,671,672',
'675,650,220,650,650,650,650,650,650,650,677,220,680,684,992,650,650',
'650,650,650,650,650,993,868,650,868,868,868,699,868,650,650,650,650',
'650,650,650,650,650,650,650,650,349,650,650,650,701,650,650,650,650',
'650,751,751,751,751,751,751,751,751,751,751,751,723,751,751,507,708',
'751,751,723,650,713,507,650,723,347,650,650,723,716,650,507,650,751',
'343,751,650,751,751,342,751,751,751,751,751,650,751,332,725,330,650',
'650,650,650,303,650,650,650,650,730,329,303,994,650,650,995,751,749',
'325,320,303,650,754,650,650,650,651,651,651,651,651,651,317,313,938',
'651,651,311,306,305,651,938,651,651,651,651,651,651,651,302,938,296',
'772,773,651,651,651,651,651,651,651,775,974,651,974,974,974,776,974',
'651,651,651,651,651,651,651,651,651,651,651,651,777,651,651,651,779',
'651,651,651,651,651,674,674,674,674,674,674,674,674,674,674,674,670',
'674,674,939,780,674,674,670,651,781,939,651,670,782,651,651,670,295',
'651,939,651,674,786,674,651,674,674,294,674,674,674,674,674,651,674',
'790,791,795,651,651,651,651,940,651,651,651,651,292,799,940,291,651',
'651,802,674,803,806,811,940,651,812,651,651,651,726,726,726,726,726',
'726,,,942,726,726,,,,726,942,726,726,726,726,726,726,726,,942,,,,726',
'726,726,726,726,726,726,,,726,290,290,290,290,290,726,726,726,726,726',
'726,726,726,726,726,726,726,,726,726,726,,726,726,726,726,726,853,853',
'853,853,853,853,853,853,853,853,853,870,853,853,,,853,853,870,726,,',
'726,,,726,726,870,,726,,726,853,,853,726,853,853,,853,853,853,853,853',
'726,853,,,,726,726,726,726,,726,726,726,726,,,,,726,726,,853,,,,,726',
',726,726,726,731,731,731,731,731,731,,,,731,731,,,,731,,731,731,731',
'731,731,731,731,6,6,6,6,6,731,731,731,731,731,731,731,,,731,495,495',
'495,495,495,731,731,731,731,731,731,731,731,731,731,731,731,,731,731',
'731,,731,731,731,731,731,856,856,856,856,856,856,856,856,856,856,856',
',856,856,,,856,856,,731,,,731,,,731,731,,,731,,731,856,,856,731,856',
'856,,856,856,856,856,856,731,856,,,,731,731,731,731,,731,731,731,731',
',,,,731,731,,856,,,,,731,,731,731,731,835,835,835,835,835,835,,,,835',
'835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835,835,835,835',
'835,,,835,,,,,,835,835,835,835,835,835,835,835,835,835,835,835,,835',
'835,835,,835,835,835,835,835,517,517,517,517,517,517,517,517,517,517',
'517,,517,517,,,517,517,,835,,,835,,,835,835,,,835,,835,517,,517,835',
'517,517,,517,517,517,517,517,835,517,,,,835,835,835,835,,835,835,835',
'835,,,,,835,835,,517,,,,,835,,835,835,835,838,838,838,838,838,838,,',
',838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838,838,838',
'838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838,838,',
'838,838,838,,838,838,838,838,838,21,21,21,21,21,21,21,21,21,21,21,,21',
'21,,,21,21,,838,,,838,,,838,838,,,838,,838,21,,21,838,21,21,,21,21,21',
'21,21,838,21,,,,838,838,838,838,,838,838,838,838,,,,,838,838,,21,,,',
',838,,838,838,838,877,877,877,877,877,877,,,,877,877,,,,877,,877,877',
'877,877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,877',
'877,877,877,877,877,877,877,877,877,877,877,,877,877,877,,877,877,877',
'877,877,274,274,274,274,274,274,274,274,274,274,274,,274,274,,,274,274',
',877,,,877,,,877,877,,,877,,877,274,,274,877,274,274,,274,274,274,274',
'274,877,274,,,,877,877,877,877,,877,877,877,877,,,,,877,877,,274,,,',
',877,,877,877,877,885,885,885,885,885,885,,,,885,885,,,,885,,885,885',
'885,885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,885',
'885,885,885,885,885,885,885,885,885,885,885,,885,885,885,,885,885,885',
'885,885,426,426,426,426,426,426,426,426,426,426,426,,426,426,,,426,426',
',885,,,885,,,885,885,,,885,,885,426,,426,885,426,426,,426,426,426,426',
'426,885,426,,,,885,885,885,885,,885,885,885,885,,,,,885,885,,426,,,',
',885,,885,885,885,566,566,566,566,566,566,,,,566,566,,,,566,,566,566',
'566,566,566,566,566,,,,,,566,566,566,566,566,566,566,,,566,,,,,,566',
'566,566,566,566,566,566,566,566,566,566,566,,566,566,566,,566,566,566',
'566,566,471,471,471,471,471,471,471,471,471,471,471,,471,471,,,471,471',
',566,,,566,,,566,566,,,566,,566,471,,471,566,471,471,,471,471,471,471',
'471,566,471,,,,566,566,566,566,,566,566,566,566,,,,,566,566,471,471',
',,,,566,,566,566,566,588,588,588,588,588,588,,,,588,588,,,,588,,588',
'588,588,588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,',
'588,588,588,588,588,588,588,588,588,588,588,588,,588,588,588,,588,588',
'588,588,588,765,765,765,765,765,765,765,765,765,765,765,,765,765,,,765',
'765,,588,,,588,,,588,588,,,588,,588,765,,765,588,765,765,,765,765,765',
'765,765,588,765,,,,588,588,588,588,,588,588,588,588,,,,,588,588,,765',
',,,,588,,588,588,588,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33',
'33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,33,,33,33,33,33,33,763,763,763,763,763,763,763,763,763',
'763,763,,763,763,,,763,763,,33,,,33,,,33,33,,,33,,33,763,,763,33,763',
'763,,763,763,763,763,763,33,763,,,,33,33,33,33,,33,33,33,33,,,,,33,33',
',763,,,,,33,,33,33,33,121,121,121,121,121,121,,,,121,121,,,,121,,121',
'121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,',
'121,121,121,121,121,121,121,121,121,121,121,121,,121,121,121,,121,121',
'121,121,121,761,761,761,761,761,761,761,761,761,761,761,,761,761,,,761',
'761,,121,,,121,,,121,121,,,121,,121,761,,761,121,761,761,,761,761,761',
'761,761,121,761,,,,121,121,121,121,,121,121,121,121,,,,,121,121,,761',
',,,,121,,121,121,121,229,229,229,229,229,229,,,,229,229,,,,229,,229',
'229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,',
'229,229,229,229,229,229,229,229,229,229,229,229,,229,229,229,,229,229',
'229,229,229,758,758,758,758,758,758,758,758,758,758,758,,758,758,,,758',
'758,,229,,,229,,,229,229,,,229,,229,758,,758,229,758,758,,758,758,758',
'758,758,229,758,,,,229,229,229,229,,229,229,229,229,,,,,229,229,,758',
',,,,229,,229,229,229,206,206,206,206,206,206,,,,206,206,,,,206,,206',
'206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,',
'206,206,206,206,206,206,206,206,206,206,206,206,,206,206,206,,206,206',
'206,206,206,756,756,756,756,756,756,756,756,756,756,756,,756,756,,,756',
'756,,206,,,206,,,206,206,,,206,,206,756,,756,206,756,756,,756,756,756',
'756,756,206,756,,,,206,206,206,206,,206,206,206,206,,,,,206,206,,756',
',,,,206,,206,206,206,323,323,323,323,323,323,,,,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,826,323,826',
'826,826,,826,323,323,323,323,323,323,323,323,323,323,323,323,,323,323',
'323,,323,323,323,323,323,548,,548,548,548,,548,,826,,951,,951,951,951',
',951,826,,323,,,323,,,323,323,,,323,,323,,,,323,,548,,,,,,,323,,548',
'951,,323,323,323,323,,323,323,323,323,,,,,323,323,,697,,697,697,697',
'323,697,323,323,323,298,298,298,298,298,298,,,,298,298,,,,298,,298,298',
'298,298,298,298,298,,,,,697,298,298,298,298,298,298,298,,697,298,,,467',
',,298,298,298,298,298,298,298,298,298,298,298,298,,298,298,298,,298',
'298,298,298,298,457,457,457,457,457,457,457,467,,457,457,467,467,,467',
'467,457,457,,298,,,298,,,298,298,,468,298,,298,457,,457,298,457,457',
',457,457,457,457,457,298,457,,,,298,298,298,298,,298,298,298,298,,,468',
',298,298,468,468,,468,468,,298,,298,298,298,789,789,789,789,789,789',
',,,789,789,,,,789,,789,789,789,789,789,789,789,,,,,,789,789,789,789',
'789,789,789,,989,789,989,989,989,,989,789,789,789,789,789,789,789,789',
'789,789,789,789,,789,789,789,,789,789,789,789,789,470,470,470,470,470',
'470,470,470,989,470,470,,,,,,470,470,,789,,,789,,,789,789,,,789,,789',
'470,,470,789,470,470,,470,470,470,470,470,789,470,,,,789,789,789,789',
',789,789,789,789,,,,,789,789,,953,,953,953,953,789,953,789,789,789,844',
'844,844,844,844,844,,,,844,844,,,,844,,844,844,844,844,844,844,844,',
',,,953,844,844,844,844,844,844,844,,900,844,900,900,900,,900,844,844',
'844,844,844,844,844,844,844,844,844,844,,844,844,844,,844,844,844,844',
'844,469,469,469,469,469,469,469,,900,469,469,,,,,,469,469,,844,,,844',
',,844,844,,,844,,844,469,,469,844,469,469,,469,469,469,469,469,844,469',
',,,844,844,844,844,,844,844,844,844,,,,,844,844,,828,,828,828,828,844',
'828,844,844,844,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,828,0,0,0',
'0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,466,466,466',
'466,466,466,466,,,466,466,,,,,,466,466,,0,,,0,,,0,0,,,0,,0,466,,466',
'0,466,466,,466,466,466,466,466,0,466,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,',
',,,0,,0,0,0,293,293,293,293,293,293,,,,293,293,,,,293,,293,293,293,293',
'293,293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,293,293,293',
'293,293,293,293,293,293,293,293,293,,293,293,293,,293,293,293,293,293',
'465,465,465,465,465,465,465,,,465,465,,,,,,465,465,,293,,,293,,,293',
'293,,,293,,293,465,,465,293,465,465,,465,465,465,465,465,293,465,,,',
'293,293,293,293,,293,293,293,293,,,,,293,293,,,,,,,293,,293,293,293',
'496,496,496,496,496,496,,,,496,496,,,,496,,496,496,496,496,496,496,496',
',,,,,496,496,496,496,496,496,496,,,496,,,,,,496,496,496,496,496,496',
'496,496,496,496,496,496,,496,496,496,,496,496,496,496,496,447,447,447',
'447,447,447,447,447,447,447,447,,447,447,,,447,447,,496,,,496,,,496',
'496,,,496,,496,447,,447,496,447,447,,447,447,447,447,447,496,447,,,',
'496,496,496,496,,496,496,496,496,,,,,496,496,,,,,,,496,,496,496,496',
'962,962,962,962,962,962,,,,962,962,,,,962,,962,962,962,962,962,962,962',
',,,,,962,962,962,962,962,962,962,,,962,,,,,,962,962,962,962,962,962',
'962,962,962,962,962,962,,962,962,962,,962,962,962,962,962,464,464,464',
'464,464,464,464,,,464,464,,,,,,464,464,,962,,,962,,,962,962,,,962,,962',
'464,,464,962,464,464,,464,464,464,464,464,962,464,,,,962,962,962,962',
',962,962,962,962,,,,,962,962,,,,,,,962,,962,962,962,741,741,741,741',
'741,741,,,,741,741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741',
'741,741,741,741,741,,,741,,,,,,741,741,741,741,741,741,741,741,741,741',
'741,741,,741,741,741,,741,741,741,741,741,446,446,446,446,446,446,446',
'446,446,446,446,,446,446,,,446,446,,741,,,741,,,741,741,,,741,,741,446',
',446,741,446,446,,446,446,446,446,446,741,446,,,,741,741,741,741,,741',
'741,741,741,,,,,741,741,,,,,,,741,,741,741,741,884,884,884,884,884,884',
',,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884,884,884,884',
'884,884,884,,,884,,,,,,884,884,884,884,884,884,884,884,884,884,884,884',
',884,884,884,,884,884,884,884,884,463,463,463,463,463,463,463,,,463',
'463,,,,,,463,463,,884,,,884,,,884,884,,,884,,884,463,,463,884,463,463',
',463,463,463,463,463,884,463,,,,884,884,884,884,,884,884,884,884,,,',
',884,884,,,,,,,884,,884,884,884,801,801,801,801,801,801,,,,801,801,',
',,801,,801,801,801,801,801,801,801,,,,,,801,801,801,801,801,801,801',
',,801,,,,,,801,801,801,801,801,801,801,801,801,801,801,801,,801,801',
'801,,801,801,801,801,801,462,462,462,462,462,462,462,,,462,462,,,,,',
'462,462,,801,,,801,,,801,801,,,801,,801,462,,462,801,462,462,,462,462',
'462,462,462,801,462,,,,801,801,801,801,,801,801,801,801,,,,,801,801',
',,,,,,801,,801,801,801,960,960,960,960,960,960,,,,960,960,,,,960,,960',
'960,960,960,960,960,960,,,,,,960,960,960,960,960,960,960,,,960,,,,,',
'960,960,960,960,960,960,960,960,960,960,960,960,,960,960,960,,960,960',
'960,960,960,461,,,,,,,,,,,,,,,,461,461,,960,,,960,,,960,960,,,960,,960',
'461,,461,960,461,461,,461,461,,,461,960,461,,,,960,960,960,960,,960',
'960,960,960,,,,,960,960,,,,,,,960,,960,960,960,954,954,954,954,954,954',
',,,954,954,,,,954,,954,954,954,954,954,954,954,,,,,,954,954,954,954',
'954,954,954,,,954,,,,,,954,954,954,954,954,954,954,954,954,954,954,954',
',954,954,954,,954,954,954,954,954,460,,,,,,,,,,,,,,,,460,460,,954,,',
'954,,,954,954,,,954,,954,460,,460,954,460,460,,460,460,,,460,954,460',
',,,954,954,954,954,,954,954,954,954,,,,,954,954,,,,,,,954,,954,954,954',
'937,937,937,937,937,937,,,,937,937,,,,937,,937,937,937,937,937,937,937',
',,,,,937,937,937,937,937,937,937,,,937,,,,,,937,937,937,937,937,937',
'937,937,937,937,937,937,,937,937,937,,937,937,937,937,937,459,,,,,,',
',,,,,,,,,459,459,,937,,,937,,,937,937,,,937,,937,459,,459,937,459,459',
',459,459,,,459,937,459,,,,937,937,937,937,,937,937,937,937,,,,,937,937',
',,,510,510,510,937,510,937,937,937,510,510,,,,510,,510,510,510,510,510',
'510,510,,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,455,510,510',
'510,510,510,510,510,510,,510,510,510,,510,510,455,455,510,,,,,,,,,,',
',,,455,,455,,455,455,510,455,455,510,,,510,510,,456,510,,,693,,693,693',
'693,693,693,,,,,,456,456,,693,,510,510,510,510,,510,510,510,510,,,456',
',510,510,456,456,,456,456,693,510,,510,510,510,5,5,5,5,5,693,693,,5',
'5,693,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5',
'5,5,5,5,,5,5,5,,5,5,5,5,5,458,,,,,,,,,,,,,,,,458,458,,5,,,5,,,5,5,,',
'5,,5,458,,458,5,458,458,,458,458,,,458,5,458,,,,5,5,5,5,,5,5,5,5,,,',
',5,5,,,,978,978,978,5,978,5,5,5,978,978,,,,978,,978,978,978,978,978',
'978,978,,,,,,978,978,978,978,978,978,978,,,978,,,,,,,978,,,978,978,978',
'978,978,978,978,978,978,978,978,978,,978,978,978,978,978,454,,,,,,,',
',,,,,,,,454,454,,978,,,978,,,978,978,,,978,,978,454,978,454,978,454',
'454,978,454,454,,,,978,,,,,978,978,978,978,,978,978,978,978,,,,,978',
'978,,,,20,20,20,978,20,978,978,978,20,20,,,,20,,20,20,20,20,20,20,20',
',,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20',
'20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20',
',,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29',
'20,20,20,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29',
',,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29',
',,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,',
',29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30',
',,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30',
',,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,',
',,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,',
'30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31',
'31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31',
'31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,',
',31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,',
',,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34',
'34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,',
',,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34',
'34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35',
',,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,',
',,,,,,,,35,,,35,,,35,35,,,35,,,864,,864,864,864,864,864,,,,,,,,,864',
',35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,864,35,,35,35,35,42,42,42',
',42,864,864,,42,42,864,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42',
'42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42',
'42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42',
'42,42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,',
'43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43',
'43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43',
',,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,',
',,43,43,,,,44,44,44,43,44,43,43,43,44,44,,,,44,,44,44,44,44,44,44,44',
',,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44',
'44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44',
',,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,881,881,881,44',
'881,44,44,44,881,881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881',
'881,881,881,881,881,,,881,,,,,,,881,,,881,881,881,881,881,881,881,881',
',881,881,881,,881,881,,,881,,,,,,,,,,,,,,,,,,,,881,,,881,,,881,881,',
',881,,,,,,,,,,,,,,,,,,,,881,881,881,881,,881,881,881,881,,,,,881,881',
',,,59,59,59,881,59,881,881,881,59,59,,,,59,,59,59,59,59,59,59,59,,,',
',,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59',
'59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,',
',59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60',
'59,60,59,59,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60',
'60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60',
'60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,',
',,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,63,63,63,60,63,60,60,60,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,',
',,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63',
'63,63,,,,,63,63,,,,64,64,64,63,64,63,63,63,64,64,,,,64,,64,64,64,64',
'64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64',
'64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,',
',64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,67',
'67,67,64,67,64,64,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67',
'67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67',
'67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67',
',,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,,,,,67,67,,67,67,67,68,68',
'68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68',
',,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,68,,,,,,',
',,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,',
'68,68,68,68,,,,,68,68,,,,69,69,69,68,69,68,68,68,69,69,,,,69,,69,69',
'69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69',
'69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69',
'69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70',
'70,70,69,70,69,69,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70',
'70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70',
',,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,890,,890,890,890,890',
'890,,,,,,,,,890,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,,,890,70,,70',
'70,70,111,111,111,111,111,890,890,,111,111,890,,,111,,111,111,111,111',
'111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111',
'111,111,111,111,111,111,111,111,111,,111,111,111,,111,111,111,111,111',
',,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111',
',,,,111,111,111,111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111',
'111,116,116,116,,116,,,,116,116,,,,116,,116,116,116,116,116,116,116',
',,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116',
'116,116,116,,116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116',
',,116,,,116,116,,,116,,,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116',
'116,116,116,,,,,116,116,,,,117,117,117,116,117,116,116,116,117,117,',
',,117,,117,117,117,117,117,117,117,,,,,,117,117,117,117,117,117,117',
',,117,,,,,,,117,,,117,117,117,117,117,117,117,117,,117,117,117,,117',
'117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117',
',,,,,,,,117,,,,,117,117,117,117,,117,117,117,117,,,,,117,117,,,,118',
'118,118,117,118,117,117,117,118,118,,,,118,,118,118,118,118,118,118',
'118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118',
'118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,',
',118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118',
',118,118,118,118,,,,,118,118,,,,119,119,119,118,119,118,118,118,119',
'119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119',
'119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,',
'119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,',
',,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,,,,,119,119,',
',,,,,119,,119,119,119,120,120,120,120,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120',
'120,,120,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,',
',120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,869,869,869',
'120,869,120,120,120,869,869,,,,869,,869,869,869,869,869,869,869,,,,',
',869,869,869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869,869',
'869,869,,869,869,869,,869,869,,,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869',
'869,,,869,,,,,,,,,,,,,,,,,,,,869,869,869,869,,869,869,869,869,,,,,869',
'869,,,,207,207,207,869,207,869,869,869,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,',
',,,,,,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207',
'207,207,,207,207,207,207,,,,,207,207,,,,208,208,208,207,208,207,207',
'207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208',
'208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208',
'208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208',
',,,,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208',
',,,209,209,209,208,209,208,208,208,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,209,209,209,209,,209,209,209,209,209,,,,,,,,,,,',
',,,,,,,,209,,,209,,,209,209,,,209,,209,,209,,209,,,209,,,,,,209,,,,',
'209,209,209,209,,209,209,209,209,,,,,209,209,,,,212,212,212,209,212',
'209,209,209,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212',
'212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212',
',212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212',
'212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212',
',,,,212,212,,,,213,213,213,212,213,212,212,212,213,213,,,,213,,213,213',
'213,213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213',
',,213,213,213,213,213,213,213,213,,213,213,213,,213,213,213,213,213',
',,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,213,,,,213,,,,,,,,,213',
',,,,213,213,213,213,,213,213,213,213,,,,,213,213,,,,214,214,214,213',
'214,213,213,213,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214',
'214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214',
'214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,',
',214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214',
'214,,,,,214,214,,,,215,215,215,214,215,214,214,214,215,215,,,,215,,215',
'215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,',
',215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215,215,215',
'215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,,215',
',,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,216,216,216,215',
'216,215,215,215,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216',
'216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216',
'216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,',
',216,216,,,216,,,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216',
'216,,,,,216,216,,,,217,217,217,216,217,216,216,216,217,217,,,,217,,217',
'217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,',
',217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217,217',
'217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217',
',,,,217,217,217,217,,217,217,217,217,,,,,217,217,217,,,855,855,855,217',
'855,217,217,217,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855',
'855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855,855,855,855,855',
'855,,855,855,855,,855,855,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,',
',855,855,,,855,,,,,,855,,,,,,,,,855,,,,,855,855,855,855,,855,855,855',
'855,,,,,855,855,,,,854,854,854,855,854,855,855,855,854,854,,,,854,,854',
'854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854,,,,,',
',854,,,854,854,854,854,854,854,854,854,854,854,854,854,,854,854,854',
'854,854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854,,,,854,,854,,,854',
',,,,,854,,,,,854,854,854,854,,854,854,854,854,,,,,854,854,,,,228,228',
'228,854,228,854,854,854,228,228,,,,228,,228,228,228,228,228,228,228',
',,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228',
'228,228,228,,228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228',
',,228,,,228,228,,,228,,,,,,228,,,,,,,,,228,,,,,228,228,228,228,,228',
'228,228,228,,,,,228,228,,,,231,231,231,228,231,228,228,228,231,231,',
',,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231',
',,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,,231',
'231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231',
',,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231,,,,232',
'232,232,231,232,231,231,231,232,232,,,,232,,232,232,232,232,232,232',
'232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232',
'232,232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,',
',232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232,232',
',232,232,232,232,,,,,232,232,,,,233,233,233,232,233,232,232,232,233',
'233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233',
'233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,',
'233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,',
',,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233,',
',,234,234,234,233,234,233,233,233,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,',
',,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234',
'234,,234,234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,236,236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,',
',,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,',
',,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,263,263,263,256,263,256,256,256',
'263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263',
'263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,263',
'263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263',
',263,,263,,263,,,263,,,,,,263,,,,,263,263,263,263,,263,263,263,263,',
',,,263,263,,,,264,264,264,263,264,263,263,263,264,264,,,,264,,264,264',
'264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264',
',,264,264,264,264,264,264,264,264,264,264,264,264,,264,264,264,264,264',
',,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264,,264,,,264,,',
',,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264,,,,272,272,272',
'264,272,264,264,264,272,272,,,,272,,272,272,272,272,272,272,272,,,,',
',272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272',
'272,272,272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272',
',,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272,272',
'272,,272,272,272,272,,,,,272,272,272,,,837,837,837,272,837,272,272,272',
'837,837,,,,837,,837,837,837,837,837,837,837,,,,,,837,837,837,837,837',
'837,837,,,837,,,,,,,837,,,837,837,837,837,837,837,837,837,,837,837,837',
',837,837,837,837,837,,,,,,,,,,,,,,,,,,,,837,,,837,,,837,837,,,837,,837',
',,,837,,,,,,,,,837,,,,,837,837,837,837,,837,837,837,837,,,,,837,837',
',,,279,279,279,837,279,837,837,837,279,279,,,,279,,279,279,279,279,279',
'279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279',
'279,279,279,279,279,,279,279,279,,279,279,279,279,279,,,,,,,,,,,,,,',
',,,,,279,,,279,,,279,279,,,279,,,,,,279,,,,,,,,,279,,,,,279,279,279',
'279,,279,279,279,279,,,,,279,279,,,,281,281,281,279,281,279,279,279',
'281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',,,283,283,283,281,283,281,281,281,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283',
'283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,,,,,,,,,',
',,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283,283',
'283,,283,283,283,283,,,,,283,283,,,,284,284,284,283,284,283,283,283',
'284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284,284,284',
'284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284,284,284',
',284,284,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,,284,,',
',,,284,,,,,,,,,284,,,,,284,284,284,284,,284,284,284,284,,,,,284,284',
',,,,,,284,,284,284,284,289,289,289,289,289,,,,289,289,,,,289,,289,289',
'289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,289',
'289,,289,289,289,289,289,289,289,289,289,,289,289,289,,289,289,289,289',
'289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,,,289,,,,,,,',
',289,,,,,289,289,289,289,,289,289,289,289,,,,,289,289,,,,832,832,832',
'289,832,289,289,289,832,832,,,,832,,832,832,832,832,832,832,832,,,,',
',832,832,832,832,832,832,832,,,832,,,,,,,832,,,832,832,832,832,832,832',
'832,832,,832,832,832,,832,832,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832',
',,832,832,,,832,,,,,,832,,,,,,,,,832,,,,,832,832,832,832,,832,832,832',
'832,,,,,832,832,,,,783,783,783,832,783,832,832,832,783,783,,,,783,,783',
'783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,',
',783,,,783,783,783,783,783,783,783,783,,783,783,783,,783,783,,,783,',
',,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,,,,,,,,,,,,,,,783,783',
'783,783,,783,783,783,783,,,,,783,783,,,,771,771,771,783,771,783,783',
'783,771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771',
'771,771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771',
'771,,771,771,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771',
',,,,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771,771,,,,,771,771',
',,,297,297,297,771,297,771,771,771,297,297,,,,297,,297,297,297,297,297',
'297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,,297,,,297,297,297',
'297,297,297,297,297,,297,297,297,,297,297,,,297,,,,,,,,,,,,,,,,,,,,297',
',,297,,,297,297,,,297,,,892,,892,892,892,892,892,,,,,,,,,892,,297,297',
'297,297,,297,297,297,297,,,,,297,297,,,,297,,892,297,,297,297,297,769',
'769,769,,769,892,892,,769,769,892,,,769,,769,769,769,769,769,769,769',
',,,,,769,769,769,769,769,769,769,,,769,,,,,,,769,,,769,769,769,769,769',
'769,769,769,,769,769,769,,769,769,769,769,769,,,,,,,,,,,,,,,,,,,,769',
',,769,,,769,769,,,769,,,,,,769,,,,,,,,,769,,,,,769,769,769,769,,769',
'769,769,769,,,,,769,769,,,,768,768,768,769,768,769,769,769,768,768,',
',,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768',
',,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,,768',
'768,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768',
',,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768,,,,767',
'767,767,768,767,768,768,768,767,767,,,,767,,767,767,767,767,767,767',
'767,,,,,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767,767',
'767,767,767,767,,767,767,767,,767,767,767,767,767,,,,,,,,,,,,,,,,,,',
',767,,,767,,,767,767,,,767,,,,,,767,,,,,,,,,767,,,,,767,767,767,767',
',767,767,767,767,,,,,767,767,,,,766,766,766,767,766,767,767,767,766',
'766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766,766,766,766,766',
'766,,,766,,,,,,,766,,,766,766,766,766,766,766,766,766,,766,766,766,',
'766,766,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766,,,',
',,766,,,,,,,,,766,,,,,766,766,766,766,,766,766,766,766,,,,,766,766,',
',,314,314,314,766,314,766,766,766,314,314,,,,314,,314,314,314,314,314',
'314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314',
'314,314,314,314,314,,314,314,314,,314,314,,,314,,,,,,,,,,,,,,,,,,,,314',
',,314,,,314,314,,,314,,,,,,,,,,,,,,,,,,,,314,314,314,314,,314,314,314',
'314,,,,,314,314,,,,752,752,752,314,752,314,314,314,752,752,,,,752,,752',
'752,752,752,752,752,752,,,,,,752,752,752,752,752,752,752,,,752,,,,,',
',752,,,752,752,752,752,752,752,752,752,,752,752,752,,752,752,752,752',
'752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,,,,,752,,,,,,,,,752',
',,,,752,752,752,752,,752,752,752,752,,,,,752,752,,,,322,322,322,752',
'322,752,752,752,322,322,,,,322,,322,322,322,322,322,322,322,,,,,,322',
'322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322,322,322',
'322,,322,322,322,,322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,322',
',322,322,,,322,,,,,,322,,,,,,,,,322,,,,,322,322,322,322,,322,322,322',
'322,,,,,322,322,,,,324,324,324,322,324,322,322,322,324,324,,,,324,,324',
'324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,',
',324,,,324,324,324,324,324,324,324,324,,324,324,324,,324,324,324,324',
'324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324,,,,,,,,,324',
',,,,324,324,324,324,,324,324,324,324,,,,,324,324,,,,750,750,750,324',
'750,324,324,324,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750',
'750,750,750,750,750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750',
'750,,750,750,750,,750,750,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,',
',750,750,,,750,,,,,,750,,,,,,,,,750,,,,,750,750,750,750,,750,750,750',
'750,,,,,750,750,,,,727,727,727,750,727,750,750,750,727,727,,,,727,,727',
'727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727,,,727,,,,,',
',727,,,727,727,727,727,727,727,727,727,,727,727,727,,727,727,727,727',
'727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727,,,,,,,,,727',
',,,,727,727,727,727,,727,727,727,727,,,,,727,727,,,,721,721,721,727',
'721,727,727,727,721,721,,,,721,,721,721,721,721,721,721,721,,,,,,721',
'721,721,721,721,721,721,,,721,,,,,,,721,,,721,721,721,721,721,721,721',
'721,,721,721,721,,721,721,721,721,721,,,,,,,,,,,,,,,,,,,,721,,,721,',
',721,721,,,721,,,,,,721,,,,,,,,,721,,,,,721,721,721,721,,721,721,721',
'721,,,,,721,721,,,,339,339,339,721,339,721,721,721,339,339,,,,339,,339',
'339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,,,339,,,,,',
',339,,,339,339,339,339,339,339,339,339,,339,339,339,,339,339,339,339',
'339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,339,,,339,,,,,,339,,,,,,,,,339',
',,,,339,339,339,339,,339,339,339,339,,,,,339,339,,,,340,340,340,339',
'340,339,339,339,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340',
'340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340,340',
'340,,340,340,340,,340,340,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,',
',340,340,,,340,,,,,,340,,,,,,,,,340,,,,,340,340,340,340,,340,340,340',
'340,,,,,340,340,,,,695,695,695,340,695,340,340,340,695,695,,,,695,,695',
'695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,',
',695,,,695,695,695,695,695,695,695,695,,695,695,695,,695,695,695,695',
'695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,695,,,,,,,,,695',
',,,,695,695,695,695,,695,695,695,695,,,,,695,695,,,,359,359,359,695',
'359,695,695,695,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359',
'359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359,359,359,359,359',
'359,,359,359,359,,359,359,359,359,359,,,,,,,,,,,,,,,,,,,,359,,,359,',
',359,359,,,359,,,,,,359,,,,,,,,,359,,,,,359,359,359,359,,359,359,359',
'359,,,,,359,359,,,,678,678,678,359,678,359,359,359,678,678,,,,678,,678',
'678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,',
',678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,678,678',
'678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,678,,,,678,,,,,,,',
',678,,,,,678,678,678,678,,678,678,678,678,,,,,678,678,,,,673,673,673',
'678,673,678,678,678,673,673,,,,673,,673,673,673,673,673,673,673,,,,',
',673,673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673',
'673,673,,673,673,673,,673,673,,,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673',
'673,,,673,,,,,,,,,,,,,,,,,,,,673,673,673,673,,673,673,673,673,,,,,673',
'673,,,,662,662,662,673,662,673,673,673,662,662,,,,662,,662,662,662,662',
'662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662',
'662,662,662,662,662,662,,662,662,662,,662,662,,,662,,,,,,,,,,,,,,,,',
',,,662,,,662,,,662,662,,,662,,,,,,,,,,,,,,,,,,,,662,662,662,662,,662',
'662,662,662,,,,,662,662,,,,656,656,656,662,656,662,662,662,656,656,',
',,656,,656,656,656,656,656,656,656,,,,,,656,656,656,656,656,656,656',
',,656,,,,,,,656,,,656,656,656,656,656,656,656,656,,656,656,656,,656',
'656,656,656,656,,,,,,,,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,,,,,656',
',,,,,,,,656,,,,,656,656,656,656,,656,656,656,656,,,,,656,656,,,,375',
'375,375,656,375,656,656,656,375,375,,,,375,,375,375,375,375,375,375',
'375,,,,,,375,375,375,375,375,375,375,,,375,,,,,,,375,,,375,375,375,375',
'375,375,375,375,,375,375,375,,375,375,375,375,375,,,,,,,,,,,,,,,,,,',
',375,,,375,,,375,375,,,375,,,,,,375,,,,,,,,,375,,,,,375,375,375,375',
',375,375,375,375,,,,,375,375,,,,403,403,403,375,403,375,375,375,403',
'403,,,,403,,403,403,403,403,403,403,403,,,,,,403,403,403,403,403,403',
'403,,,403,,,,,,,403,,,403,403,403,403,403,403,403,403,,403,403,403,',
'403,403,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,,403,,,',
',,403,,,,,,,,,403,,,,,403,403,403,403,,403,403,403,403,,,,,403,403,',
',,632,632,632,403,632,403,403,403,632,632,,,,632,,632,632,632,632,632',
'632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632',
'632,632,632,632,632,,632,632,632,,632,632,632,632,632,,,,,,,,,,,,,,',
',,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,,632,,,,,632,632,632',
'632,,632,632,632,632,,,,,632,632,,,,441,441,441,632,441,632,632,632',
'441,441,,,,441,,441,441,441,441,441,441,441,,,,,,441,441,441,441,441',
'441,441,,,441,,,,,,,441,,,441,441,441,441,441,441,441,441,441,441,441',
'441,,441,441,441,441,441,,,,,,,,,,,,,,,,,,,,441,,,441,,,441,441,,,441',
',441,,441,,441,,,441,,,,,,441,,,,,441,441,441,441,,441,441,441,441,',
',,,441,441,,,,443,443,443,441,443,441,441,441,443,443,,,,443,,443,443',
'443,443,443,443,443,,,,,,443,443,443,443,443,443,443,,,443,,,,,,,443',
',,443,443,443,443,443,443,443,443,,443,443,443,,443,443,443,443,443',
',,,,,,,,,,,,,,,,,,,443,,,443,,,443,443,,,443,,,,,,443,,,,,,,,,443,,',
',,443,443,443,443,,443,443,443,443,,,,,443,443,,,,444,444,444,443,444',
'443,443,443,444,444,,,,444,,444,444,444,444,444,444,444,,,,,,444,444',
'444,444,444,444,444,,,444,,,,,,,444,,,444,444,444,444,444,444,444,444',
',444,444,444,,444,444,444,444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444',
'444,,,444,,,,,,444,,,,,,,,,444,,,,,444,444,444,444,,444,444,444,444',
',,,,444,444,,,,445,445,445,444,445,444,444,444,445,445,,,,445,,445,445',
'445,445,445,445,445,,,,,,445,445,445,445,445,445,445,,,445,,,,,,,445',
',,445,445,445,445,445,445,445,445,,445,445,445,,445,445,445,445,445',
',,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,,,,,445,,,,,,,,,445,,',
',,445,445,445,445,,445,445,445,445,,,,,445,445,,,,631,631,631,445,631',
'445,445,445,631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631',
'631,631,631,631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631',
',631,631,631,,631,631,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631',
'631,,,631,,,,,,631,,,,,,,,,631,,,,,631,631,631,631,,631,631,631,631',
',,,,631,631,,,,628,628,628,631,628,631,631,631,628,628,,,,628,,628,628',
'628,628,628,628,628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628',
',,628,628,628,628,628,628,628,628,,628,628,628,,628,628,628,628,628',
',,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,,628,,,,,,628,,,,,,,,,628,,',
',,628,628,628,628,,628,628,628,628,,,,,628,628,,,,627,627,627,628,627',
'628,628,628,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627',
'627,627,627,627,627,,,627,,,,,,,627,,,627,627,627,627,627,627,627,627',
',627,627,627,,627,627,627,627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627',
'627,,,627,,,,,,627,,,,,,,,,627,,,,,627,627,627,627,,627,627,627,627',
',,,,627,627,,,,623,623,623,627,623,627,627,627,623,623,,,,623,,623,623',
'623,623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623',
',,623,623,623,623,623,623,623,623,,623,623,623,,623,623,623,623,623',
',,,,,,,,,,,,,,,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,,623,,',
',,623,623,623,623,,623,623,623,623,,,,,623,623,,,,622,622,622,623,622',
'623,623,623,622,622,,,,622,,622,622,622,622,622,622,622,,,,,,622,622',
'622,622,622,622,622,,,622,,,,,,,622,,,622,622,622,622,622,622,622,622',
',622,622,622,,622,622,622,622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622',
'622,,,622,,,,,,622,,,,,,,,,622,,,,,622,622,622,622,,622,622,622,622',
',,,,622,622,,,,621,621,621,622,621,622,622,622,621,621,,,,621,,621,621',
'621,621,621,621,621,,,,,,621,621,621,621,621,621,621,,,621,,,,,,,621',
',,621,621,621,621,621,621,621,621,621,621,621,621,,621,621,621,621,621',
',,,,,,,,,,,,,,,,,,,621,,,621,,,621,621,,,621,,,,621,,621,,,621,,,,,',
'621,,,,,621,621,621,621,,621,621,621,621,,,,,621,621,,,,620,620,620',
'621,620,621,621,621,620,620,,,,620,,620,620,620,620,620,620,620,,,,',
',620,620,620,620,620,620,620,,,620,,,,,,,620,,,620,620,620,620,620,620',
'620,620,620,620,620,620,,620,620,620,620,620,,,,,,,,,,,,,,,,,,,,620',
',,620,,,620,620,,,620,,620,,620,,620,,,620,,,,,,620,,,,,620,620,620',
'620,,620,620,620,620,,,,,620,620,,,,617,617,617,620,617,620,620,620',
'617,617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617',
'617,617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617',
',617,617,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,',
',,,617,,,,,,,,,617,,,,,617,617,617,617,,617,617,617,617,,,,,617,617',
',,,616,616,616,617,616,617,617,617,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616,616,616',
'616,616,616,616,616,,616,616,616,,616,616,616,616,616,,,,,,,,,,,,,,',
',,,,,616,,,616,,,616,616,,,616,,616,,,,616,,,,,,,,,616,,,,,616,616,616',
'616,,616,616,616,616,,,,,616,616,,,,582,582,582,616,582,616,616,616',
'582,582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582',
'582,582,,,582,,,,,,,582,,,582,582,582,582,582,582,582,582,582,582,582',
'582,,582,582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582',
',582,,582,,582,,,582,,,,,,582,,,,,582,582,582,582,,582,582,582,582,',
',,,582,582,,,,572,572,572,582,572,582,582,582,572,572,,,,572,,572,572',
'572,572,572,572,572,,,,,,572,572,572,572,572,572,572,,,572,,,,,,,572',
',,572,572,572,572,572,572,572,572,572,572,572,572,,572,572,572,572,572',
',,,,,,,,,,,,,,,,,,,572,,,572,,,572,572,,,572,,572,,572,,572,,,572,,',
',,,572,,,,,572,572,572,572,,572,572,572,572,,,,,572,572,,,,571,571,571',
'572,571,572,572,572,571,571,,,,571,,571,571,571,571,571,571,571,,,,',
',571,571,571,571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571',
'571,571,,571,571,571,,571,571,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571',
',,571,571,,,571,,571,,,,571,,,,,,,,,571,,,,,571,571,571,571,,571,571',
'571,571,,,,,571,571,,,,551,551,551,571,551,571,571,571,551,551,,,,551',
',551,551,551,551,551,551,551,,,,,,551,551,551,551,551,551,551,,,551',
',,,,,,551,,,551,551,551,551,551,551,551,551,,551,551,551,,551,551,551',
'551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,,,,,,551,,,,,,',
',,551,,,,,551,551,551,551,,551,551,551,551,,,,,551,551,,,,527,527,527',
'551,527,551,551,551,527,527,,,,527,,527,527,527,527,527,527,527,,,,',
',527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527',
'527,527,527,527,527,527,,527,527,527,527,527,,,,,,,,,,,,,,,,,,,,527',
',,527,,,527,527,,,527,,,,,,527,,,527,,,,,,527,,,,,527,527,527,527,,527',
'527,527,527,,,,,527,527,,,,485,485,485,527,485,527,527,527,485,485,',
',,485,,485,485,485,485,485,485,485,,,,,,485,485,485,485,485,485,485',
',,485,,,,,,,485,,,485,485,485,485,485,485,485,485,485,485,485,485,,485',
'485,485,485,485,,,,,,,,,,,,,,,,,,,,485,,,485,,,485,485,,,485,,485,,485',
',485,,,485,,,,,,485,,,,,485,485,485,485,,485,485,485,485,,,,,485,485',
',,,487,487,487,485,487,485,485,485,487,487,,,,487,,487,487,487,487,487',
'487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487,487',
'487,487,487,487,487,487,487,487,487,,487,487,487,487,487,,,,,,,,,,,',
',,,,,,,,487,,,487,,,487,487,,,487,,,,487,,487,,,487,,,,,,487,,,,,487',
'487,487,487,,487,487,487,487,,,,,487,487,,,,489,489,489,487,489,487',
'487,487,489,489,,,,489,,489,489,489,489,489,489,489,,,,,,489,489,489',
'489,489,489,489,,,489,,,,,,,489,,,489,489,489,489,489,489,489,489,,489',
'489,489,,489,489,489,489,489,,,,,,,,,,,,,,,,,,,,489,,,489,,,489,489',
',,489,,,,,,489,,,,,,,,,489,,,,,489,489,489,489,,489,489,489,489,,,,',
'489,489,,,,,,,489,,489,489,489,494,494,494,494,494,,,,494,494,,,,494',
',494,494,494,494,494,494,494,,,,,,494,494,494,494,494,494,494,,,494',
',,,,,494,494,494,494,494,494,494,494,494,494,494,494,,494,494,494,,494',
'494,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494,,494,,',
',494,,,,,,,,,494,,,,,494,494,494,494,,494,494,494,494,,,,,494,494,,',
',,,494,494,,494,494,494,524,524,524,,524,,,,524,524,,,,524,,524,524',
'524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524',
',,524,524,524,524,524,524,524,524,524,524,524,524,,524,524,524,524,524',
',,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,,,524,,,524,,,,,',
'524,,,,,524,524,524,524,,524,524,524,524,,,,,524,524,,,,518,518,518',
'524,518,524,524,524,518,518,,,,518,,518,518,518,518,518,518,518,,,,',
',518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518',
'518,518,,518,518,518,,518,518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518',
',,518,518,,,518,,,,,,518,,,,,,,,,518,,,,,518,518,518,518,,518,518,518',
'518,,,,,518,518,,,,502,502,502,518,502,518,518,518,502,502,,,,502,,502',
'502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,',
',502,,,502,502,502,502,502,502,502,502,,502,502,502,,502,502,,,502,',
',,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,,,,,,,,,,,,,,,502,502',
'502,502,,502,502,502,502,,,,,502,502,,,,504,504,504,502,504,502,502',
'502,504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504',
'504,504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504,504,504',
'504,504,,504,504,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504',
',,504,,504,,504,,504,,,504,,,,,,504,,,,,504,504,504,504,,504,504,504',
'504,,,,,504,504,,,,513,513,513,504,513,504,504,504,513,513,,,,513,,513',
'513,513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,',
',513,,,513,513,513,513,513,513,513,513,,513,513,513,,513,513,513,513',
'513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,,,,,513,,,,,,,,,513',
',,,,513,513,513,513,,513,513,513,513,,,,,513,513,,,,,423,,513,,513,513',
'513,423,423,423,,,423,423,423,,423,,,,,,,,,423,423,423,423,,,,,,,,423',
'423,,423,423,423,423,423,,,,,,,,,,,,,,,,,,,,,,,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,,,423,423,423,,,423,,,423,,,423,423',
',423,,423,,423,,423,423,,423,423,423,423,423,,423,423,423,,,,,,,,,,',
',,,423,,,423,423,423,423,56,423,,423,,,,56,56,56,,,56,56,56,,56,,,,',
',,,,,56,56,56,,,,,,,,56,56,,56,56,56,56,56,,,,,,,,,,,,,,,,,,,,,,,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56,56',
',56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56,56',
'56,424,56,,56,,,,424,424,424,,,424,424,424,,424,,,,,,,,,424,424,424',
'424,,,,,,,,424,424,,424,424,424,424,424,,,,,,,,,,,,,,,,,,,,,,,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,,,424,424,424,,,424',
',,424,,,424,424,,424,,424,,424,,424,424,,424,424,424,424,424,,424,424',
'424,894,,894,894,894,894,894,,,,,,,424,,894,424,424,424,424,27,424,',
'424,,,,27,27,27,,,27,27,27,,27,894,,,,,,,,27,27,27,894,894,,,,894,,',
'27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27',
'27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27',
',27,27,27,27,27,28,27,27,27,,,,28,28,28,,,28,28,28,,28,27,,,27,27,,27',
',27,28,28,,,,,,,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,',
'28,,28,,28,,28,28,,28,28,28,28,28,,28,473,28,,,,,,473,473,473,,,473',
'473,473,28,473,,28,28,,28,,28,,473,473,,,,,,,,,,473,473,,473,473,473',
'473,473,,,,,,,,,,,,,,,,,,643,,643,643,643,643,643,,,,,,,,,643,473,,414',
',,,,473,,414,414,414,473,473,414,414,414,,414,,,643,,,,,,414,414,414',
'643,643,643,643,,473,473,643,414,414,,414,414,414,414,414,,,,,473,,',
'473,,,,,473,,,,,643,,,,,414,414,414,414,414,414,414,414,414,414,414',
'414,414,414,,,414,414,414,,,414,,414,414,,,414,414,,414,,414,,414,,414',
'414,,414,414,414,414,414,,414,414,414,,,,,,,,,,,,,,414,,,414,414,,414',
',414,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8',
'8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8',
',,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,',
',,,,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9',
'9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,',
',,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,',
',,,9,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,394,,,,394,394,394,394,394,394,394,394,394',
'394,,,,,,394,394,394,394,394,394,394,394,394,,,394,,,,,,,,394,394,,394',
'394,394,394,394,394,394,,,394,394,,,,394,394,394,394,,,,,,,,,,,,,,394',
'394,,394,394,394,394,394,394,394,394,394,394,394,394,,,394,394,,,,,',
',,,,,,,,394,613,613,613,613,613,613,613,613,613,613,613,613,613,613',
'613,613,613,613,613,613,613,613,613,613,,,,613,613,613,613,613,613,613',
'613,613,613,,,,,,613,613,613,613,613,613,613,613,613,,,613,,,,,,,,613',
'613,,613,613,613,613,613,613,613,,,613,613,,,,613,613,613,613,,,,,,',
',,,,,,,613,613,,613,613,613,613,613,613,613,613,613,613,613,613,,,613',
'613,,,,,,,,,,,,,,613,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,',
',71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71',
'71,71,71,71,,,71,734,734,734,734,734,734,734,734,734,734,734,734,734',
'734,734,734,734,734,734,734,734,734,734,734,,,,734,734,734,734,734,734',
'734,734,734,734,,,,,,734,734,734,734,734,734,734,734,734,,,734,,,,,',
',,734,734,,734,734,734,734,734,734,734,,,734,734,,,,734,734,734,734',
',,,,,,,,,,,,,734,734,,734,734,734,734,734,734,734,734,734,734,734,734',
'506,506,734,,506,,,,,,,,506,506,,506,506,506,506,506,506,506,,,506,506',
',,,506,506,506,506,,,,,,506,,,,,,,,506,506,,506,506,506,506,506,506',
'506,506,506,506,506,506,439,439,506,,439,,,,,,,,439,439,,439,439,439',
'439,439,439,439,,,439,439,,,,439,439,439,439,,,,,,439,,,,,,,,439,439',
',439,439,439,439,439,439,439,439,439,439,439,439,979,979,439,,979,,',
',,,,,979,979,,979,979,979,979,979,979,979,,,979,979,,,,979,979,979,979',
',,,,,979,,,,,,,,979,979,,979,979,979,979,979,979,979,979,979,979,979',
'979,515,515,979,,515,,,,,,,,515,515,,515,515,515,515,515,515,515,,,515',
'515,,,,515,515,515,515,,,,,,515,,,,,,,,515,515,,515,515,515,515,515',
'515,515,515,515,515,515,515,581,581,515,,581,,,,,,,,581,581,,581,581',
'581,581,581,581,581,,,581,581,,,,581,581,581,581,,,,,,581,,,,,,,,581',
'581,,581,581,581,581,581,581,581,581,581,581,581,581,580,580,581,,580',
',,,,,,,580,580,,580,580,580,580,580,580,580,,,580,580,,,,580,580,580',
'580,,,,,,580,,,,,,,,580,580,,580,580,580,580,580,580,580,580,580,580',
'580,580,933,933,580,,933,,,,,,,,933,933,,933,933,933,933,933,933,933',
',,933,933,,,,933,933,933,933,,,,,,933,,,,,,,,933,933,,933,933,933,933',
'933,933,933,933,933,933,933,933,210,210,933,,210,,,,,,,,210,210,,210',
'210,210,210,210,210,210,,,210,210,,,,210,210,210,210,,,,,,210,,,,,,',
',210,210,,210,210,210,210,210,210,210,210,210,210,210,210,440,440,210',
',440,,,,,,,,440,440,,440,440,440,440,440,440,440,,,440,440,,,,440,440',
'440,440,,,,,,440,,,,,,,,440,440,,440,440,440,440,440,440,440,440,440',
'440,440,440,259,259,440,,259,,,,,,,,259,259,,259,259,259,259,259,259',
'259,,,259,259,,,,259,259,259,259,,,,,,,,,,,,,,259,259,,259,259,259,259',
'259,259,259,259,259,259,259,259,574,574,259,,574,,,,,,,,574,574,,574',
'574,574,574,574,574,574,,,574,574,,,,574,574,574,574,,,,,,574,,,,,,',
',574,574,,574,574,574,574,574,574,574,574,574,574,574,574,516,516,574',
',516,,,,,,,,516,516,,516,516,516,516,516,516,516,,,516,516,,,,516,516',
'516,516,,,,,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516',
'516,516,516,573,573,516,,573,,,,,,,,573,573,,573,573,573,573,573,573',
'573,,,573,573,,,,573,573,573,573,,,,,,573,,,,,,,,573,573,,573,573,573',
'573,573,573,573,573,573,573,573,573,211,211,573,,211,,,,,,,,211,211',
',211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211,',
',,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,211,980,980',
'211,,980,,,,,,,,980,980,,980,980,980,980,980,980,980,,,980,980,,,,980',
'980,980,980,,,,,,980,,,,,,,,980,980,,980,980,980,980,980,980,980,980',
'980,980,980,980,505,505,980,,505,,,,,,,,505,505,,505,505,505,505,505',
'505,505,,,505,505,,,,505,505,505,505,,,,,,505,,,,,,,,505,505,,505,505',
'505,505,505,505,505,505,505,505,505,505,,888,505,888,888,888,888,888',
',,,,,,,335,888,335,335,335,335,335,,,,,,,,532,335,532,532,532,532,532',
',,888,,,,,,532,,,888,888,888,888,,335,335,888,,,,,,,335,335,335,335',
',532,,335,,,,,,,532,532,532,532,,,689,532,689,689,689,689,689,,691,',
'691,691,691,691,691,689,,,,,,,,691,,732,,732,732,732,732,732,,,,,,689',
',,732,,,,,691,689,689,689,689,,,,689,691,691,691,691,,,,691,732,,733',
',733,733,733,733,733,732,732,732,732,,,,732,733,,860,,860,860,860,860',
'860,,862,,862,862,862,862,862,860,,,,,733,,,862,,,,,,733,733,733,733',
',,,733,860,,,,,,,,862,860,860,860,860,,,,860,862,862,862,862,,,964,862',
'964,964,964,964,964,966,,966,966,966,966,966,968,964,968,968,968,968',
'968,970,966,970,970,970,970,970,984,968,984,984,984,984,984,,970,964',
',,,,,984,966,,964,964,964,964,,968,,964,,966,966,,970,,966,,968,968',
',984,,968,,970,970,,,,970,,984,984,,,1010,984,1010,1010,1010,1010,1010',
',,,,,,,,1010,,,,,,,,,,,,,,,,,,,,,,1010,,,,,,,,,,,1010,1010,,,,1010' ]
        racc_action_check = arr = ::Array.new(24831, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3683,   920,   nil,   184,   nil,  5213,  1568,   536, 22762, 22890,
   807,   nil,   770,   824,   815,   696,   732,   646,   nil,   -71,
  5475,  1863,   800,   nil,   307,   nil,   247, 22327, 22437,  5606,
  5737,  5868,   nil,  2563,  5999,  6130,   nil,   525,   105,   737,
   545,   169,  6269,  6400,  6531,   461,  1065,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22059,   nil,   -66,  6793,
  6924,    -8,   nil,  7055,  7186,   nil,   nil,  7317,  7456,  7587,
  7718, 23274,   nil,   nil,   nil,   nil,   nil,   373,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   110,   nil,   nil,   330,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   589,
   nil,  7857,   nil,   nil,   nil,   nil,  7996,  8127,  8258,  8389,
  8528,  2703,   nil,   -27,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   394,   nil,  2983,  8790,  8921,  9052,
 23875, 24241,  9183,  9314,  9445,  9576,  9707,  9838,   nil,   nil,
  1095,   193,   125,   449,   109,   357,   324,   nil, 10231,  2843,
   260, 10362, 10493, 10624, 10755, 10886, 11017, 11148, 11279, 11410,
 11541, 11672, 11803, 11934, 12065, 12196, 12327, 12458, 12589, 12720,
 12851, 12982, 13113, 13244, 13375, 13506, 13637,   nil,   nil, 23997,
   nil,   nil,   215, 13768, 13899,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 14030,   nil,  2003,   nil,   168,   152,   nil, 14292,
   184, 14423,   nil, 14554, 14685,   nil,   nil,   310,   nil, 14824,
  1443,  1318,  1286,  3823,  1277,  1307,  1196, 15348,  3263,   955,
   925,   886,  1272,  1205,   nil,  1228,  1186,   228,   nil,   nil,
   nil,  1226,   313,  1178, 16011,   nil,   219,  1244,  1026,   nil,
  1231,   nil, 16273,  3123, 16404,  1166,   nil,   232,   516,  1194,
  1164,   102,  1188,   nil,   nil, 24439,   357,    79,    33, 16928,
 17059,   -50,  1251,  1127,    -5,    65,   477,  1198,     9,  1195,
   nil,   nil,   406,   365,    -2,   nil,   438,   nil,     9, 17321,
   nil,   nil,   nil,   622,   508,   504,   392,   338,   264,   196,
   637,   755,   nil,   -19,   nil, 17976,   nil,   404,   -30,   631,
   361,   395,   -39,   -25,   399,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1040, 23018,   nil,   nil,   nil,   nil,  1037,
   nil,   nil,  1014, 18107,  1004,   nil,   nil,  1023,  1005,   nil,
   989,   984,   424,   414, 22628,   nil,   nil,   nil,   220,     0,
  1024,   nil,   nil, 21925, 22193,   nil,  2143,   nil,   968,   nil,
   nil,   743,   nil,   nil,   nil,   nil,   -33,   nil,  1014, 23509,
 23936, 18369,   246, 18500, 18631, 18762,  4243,  3963,   279,   492,
   999,   998,   997,   994,  5344,  5055,  5102,  3263,  5213,  4943,
  4803,  4663,  4523,  4383,  4103,  3823,  3683,  3238,  3291,  3543,
  3403,  2283,   175, 22549,   nil,   nil,   nil,   nil,   905,   nil,
   165,   -59,   847,   nil,   nil, 20727,   nil, 20858,   nil, 20989,
   nil,   nil,   nil,   nil, 21128,  1583,  3963,   813,   806,   nil,
   nil,   792, 21529,   794, 21660, 24363, 23448,  1166,   834,   nil,
  5074,   789,   nil, 21791,   602, 23631, 24119,  1723, 21398,   957,
   960,   690,   883,   nil, 21267,   nil,   nil, 20596,   nil,   nil,
   nil,   nil, 24453,   nil,   862,   863,   nil,   864,   875,   874,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   869,  3138,   nil,
   nil, 20465,   nil,   nil,   nil,   962,   nil,   nil,   nil,   966,
   nil,   nil,   979,   883,  1019,   nil,  2283,   148,   147,  1020,
  1028, 20334, 20203, 24180, 24058,    57,   nil,   nil,   341,   nil,
 23753, 23692, 20072,   nil,   nil,   nil,   321,   233,  2423,   958,
   nil,    18,   nil,   nil,   nil,   726,   nil,   nil,   nil,   930,
   nil,   nil,   261,   nil,   255,   nil,   nil,   916,   nil,   917,
   nil,   nil,   nil, 23146,   nil,   926, 19941, 19810,   734,   968,
 19679, 19548, 19417, 19286,   983,   nil,   nil, 19155, 19024,   987,
   nil, 18893, 18238,   nil,   nil,   113,   140,   466,   602,   997,
   883,  1004,   nil, 22559,   nil,  1023,  1121,   -13,   -47,   nil,
  1163,  1303,   nil,  1022,   nil,  1069, 17845,   nil,   nil,   nil,
  1044,  -113, 17714,  1027,   nil,  1040,   134,   135,  1082,   299,
  1303,  1086,  1043, 17583,  1303,  1111,    24,  1173, 17452,   nil,
  1059,   nil,   122,   -22,  1060,   791,   nil,   nil,   413, 24505,
   nil, 24513,   nil,  5121,   nil, 17190,   nil,  3203,   nil,  1072,
   529,  1093,   nil,   nil,   nil,   nil,   737,   nil,  1230,   nil,
   nil,   nil,   nil,  1240,   nil,    10,  1127,    68,   -19,    32,
    -1, 16797,   223,  1163,   nil,  1146,  1443, 16666,   nil,   nil,
  1278,  1583, 24530, 24569, 23387,   nil,   nil,   nil,   nil,   nil,
   nil,  4243,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1162,
 16535,  1163, 16142,   nil,  1167,   nil,  2983,   nil,  2843,   nil,
   nil,  2703,   nil,  2563,   nil,  2423, 15880, 15749, 15618, 15487,
   278, 15217,  1197,  1198,   nil,  1206,  1212,  1226,   nil,  1254,
  1254,  1254,  1252, 15086,   nil,   nil,  1393,   nil,   nil,  3403,
  1302,  1407,   nil,   nil,   nil,  1284,   404,   nil,   nil,  1420,
   nil,  4523,  1300,  1348,   nil,   nil,  1346,   nil,   nil,   nil,
   nil,  1347,  1307,   nil,   nil,   nil,  -132,  -122,   nil,   -86,
   -76,   nil,    24,   nil,   nil,    75,  3109,    89,  3623,   nil,
   235,   nil, 14955,   249,   743,  1723,   nil, 14161,  1863,    39,
    25,   nil,   369,    72,  3543,   nil,   418,   342,  -101,   nil,
   357,   363,   nil,  1443, 10100,  9969,  1583,   916,   nil,   nil,
 24586,   nil, 24594,   nil,  6177,   nil,   nil,   458,  1149,  8659,
  1443,   521,   nil,   474,   nil,   nil,   nil,  2003,   nil,   nil,
    32,  6662,   nil,   nil,  4383,  2143,   nil,   nil, 24425,   nil,
  7765,   nil, 15395,   nil, 22256,   nil,   nil,   nil,   nil,   393,
  3529,   568,   nil,    26,   nil,   707,   719,   nil,   454,   nil,
   nil,   nil,   727,   nil,   nil,   nil,   678,   nil,   636,   nil,
   nil,   637,   638,   666,   670,   nil,   691,   nil,   384,   nil,
   nil,   nil,   675, 23814,   nil,   nil,   nil,  4943,  1235,  1306,
  1345,   775,  1375,   nil,   720,   827,   709,   722,   723,   729,
   735,  3148,   736,  3483,  4803,   nil,   nil,   nil,   nil,   nil,
  4663,   nil,  4103,   nil, 24646,   nil, 24653,   nil, 24660,   nil,
 24667,   nil,   nil,   nil,  1289,   808,   818,   902,  5344, 23570,
 24302,   883,   nil,   nil, 24674,   nil,   nil,   nil,   nil,  3389,
   854,   613,  1182,  1190,  1157,  1160,   413,   418,   nil,   nil,
   433,   -10,    36,    40,  1023,   744,   747,   nil,   nil,   nil,
 24726,   nil,   nil,   nil,   nil,    34,   nil,   763,   nil ]

racc_action_default = [
    -3,  -595,    -1,  -581,    -4,  -595,    -7,  -595,  -595,  -595,
  -595,   -29,  -595,  -595,  -595,  -279,  -595,   -40,   -43,  -583,
  -595,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -328,  -329,   -68,   -11,   -72,   -80,   -82,  -595,  -488,  -489,
  -595,  -595,  -595,  -595,  -595,  -583,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -571,  -281,  -283,  -594,
  -562,  -301,  -389,  -595,  -595,  -306,  -309,  -581,  -595,  -595,
  -595,  -595,  -330,  -331,  -429,  -430,  -431,  -432,  -433,  -454,
  -436,  -437,  -456,  -458,  -441,  -446,  -450,  -452,  -468,  -456,
  -470,  -472,  -473,  -474,  -475,  -569,  -477,  -478,  -570,  -480,
  -481,  -482,  -483,  -484,  -485,  -486,  -487,  -492,  -493,  -595,
    -2,  -582,  -590,  -591,  -592,    -6,  -595,  -595,  -595,  -595,
  -595,    -3,   -17,  -595,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -595,  -595,  -246,
  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -583,  -584,   -47,
  -595,  -488,  -489,  -595,  -279,  -595,  -595,  -229,  -595,   -11,
  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,
  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,
  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -398,  -400,  -595,
  -579,  -580,   -57,  -246,  -595,  -300,  -404,  -413,  -415,   -63,
  -410,   -64,  -583,   -65,  -238,  -251,  -260,  -260,  -255,  -595,
  -261,  -595,  -564,  -595,  -595,   -66,   -67,  -581,   -12,  -595,
   -15,  -595,   -70,   -11,  -583,  -595,   -73,   -76,   -11,   -88,
   -89,  -595,  -595,   -96,  -293,  -296,  -583,  -595,  -328,  -329,
  -332,  -411,  -595,   -78,  -595,   -84,  -290,  -471,  -595,  -214,
  -215,  -230,  -595,   -11,  -595,  -583,  -239,  -587,  -587,  -595,
  -595,  -587,  -595,  -302,  -303,  -521,   -49,  -595,  -595,  -595,
  -595,  -581,  -595,  -582,  -488,  -489,  -595,  -595,  -279,  -595,
  -342,  -343,  -106,  -107,  -595,  -109,  -595,  -279,  -595,  -595,
  -488,  -489,  -321,  -111,  -112,  -153,  -154,  -155,  -171,  -176,
  -183,  -186,  -323,  -595,  -560,  -595,  -434,  -595,  -595,  -595,
  -595,  -595,  -595,  -595,  -595,  1019,    -5,  -593,   -23,   -24,
   -25,   -26,   -27,  -595,  -595,   -19,   -20,   -21,  -121,  -595,
   -30,   -39,  -266,  -595,  -595,  -265,   -31,  -196,  -583,  -247,
  -260,  -260,  -572,  -573,  -256,  -408,  -574,  -575,  -573,  -572,
  -256,  -407,  -409,  -574,  -575,   -37,  -204,   -38,  -595,   -41,
   -42,  -194,  -261,   -44,   -45,   -46,  -583,  -299,  -595,  -595,
  -595,  -246,  -290,  -595,  -595,  -595,  -205,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -231,  -232,  -233,
  -234,  -583,  -378,  -256,  -572,  -573,   -54,   -58,  -583,  -257,
  -378,  -378,  -583,  -295,  -252,  -595,  -253,  -595,  -258,  -595,
  -262,  -567,  -568,   -10,  -582,   -14,    -3,  -583,   -69,  -288,
   -85,   -74,  -595,  -583,  -246,  -595,  -595,   -95,  -595,  -471,
  -595,   -81,   -86,  -595,  -595,  -595,  -595,  -235,  -595,  -421,
  -595,  -284,  -595,  -240,  -589,  -588,  -242,  -589,  -291,  -292,
  -563,  -390,  -521,  -393,  -559,  -559,  -504,  -506,  -506,  -506,
  -520,  -522,  -523,  -524,  -525,  -526,  -527,  -528,  -595,  -530,
  -532,  -534,  -539,  -541,  -542,  -544,  -549,  -551,  -552,  -554,
  -555,  -556,  -595,   -11,  -333,  -334,   -11,  -595,  -595,  -595,
  -595,  -595,  -246,  -595,  -595,  -290,  -314,  -106,  -107,  -108,
  -595,  -595,  -246,  -317,  -494,  -495,  -595,  -595,   -11,  -499,
  -325,  -583,  -435,  -455,  -460,  -595,  -462,  -438,  -457,  -595,
  -459,  -440,  -595,  -443,  -595,  -445,  -448,  -595,  -449,  -595,
  -469,    -8,   -18,  -595,   -28,  -269,  -595,  -595,  -412,  -595,
  -248,  -250,  -595,  -595,   -59,  -245,  -405,  -595,  -595,   -61,
  -406,  -595,  -595,  -298,  -585,  -572,  -573,  -572,  -573,  -583,
  -194,  -595,  -379,  -583,  -381,   -11,   -53,  -401,  -378,  -243,
   -11,   -11,  -294,  -260,  -259,  -263,  -595,  -565,  -566,   -13,
  -595,   -71,  -595,   -77,   -83,  -583,  -572,  -573,  -244,   -92,
   -94,  -595,   -79,  -595,  -203,  -213,  -583,  -594,  -594,  -282,
  -583,  -287,  -587,  -595,  -583,  -595,  -502,  -503,  -595,  -595,
  -513,  -595,  -516,  -595,  -518,  -595,  -344,  -595,  -346,  -348,
  -355,  -583,  -533,  -543,  -553,  -557,  -594,  -335,  -594,  -307,
  -336,  -337,  -310,  -595,  -313,  -595,  -583,  -572,  -573,  -576,
  -289,  -595,  -106,  -107,  -110,  -583,   -11,  -595,  -497,  -319,
  -595,   -11,  -521,  -521,  -595,  -561,  -461,  -464,  -465,  -466,
  -467,   -11,  -439,  -442,  -444,  -447,  -451,  -453,  -122,  -267,
  -595,  -197,  -595,  -586,  -260,   -33,  -199,   -34,  -200,   -60,
   -35,  -202,   -36,  -201,   -62,  -195,  -595,  -595,  -595,  -595,
  -412,  -595,  -559,  -559,  -360,  -362,  -362,  -362,  -377,  -595,
  -583,  -383,  -528,  -536,  -537,  -547,  -595,  -403,  -402,   -11,
  -595,  -595,  -254,  -264,   -16,   -75,   -90,   -87,  -297,  -594,
  -340,   -11,  -422,  -594,  -423,  -424,  -595,  -241,  -391,  -394,
  -396,  -595,  -559,  -540,  -558,  -505,  -506,  -506,  -531,  -506,
  -506,  -550,  -506,  -528,  -545,  -583,  -595,  -353,  -595,  -529,
  -595,  -338,  -595,  -595,   -11,   -11,  -312,  -595,   -11,  -412,
  -595,  -412,  -595,  -595,   -11,  -322,  -595,  -583,  -595,  -326,
  -595,  -268,   -32,  -198,  -249,  -595,  -236,  -595,  -358,  -359,
  -368,  -370,  -595,  -373,  -595,  -375,  -380,  -595,  -595,  -595,
  -535,  -595,  -399,  -595,  -414,  -416,    -9,   -11,  -428,  -341,
  -595,  -595,  -426,  -285,   -11,   -11,  -392,  -501,  -595,  -509,
  -595,  -511,  -595,  -514,  -595,  -517,  -519,  -345,  -347,  -351,
  -595,  -356,  -304,  -595,  -305,  -595,  -595,  -263,  -594,  -315,
  -318,  -496,  -595,  -324,  -498,  -500,  -499,  -463,  -559,  -538,
  -361,  -362,  -362,  -362,  -362,  -548,  -362,  -382,  -583,  -385,
  -387,  -388,  -546,  -595,  -290,   -55,  -427,   -11,   -97,   -98,
  -595,  -595,  -105,  -425,  -595,  -595,  -506,  -506,  -506,  -506,
  -349,  -595,  -354,  -595,   -11,  -308,  -311,  -417,  -418,  -419,
   -11,  -320,   -11,  -357,  -595,  -365,  -595,  -367,  -595,  -371,
  -595,  -374,  -376,  -384,  -595,  -289,  -576,  -421,  -246,  -595,
  -595,  -104,  -395,  -397,  -595,  -507,  -510,  -512,  -515,  -595,
  -352,  -594,  -595,  -595,  -362,  -362,  -362,  -362,  -386,  -420,
  -583,  -572,  -573,  -576,  -103,  -506,  -350,  -339,  -316,  -327,
  -595,  -363,  -366,  -369,  -372,  -412,  -508,  -362,  -364 ]

clist = [
'216,275,275,275,14,408,326,333,437,14,258,372,296,2,266,270,677,486',
'520,570,6,414,420,477,220,6,322,259,127,127,405,132,132,220,220,220',
'427,14,301,301,563,566,122,205,430,310,310,337,338,830,654,341,654,731',
'818,130,130,511,618,478,533,111,110,483,776,657,317,220,220,313,473',
'220,346,356,356,690,692,694,219,310,310,310,821,115,579,498,799,262',
'269,271,701,127,779,540,709,712,898,929,931,114,388,389,390,391,294',
'657,925,277,277,277,645,901,292,686,687,14,380,833,650,651,220,220,220',
'220,14,14,342,13,378,358,362,6,13,811,393,384,876,328,331,659,392,6',
'602,604,204,351,593,401,600,603,603,486,276,276,276,523,526,394,648',
'530,13,613,329,114,273,285,286,647,374,330,334,349,583,373,295,323,324',
'680,325,339,834,275,327,952,340,654,654,336,336,386,835,336,721,960',
'726,844,588,589,415,657,734,916,778,998,931,780,928,531,925,808,14,220',
'220,220,777,335,220,220,220,220,220,220,683,898,884,818,885,633,472',
'867,480,424,773,14,990,275,275,639,13,825,336,336,336,336,275,663,713',
'13,13,481,414,420,783,672,957,803,880,684,376,818,817,377,819,379,1',
'400,406,220,220,649,425,429,1006,652,812,381,220,382,383,821,736,921',
'741,730,727,816,789,508,661,770,540,813,512,14,664,266,919,14,,270,665',
'301,14,,,,522,,310,495,724,,,,,796,668,958,301,,,,,567,568,310,668,14',
'220,,404,501,,13,1007,818,404,509,433,434,435,436,277,220,220,494,493',
'399,,,277,858,859,,889,891,13,893,895,,896,,,220,497,,839,909,716,503',
'295,744,292,744,,841,590,292,725,220,962,,735,114,668,759,,276,,619',
'764,887,668,792,,276,,,,479,569,,625,,,795,,482,630,,,,,275,127,,13',
'132,838,654,13,842,,,,13,846,415,612,,,922,657,923,295,,,114,,295,,130',
',,,220,918,,521,773,13,773,641,773,584,,,847,848,946,424,625,430,336',
'336,,783,798,,783,,783,,783,999,624,275,,,,512,629,,587,985,986,987',
'988,512,,540,540,829,415,792,,,963,14,591,14,804,,415,,,301,,220,660',
'807,,,310,301,,6,,,,,310,220,,,,424,,,,,,,,646,994,424,,,912,,,,1016',
'275,,,,,,,26,,773,275,773,26,773,,773,,415,,653,,,,14,,415,14,26,,783',
',783,220,783,,783,26,26,26,937,26,959,220,,,,,,14,788,424,,,,,773,424',
',682,,,,954,,,,,,,,26,26,897,,26,783,619,13,,13,781,805,220,220,,,,220',
'220,127,787,220,132,,914,,512,,676,,,,619,748,,14,1015,797,,,14,14,625',
'993,,630,130,806,26,710,710,781,301,26,26,26,26,26,26,310,849,,,301',
',,755,757,728,729,310,760,762,,,429,13,,,13,715,,,619,754,,,,,,706,840',
'619,708,,,,843,,,,13,,,,,,,,,,220,,,,,14,220,,,,14,,,,,,,,,,14,878,',
',,882,,,,127,,220,26,26,26,26,781,,26,26,26,26,26,26,,,,13,,1000,,,13',
'13,,26,,,,,,786,870,,,668,790,791,14,310,,,,,,,404,,,,14,,,,,852,,,',
'26,26,903,,,,,774,,26,,,,38,,,,,38,,,,220,,14,14,26,,14,,26,336,,,14',
'26,,336,,13,,,,,13,,38,299,299,814,,,814,,13,,,,,932,26,26,,,,,310,14',
'850,,,940,,,14,14,26,26,310,,,344,360,360,360,,,,,,,,,,,973,26,,,,,',
'13,,,,,,,,,,26,,13,,873,,,,,,710,,38,911,775,14,879,,915,,,38,38,,275',
',,424,,,336,,14,,,13,13,,14,13,14,415,,,,13,,,,905,906,,,908,,619,220',
',,,,,820,,822,16,26,,,,16,,,,424,,,,13,861,863,865,,,,13,13,,,,,,936',
',,,,,16,944,945,,,,,,,38,,814,,,774,,774,,774,,,26,,26,,,,,,,,26,38',
',,350,,,,,13,,,,,26,,,,,,,,,977,,,13,,,,,,13,,13,,,,,,991,,,,,,992,16',
',,,,,,,,16,16,,26,,38,26,,,38,,,26,299,38,,,,,,,,26,,,,,,26,,299,774',
',774,,774,,774,,38,965,967,969,971,,972,,,924,,926,,,,,,,,,,,,26,26',
',,,26,26,,,26,,,947,,948,774,949,,,,,,,26,16,,,,26,26,,428,15,,,,,15',
',,,,,,,,,16,,,,1011,1012,1013,1014,,,,,,,,,,,15,303,303,,,,,,,1018,',
',,,,,,,,,,,,995,,996,,997,,,,,,,26,348,357,357,,26,26,,16,1005,26,,16',
',,,,16,,332,26,,,,,,,,,,,26,,,,1017,,,,,,,16,,15,,,,,38,,38,,15,15,',
',299,,,,,39,,,299,,39,26,,,,,,,,,,,,26,,,,,,,,,,,,,,,39,300,300,,,,',
',,,,,,,,,26,,26,26,,,26,38,,,38,,26,,,,,,,345,361,361,361,,,,,,15,,',
',38,,,,,,,,,,,,,26,,,,,,15,26,26,,402,,,,,,432,39,,,,,,,,,39,39,,,,',
',,,,,,,,,,,,38,,,,,38,38,,,,,,,16,,16,26,299,,,,,15,,,,15,,299,,303',
'15,,26,,,,,488,26,490,26,491,492,,,,303,,,,,,,,,15,26,,,,,,,,,,,39,',
',,,,,,,,,,,38,16,,,16,38,,,,,39,,,,,38,,,,,,,,,,,16,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,360,,,,,,38,,,,,,428,39,,,,39,38,,,300,39,,615,,16,,,',
',16,16,,,,,,300,,,,,,,,,39,,,,38,38,,,38,,,,,,38,,,,,,,,,,,,,,,,,,,',
',,,,,360,,,15,,15,,,38,,,303,938,,,38,38,,,303,655,16,332,,658,,16,',
',,,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,655,,,332,547,,,,,38,,,,15,,,15,,,',
',,,,,16,38,702,,,,,38,,38,,,16,15,,,,,,,740,,432,,,,,,,,,,,,,,,,,,,',
',,,16,16,,39,16,39,,,,,16,300,,,,,,,,300,,,749,,,15,655,332,,,15,15',
',,,,,,,,,,303,16,,,,943,,,16,16,,303,,,,,,,,,793,,,,,,,,,,39,,,39,,',
',,,,,,802,,,,,,,,,,,,,39,,,,824,,16,,,15,,,,,15,,,,,,,,,16,15,,,,,16',
',16,,,547,,,,,,,,,,,,,,,,696,,,,,,,39,,851,,,39,39,,,357,,,,,,15,,300',
',,,,,,,,,15,300,,,,,,227,,,,,,,,,274,274,274,,,,,,,,,,,319,320,321,',
'15,15,,,15,,,,,,15,,,274,274,,,,,,,39,,,,,39,,782,907,,,,,,357,39,,',
',,,,15,,,332,942,,,15,15,,,,,,,,,,,,,,,,,,,,,,,547,,547,,361,,,,696',
',39,827,,,,,,,,,,,39,,,,,,,15,,,,,,,,,,,,,,547,547,,15,,,,,,15,,15,39',
'39,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,,,,274,407,274,361,,426,431,,,,,39',
',,,939,,,39,39,,227,,,446,447,448,449,450,451,452,453,454,455,456,457',
'458,459,460,461,462,463,464,465,466,467,468,469,470,471,696,,696,,,',
'274,274,,,,,,,,274,,,,,,39,274,,274,,274,274,,,,,,,782,,782,,39,,,,',
',39,,39,,,,,,,,,,,,,,,,547,,,517,,,,,,,,950,696,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,696,,696,,,,,,,,,,,782,,,,,,,,274,,,,',
',,,,,,,,,,,,696,,,,,,,,,,,,,,,,,,,,,274,,426,640,407,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,274,,274,,274,,,,,,,,,,,,,,,274,,,,,,,,,674',
'675,,,,,,,,,,274,,,274,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,',
',274,274,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,751,,,274',
'274,756,758,,,,761,763,,,640,765,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,',
',,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,274,,853,,,,,,,,,,,,,,756,758,763,761,,856,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,',
',,,,,,,,,,,,,,,274,853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,274' ]
        racc_goto_table = arr = ::Array.new(2972, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,33,33,33,22,23,67,86,47,22,138,56,49,2,71,71,10,73,8,92,7,37,37,39',
'22,7,31,36,57,57,27,61,61,22,22,22,27,22,22,22,89,89,15,15,18,64,64',
'17,17,90,74,17,74,96,168,60,60,51,24,23,137,6,4,47,126,177,63,22,22',
'50,37,22,22,22,22,166,166,166,20,64,64,64,173,5,54,47,11,38,38,38,116',
'57,129,163,91,91,114,131,132,95,17,17,17,17,46,177,174,70,70,70,40,117',
'45,121,121,22,154,11,40,40,22,22,22,22,22,22,4,21,152,55,55,7,21,129',
'2,152,12,70,70,14,7,7,155,155,16,19,156,28,156,156,156,73,68,68,68,69',
'69,30,42,69,21,62,66,95,44,44,44,72,84,85,88,93,94,97,9,98,99,100,101',
'102,103,33,68,117,104,74,74,29,29,5,105,29,106,107,108,109,110,111,71',
'177,112,113,118,131,132,124,130,133,174,134,22,22,22,22,127,135,22,22',
'22,22,22,22,136,114,139,168,140,47,141,129,143,57,120,22,117,33,33,23',
'21,116,29,29,29,29,33,51,92,21,21,144,37,37,169,51,145,146,147,137,150',
'168,127,151,127,153,1,20,20,22,22,47,20,20,117,47,120,157,22,158,159',
'173,160,126,161,8,162,167,40,31,47,24,163,170,49,22,47,71,171,22,,71',
'23,22,22,,,,31,,64,7,54,,,,,24,37,11,22,,,,,17,17,64,37,22,22,,68,50',
',21,90,168,68,63,29,29,29,29,70,22,22,6,4,9,,,70,121,121,,166,166,21',
'166,166,,166,,,22,46,,24,91,23,46,9,156,45,156,,24,36,45,23,22,96,,47',
'95,37,39,,68,,31,39,121,37,73,,68,,,,44,4,,71,,,51,,44,71,,,,,33,57',
',21,61,89,74,21,8,,,,21,8,71,15,,,127,177,127,9,,,95,,9,,60,,,,22,120',
',29,120,21,120,31,120,95,,,137,137,127,57,71,18,29,29,,169,47,,169,',
'169,,169,10,38,33,,,,49,38,,29,166,166,166,166,49,,163,163,47,71,73',
',,121,22,29,22,27,,71,,,22,,22,2,69,,,64,22,,7,,,,,64,22,,,,57,,,,,',
',,38,127,57,,,8,,,,166,33,,,,,,,41,,120,33,120,41,120,,120,,71,,70,',
',,22,,71,22,41,,169,,169,22,169,,169,41,41,41,89,41,92,22,,,,,,22,86',
'57,,,,,120,57,,70,,,,89,,,,,,,,41,41,47,,41,169,31,21,,21,31,67,22,22',
',,,22,22,57,138,22,61,,47,,49,,29,,,,31,15,,22,24,49,,,22,22,71,8,,71',
'60,31,41,95,95,31,22,41,41,41,41,41,41,64,56,,,22,,,20,20,95,95,64,20',
'20,,,20,21,,,21,68,,,31,70,,,,,,9,17,31,9,,,,17,,,,21,,,,,,,,,,22,,',
',,22,22,,,,22,,,,,,,,,,22,67,,,,67,,,,57,,22,41,41,41,41,31,,41,41,41',
'41,41,41,,,,21,,23,,,21,21,,41,,,,,,9,22,,,37,9,9,22,64,,,,,,,68,,,',
'22,,,,,20,,,,41,41,17,,,,,122,,41,,,,52,,,,,52,,,,22,,22,22,41,,22,',
'41,29,,,22,41,,29,,21,,,,,21,,52,52,52,122,,,122,,21,,,,,22,41,41,,',
',,64,22,9,,,22,,,22,22,41,41,64,,,52,52,52,52,,,,,,,,,,,31,41,,,,,,21',
',,,,,,,,,41,,21,,9,,,,,,95,,52,95,125,22,9,,95,,,52,52,,33,,,57,,,29',
',22,,,21,21,,22,21,22,71,,,,21,,,,9,9,,,9,,31,22,,,,,,125,,125,26,41',
',,,26,,,,57,,,,21,123,123,123,,,,21,21,,,,,,9,,,,,,26,9,9,,,,,,,52,',
'122,,,122,,122,,122,,,41,,41,,,,,,,,41,52,,,26,,,,,21,,,,,41,,,,,,,',
',9,,,21,,,,,,21,,21,,,,,,9,,,,,,9,26,,,,,,,,,26,26,,41,,52,41,,,52,',
',41,52,52,,,,,,,,41,,,,,,41,,52,122,,122,,122,,122,,52,123,123,123,123',
',123,,,125,,125,,,,,,,,,,,,41,41,,,,41,41,,,41,,,125,,125,122,125,,',
',,,,41,26,,,,41,41,,26,25,,,,,25,,,,,,,,,,26,,,,123,123,123,123,,,,',
',,,,,,25,25,25,,,,,,,123,,,,,,,,,,,,,,125,,125,,125,,,,,,,41,25,25,25',
',41,41,,26,125,41,,26,,,,,26,,65,41,,,,,,,,,,,41,,,,125,,,,,,,26,,25',
',,,,52,,52,,25,25,,,52,,,,,53,,,52,,53,41,,,,,,,,,,,,41,,,,,,,,,,,,',
',,53,53,53,,,,,,,,,,,,,,41,,41,41,,,41,52,,,52,,41,,,,,,,53,53,53,53',
',,,,,25,,,,52,,,,,,,,,,,,,41,,,,,,25,41,41,,65,,,,,,65,53,,,,,,,,,53',
'53,,,,,,,,,,,,,,,,,52,,,,,52,52,,,,,,,26,,26,41,52,,,,,25,,,,25,,52',
',25,25,,41,,,,,65,41,65,41,65,65,,,,25,,,,,,,,,25,41,,,,,,,,,,,53,,',
',,,,,,,,,,52,26,,,26,52,,,,,53,,,,,52,,,,,,,,,,,26,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,52,,,,,,52,,,,,,26,53,,,,53,52,,,53,53,,65,,26,,,,,26,26',
',,,,,53,,,,,,,,,53,,,,52,52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,52',
',,25,,25,,,52,,,25,52,,,52,52,,,25,65,26,65,,65,,26,,,,,,,,,,26,,,,',
',,,,,,,,,,,,,,,,,,65,,,65,115,,,,,52,,,,25,,,25,,,,,,,,,26,52,65,,,',
',52,,52,,,26,25,,,,,,,25,,65,,,,,,,,,,,,,,,,,,,,,,,26,26,,53,26,53,',
',,,26,53,,,,,,,,53,,,65,,,25,65,65,,,25,25,,,,,,,,,,,25,26,,,,26,,,26',
'26,,25,,,,,,,,,65,,,,,,,,,,53,,,53,,,,,,,,,65,,,,,,,,,,,,,53,,,,65,',
'26,,,25,,,,,25,,,,,,,,,26,25,,,,,26,,26,,,115,,,,,,,,,,,,,,,,115,,,',
',,,53,,65,,,53,53,,,25,,,,,,25,,53,,,,,,,,,,25,53,,,,,,32,,,,,,,,,32',
'32,32,,,,,,,,,,,32,32,32,,25,25,,,25,,,,,,25,,,32,32,,,,,,,53,,,,,53',
',115,65,,,,,,25,53,,,,,,,25,,,65,25,,,25,25,,,,,,,,,,,,,,,,,,,,,,,115',
',115,,53,,,,115,,53,115,,,,,,,,,,,53,,,,,,,25,,,,,,,,,,,,,,115,115,',
'25,,,,,,25,,25,53,53,,,53,,,,,,53,,,,,,,,,,,,,,,,,,,,,,32,32,32,53,',
'32,32,,,,,53,,,,53,,,53,53,,32,,,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,,115,,,,32,32,,,,,,,,32',
',,,,,53,32,,32,,32,32,,,,,,,115,,115,,53,,,,,,53,,53,,,,,,,,,,,,,,,',
'115,,,32,,,,,,,,115,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,115,,115,,,,,,,,,,,115,,,,,,,,32,,,,,,,,,,,,,,,,,115,,,,,,,,,',
',,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32',
',32,,,,,,,,,,,,,,,32,,,,,,,,,32,32,,,,,,,,,,32,,,32,,,,,,,,,,,,,,,,',
',,,,,,,32,,,,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32,,,32,32,,,,,,,,,,,,,,,,,,,',
',,,,32,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,,,,,,,,,,,,32,32,32,32',
',32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',32,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(2972, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   264,    13,   nil,    59,    78,    58,    20,  -305,   141,
  -503,  -591,  -663,   nil,  -355,    34,   135,   -16,  -169,    77,
    58,   127,     4,  -204,  -350,  1205,   991,  -177,   -60,   124,
    35,   -19,  1993,   -28,   nil,   nil,     3,  -189,    61,  -239,
  -362,   551,  -318,   nil,   135,    79,    71,  -209,   nil,   -22,
    34,  -257,   827,  1334,  -270,    60,   -60,    20,   nil,   nil,
    47,    23,  -237,    25,    11,  1231,   103,   -53,   123,  -172,
    78,   -12,  -306,  -260,  -435,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    97,   109,   -54,   nil,   108,  -297,
  -657,  -473,  -323,   103,  -186,    96,  -536,   102,   118,   118,
  -344,   120,   114,  -529,   118,  -522,  -384,  -716,  -389,  -534,
  -166,  -175,  -390,  -648,  -730,  1424,  -458,  -717,  -441,   nil,
  -411,  -421,   178,   230,  -438,   297,  -579,  -429,   nil,  -551,
  -662,  -771,  -770,  -128,  -474,   153,  -309,  -275,   -12,  -585,
  -584,   -29,   nil,   -37,   -19,  -654,  -423,  -547,   nil,   nil,
   181,   182,    46,   180,    32,  -238,  -231,   190,   191,   191,
  -315,  -314,  -301,  -242,   nil,   nil,  -462,  -404,  -635,  -391,
  -394,  -561,   nil,  -609,  -756,   nil,   nil,  -422 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   343,   290,   nil,   519,
   nil,   831,   nil,   287,   288,   nil,   nil,   nil,    11,    12,
    18,   226,   318,   nil,   nil,   224,   225,   nil,   nil,    17,
   nil,   438,    21,    22,    23,    24,   nil,   671,   nil,   nil,
   nil,   307,   nil,    25,   409,    32,   nil,   nil,    34,    37,
    36,   nil,   221,   222,   355,   nil,   129,   417,   128,   131,
    75,    76,   nil,    90,    46,   280,   nil,   800,   410,   nil,
   411,   422,   626,   484,   278,   264,    47,    48,    49,    50,
    51,    52,    53,    54,    55,   nil,   265,    61,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   564,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   698,   823,   nil,   699,   920,   772,
   535,   nil,   536,   nil,   nil,   537,   nil,   539,   642,   nil,
   nil,   nil,   545,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   421,   nil,   nil,   nil,   nil,   nil,    74,    77,
    78,   nil,   nil,   nil,   nil,   nil,   598,   nil,   nil,   nil,
   nil,   nil,   nil,   815,   733,   534,   nil,   538,   549,   551,
   552,   784,   555,   556,   785,   559,   562,   282 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 144, :_reduce_none,
  2, 145, :_reduce_2,
  0, 146, :_reduce_3,
  1, 146, :_reduce_4,
  3, 146, :_reduce_5,
  2, 146, :_reduce_6,
  1, 148, :_reduce_none,
  4, 148, :_reduce_8,
  4, 151, :_reduce_9,
  2, 152, :_reduce_10,
  0, 156, :_reduce_11,
  1, 156, :_reduce_12,
  3, 156, :_reduce_13,
  2, 156, :_reduce_14,
  1, 157, :_reduce_none,
  4, 157, :_reduce_16,
  0, 173, :_reduce_17,
  4, 150, :_reduce_18,
  3, 150, :_reduce_19,
  3, 150, :_reduce_20,
  3, 150, :_reduce_21,
  2, 150, :_reduce_22,
  3, 150, :_reduce_23,
  3, 150, :_reduce_24,
  3, 150, :_reduce_25,
  3, 150, :_reduce_26,
  3, 150, :_reduce_27,
  4, 150, :_reduce_28,
  1, 150, :_reduce_none,
  3, 150, :_reduce_30,
  3, 150, :_reduce_31,
  6, 150, :_reduce_32,
  5, 150, :_reduce_33,
  5, 150, :_reduce_34,
  5, 150, :_reduce_35,
  5, 150, :_reduce_36,
  3, 150, :_reduce_37,
  3, 150, :_reduce_38,
  3, 150, :_reduce_39,
  1, 150, :_reduce_none,
  3, 161, :_reduce_41,
  3, 161, :_reduce_42,
  1, 172, :_reduce_none,
  3, 172, :_reduce_44,
  3, 172, :_reduce_45,
  3, 172, :_reduce_46,
  2, 172, :_reduce_47,
  1, 172, :_reduce_none,
  1, 160, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 177, :_reduce_none,
  4, 177, :_reduce_53,
  0, 185, :_reduce_54,
  5, 182, :_reduce_55,
  1, 184, :_reduce_none,
  2, 176, :_reduce_57,
  3, 176, :_reduce_58,
  4, 176, :_reduce_59,
  5, 176, :_reduce_60,
  4, 176, :_reduce_61,
  5, 176, :_reduce_62,
  2, 176, :_reduce_63,
  2, 176, :_reduce_64,
  2, 176, :_reduce_65,
  2, 176, :_reduce_66,
  2, 176, :_reduce_67,
  1, 162, :_reduce_68,
  3, 162, :_reduce_69,
  1, 189, :_reduce_70,
  3, 189, :_reduce_71,
  1, 188, :_reduce_none,
  2, 188, :_reduce_73,
  3, 188, :_reduce_74,
  5, 188, :_reduce_75,
  2, 188, :_reduce_76,
  4, 188, :_reduce_77,
  2, 188, :_reduce_78,
  4, 188, :_reduce_79,
  1, 188, :_reduce_80,
  3, 188, :_reduce_81,
  1, 192, :_reduce_none,
  3, 192, :_reduce_83,
  2, 191, :_reduce_84,
  3, 191, :_reduce_85,
  1, 194, :_reduce_86,
  3, 194, :_reduce_87,
  1, 193, :_reduce_88,
  1, 193, :_reduce_89,
  4, 193, :_reduce_90,
  3, 193, :_reduce_91,
  3, 193, :_reduce_92,
  3, 193, :_reduce_93,
  3, 193, :_reduce_94,
  2, 193, :_reduce_95,
  1, 193, :_reduce_96,
  1, 169, :_reduce_97,
  1, 169, :_reduce_98,
  4, 169, :_reduce_99,
  3, 169, :_reduce_100,
  3, 169, :_reduce_101,
  3, 169, :_reduce_102,
  3, 169, :_reduce_103,
  2, 169, :_reduce_104,
  1, 169, :_reduce_105,
  1, 197, :_reduce_106,
  1, 197, :_reduce_none,
  2, 198, :_reduce_108,
  1, 198, :_reduce_109,
  3, 198, :_reduce_110,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 202, :_reduce_116,
  1, 202, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 159, :_reduce_120,
  0, 205, :_reduce_121,
  4, 159, :_reduce_122,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  3, 175, :_reduce_194,
  5, 175, :_reduce_195,
  3, 175, :_reduce_196,
  5, 175, :_reduce_197,
  6, 175, :_reduce_198,
  5, 175, :_reduce_199,
  5, 175, :_reduce_200,
  5, 175, :_reduce_201,
  5, 175, :_reduce_202,
  4, 175, :_reduce_203,
  3, 175, :_reduce_204,
  3, 175, :_reduce_205,
  3, 175, :_reduce_206,
  3, 175, :_reduce_207,
  3, 175, :_reduce_208,
  3, 175, :_reduce_209,
  3, 175, :_reduce_210,
  3, 175, :_reduce_211,
  3, 175, :_reduce_212,
  4, 175, :_reduce_213,
  2, 175, :_reduce_214,
  2, 175, :_reduce_215,
  3, 175, :_reduce_216,
  3, 175, :_reduce_217,
  3, 175, :_reduce_218,
  3, 175, :_reduce_219,
  3, 175, :_reduce_220,
  3, 175, :_reduce_221,
  3, 175, :_reduce_222,
  3, 175, :_reduce_223,
  3, 175, :_reduce_224,
  3, 175, :_reduce_225,
  3, 175, :_reduce_226,
  3, 175, :_reduce_227,
  3, 175, :_reduce_228,
  2, 175, :_reduce_229,
  2, 175, :_reduce_230,
  3, 175, :_reduce_231,
  3, 175, :_reduce_232,
  3, 175, :_reduce_233,
  3, 175, :_reduce_234,
  3, 175, :_reduce_235,
  6, 175, :_reduce_236,
  1, 175, :_reduce_none,
  1, 208, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_241,
  2, 209, :_reduce_242,
  3, 214, :_reduce_243,
  0, 215, :_reduce_244,
  1, 215, :_reduce_none,
  0, 166, :_reduce_246,
  1, 166, :_reduce_none,
  2, 166, :_reduce_none,
  4, 166, :_reduce_249,
  2, 166, :_reduce_250,
  1, 187, :_reduce_251,
  2, 187, :_reduce_252,
  2, 187, :_reduce_253,
  4, 187, :_reduce_254,
  1, 187, :_reduce_255,
  0, 218, :_reduce_256,
  2, 181, :_reduce_257,
  2, 217, :_reduce_258,
  2, 216, :_reduce_259,
  0, 216, :_reduce_260,
  1, 211, :_reduce_261,
  2, 211, :_reduce_262,
  3, 211, :_reduce_263,
  4, 211, :_reduce_264,
  1, 171, :_reduce_265,
  1, 171, :_reduce_none,
  3, 170, :_reduce_267,
  4, 170, :_reduce_268,
  2, 170, :_reduce_269,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_280,
  0, 241, :_reduce_281,
  4, 207, :_reduce_282,
  0, 242, :_reduce_283,
  0, 243, :_reduce_284,
  6, 207, :_reduce_285,
  0, 244, :_reduce_286,
  4, 207, :_reduce_287,
  3, 207, :_reduce_288,
  3, 207, :_reduce_289,
  2, 207, :_reduce_290,
  3, 207, :_reduce_291,
  3, 207, :_reduce_292,
  1, 207, :_reduce_293,
  4, 207, :_reduce_294,
  3, 207, :_reduce_295,
  1, 207, :_reduce_296,
  5, 207, :_reduce_297,
  4, 207, :_reduce_298,
  3, 207, :_reduce_299,
  2, 207, :_reduce_300,
  1, 207, :_reduce_none,
  2, 207, :_reduce_302,
  2, 207, :_reduce_303,
  6, 207, :_reduce_304,
  6, 207, :_reduce_305,
  0, 245, :_reduce_306,
  0, 246, :_reduce_307,
  7, 207, :_reduce_308,
  0, 247, :_reduce_309,
  0, 248, :_reduce_310,
  7, 207, :_reduce_311,
  5, 207, :_reduce_312,
  4, 207, :_reduce_313,
  0, 249, :_reduce_314,
  0, 250, :_reduce_315,
  9, 207, :_reduce_316,
  0, 251, :_reduce_317,
  6, 207, :_reduce_318,
  0, 252, :_reduce_319,
  7, 207, :_reduce_320,
  0, 253, :_reduce_321,
  5, 207, :_reduce_322,
  0, 254, :_reduce_323,
  6, 207, :_reduce_324,
  0, 255, :_reduce_325,
  0, 256, :_reduce_326,
  9, 207, :_reduce_327,
  1, 207, :_reduce_328,
  1, 207, :_reduce_329,
  1, 207, :_reduce_330,
  1, 207, :_reduce_331,
  1, 165, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_335,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 233, :_reduce_none,
  5, 233, :_reduce_339,
  1, 154, :_reduce_none,
  2, 154, :_reduce_341,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 257, :_reduce_344,
  3, 257, :_reduce_345,
  1, 260, :_reduce_346,
  3, 260, :_reduce_347,
  1, 259, :_reduce_none,
  4, 259, :_reduce_349,
  6, 259, :_reduce_350,
  3, 259, :_reduce_351,
  5, 259, :_reduce_352,
  2, 259, :_reduce_353,
  4, 259, :_reduce_354,
  1, 259, :_reduce_355,
  3, 259, :_reduce_356,
  4, 261, :_reduce_357,
  2, 261, :_reduce_358,
  2, 261, :_reduce_359,
  1, 261, :_reduce_360,
  2, 266, :_reduce_361,
  0, 266, :_reduce_362,
  6, 267, :_reduce_363,
  8, 267, :_reduce_364,
  4, 267, :_reduce_365,
  6, 267, :_reduce_366,
  4, 267, :_reduce_367,
  2, 267, :_reduce_none,
  6, 267, :_reduce_369,
  2, 267, :_reduce_370,
  4, 267, :_reduce_371,
  6, 267, :_reduce_372,
  2, 267, :_reduce_373,
  4, 267, :_reduce_374,
  2, 267, :_reduce_375,
  4, 267, :_reduce_376,
  1, 267, :_reduce_none,
  0, 183, :_reduce_378,
  1, 183, :_reduce_379,
  3, 271, :_reduce_380,
  1, 271, :_reduce_381,
  4, 271, :_reduce_382,
  1, 272, :_reduce_383,
  4, 272, :_reduce_384,
  1, 273, :_reduce_385,
  3, 273, :_reduce_386,
  1, 274, :_reduce_387,
  1, 274, :_reduce_none,
  0, 278, :_reduce_389,
  0, 279, :_reduce_390,
  4, 231, :_reduce_391,
  4, 276, :_reduce_392,
  1, 276, :_reduce_393,
  0, 282, :_reduce_394,
  4, 277, :_reduce_395,
  0, 283, :_reduce_396,
  4, 277, :_reduce_397,
  0, 284, :_reduce_398,
  5, 281, :_reduce_399,
  2, 178, :_reduce_400,
  4, 178, :_reduce_401,
  5, 178, :_reduce_402,
  5, 178, :_reduce_403,
  2, 230, :_reduce_404,
  4, 230, :_reduce_405,
  4, 230, :_reduce_406,
  3, 230, :_reduce_407,
  3, 230, :_reduce_408,
  3, 230, :_reduce_409,
  2, 230, :_reduce_410,
  1, 230, :_reduce_411,
  4, 230, :_reduce_412,
  0, 286, :_reduce_413,
  5, 229, :_reduce_414,
  0, 287, :_reduce_415,
  5, 229, :_reduce_416,
  5, 235, :_reduce_417,
  1, 288, :_reduce_418,
  1, 288, :_reduce_none,
  6, 153, :_reduce_420,
  0, 153, :_reduce_421,
  1, 289, :_reduce_422,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  2, 290, :_reduce_425,
  1, 290, :_reduce_none,
  2, 155, :_reduce_427,
  1, 155, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 220, :_reduce_432,
  1, 292, :_reduce_433,
  2, 292, :_reduce_434,
  3, 293, :_reduce_435,
  1, 293, :_reduce_436,
  1, 293, :_reduce_437,
  3, 221, :_reduce_438,
  4, 222, :_reduce_439,
  3, 223, :_reduce_440,
  0, 297, :_reduce_441,
  3, 297, :_reduce_442,
  1, 298, :_reduce_443,
  2, 298, :_reduce_444,
  3, 225, :_reduce_445,
  0, 300, :_reduce_446,
  3, 300, :_reduce_447,
  3, 224, :_reduce_448,
  3, 226, :_reduce_449,
  0, 301, :_reduce_450,
  3, 301, :_reduce_451,
  0, 302, :_reduce_452,
  3, 302, :_reduce_453,
  0, 294, :_reduce_454,
  2, 294, :_reduce_455,
  0, 295, :_reduce_456,
  2, 295, :_reduce_457,
  0, 296, :_reduce_458,
  2, 296, :_reduce_459,
  1, 299, :_reduce_460,
  2, 299, :_reduce_461,
  0, 304, :_reduce_462,
  4, 299, :_reduce_463,
  1, 303, :_reduce_464,
  1, 303, :_reduce_465,
  1, 303, :_reduce_466,
  1, 303, :_reduce_none,
  1, 203, :_reduce_468,
  3, 204, :_reduce_469,
  1, 291, :_reduce_470,
  2, 291, :_reduce_471,
  1, 206, :_reduce_472,
  1, 206, :_reduce_473,
  1, 206, :_reduce_474,
  1, 206, :_reduce_475,
  1, 195, :_reduce_476,
  1, 195, :_reduce_477,
  1, 195, :_reduce_478,
  1, 195, :_reduce_479,
  1, 195, :_reduce_480,
  1, 196, :_reduce_481,
  1, 196, :_reduce_482,
  1, 196, :_reduce_483,
  1, 196, :_reduce_484,
  1, 196, :_reduce_485,
  1, 196, :_reduce_486,
  1, 196, :_reduce_487,
  1, 227, :_reduce_488,
  1, 227, :_reduce_489,
  1, 164, :_reduce_490,
  1, 164, :_reduce_491,
  1, 168, :_reduce_492,
  1, 168, :_reduce_493,
  1, 237, :_reduce_494,
  0, 305, :_reduce_495,
  4, 237, :_reduce_496,
  2, 237, :_reduce_497,
  3, 239, :_reduce_498,
  0, 307, :_reduce_499,
  3, 239, :_reduce_500,
  4, 306, :_reduce_501,
  2, 306, :_reduce_502,
  2, 306, :_reduce_503,
  1, 306, :_reduce_504,
  2, 309, :_reduce_505,
  0, 309, :_reduce_506,
  6, 280, :_reduce_507,
  8, 280, :_reduce_508,
  4, 280, :_reduce_509,
  6, 280, :_reduce_510,
  4, 280, :_reduce_511,
  6, 280, :_reduce_512,
  2, 280, :_reduce_513,
  4, 280, :_reduce_514,
  6, 280, :_reduce_515,
  2, 280, :_reduce_516,
  4, 280, :_reduce_517,
  2, 280, :_reduce_518,
  4, 280, :_reduce_519,
  1, 280, :_reduce_520,
  0, 280, :_reduce_521,
  1, 275, :_reduce_522,
  1, 275, :_reduce_523,
  1, 275, :_reduce_524,
  1, 275, :_reduce_525,
  1, 258, :_reduce_none,
  1, 258, :_reduce_527,
  1, 311, :_reduce_528,
  3, 311, :_reduce_529,
  1, 268, :_reduce_530,
  3, 268, :_reduce_531,
  1, 312, :_reduce_532,
  2, 313, :_reduce_533,
  1, 313, :_reduce_534,
  2, 314, :_reduce_535,
  1, 314, :_reduce_536,
  1, 262, :_reduce_537,
  3, 262, :_reduce_538,
  1, 308, :_reduce_539,
  3, 308, :_reduce_540,
  1, 315, :_reduce_none,
  1, 315, :_reduce_none,
  2, 263, :_reduce_543,
  1, 263, :_reduce_544,
  3, 316, :_reduce_545,
  3, 317, :_reduce_546,
  1, 269, :_reduce_547,
  3, 269, :_reduce_548,
  1, 310, :_reduce_549,
  3, 310, :_reduce_550,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  2, 270, :_reduce_553,
  1, 270, :_reduce_554,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  2, 265, :_reduce_557,
  2, 264, :_reduce_558,
  0, 264, :_reduce_559,
  1, 240, :_reduce_none,
  3, 240, :_reduce_561,
  0, 228, :_reduce_562,
  2, 228, :_reduce_none,
  1, 213, :_reduce_564,
  3, 213, :_reduce_565,
  3, 320, :_reduce_566,
  2, 320, :_reduce_567,
  2, 320, :_reduce_568,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 285, :_reduce_none,
  1, 285, :_reduce_none,
  1, 285, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 174, :_reduce_none,
  1, 174, :_reduce_none,
  2, 190, :_reduce_585,
  2, 167, :_reduce_586,
  0, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 238, :_reduce_590,
  1, 238, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_none,
  0, 210, :_reduce_594 ]

racc_reduce_n = 595

racc_shift_n = 1019

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tEQL => 141,
  :tLOWEST => 142 }

racc_nt_base = 143

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@28",
  "@29",
  "args_tail",
  "@30",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_312(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_317(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:class)
                    
    result
end

def _reduce_318(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_319(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:sclass)
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:def)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                      @context.push(:defs)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = []
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_379(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = []
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_387(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_390(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_391(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_394(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_396(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_398(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_413(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_415(val, _values, result)
                      @static_env.extend_dynamic
                      @context.push(:block)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 419 omitted

def _reduce_420(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = []
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_436(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_439(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = []
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = []
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_463(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_471(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_495(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_500(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = []
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_521(val, _values, result)
                      result = []
                    
    result
end

def _reduce_522(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_523(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_532(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 541 omitted

# reduce 542 omitted

def _reduce_543(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 551 omitted

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = []
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby21
  end   # module Parser
