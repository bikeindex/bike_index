# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-487,-105,276,213,214,-109,-103,-487,-487,-487,225,584,-487,-487,-487',
'224,-487,804,804,625,-88,591,213,214,-487,627,-487,-487,-487,118,847',
'816,-102,-74,117,-104,-487,-487,-104,-487,-487,-487,-487,-487,-110,-103',
'584,584,584,527,-110,824,803,803,-109,408,225,118,276,597,410,409,117',
'598,-107,271,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487',
'-487,-487,-487,213,214,-487,-487,-487,624,-487,-487,730,275,-487,626',
'543,-487,-487,545,-487,225,-487,816,-487,591,-487,-487,-102,-487,-487',
'-487,-487,-487,-96,-487,-490,-487,-100,-94,225,213,214,-490,-490,-490',
'271,-106,-490,-490,-490,-487,-490,118,-487,-487,-487,-487,117,-487,-490',
'-487,-490,-490,-490,-93,-487,-487,-95,275,-487,-98,-490,-490,-107,-490',
'-490,-490,-490,-490,-104,-108,-105,-101,823,-104,-110,-103,118,118,118',
'-110,-103,117,117,117,-109,-98,225,869,225,-109,-490,-490,-490,-490',
'-490,-490,-490,-490,-490,-490,-490,-490,-490,-490,118,280,-490,-490',
'-490,117,-490,-490,-584,276,-490,1008,118,-490,-490,-108,-490,117,-490',
'118,-490,-98,-490,-490,117,-490,-490,-490,-490,-490,-102,-490,-298,-490',
'646,-102,225,645,524,-298,-298,-298,-585,-104,-298,-298,-298,-490,-298',
'-106,-490,-490,-490,-490,-106,-490,517,-490,-298,-298,-298,-98,-490',
'-490,-98,858,-490,-96,-298,-298,584,-298,-298,-298,-298,-298,-107,-98',
'213,214,-585,-107,118,-108,-105,276,118,117,-108,-105,-106,117,96,97',
'-107,516,275,-105,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,580,579,-298,-298,-298,777,793,-298,543,732,-298',
'545,-99,-298,-298,731,-298,225,-298,612,-298,-96,-298,-298,-73,-298',
'-298,-298,-298,-298,612,-298,-298,-298,96,97,-273,271,127,-298,-298',
'-298,225,-584,225,-298,-298,-298,-298,643,-298,-298,-298,-298,726,-298',
'505,-298,98,99,275,-96,-298,-298,-96,-104,-108,-95,-298,-298,868,-298',
'-298,-298,-298,-298,118,-96,503,850,501,117,-97,614,613,644,564,-97',
'561,560,559,492,562,762,614,613,610,724,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,98,99,-298,-298,-298,564,650',
'561,560,559,-298,562,543,-298,225,542,612,991,-298,612,-298,-95,-298',
'-298,612,-298,-298,-298,-298,-298,612,-298,-588,-298,543,-584,-97,545',
'723,-588,-588,-588,213,214,872,-588,-588,-298,-588,224,-298,-298,790',
'-99,466,-298,843,-588,692,222,-501,-95,-298,-298,-95,-588,-108,-502',
'-588,-588,465,-588,-588,-588,-588,-588,-97,-95,888,-97,614,613,610,614',
'613,612,530,961,614,613,615,722,-97,764,614,613,617,678,-588,-588,-588',
'-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-105,-271,-588',
'-588,-588,-588,651,-110,-102,892,-588,896,-588,-588,612,-103,897,-584',
'-588,612,-588,-588,-588,-588,82,-588,-588,-588,-588,-588,-581,-588,-588',
'-588,-109,464,83,614,613,619,-588,220,847,816,-502,220,84,-588,638,-336',
'-588,-588,218,-588,707,-588,-336,636,530,899,-298,216,-588,-588,791',
'-336,-106,-298,-298,-298,-588,-588,901,-298,-298,903,-298,905,614,613',
'623,905,-487,614,613,628,-498,225,714,-487,911,-94,913,-498,-581,-110',
'-298,-298,-487,-298,-298,-298,-298,-298,-103,-100,221,219,463,220,221',
'219,-493,-494,-336,-336,461,-581,-109,-493,-494,915,712,710,-107,462',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'708,918,-298,-298,-298,919,650,-487,-487,707,-298,-498,220,-298,-499',
'922,225,-490,-298,269,-298,-499,-298,-298,-490,-298,-298,-298,-298,-298',
'-499,-298,-588,-298,221,219,926,-493,-494,-588,-588,-588,-274,704,271',
'-588,-588,-298,-588,411,-298,-298,700,-298,-500,-298,928,-588,707,931',
'933,-500,-298,-298,935,-582,-108,937,-588,-588,-500,-588,-588,-588,-588',
'-588,777,221,225,-499,-499,220,-490,-496,-492,-495,-487,629,523,-497',
'-496,-492,-495,-487,398,222,-497,521,-588,-588,-588,-588,-588,-588,-588',
'-588,-588,-588,-588,-588,-588,-588,225,325,-588,-588,-588,-490,651,-500',
'-500,225,-588,-95,-490,-588,698,697,655,-582,-588,692,-588,-490,-588',
'-588,-104,-588,-588,-588,-588,-588,-101,-588,-588,-588,221,219,-496',
'-492,-495,-487,-582,-289,-497,-110,536,220,963,-588,-289,220,-588,-588',
'532,-97,324,-588,594,-289,245,968,-588,462,-588,-588,751,592,-106,-588',
'-588,-588,-490,-490,-588,-588,-588,220,-588,1030,225,681,-88,245,600',
'979,225,-588,-588,-588,-588,114,242,602,982,265,244,243,-588,-588,987',
'-588,-588,-588,-588,-588,988,220,-289,-289,989,-299,221,219,269,242',
'221,219,-299,244,243,992,240,241,905,905,905,-299,-588,-588,-588,-588',
'-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,221,219,-588,-588',
'-588,997,792,-588,-299,963,-588,215,707,-588,-588,-299,-588,1002,-588',
'1004,-588,1006,-588,-588,-299,-588,-588,-588,-588,-588,221,-588,-588',
'-588,-299,-299,121,122,123,124,125,1008,-298,-501,1008,645,646,-588',
'1008,-298,-588,-588,-588,-588,-585,-588,245,-588,-298,697,212,245,-588',
'-588,245,211,-106,298,72,73,74,9,60,-299,-299,225,66,67,963,1023,225',
'70,245,68,69,71,30,31,75,76,-93,-585,-96,-98,-584,77,28,27,106,105,107',
'108,225,-102,19,-105,-107,-298,-298,640,8,48,300,10,110,109,111,100',
'59,102,101,103,210,104,112,113,127,96,97,44,45,43,245,249,250,251,252',
'262,263,257,258,253,254,-298,238,239,905,963,255,256,-298,40,-272,766',
'33,-585,765,61,62,-298,761,63,778,35,242,939,248,47,244,243,604,240',
'241,261,260,246,20,247,492,596,595,94,82,85,86,220,87,89,88,90,492,751',
'981,632,83,93,400,259,591,-246,225,602,65,795,84,98,99,796,-298,-298',
'41,42,5,72,73,74,9,60,265,756,757,66,67,758,112,113,70,801,68,69,71',
'30,31,75,76,121,122,123,124,125,77,28,27,106,105,107,108,806,503,19',
'221,219,505,-271,640,8,48,7,10,110,109,111,100,59,102,101,103,505,104',
'112,113,692,96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254',
'220,238,239,225,547,255,256,986,40,271,546,33,569,1008,61,62,984,271',
'63,692,35,242,572,248,47,244,243,245,240,241,261,260,246,20,247,816',
'225,225,94,82,85,86,220,87,89,88,90,634,1008,981,635,83,93,639,259,580',
'579,245,602,65,573,84,98,99,734,221,219,41,42,298,72,73,74,9,60,841',
'533,225,66,67,816,849,,70,,68,69,71,30,31,75,76,121,122,123,124,125',
'77,28,27,106,105,107,108,,,19,221,219,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,257,258,253,254,,238,239,,,255,256,,40,,,33,569,,61,62,,,63,,35',
'242,572,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,259,580,579,262,263,65,573,84,98,99,,,,41,42,298',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,261,260,,,77,28',
'27,106,105,107,108,,954,19,561,560,559,,562,8,48,300,10,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252',
'262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35',
'242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,',
'66,67,,,,70,,68,69,71,30,31,75,76,121,122,123,124,125,77,28,27,106,105',
'107,108,,954,19,561,560,559,,562,8,48,300,10,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257',
'258,253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47',
'244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,',
'83,93,,259,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300',
'10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249',
'250,251,252,262,263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61',
'62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84,98,99,,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,238,239',
',,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,259,,,,,65,,84',
'98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262',
'263,257,258,253,254,,238,239,,,255,256,,40,,,33,,,61,62,,,63,,35,242',
',248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,225,259,,,,,65,,84,98,99,,,,41,42,5,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,564,19',
'561,560,559,,562,8,48,7,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,564,,561,560,559,,562,,716,,564,,561,560,559,,562,719',
',40,,,33,,,61,62,,245,63,564,35,561,560,559,47,562,716,,,,,,,20,,719',
'716,,94,82,85,86,,87,89,88,90,,,242,,83,93,244,243,,716,,,65,,84,98',
'99,,910,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,19,,,245,,,8,48,300,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,245,-609,-609,-609,-609',
'262,263,242,,-609,-609,244,243,,240,241,255,256,,40,,,302,,,61,62,,',
'63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
'564,19,561,560,559,,562,8,48,300,10,110,109,111,100,59,102,101,103,',
'104,112,113,,96,97,44,45,43,245,-609,-609,-609,-609,262,263,,716,-609',
'-609,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240',
'241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,564,19,561,560,559,,562,8,48,300',
'10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249',
'250,251,252,262,263,,716,253,254,,,,,,255,256,,40,,,33,,,61,62,,,63',
',35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
'564,19,561,560,559,,562,8,48,300,10,110,109,111,100,59,102,101,103,',
'104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263,257,716,253',
'254,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240',
'241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,564,19,561,560,559,,562,8,48,300',
'10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,',
',,,,,,716,,,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243',
',240,241,,,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252',
'262,263,257,258,253,254,,-609,-609,,,255,256,,40,,,33,,,61,62,,,63,',
'35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,',
'66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,245,249,250,251,252,262,263,257,258,253,254,,-609,-609,,,255',
'256,,40,,,302,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260',
'246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,',
',77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40',
',,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,,,246,20,247,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,245,249,250,251,252,262,263,257,258,253,254,,-609,-609',
',,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,245,249,250,251,252,262,263',
'257,258,253,254,,-609,-609,,,255,256,,40,,,33,,,61,62,,,63,,35,242,',
'248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,',
'8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,245,-609,-609,-609,-609,262,263,,,-609,-609,,,,,,255,256,,40,,,302',
',,61,62,,,63,,35,242,,248,47,244,243,,240,241,261,260,246,20,247,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72',
'73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105',
'107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,44,45,43,245,-609,-609,-609,-609,262,263,,,-609,-609,,,,',
',255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,261',
'260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,245,-609,-609,-609,-609,262',
'263,,,-609,-609,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244',
'243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,-609,-609',
'-609,-609,262,263,,,-609,-609,,,,,,255,256,,40,,,33,,,61,62,,,63,,35',
'242,,248,47,244,243,,240,241,261,260,246,20,247,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,',
',,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33,,,61,62,,,63,,35,242,,,47',
'244,243,,240,241,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,',
',,,255,256,,40,,,33,,,61,62,,,63,,35,242,,248,47,244,243,,240,241,,',
',20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,245,,,,,,,,,,,,,,,,255,256,,40,,,33',
',,61,62,,,63,,35,242,,248,47,244,243,,240,241,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,298,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,',
',19,,,,,,8,48,300,10,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,298,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62',
',,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,416,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,416,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236',
',,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,',
'61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101',
'103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61',
'62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59',
'102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236',
',,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,225,,,,,,65,,84,98,99,,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,7,10,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,230,,,236,,,61,62,,,63,,675,,,,47,,,,,,,,,235,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,-590,,65,,84,98,99,-590,-590,-590,41,42,-590',
'-590,-590,,-590,,,,,,,,,-590,-590,-590,-590,,,,,,,,-590,-590,,-590,-590',
'-590,-590,-590,,,,,,,,,,,,,,,,,,,,,,,-590,-590,-590,-590,-590,-590,-590',
'-590,-590,-590,-590,-590,-590,-590,,,-590,-590,-590,,,-590,,,-590,,',
'-590,-590,,-590,,-590,,-590,,-590,-590,,-590,-590,-590,-590,-590,,-590',
'-590,-590,,,,,,,,,,,,,,-590,,,-590,-590,-590,-590,,-590,,-590,,,,,-590',
'-590,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'106,105,107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,',
',,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74',
'65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320',
'106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,',
',,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74',
'65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320',
'106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,',
',,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74',
'65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106',
'105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104',
'112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289',
',287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62',
',,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62',
',,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62',
',,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292',
'104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63',
',289,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,300,10,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,400,65,,84,98,99,,,,41,42,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,287,,47,,,293',
',,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112',
'113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,675,',
'287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,,-416',
',65,,84,98,99,-416,-416,-416,41,42,-416,-416,-416,,-416,,,,,,,,,-416',
'-416,-416,,,,,,,,,-416,-416,,-416,-416,-416,-416,-416,,,,,,,,,,,,,,',
',,,,,,,,-416,-416,-416,-416,-416,-416,-416,-416,-416,-416,-416,-416',
'-416,-416,,,-416,-416,-416,,,-416,,271,-416,,,-416,-416,,-416,,-416',
',-416,,-416,-416,,-416,-416,-416,-416,-416,-305,-416,-416,-416,,,,-305',
'-305,-305,,,-305,-305,-305,,-305,-416,,,-416,-416,,-416,,-416,-305,-305',
',,,,-416,-416,,,-305,-305,,-305,-305,-305,-305,-305,,,,,,,,,,,,,,,,',
',,,,,,-305,-305,-305,-305,-305,-305,-305,-305,-305,-305,-305,-305,-305',
'-305,,,-305,-305,-305,,,-305,,280,-305,,,-305,-305,,-305,,-305,,-305',
',-305,-305,,-305,-305,-305,-305,-305,,-305,,-305,,,,,,,,,,,,,,-305,',
',-305,-305,,-305,,-305,72,73,74,,60,,-305,-305,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111',
'100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,230,,,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,',
',110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,',
',,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,-290,,65,,84,98',
'99,-290,-290,-290,41,42,-290,-290,-290,,-290,,,,,,,,,,-290,-290,-290',
',,,,,,,-290,-290,,-290,-290,-290,-290,-290,,,,,,,,,,,,,,,,,,,,,,,-290',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,,,-290',
'-290,-290,,,-290,,,-290,,,-290,-290,,-290,,-290,,-290,,-290,-290,,-290',
'-290,-290,-290,-290,,-290,,-290,,,,,,,,,,,,,,-290,,,-290,-290,-290,-290',
',-290,,-290,,,,,-290,-290,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40',
',,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,289,,,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,293,,,,,,235,,,,,94,290,85,86',
',87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110',
'109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,118,,,,,117,65,,84,98,99,,,,41,42,72,73,74,9,60,,,,66,67,,',
',70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8',
'48,7,10,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,400,65,,84,98,99,,,,41,42,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,',
',,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41',
'42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,-589,,65,,84,98,99,-589,-589',
'-589,41,42,-589,-589,-589,,-589,,,,,,,,,-589,-589,-589,-589,,,,,,,,-589',
'-589,,-589,-589,-589,-589,-589,,,,,,,,,,,,,,,,,,,,,,,-589,-589,-589',
'-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,,,-589,-589,-589',
',,-589,,,-589,,,-589,-589,,-589,,-589,,-589,,-589,-589,,-589,-589,-589',
'-589,-589,,-589,-589,-589,,,,,,,,,,,,,,-589,,,-589,-589,-589,-589,,-589',
',-589,,,,,-589,-589,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102',
'101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236',
',,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88',
'90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111',
'100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,230,,,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,',
',110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,',
',,,94,290,85,86,,87,89,88,90,,,,,83,93,225,,,72,73,74,65,60,84,98,99',
'66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,72',
'73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105',
'107,108,,,19,,,,,,8,48,,10,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,536,,61,62,,,63,,,,,,47,,,',
',,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,416,,,,47',
',,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60',
'84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106',
'105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47',
',,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60',
'84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106',
'105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47',
',,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60',
'84,98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105',
'107,108,,,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237',
',,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237',
',,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289,,287,,47,,,293',
',,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107',
'108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,',
',,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,41,42,70,,68,69,71,30,31,75,76,,,,,,77,28,27,106,105,107,108',
',,19,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,287,,47,,,293',
',,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105',
'107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112',
'113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,675,',
'287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62',
',,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,8,48,,10,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100,59',
'102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71',
'317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,230,,,236,,,61,62,,,63,,769,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,19,,,,,,,48,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111',
'100,59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,317,318',
'75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230,',
',236,,,61,62,,,63,,,,,,47,,,,,,,,,235,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290,85,86,,87',
'89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,106,105,107,108,,,237,,,,,,,48,,,110,109',
'111,100,59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,230,,,236,,,61,62,,,63,,289,,287,,47,,,293,,,,,,235,,,,,94,290',
'85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,41,42',
'70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,',
',,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,289,,,,47,,,,,,,,,235,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,',
'237,,,,,,,48,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,,,,,,,235',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66',
'67,,41,42,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,48,,,110,109,111,100,59,102,101,103,292,104,112,113,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,230,,,236,,,61,62,,,63,,,,,,47,,,293',
',,,,,235,,,,,94,290,85,86,,87,89,88,90,,,,,83,93,,,,,-254,,65,,84,98',
'99,-254,-254,-254,41,42,-254,-254,-254,,-254,,,,,,,,,-254,-254,-254',
',,,,,,,,-254,-254,,-254,-254,-254,-254,-254,,,,,,,,,,,,,,,,,,,,,,,-254',
'-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,,,-254',
'-254,-254,,,-254,,271,-254,,,-254,-254,,-254,,-254,,-254,,-254,-254',
',-254,-254,-254,-254,-254,,-254,-254,-254,,,,,,,,,,,,,,-254,,,-254,-254',
',-254,,-254,72,73,74,,60,,-254,-254,66,67,,,,70,,68,69,71,317,318,75',
'76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,48,,,110,109,111,100',
'59,102,101,103,292,104,112,113,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,230',
',,236,,,61,62,,,63,,675,,,,47,,,293,,,,,,235,,,,,94,290,85,86,,87,89',
'88,90,,,,,83,93,,,,,-254,,65,,84,98,99,-254,-254,-254,41,42,-254,-254',
'-254,564,-254,561,560,559,569,562,,,,-254,-254,,,,572,,,,,,-254,-254',
',-254,-254,-254,-254,-254,564,,561,560,559,569,562,564,567,561,560,559',
'569,562,,572,,577,576,580,579,,572,,573,,564,,561,560,559,569,562,-254',
',,,567,,,-254,572,,,567,271,-254,,580,579,225,,,573,,580,579,,,,573',
',,567,,,,,-254,-254,,,577,576,580,579,,,,573,,,,-254,,,-254,,72,73,74',
'-254,60,,,,66,67,-254,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106',
'105,107,108,,,237,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112',
'113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,',
',,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98',
'99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108',
',,237,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97',
',,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,',
'70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,',
',,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,',
',,,,,,,,,,,,,,,,,941,,,236,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68',
'69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,315',
',,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,',
',,,,,,,,,,311,,,307,,,61,62,,,63,,306,,,,,,,,,,,,,,,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69',
'71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,315,,,110',
'109,111,365,59,102,101,366,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,',
',372,,,367,,,236,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317',
'318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,315,,,110,109',
'111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,',
'947,,,236,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75',
'76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,,315,,,110,109,111,365',
'59,102,101,366,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,367,,,236',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,',
',,72,73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77',
'314,320,106,105,107,108,,,237,,,,,,,315,,,110,109,111,100,59,102,101',
'103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,360,,,33,,,61,62,,',
'63,,35,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73',
'74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320',
'106,105,107,108,,,237,,,,,,,315,,,110,109,111,100,59,102,101,103,,104',
'112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84',
'98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107',
'108,,,237,,,,,,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96',
'97,,,321,,,,,,,,,,,,,,,,,,,,941,,,236,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72,73,74,65,60,84,98,99,66,67',
',,,70,,68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237',
',,,,,,315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321',
',,,,,,,,,,,,,,,,,,,311,,,236,,,61,62,,,63,,,564,,561,560,559,569,562',
',,,,,,,,572,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,519,,567,65,,84,98',
'99,72,73,74,,60,580,579,,66,67,573,,,70,,68,69,71,317,318,75,76,,,,',
',77,314,320,106,105,107,108,,,237,,,,,,,315,,,110,109,111,100,59,102',
'101,103,,104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,307,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,72',
'73,74,65,60,84,98,99,66,67,,,,70,,68,69,71,317,318,75,76,,,,,,77,314',
'320,106,105,107,108,,,237,,,,,,,315,,,110,109,111,100,59,102,101,103',
',104,112,113,,96,97,,,321,,,,,,,,,,,,,,,,,,,,311,,,236,,,61,62,,,63',
',,564,,561,560,559,569,562,,,,,,,,,572,,94,82,85,86,,87,89,88,90,,,',
',83,93,,,,323,,567,65,,84,98,99,72,73,74,,60,580,579,,66,67,573,,,70',
',68,69,71,317,318,75,76,,,,,,77,314,320,106,105,107,108,,,237,,,,,,',
'315,,,110,109,111,100,59,102,101,103,,104,112,113,,96,97,,,321,,,,,',
',,,,,,,,,,,,,,311,,,307,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,177,188,178,201,174,194,184',
'183,204,205,199,182,181,176,202,206,207,186,175,189,193,195,187,180',
',,,196,203,198,197,190,200,185,173,192,191,,,,,,172,179,170,171,167',
'168,169,130,132,129,,131,,,,,,,,161,162,,158,140,141,142,149,146,148',
',,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154,,139,160,157,156,165',
'152,153,147,145,137,159,138,,,166,94,,,,,,,,,,,,,,93,177,188,178,201',
'174,194,184,183,204,205,199,182,181,176,202,206,207,186,175,189,193',
'195,187,180,,,,196,203,198,197,190,200,185,173,192,191,,,,,,172,179',
'170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158,140,141,142,149',
'146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,,,166,94,,,,,,,,,,,,,,93,177,188',
'178,201,174,194,184,183,204,205,199,182,181,176,202,206,207,186,175',
'189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192,191,,,,,',
'172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158,140,141',
'142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,,,166,94,,,,,,,,,,,,,,93',
'177,188,178,201,174,194,184,183,204,205,199,182,181,176,202,206,207',
'186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192,191',
',,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,,,166,94,,,,,,,,,,',
',,,93,177,188,178,201,174,194,184,183,204,205,199,182,181,176,202,206',
'207,186,175,189,193,195,187,180,,,,196,203,198,197,190,200,185,173,192',
'191,,,,,,172,179,170,171,167,168,169,130,132,,,131,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,,,166,177,188,178',
'201,174,194,184,183,204,205,199,182,181,176,202,206,207,186,175,189',
'193,195,187,180,,,,196,203,198,383,382,384,381,173,192,191,,,,,,172',
'179,170,171,378,379,380,376,132,102,101,377,,104,,,,,,161,162,,158,140',
'141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,388,,,,,,,,155',
'154,,139,160,157,156,165,152,153,147,145,137,159,138,452,442,166,,453',
',,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150',
'151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137',
'159,138,774,449,166,,773,,,,,,,,161,162,,158,140,141,142,149,146,148',
',,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156',
'165,152,153,147,145,137,159,138,771,442,166,,772,,,,,,,,161,162,,158',
'140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,',
',155,154,,139,160,157,156,165,152,153,147,145,137,159,138,1017,449,166',
',1018,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164',
'150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145',
'137,159,138,1015,442,166,,1016,,,,,,,,161,162,,158,140,141,142,149,146',
'148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157',
'156,165,152,153,147,145,137,159,138,1012,449,166,,1011,,,,,,,,161,162',
',158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,',
',,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,685,442',
'166,,686,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163',
'164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147',
'145,137,159,138,688,449,166,,689,,,,,,,,161,162,,158,140,141,142,149',
'146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160',
'157,156,165,152,153,147,145,137,159,138,658,449,166,,659,,,,,,,,161',
'162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271',
',,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138,656',
'442,166,,657,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144,',
',,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152,153',
'147,145,137,159,138,658,449,166,,659,,,,,,,,161,162,,158,140,141,142',
'149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,656,442,166,,657,,,,,,,',
'161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,',
',,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138',
'438,442,166,,439,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144',
',,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152',
'153,147,145,137,159,138,445,449,166,,444,,,,,,,,161,162,,158,140,141',
'142,149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154',
',139,160,157,156,165,152,153,147,145,137,159,138,452,442,166,,453,,',
',,,,,161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151',
',,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138',
'452,442,166,,453,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144',
',,,163,164,150,151,,,,,,,,,,,,,,155,154,,139,160,157,156,165,152,153',
'147,145,137,159,138,737,442,166,,738,,,,,,,,161,162,,158,140,141,142',
'149,146,148,,,143,144,,,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139',
'160,157,156,165,152,153,147,145,137,159,138,739,449,166,,740,,,,,,,',
'161,162,,158,140,141,142,149,146,148,,,143,144,,,,163,164,150,151,,',
',,,271,,,,,,,,155,154,,139,160,157,156,165,152,153,147,145,137,159,138',
'742,449,166,,743,,,,,,,,161,162,,158,140,141,142,149,146,148,,,143,144',
',,,163,164,150,151,,,,,,271,,,,,,,,155,154,,139,160,157,156,165,152',
'153,147,145,137,159,138,,564,166,561,560,559,569,562,,564,,561,560,559',
'569,562,572,,,,,,,,572,,564,,561,560,559,569,562,,,,,,567,,,572,,,,',
'567,577,576,580,579,,,,573,577,576,580,579,,,,573,567,,564,,561,560',
'559,569,562,577,576,580,579,,,,573,572,,564,,561,560,559,569,562,564',
',561,560,559,569,562,,572,,,,,567,,572,,,,,,,577,576,580,579,,,,573',
'567,,,,,,,567,,,,580,579,,,,573,,580,579,,,564,573,561,560,559,569,562',
'564,,561,560,559,569,562,,572,,,,,,564,572,561,560,559,569,562,564,',
'561,560,559,569,562,,572,567,550,,,,,572,567,,577,576,580,579,,,,573',
',580,579,,567,,573,,,,,567,,577,576,580,579,,,,573,,580,579,,,564,573',
'561,560,559,569,562,,564,,561,560,559,569,562,572,,,,,,,,572,,564,,561',
'560,559,569,562,,,,,,567,,,572,,,,,567,577,576,580,579,,,,573,577,576',
'580,579,,,,573,567,,564,,561,560,559,569,562,577,576,580,579,,,,573',
'572,,564,,561,560,559,569,562,,,,,,,,,572,,,,,567,,,,,,,,,,,580,579',
',,,573,567,,,,,,,,,,,580,579,,,,573' ]
        racc_action_table = arr = ::Array.new(25263, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'100,737,64,457,457,595,358,100,100,100,736,891,100,100,100,19,100,669',
'797,395,680,589,609,609,100,396,100,100,100,3,999,999,357,680,3,852',
'100,100,1028,100,100,100,100,100,948,945,349,350,914,322,361,702,669',
'797,987,129,19,296,316,367,129,129,296,367,738,320,100,100,100,100,100',
'100,100,100,100,100,100,100,100,100,695,695,100,100,100,395,100,100',
'586,64,100,396,340,100,100,340,100,457,100,917,100,917,100,100,944,100',
'100,100,100,100,737,100,103,100,595,358,609,605,605,103,103,103,316',
'1017,103,103,103,100,103,891,100,100,100,100,891,100,103,100,103,103',
'103,357,100,100,852,316,100,686,103,103,1016,103,103,103,103,103,1028',
'1018,1015,361,702,1028,948,945,349,350,914,948,945,349,350,914,987,738',
'695,794,315,987,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,586,314,103,103,103,586,103,103,1017,665,103,1027,861,103,103,740',
'103,861,103,605,103,686,103,103,605,103,103,103,103,103,944,103,659',
'103,772,944,745,771,311,659,659,659,1018,794,659,659,659,103,659,1017',
'103,103,103,103,1017,103,305,103,659,659,659,686,103,103,686,749,103',
'685,659,659,735,659,659,659,659,659,1016,686,348,348,740,1016,856,1018',
'1015,26,354,856,1018,1015,739,354,321,321,772,304,665,771,659,659,659',
'659,659,659,659,659,659,659,659,659,659,659,707,707,659,659,659,865',
'659,659,701,588,659,701,740,659,659,587,659,303,659,620,659,685,659',
'659,301,659,659,659,659,659,390,659,444,659,43,43,768,26,300,444,444',
'444,770,739,434,444,444,659,444,436,659,659,659,659,583,659,288,659',
'321,321,26,685,659,659,685,865,659,811,444,444,779,444,444,444,444,444',
'735,685,285,735,284,735,688,620,620,437,719,739,719,719,719,270,719',
'620,390,390,390,581,444,444,444,444,444,444,444,444,444,444,444,444',
'444,444,43,43,444,444,444,910,444,910,910,910,444,910,339,444,952,339',
'507,952,444,622,444,811,444,444,391,444,444,444,444,444,392,444,774',
'444,343,688,688,343,578,774,774,774,14,14,800,774,774,444,774,237,444',
'444,656,444,233,444,719,774,810,423,228,811,444,444,811,742,444,229',
'774,774,232,774,774,774,774,774,688,811,814,688,507,507,507,622,622',
'393,463,910,391,391,391,574,688,622,392,392,392,507,774,774,774,774',
'774,774,774,774,774,774,774,774,774,774,656,817,774,774,774,742,774',
'423,228,818,774,825,742,774,394,229,826,742,774,397,774,742,774,774',
'80,774,774,774,774,774,365,774,774,774,463,231,80,393,393,393,742,422',
'725,725,39,16,80,774,422,49,774,774,16,774,827,774,49,422,325,831,773',
'16,774,774,657,49,774,773,773,773,742,742,832,773,773,834,773,835,394',
'394,394,837,365,397,397,397,380,840,566,365,842,39,845,380,365,231,773',
'773,365,773,773,773,773,773,39,325,422,422,230,227,16,16,383,384,49',
'49,227,365,325,383,384,848,557,556,657,227,773,773,773,773,773,773,773',
'773,773,773,773,773,773,773,555,853,773,773,773,855,773,365,365,553',
'773,380,386,773,308,859,860,377,773,386,773,308,773,773,377,773,773',
'773,773,773,308,773,445,773,227,227,863,383,384,445,445,445,864,552',
'446,445,445,773,445,208,773,773,540,773,309,773,873,445,874,876,877',
'309,773,773,878,366,773,880,445,445,309,445,445,445,445,445,641,386',
'881,308,308,310,377,379,382,381,376,406,310,378,379,382,381,376,114',
'17,378,310,445,445,445,445,445,445,445,445,445,445,445,445,445,445,48',
'40,445,445,445,366,445,309,309,539,445,641,366,445,538,537,459,366,445',
'528,445,366,445,445,641,445,445,445,445,445,17,445,445,445,310,310,379',
'382,381,376,366,312,378,17,525,326,912,445,312,359,445,445,326,445,37',
'445,359,312,469,921,658,326,445,445,925,359,445,658,658,658,366,366',
'658,658,658,369,658,1024,520,518,515,484,369,938,514,658,658,658,658',
'1,469,369,941,22,469,469,658,658,947,658,658,658,658,658,950,24,312',
'312,951,524,326,326,24,484,359,359,524,484,484,956,484,484,957,958,959',
'524,658,658,658,658,658,658,658,658,658,658,658,658,658,658,369,369',
'658,658,658,960,658,658,598,962,658,15,970,658,658,598,658,973,658,974',
'658,975,658,658,598,658,658,658,658,658,24,658,658,658,524,524,299,299',
'299,299,299,976,689,38,978,438,439,658,1035,689,658,658,658,658,689',
'658,471,658,689,983,13,472,658,658,473,12,658,585,585,585,585,585,585',
'598,598,498,585,585,998,1000,494,585,474,585,585,585,585,585,585,585',
'38,1011,438,439,1012,585,585,585,585,585,585,585,1014,38,585,438,439',
'689,689,427,585,585,585,585,585,585,585,585,585,585,585,585,10,585,585',
'585,7,585,585,585,585,585,427,427,427,427,427,427,427,427,427,427,427',
'743,427,427,1020,1021,427,427,743,585,633,627,585,743,625,585,585,743',
'617,585,642,585,427,882,427,585,427,427,371,427,427,427,427,427,585',
'427,647,362,360,585,585,585,585,940,585,585,585,585,652,607,940,412',
'585,585,356,427,355,427,660,940,585,661,585,585,585,662,743,743,585',
'585,127,127,127,127,127,127,664,613,613,127,127,613,613,613,127,668',
'127,127,127,127,127,127,127,336,336,336,336,336,127,127,127,127,127',
'127,127,670,672,127,940,940,674,415,433,127,127,127,127,127,127,127',
'127,127,127,127,127,344,127,127,127,682,127,127,127,127,127,433,433',
'433,433,433,433,433,433,433,433,433,946,433,433,684,342,433,433,946',
'127,687,341,127,704,1026,127,127,946,690,127,691,127,433,704,433,127',
'433,433,694,433,433,433,433,433,127,433,696,337,703,127,127,127,127',
'980,127,127,127,127,417,1025,980,420,127,127,424,433,704,704,331,980',
'127,704,127,127,127,590,946,946,127,127,871,871,871,871,871,871,718',
'329,720,871,871,727,733,,871,,871,871,871,871,871,871,871,512,512,512',
'512,512,871,871,871,871,871,871,871,,,871,980,980,,,,871,871,871,871',
'871,871,871,871,871,871,871,871,,871,871,871,,871,871,871,871,871,21',
'21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,871,,,871,928,,871,871',
',,871,,871,21,928,21,871,21,21,,21,21,21,21,21,871,21,,,,871,871,871',
'871,,871,871,871,871,,,,,871,871,,21,928,928,46,46,871,928,871,871,871',
',,,871,871,210,210,210,210,210,210,,,,210,210,,,,210,,210,210,210,210',
'210,210,210,,46,46,,,210,210,210,210,210,210,210,,991,210,991,991,991',
',991,210,210,210,210,210,210,210,210,210,210,210,210,,210,210,210,,210',
'210,210,210,210,776,776,776,776,776,776,776,776,776,776,776,,776,776',
',,776,776,,210,,,210,,,210,210,,,210,,210,776,,776,210,776,776,,776',
'776,776,776,776,210,776,,,,210,210,210,210,,210,210,210,210,,,,,210',
'210,,776,,,,,210,,210,210,210,,,,210,210,352,352,352,352,352,352,,,',
'352,352,,,,352,,352,352,352,352,352,352,352,6,6,6,6,6,352,352,352,352',
'352,352,352,,896,352,896,896,896,,896,352,352,352,352,352,352,352,352',
'352,352,352,352,,352,352,352,,352,352,352,352,352,282,282,282,282,282',
'282,282,282,282,282,282,,282,282,,,282,282,,352,,,352,,,352,352,,,352',
',352,282,,282,352,282,282,,282,282,282,282,282,352,282,,,,352,352,352',
'352,,352,352,352,352,,,,,352,352,,282,,,,,352,,352,352,352,,,,352,352',
'582,582,582,582,582,582,,,,582,582,,,,582,,582,582,582,582,582,582,582',
',,,,,582,582,582,582,582,582,582,,,582,,,,,,582,582,582,582,582,582',
'582,582,582,582,582,582,,582,582,582,,582,582,582,582,582,870,870,870',
'870,870,870,870,870,870,870,870,,870,870,,,870,870,,582,,,582,,,582',
'582,,,582,,582,870,,870,582,870,870,,870,870,870,870,870,582,870,,,',
'582,582,582,582,,582,582,582,582,,,,,582,582,,870,,,,,582,,582,582,582',
',,,582,582,335,335,335,335,335,335,,,,335,335,,,,335,,335,335,335,335',
'335,335,335,,,,,,335,335,335,335,335,335,335,,,335,,,,,,335,335,335',
'335,335,335,335,335,335,335,335,335,,335,335,335,,335,335,335,335,335',
'535,535,535,535,535,535,535,535,535,535,535,,535,535,,,535,535,,335',
',,335,,,335,335,,,335,,335,535,,535,335,535,535,,535,535,535,535,535',
'335,535,,,,335,335,335,335,,335,335,335,335,,,,,335,335,,535,,,,,335',
',335,335,335,,,,335,335,741,741,741,741,741,741,,,,741,741,,,,741,,741',
'741,741,741,741,741,741,,,,,,741,741,741,741,741,741,741,,,741,,,,,',
'741,741,741,741,741,741,741,741,741,741,741,741,,741,741,741,,741,741',
'741,741,741,488,488,488,488,488,488,488,488,488,488,488,,488,488,,,488',
'488,,741,,,741,,,741,741,,,741,,741,488,,488,741,488,488,,488,488,488',
'488,488,741,488,,,,741,741,741,741,,741,741,741,741,,,,,741,741,488',
'488,,,,,741,,741,741,741,,,,741,741,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0',
'0,0,0,,,,,,0,0,0,0,0,0,0,,716,0,716,716,716,,716,0,0,0,0,0,0,0,0,0,0',
'0,0,,0,0,0,,0,0,0,0,0,567,,567,567,567,,567,,716,,997,,997,997,997,',
'997,716,,0,,,0,,,0,0,,470,0,841,0,841,841,841,0,841,567,,,,,,,0,,567',
'997,,0,0,0,0,,0,0,0,0,,,470,,0,0,470,470,,841,,,0,,0,0,0,,841,,0,0,33',
'33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,485,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33',
',33,33,33,33,33,482,482,482,482,482,482,482,485,,482,482,485,485,,485',
'485,482,482,,33,,,33,,,33,33,,,33,,33,482,,482,33,482,482,,482,482,482',
'482,482,33,482,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33',
'33,,,,33,33,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857',
'857,857,857,,,,,,857,857,857,857,857,857,857,,963,857,963,963,963,,963',
'857,857,857,857,857,857,857,857,857,857,857,857,,857,857,857,,857,857',
'857,857,857,483,483,483,483,483,483,483,,963,483,483,,,,,,483,483,,857',
',,857,,,857,857,,,857,,857,483,,483,857,483,483,,483,483,483,483,483',
'857,483,,,,857,857,857,857,,857,857,857,857,,,,,857,857,,,,,,,857,,857',
'857,857,,,,857,857,964,964,964,964,964,964,,,,964,964,,,,964,,964,964',
'964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,843,964,843,843',
'843,,843,964,964,964,964,964,964,964,964,964,964,964,964,,964,964,964',
',964,964,964,964,964,486,486,486,486,486,486,486,,843,486,486,,,,,,486',
'486,,964,,,964,,,964,964,,,964,,964,486,,486,964,486,486,,486,486,486',
'486,486,964,486,,,,964,964,964,964,,964,964,964,964,,,,,964,964,,,,',
',,964,,964,964,964,,,,964,964,746,746,746,746,746,746,,,,746,746,,,',
'746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746,,961',
'746,961,961,961,,961,746,746,746,746,746,746,746,746,746,746,746,746',
',746,746,746,,746,746,746,746,746,487,487,487,487,487,487,487,487,961',
'487,487,,,,,,487,487,,746,,,746,,,746,746,,,746,,746,487,,487,746,487',
'487,,487,487,487,487,487,746,487,,,,746,746,746,746,,746,746,746,746',
',,,,746,746,,,,,,,746,,746,746,746,,,,746,746,969,969,969,969,969,969',
',,,969,969,,,,969,,969,969,969,969,969,969,969,,,,,,969,969,969,969',
'969,969,969,,911,969,911,911,911,,911,969,969,969,969,969,969,969,969',
'969,969,969,969,,969,969,969,,969,969,969,969,969,489,,,,,,,,911,,,',
',,,,489,489,,969,,,969,,,969,969,,,969,,969,489,,489,969,489,489,,489',
'489,,,489,969,489,,,,969,969,969,969,,969,969,969,969,,,,,969,969,,',
',,,,969,,969,969,969,,,,969,969,851,851,851,851,851,851,,,,851,851,',
',,851,,851,851,851,851,851,851,851,,,,,,851,851,851,851,851,851,851',
',,851,,,,,,851,851,851,851,851,851,851,851,851,851,851,851,,851,851',
'851,,851,851,851,851,851,468,468,468,468,468,468,468,468,468,468,468',
',468,468,,,468,468,,851,,,851,,,851,851,,,851,,851,468,,468,851,468',
'468,,468,468,468,468,468,851,468,,,,851,851,851,851,,851,851,851,851',
',,,,851,851,,,,,,,851,,851,851,851,,,,851,851,307,307,307,307,307,307',
',,,307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307,307,307,307',
'307,307,307,,,307,,,,,,307,307,307,307,307,307,307,307,307,307,307,307',
',307,307,307,,307,307,307,307,307,467,467,467,467,467,467,467,467,467',
'467,467,,467,467,,,467,467,,307,,,307,,,307,307,,,307,,307,467,,467',
'307,467,467,,467,467,467,467,467,307,467,,,,307,307,307,307,,307,307',
'307,307,,,,,307,307,,,,,,,307,,307,307,307,,,,307,307,816,816,816,816',
'816,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,,816,816',
'816,816,816,816,816,,,816,,,,,,816,816,816,816,816,816,816,816,816,816',
'816,816,,816,816,816,,816,816,816,816,816,534,,,,,,,,,,,,,,,,534,534',
',816,,,816,,,816,816,,,816,,816,534,,534,816,534,534,,534,534,,,534',
'816,534,,,,816,816,816,816,,816,816,816,816,,,,,816,816,,,,,,,816,,816',
'816,816,,,,816,816,236,236,236,236,236,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,236',
'236,236,236,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236',
'236,236,328,328,328,328,328,328,328,328,328,328,328,,328,328,,,328,328',
',236,,,236,,,236,236,,,236,,236,328,,328,236,328,328,,328,328,328,328',
'328,236,328,,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,,,,236',
',236,236,236,,,,236,236,805,805,805,805,805,805,,,,805,805,,,,805,,805',
'805,805,805,805,805,805,,,,,,805,805,805,805,805,805,805,,,805,,,,,',
'805,805,805,805,805,805,805,805,805,805,805,805,,805,805,805,,805,805',
'805,805,805,327,327,327,327,327,327,327,327,327,327,327,,327,327,,,327',
'327,,805,,,805,,,805,805,,,805,,805,327,,327,805,327,327,,327,327,327',
'327,327,805,327,,,,805,805,805,805,,805,805,805,805,,,,,805,805,,,,',
',,805,,805,805,805,,,,805,805,302,302,302,302,302,302,,,,302,302,,,',
'302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302,,',
'302,,,,,,302,302,302,302,302,302,302,302,302,302,302,302,,302,302,302',
',302,302,302,302,302,478,478,478,478,478,478,478,,,478,478,,,,,,478',
'478,,302,,,302,,,302,302,,,302,,302,478,,478,302,478,478,,478,478,478',
'478,478,302,478,,,,302,302,302,302,,302,302,302,302,,,,,302,302,,,,',
',,302,,302,302,302,,,,302,302,750,750,750,750,750,750,,,,750,750,,,',
'750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,',
'750,,,,,,750,750,750,750,750,750,750,750,750,750,750,750,,750,750,750',
',750,750,750,750,750,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,750,,,750,,,750,750,,,750,,750,479,,479,750,479,479,,479,479,479',
'479,479,750,479,,,,750,750,750,750,,750,750,750,750,,,,,750,750,,,,',
',,750,,750,750,750,,,,750,750,760,760,760,760,760,760,,,,760,760,,,',
'760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760,,',
'760,,,,,,760,760,760,760,760,760,760,760,760,760,760,760,,760,760,760',
',760,760,760,760,760,480,480,480,480,480,480,480,,,480,480,,,,,,480',
'480,,760,,,760,,,760,760,,,760,,760,480,,480,760,480,480,,480,480,480',
'480,480,760,480,,,,760,760,760,760,,760,760,760,760,,,,,760,760,,,,',
',,760,,760,760,760,,,,760,760,888,888,888,888,888,888,,,,888,888,,,',
'888,,888,888,888,888,888,888,888,,,,,,888,888,888,888,888,888,888,,',
'888,,,,,,888,888,888,888,888,888,888,888,888,888,888,888,,888,888,888',
',888,888,888,888,888,481,481,481,481,481,481,481,,,481,481,,,,,,481',
'481,,888,,,888,,,888,888,,,888,,888,481,,481,888,481,481,,481,481,481',
'481,481,888,481,,,,888,888,888,888,,888,888,888,888,,,,,888,888,,,,',
',,888,,888,888,888,,,,888,888,895,895,895,895,895,895,,,,895,895,,,',
'895,,895,895,895,895,895,895,895,,,,,,895,895,895,895,895,895,895,,',
'895,,,,,,895,895,895,895,895,895,895,895,895,895,895,895,,895,895,895',
',895,895,895,895,895,477,,,,,,,,,,,,,,,,477,477,,895,,,895,,,895,895',
',,895,,895,477,,,895,477,477,,477,477,,,,895,,,,,895,895,895,895,,895',
'895,895,895,,,,,895,895,,,,,,,895,,895,895,895,,,,895,895,894,894,894',
'894,894,894,,,,894,894,,,,894,,894,894,894,894,894,894,894,,,,,,894',
'894,894,894,894,894,894,,,894,,,,,,894,894,894,894,894,894,894,894,894',
'894,894,894,,894,894,894,,894,894,894,894,894,476,,,,,,,,,,,,,,,,476',
'476,,894,,,894,,,894,894,,,894,,894,476,,476,894,476,476,,476,476,,',
',894,,,,,894,894,894,894,,894,894,894,894,,,,,894,894,,,,,,,894,,894',
'894,894,,,,894,894,606,606,606,606,606,606,,,,606,606,,,,606,,606,606',
'606,606,606,606,606,,,,,,606,606,606,606,606,606,606,,,606,,,,,,606',
'606,606,606,606,606,606,606,606,606,606,606,,606,606,606,,606,606,606',
'606,606,475,,,,,,,,,,,,,,,,475,475,,606,,,606,,,606,606,,,606,,606,475',
',475,606,475,475,,475,475,,,,606,,,,,606,606,606,606,,606,606,606,606',
',,,,606,606,,,,,,,606,,606,606,606,,,,606,606,943,943,943,943,943,943',
',,,943,943,,,,943,,943,943,943,943,943,943,943,,,,,,943,943,943,943',
'943,943,943,,,943,,,,,,943,943,943,943,943,943,943,943,943,943,943,943',
',943,943,943,,943,943,943,943,943,,,,,,,,,,,,,,,,,,,,943,,,943,,,943',
'943,,,943,,943,,,,943,,,,,,,,,943,,,,,943,943,943,943,,943,943,943,943',
',,,,943,943,,,,,,,943,,943,943,943,,,,943,943,353,353,353,353,353,353',
',,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353,353,353',
'353,353,353,,,353,,,,,,353,353,353,353,353,353,353,353,353,353,353,353',
',353,353,353,,353,353,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353',
'353,,,353,,353,,,,353,,,,,,,,,353,,,,,353,353,353,353,,353,353,353,353',
',,,,353,353,,,,,,,353,,353,353,353,,,,353,353,125,125,125,125,125,,',
',125,125,,,,125,,125,125,125,125,125,125,125,,,,,,125,125,125,125,125',
'125,125,,,125,,,,,,125,125,,125,125,125,125,125,125,125,125,125,,125',
'125,125,,125,125,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125',
',,125,,125,,,,125,,,,,,,,,125,,,,,125,125,125,125,,125,125,125,125,',
',,,125,125,,,,869,869,869,125,869,125,125,125,869,869,,125,125,869,',
'869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869,869,,,869,',
',,,,,869,,,869,869,869,869,869,869,869,869,,869,869,869,,869,869,869',
'869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,,,,,869,,,,,,',
',,869,,,,,869,869,869,869,,869,869,869,869,,,,,869,869,,,,211,211,211',
'869,211,869,869,869,211,211,,869,869,211,,211,211,211,211,211,211,211',
',,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,211,,,,211,,,,,,,,,211,,,,,211,211,211,211,,211',
'211,211,211,,,,,211,211,,,,212,212,212,211,212,211,211,211,212,212,',
'211,211,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,,212,212,212,',
'212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212',
',,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212',
',,,213,213,213,212,213,212,212,212,213,213,,212,212,213,,213,213,213',
'213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213',
'213,213,213,213,213,213,213,,213,213,213,,213,213,213,213,213,,,,,,',
',,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,,213,,,,,213',
'213,213,213,,213,213,213,213,,,,,213,213,,,,214,214,214,213,214,213',
'213,213,214,214,,213,213,214,,214,214,214,214,214,214,214,,,,,,214,214',
'214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214',
',214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214',
'214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214',
',,,,214,214,,,,215,215,215,214,215,214,214,214,215,215,,214,214,215',
',215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215',
',,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215,215',
'215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,',
',,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,216,216,216',
'215,216,215,215,215,216,216,,215,215,216,,216,216,216,216,216,216,216',
',,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216',
'216,216,216,216,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,',
'216,,,216,,,216,216,,,216,,216,,216,,216,,,216,,,,,,216,,,,,216,216',
'216,216,,216,216,216,216,,,,,216,216,,,,868,868,868,216,868,216,216',
'216,868,868,,216,216,868,,868,868,868,868,868,868,868,,,,,,868,868,868',
'868,868,868,868,,,868,,,,,,,868,,,868,868,868,868,868,868,868,868,868',
'868,868,868,,868,868,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868',
'868,,,868,,,,868,,868,,,868,,,,,,868,,,,,868,868,868,868,,868,868,868',
'868,,,,,868,868,,,,222,222,222,868,222,868,868,868,222,222,,868,868',
'222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,',
'222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,,222,222',
'222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,',
',,,,,,222,,,,,222,222,222,222,,222,222,222,222,,,,,222,222,,,,223,223',
'223,222,223,222,222,222,223,223,,222,222,223,,223,223,223,223,223,223',
'223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223',
'223,223,223,223,,223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,',
',223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,,223,,,,,223,223,223,223',
',223,223,223,223,,,,,223,223,,,,224,224,224,223,224,223,223,223,224',
'224,,223,223,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224',
'224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224',
',224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,,224,,,,,224,224,224,224,,224,224,224,224,,,,,224,224',
'224,,,,,,224,,224,224,224,,,,224,224,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5',
'5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5',
'5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5',
'5,5,,5,5,5,5,,,,,5,5,,,,850,850,850,5,850,5,5,5,850,850,,5,5,850,,850',
'850,850,850,850,850,850,,,,,,850,850,850,850,850,850,850,,,850,,,,,',
',850,,,850,850,850,850,850,850,850,850,,850,850,850,,850,850,850,850',
'850,,,,,,,,,,,,,,,,,,,,850,,,850,,,850,850,,,850,,850,,,,850,,,,,,,',
',850,,,,,850,850,850,850,,850,850,850,850,,,,,850,850,,,,847,847,847',
'850,847,850,850,850,847,847,,850,850,847,,847,847,847,847,847,847,847',
',,,,,847,847,847,847,847,847,847,,,847,,,,,,,847,,,847,847,847,847,847',
'847,847,847,,847,847,847,,847,847,847,847,847,,,,,,,,,,,,,,,,,,,,847',
',,847,,,847,847,,,847,,,,,,847,,,,,,,,,847,,,,,847,847,847,847,,847',
'847,847,847,,,,,847,847,,,,235,235,235,847,235,847,847,847,235,235,',
'847,847,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,',
',,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235,',
',,793,793,793,235,793,235,235,235,793,793,,235,235,793,,793,793,793',
'793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793',
'793,793,793,793,793,793,793,,793,793,793,,793,793,793,793,793,,,,,,',
',,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,,793,,,,,793',
'793,793,793,,793,793,793,793,,,,,793,793,,,,,450,,793,,793,793,793,450',
'450,450,793,793,450,450,450,,450,,,,,,,,,450,450,450,450,,,,,,,,450',
'450,,450,450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450,450,450,450,450,450',
'450,450,450,450,450,450,450,450,,,450,450,450,,,450,,,450,,,450,450',
',450,,450,,450,,450,450,,450,450,450,450,450,,450,450,450,,,,,,,,,,',
',,,450,,,450,450,450,450,,450,,450,,,,,450,450,536,536,536,,536,,,,536',
'536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536,536',
'536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,,536,536,536,',
'536,536,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,',
',,536,,,,,,,,,536,,,,,536,536,536,536,,536,536,536,536,,,,,536,536,',
',,533,533,533,536,533,536,536,536,533,533,,536,536,533,,533,533,533',
'533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533',
'533,533,533,533,533,533,533,,533,533,533,,533,533,533,533,533,,,,,,',
',,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,,533,,,,,533',
'533,533,533,,533,533,533,533,,,,,533,533,,,,530,530,530,533,530,533',
'533,533,530,530,,533,533,530,,530,530,530,530,530,530,530,,,,,,530,530',
'530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530',
',530,530,530,,530,530,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530',
'530,,,530,,,,,,530,,,,,,,,,530,,,,,530,530,530,530,,530,530,530,530',
',,,,530,530,,,,462,462,462,530,462,530,530,530,462,462,,530,530,462',
',462,462,462,462,462,462,462,,,,,,462,462,462,462,462,462,462,,,462',
',,,,,,462,,,462,462,462,462,462,462,462,462,462,462,462,462,,462,462',
'462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462,,,462,462,,,462,,462,,462,',
'462,,,462,,,,,,462,,,,,462,462,462,462,,462,462,462,462,,,,,462,462',
',,,464,464,464,462,464,462,462,462,464,464,,462,462,464,,464,464,464',
'464,464,464,464,,,,,,464,464,464,464,464,464,464,,,464,,,,,,,464,,,464',
'464,464,464,464,464,464,464,,464,464,464,,464,464,464,464,464,,,,,,',
',,,,,,,,,,,,,464,,,464,,,464,464,,,464,,,,,,464,,,,,,,,,464,,,,,464',
'464,464,464,,464,464,464,464,,,,,464,464,,,,465,465,465,464,465,464',
'464,464,465,465,,464,464,465,,465,465,465,465,465,465,465,,,,,,465,465',
'465,465,465,465,465,,,465,,,,,,,465,,,465,465,465,465,465,465,465,465',
',465,465,465,,465,465,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465',
'465,,,465,,,,,,465,,,,,,,,,465,,,,,465,465,465,465,,465,465,465,465',
',,,,465,465,,,,466,466,466,465,466,465,465,465,466,466,,465,465,466',
',466,466,466,466,466,466,466,,,,,,466,466,466,466,466,466,466,,,466',
',,,,,,466,,,466,466,466,466,466,466,466,466,,466,466,466,,466,466,466',
'466,466,,,,,,,,,,,,,,,,,,,,466,,,466,,,466,466,,,466,,,,,,466,,,,,,',
',,466,,,,,466,466,466,466,,466,466,466,466,,,,,466,466,,,,521,521,521',
'466,521,466,466,466,521,521,,466,466,521,,521,521,521,521,521,521,521',
',,,,,521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521',
'521,521,521,521,521,521,521,,521,521,521,521,521,,,,,,,,,,,,,,,,,,,',
'521,,,521,,,521,521,,,521,,521,,521,,521,,,521,,,,,,521,,,,,521,521',
'521,521,,521,521,521,521,,,,,521,521,,,,,,,521,,521,521,521,,,,521,521',
'511,511,511,511,511,,,,511,511,,,,511,,511,511,511,511,511,511,511,',
',,,,511,511,511,511,511,511,511,,,511,,,,,,511,511,511,511,511,511,511',
'511,511,511,511,511,,511,511,511,,511,511,511,511,511,,,,,,,,,,,,,,',
',,,,,511,,,511,,,511,511,,,511,,511,,,,511,,,,,,,,,511,,,,,511,511,511',
'511,,511,511,511,511,,,,,511,511,,,,,,511,511,,511,511,511,,,,511,511',
'505,505,505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,',
',505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505,505,505',
'505,505,,505,505,505,,505,505,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505',
',,505,505,,,505,,,,,,505,,,,,,,,,505,,,,,505,505,505,505,,505,505,505',
'505,,,,,505,505,,,,503,503,503,505,503,505,505,505,503,503,,505,505',
'503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503,503,503,,',
'503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503,503,503,,503',
'503,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,,,503',
',503,,,503,,,,,,503,,,,,503,503,503,503,,503,503,503,503,,,,,503,503',
',,,501,501,501,503,501,503,503,503,501,501,,503,503,501,,501,501,501',
'501,501,501,501,,,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501',
'501,501,501,501,501,501,501,501,501,501,501,,501,501,501,501,501,,,',
',,,,,,,,,,,,,,,,501,,,501,,,501,501,,,501,,501,,501,,501,,,501,,,,,',
'501,,,,,501,501,501,501,,501,501,501,501,,,,,501,501,,,,,27,,501,,501',
'501,501,27,27,27,501,501,27,27,27,,27,,,,,,,,,27,27,27,,,,,,,,,27,27',
',27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27',
'27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27',
'27,27,27,28,27,27,27,,,,28,28,28,,,28,28,28,,28,27,,,27,27,,27,,27,28',
'28,,,,,27,27,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28',
',28,,28,,28,28,,28,28,28,28,28,,28,,28,,,,,,,,,,,,,,28,,,28,28,,28,',
'28,29,29,29,,29,,28,28,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29',
'29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,',
'29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,',
',29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30',
'29,29,29,30,30,,29,29,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30',
'30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30',
'30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30',
',,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30,31',
'31,,30,30,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,',
',,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,',
',,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31',
'31,31,,31,31,31,31,,,,,31,31,,,,41,41,41,31,41,31,31,31,41,41,,31,31',
'41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41,,,41',
'41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41',
',,41,,,41,41,,,41,,,,,,41,,,,,,,,,41,,,,,41,41,41,41,,41,41,41,41,,',
',,41,41,,,,42,42,42,41,42,41,41,41,42,42,,41,41,42,,42,42,42,42,42,42',
'42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42',
',42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,',
',,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,44,44,44',
'42,44,42,42,42,44,44,,42,42,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44',
'44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44',
'44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,',
',44,44,44,44,,44,44,44,44,,,,,44,44,,,,45,45,45,44,45,44,44,44,45,45',
',44,44,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,',
',45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,',
',,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45',
'45,45,,,,,45,45,,,,47,47,47,45,47,45,45,45,47,47,,45,45,47,,47,47,47',
'47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47',
'47,47,47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47',
',,47,,,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,,59',
',47,,47,47,47,59,59,59,47,47,59,59,59,,59,,,,,,,,,,59,59,59,,,,,,,,59',
'59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,,,,59,59,59,59,59,59,59,59,59',
'59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,,59,,59,,59,59,,59,59',
'59,59,59,,59,,59,,,,,,,,,,,,,,59,,,59,59,59,59,,59,,59,,,,,59,59,61',
'61,61,61,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61',
'61,61,,,61,,,,,,61,61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61,61,61',
'61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,,,,61,',
',,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,62,62,62,61,62,61,61,61,62',
'62,,61,61,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,',
',,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62,62,,,,,,,',
',,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,,,,62,62,62',
'62,,62,62,62,62,,,,,62,62,,,,63,63,63,62,63,62,62,62,63,63,,62,62,63',
',63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63',
'63,63,63,63,63,63,63,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63',
',,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,,,,,63,63,63,63,,63,63,63,63',
',,,,63,63,,,,66,66,66,63,66,63,63,63,66,66,,63,63,66,,66,66,66,66,66',
'66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66',
'66,,66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66',
',,,,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67',
'66,67,66,66,66,67,67,,66,66,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67',
'67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67',
'67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,',
',67,67,67,67,,67,67,67,67,,,,,67,67,,,,70,70,70,67,70,67,67,67,70,70',
',67,67,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,',
',70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,,,,,,',
',,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70,,70,70',
'70,70,,,,,70,70,70,,,,,70,70,,70,70,70,,,,70,70,116,116,116,116,116',
',,,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116',
'116,116,116,,,116,,,,,,116,116,116,116,116,116,116,116,116,116,116,116',
',116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116',
'116,,,116,,116,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116,116,116,116',
',,,,116,116,,,,,,116,116,,116,116,116,,,,116,116,121,121,121,,121,,',
',121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121',
'121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121',
',121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121',
',,,122,122,122,121,122,121,121,121,122,122,,121,121,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,122,122,122,,,,,,',
',,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122',
'122,122,122,,122,122,122,122,,,,,122,122,,,,123,123,123,122,123,122',
'122,122,123,123,,122,122,123,,123,123,123,123,123,123,123,,,,,,123,123',
'123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123',
',123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123',
'123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123',
',,,,123,123,,,,124,124,124,123,124,123,123,123,124,124,,123,123,124',
',124,124,124,124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124',
',,,,,,124,,,124,124,124,124,124,124,124,124,,124,124,124,,124,124,124',
'124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,,,,,124,,,,,,',
',,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124,,,,238,238,238',
'124,238,124,124,124,238,238,,124,124,238,,238,238,238,238,238,238,238',
',,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238,239,239,',
'238,238,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239,',
',,240,240,240,239,240,239,239,239,240,240,,239,239,240,,240,240,240',
'240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240',
'240,240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,',
',,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240',
'240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240',
'240,240,241,241,,240,240,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241',
',,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,241,241,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243',
'242,243,242,242,242,243,243,,242,242,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,',
'243,243,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244',
'244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,',
'244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,',
',,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244,',
',,245,245,245,244,245,244,244,244,245,245,,244,244,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,',
',,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245',
'245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245',
'245,245,246,246,,245,245,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246',
',,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,,246,246,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248',
'247,248,247,247,247,248,248,,247,247,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248',
'248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,',
'248,248,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249',
'249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,',
'249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,',
',,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,',
',,250,250,250,249,250,249,249,249,250,250,,249,249,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,',
',,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250',
'250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250',
'250,250,251,251,,250,250,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251',
',,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,251,251,252',
',252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252',
',,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252',
'252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,',
',,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253',
'252,253,252,252,252,253,253,,252,252,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253',
'253,253,253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,',
'253,253,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,',
',,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254,',
',,255,255,255,254,255,254,254,254,255,255,,254,254,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,',
',,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255',
'255,255,255,,255,255,255,255,,,,,255,255,,,,256,256,256,255,256,255',
'255,255,256,256,,255,255,256,,256,256,256,256,256,256,256,,,,,,256,256',
'256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256',
',256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256',
'256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256',
',,,,256,256,,,,257,257,257,256,257,256,256,256,257,257,,256,256,257',
',257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257',
',,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,257',
'257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,',
',,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257,,,,258,258,258',
'257,258,257,257,257,258,258,,257,257,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258',
'258,258,258,,,,,258,258,,,,259,259,259,258,259,258,258,258,259,259,',
'258,258,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,',
',,259,,,,,,,,,259,,,,,259,259,259,259,,259,259,259,259,,,,,259,259,',
',,264,264,264,259,264,259,259,259,264,264,,259,259,264,,264,264,264',
'264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264',
'264,264,264,264,264,264,264,,264,264,264,,264,264,264,264,264,,,,,,',
',,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264',
'264,264,264,,264,264,264,264,,,,,264,264,,,,795,795,795,264,795,264',
'264,264,795,795,,264,264,795,,795,795,795,795,795,795,795,,,,,,795,795',
'795,795,795,795,795,,,795,,,,,,,795,,,795,795,795,795,795,795,795,795',
',795,795,795,,795,795,795,795,795,,,,,,,,,,,,,,,,,,,,795,,,795,,,795',
'795,,,795,,,,,,795,,,,,,,,,795,,,,,795,795,795,795,,795,795,795,795',
',,,,795,795,,,,,449,,795,,795,795,795,449,449,449,795,795,449,449,449',
',449,,,,,,,,,449,449,449,449,,,,,,,,449,449,,449,449,449,449,449,,,',
',,,,,,,,,,,,,,,,,,,449,449,449,449,449,449,449,449,449,449,449,449,449',
'449,,,449,449,449,,,449,,,449,,,449,449,,449,,449,,449,,449,449,,449',
'449,449,449,449,,449,449,449,,,,,,,,,,,,,,449,,,449,449,449,449,,449',
',449,,,,,449,449,271,271,271,,271,,,,271,271,,,,271,,271,271,271,271',
'271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271',
'271,271,271,271,271,271,271,271,271,271,,271,271,271,271,271,,,,,,,',
',,,,,,,,,,,,271,,,271,,,271,271,,,271,,271,,271,,271,,,271,,,,,,271',
',,,,271,271,271,271,,271,271,271,271,,,,,271,271,,,,272,272,272,271',
'272,271,271,271,272,272,,271,271,272,,272,272,272,272,272,272,272,,',
',,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,',
'272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272',
'272,272,,272,272,272,272,,,,,272,272,,,,280,280,280,272,280,272,272',
'272,280,280,,272,272,280,,280,280,280,280,280,280,280,,,,,,280,280,280',
'280,280,280,280,,,280,,,,,,,280,,,280,280,280,280,280,280,280,280,280',
'280,280,280,,280,280,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280',
'280,,,280,,280,,280,,280,,,280,,,,,,280,,,,,280,280,280,280,,280,280',
'280,280,,,,,280,280,280,,,792,792,792,280,792,280,280,280,792,792,,280',
'280,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792',
',,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792,792,792,,792',
'792,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792',
',,,,,,,,792,,,,,792,792,792,792,,792,792,792,792,,,,,792,792,,,,791',
'791,791,792,791,792,792,792,791,791,,792,792,791,,791,791,791,791,791',
'791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791,,,791,791,791',
'791,791,791,791,791,,791,791,791,,791,791,791,791,791,,,,,,,,,,,,,,',
',,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,,791,,,,,791,791,791',
'791,,791,791,791,791,,,,,791,791,,,,790,790,790,791,790,791,791,791',
'790,790,,791,791,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790',
'790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790',
'790,,790,790,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790',
',,,,,790,,,,,,,,,790,,,,,790,790,790,790,,790,790,790,790,,,,,790,790',
',,,287,287,287,790,287,790,790,790,287,287,,790,790,287,,287,287,287',
'287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287',
'287,287,287,287,287,287,287,,287,287,287,,287,287,287,287,287,,,,,,',
',,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,,,,287',
'287,287,287,,287,287,287,287,,,,,287,287,,,,777,777,777,287,777,287',
'287,287,777,777,,287,287,777,,777,777,777,777,777,777,777,,,,,,777,777',
'777,777,777,777,777,,,777,,,,,,,777,,,777,777,777,777,777,777,777,777',
',777,777,777,,777,777,777,777,777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777',
'777,,,777,,,,,,777,,,,,,,,,777,,,,,777,777,777,777,,777,777,777,777',
',,,,777,777,,,,289,289,289,777,289,777,777,777,289,289,,777,777,289',
',289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289',
',,,,,,289,,,289,289,289,289,289,289,289,289,,289,289,289,,289,289,289',
'289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,',
',,289,,,,,289,289,289,289,,289,289,289,289,,,,,289,289,,,,292,292,292',
'289,292,289,289,289,292,292,,289,289,292,,292,292,292,292,292,292,292',
',,,,,292,292,292,292,292,292,292,,,292,,,,,,,292,,,292,292,292,292,292',
'292,292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292',
',,292,,,292,292,,,292,,,,,,292,,,,,,,,,292,,,,,292,292,292,292,,292',
'292,292,292,,,,,292,292,,,,293,293,293,292,293,292,292,292,293,293,',
'292,292,293,,293,293,293,293,293,293,293,,,,,,293,293,293,293,293,293',
'293,,,293,,,,,,,293,,,293,293,293,293,293,293,293,293,,293,293,293,',
'293,293,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,,',
',,293,,,,,,,,,293,,,,,293,293,293,293,,293,293,293,293,,,,,293,293,',
',,,,,293,,293,293,293,,,,293,293,298,298,298,298,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298',
',,,,,298,298,,298,298,298,298,298,298,298,298,298,,298,298,298,,298',
'298,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,298,,',
',298,,,,,,,,,298,,,,,298,298,298,298,,298,298,298,298,,,,,298,298,,',
',769,769,769,298,769,298,298,298,769,769,,298,298,769,,769,769,769,769',
'769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,,,769,,,769,769',
'769,769,769,769,769,769,,769,769,769,,769,769,769,769,769,,,,,,,,,,',
',,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769,,,,,769,769',
'769,769,,769,769,769,769,,,,,769,769,,,,747,747,747,769,747,769,769',
'769,747,747,,769,769,747,,747,747,747,747,747,747,747,,,,,,747,747,747',
'747,747,747,747,,,747,,,,,,,747,,,747,747,747,747,747,747,747,747,,747',
'747,747,,747,747,747,747,747,,,,,,,,,,,,,,,,,,,,747,,,747,,,747,747',
',,747,,,,,,747,,,,,,,,,747,,,,,747,747,747,747,,747,747,747,747,,,,',
'747,747,,,,714,714,714,747,714,747,747,747,714,714,,747,747,714,,714',
'714,714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,,714,,,,,',
',714,,,714,714,714,714,714,714,714,714,,714,714,714,,714,714,714,714',
'714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,,,,,714,,,,,,,,,714',
',,,,714,714,714,714,,714,714,714,714,,,,,714,714,,,,332,332,332,714',
'332,714,714,714,332,332,,714,714,332,,332,332,332,332,332,332,332,,',
',,,332,332,332,332,332,332,332,,,332,,,,,,,332,,,332,332,332,332,332',
'332,332,332,,332,332,332,,332,332,332,332,332,,,,,,,,,,,,,,,,,,,,332',
',,332,,,332,332,,,332,,,,,,332,,,,,,,,,332,,,,,332,332,332,332,,332',
'332,332,332,,,,,332,332,,,,334,334,334,332,334,332,332,332,334,334,',
'332,332,334,,334,334,334,334,334,334,334,,,,,,334,334,334,334,334,334',
'334,,,334,,,,,,,334,,,334,334,334,334,334,334,334,334,,334,334,334,',
'334,334,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,334,,334,334,,,334',
',,,,,334,,,,,,,,,334,,,,,334,334,334,334,,334,334,334,334,,,,,334,334',
',,,697,697,697,334,697,334,334,334,697,697,,334,334,697,,697,697,697',
'697,697,697,697,,,,,,697,697,697,697,697,697,697,,,697,,,,,,,697,,,697',
'697,697,697,697,697,697,697,,697,697,697,,697,697,697,697,697,,,,,,',
',,,,,,,,,,,,,697,,,697,,,697,697,,,697,,697,,,,697,,,,,,,,,697,,,,,697',
'697,697,697,,697,697,697,697,,,,,697,697,,,,678,678,678,697,678,697',
'697,697,678,678,,697,697,678,,678,678,678,678,678,678,678,,,,,,678,678',
'678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678,678',
',678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678',
'678,,,678,,,,,,678,,,,,,,,,678,,,,,678,678,678,678,,678,678,678,678',
',,,,678,678,,,,675,675,675,678,675,678,678,678,675,675,,678,678,675',
',675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675,,,675',
',,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,,675,675,675',
'675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,,,675,,,,,,',
',,675,,,,,675,675,675,675,,675,675,675,675,,,,,675,675,,,,351,351,351',
'675,351,675,675,675,351,351,,675,675,351,,351,351,351,351,351,351,351',
',,,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351',
'351,351,351,,351,351,351,,351,351,351,351,351,,,,,,,,,,,,,,,,,,,,351',
',,351,,,351,351,,,351,,,,,,351,,,,,,,,,351,,,,,351,351,351,351,,351',
'351,351,351,,,,,351,351,,,,651,651,651,351,651,351,351,351,651,651,',
'351,351,651,,651,651,651,651,651,651,651,,,,,,651,651,651,651,651,651',
'651,,,651,,,,,,,651,,,651,651,651,651,651,651,651,651,,651,651,651,',
'651,651,651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651,,,651,651,,,651,,,',
',,651,,,,,,,,,651,,,,,651,651,651,651,,651,651,651,651,,,,,651,651,',
',,650,650,650,651,650,651,651,651,650,650,,651,651,650,,650,650,650',
'650,650,650,650,,,,,,650,650,650,650,650,650,650,,,650,,,,,,,650,,,650',
'650,650,650,650,650,650,650,,650,650,650,,650,650,650,650,650,,,,,,',
',,,,,,,,,,,,,650,,,650,,,650,650,,,650,,,,,,650,,,,,,,,,650,,,,,650',
'650,650,650,,650,650,650,650,,,,,650,650,,,,646,646,646,650,646,650',
'650,650,646,646,,650,650,646,,646,646,646,646,646,646,646,,,,,,646,646',
'646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646,646',
',646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,,,646',
'646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646,646',
',,,,646,646,,,,984,984,984,646,984,646,646,646,984,984,,646,646,984',
',984,984,984,984,984,984,984,,,,,,984,984,984,984,984,984,984,,,984',
',,,,,,984,,,984,984,984,984,984,984,984,984,984,984,984,984,,984,984',
'984,984,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984,984,,,984,,984,,984,',
'984,,,984,,,,,,984,,,,,984,984,984,984,,984,984,984,984,,,,,984,984',
',,,645,645,645,984,645,984,984,984,645,645,,984,984,645,,645,645,645',
'645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,,,645,,,645',
'645,645,645,645,645,645,645,,645,645,645,,645,645,645,645,645,,,,,,',
',,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,,645,,,,,645',
'645,645,645,,645,645,645,645,,,,,645,645,,,,372,372,372,645,372,645',
'645,645,372,372,,645,645,372,,372,372,372,372,372,372,372,,,,,,372,372',
'372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372,372,372,372',
',372,372,372,,372,372,372,372,372,,,,,,,,,,,,,,,,,,,,372,,,372,,,372',
'372,,,372,,,,,,372,,,,,,,,,372,,,,,372,372,372,372,,372,372,372,372',
',,,,372,372,,,,644,644,644,372,644,372,372,372,644,644,,372,372,644',
',644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644',
',,,,,,644,,,644,644,644,644,644,644,644,644,644,644,644,644,,644,644',
'644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,644,,644',
',,644,,,,,,644,,,,,644,644,644,644,,644,644,644,644,,,,,644,644,,,,643',
'643,643,644,643,644,644,644,643,643,,644,644,643,,643,643,643,643,643',
'643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643',
'643,643,643,643,643,643,643,643,643,,643,643,643,643,643,,,,,,,,,,,',
',,,,,,,,643,,,643,,,643,643,,,643,,643,,643,,643,,,643,,,,,,643,,,,',
'643,643,643,643,,643,643,643,643,,,,,643,643,,,,640,640,640,643,640',
'643,643,643,640,640,,643,643,640,,640,640,640,640,640,640,640,,,,,,640',
'640,640,640,640,640,640,,,640,,,,,,,640,,,640,640,640,640,640,640,640',
'640,,640,640,640,,640,640,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,',
',640,640,,,640,,,,,,640,,,,,,,,,640,,,,,640,640,640,640,,640,640,640',
'640,,,,,640,640,,,,,,,640,,640,640,640,,,,640,640,639,639,639,639,639',
',,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639',
'639,639,639,,,639,,,,,,639,639,,639,639,639,639,639,639,639,639,639',
',639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639',
'639,,,639,,639,,,,639,,,,,,,,,639,,,,,639,639,639,639,,639,639,639,639',
',,,,639,639,,,,636,636,636,639,636,639,639,639,636,636,,639,639,636',
',636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636',
',,,,,,636,,,636,636,636,636,636,636,636,636,636,636,636,636,,636,636',
'636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,636,,636,',
'636,,,636,,,,,,636,,,,,636,636,636,636,,636,636,636,636,,,,,636,636',
',,,635,635,635,636,635,636,636,636,635,635,,636,636,635,,635,635,635',
'635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635',
'635,635,635,635,635,635,635,,635,635,635,,635,635,635,635,635,,,,,,',
',,,,,,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635,,,,,635',
'635,635,635,,635,635,635,635,,,,,635,635,,,,634,634,634,635,634,635',
'635,635,634,634,,635,635,634,,634,634,634,634,634,634,634,,,,,,634,634',
'634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634',
',634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634',
'634,,,634,,634,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634,634,634',
',,,,634,634,,,,388,388,388,634,388,634,634,634,388,388,,634,634,388',
',388,388,388,388,388,388,388,,,,,,388,388,388,388,388,388,388,,,388',
',,,,,,388,,,388,388,388,388,388,388,388,388,,388,388,388,,388,388,388',
'388,388,,,,,,,,,,,,,,,,,,,,388,,,388,,,388,388,,,388,,,,,,388,,,,,,',
',,388,,,,,388,388,388,388,,388,388,388,388,,,,,388,388,,,,20,20,20,388',
'20,388,388,388,20,20,,388,388,20,,20,20,20,20,20,20,20,,,,,,20,20,20',
'20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20',
'20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20',
',,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,416,416,416,20,416,20,20,20',
'416,416,,20,20,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416',
'416,416,416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416',
'416,,416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416',
',,,,,416,,,,,,,,,416,,,,,416,416,416,416,,416,416,416,416,,,,,416,416',
',,,602,602,602,416,602,416,416,416,602,602,,416,416,602,,602,602,602',
'602,602,602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602',
'602,602,602,602,602,602,602,602,602,602,602,,602,602,602,602,602,,,',
',,,,,,,,,,,,,,,,602,,,602,,,602,602,,,602,,602,,602,,602,,,602,,,,,',
'602,,,,,602,602,602,602,,602,602,602,602,,,,,602,602,,,,592,592,592',
'602,592,602,602,602,592,592,,602,602,592,,592,592,592,592,592,592,592',
',,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592',
'592,592,592,592,592,592,592,,592,592,592,592,592,,,,,,,,,,,,,,,,,,,',
'592,,,592,,,592,592,,,592,,592,,592,,592,,,592,,,,,,592,,,,,592,592',
'592,592,,592,592,592,592,,,,,592,592,,,,591,591,591,592,591,592,592',
'592,591,591,,592,592,591,,591,591,591,591,591,591,591,,,,,,591,591,591',
'591,591,591,591,,,591,,,,,,,591,,,591,591,591,591,591,591,591,591,,591',
'591,591,,591,591,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591',
',,591,,591,,,,591,,,,,,,,,591,,,,,591,591,591,591,,591,591,591,591,',
',,,591,591,,,,570,570,570,591,570,591,591,591,570,570,,591,591,570,',
'570,570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570,',
',,,,,570,,,570,570,570,570,570,570,570,570,,570,570,570,,570,570,570',
'570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570,,,,,,',
',,570,,,,,570,570,570,570,,570,570,570,570,,,,,570,570,,,,545,545,545',
'570,545,570,570,570,545,545,,570,570,545,,545,545,545,545,545,545,545',
',,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545,545,545,545,545',
'545,545,545,545,545,545,545,,545,545,545,545,545,,,,,,,,,,,,,,,,,,,',
'545,,,545,,,545,545,,,545,,,,,,545,,,545,,,,,,545,,,,,545,545,545,545',
',545,545,545,545,,,,,545,545,,,,,440,,545,,545,545,545,440,440,440,545',
'545,440,440,440,,440,,,,,,,,,440,440,440,,,,,,,,,440,440,,440,440,440',
'440,440,,,,,,,,,,,,,,,,,,,,,,,440,440,440,440,440,440,440,440,440,440',
'440,440,440,440,,,440,440,440,,,440,,440,440,,,440,440,,440,,440,,440',
',440,440,,440,440,440,440,440,,440,440,440,,,,,,,,,,,,,,440,,,440,440',
',440,,440,542,542,542,,542,,440,440,542,542,,,,542,,542,542,542,542',
'542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,542,542,542,,,,,,,',
',,,,,,,,,,,,542,,,542,,,542,542,,,542,,542,,,,542,,,542,,,,,,542,,,',
',542,542,542,542,,542,542,542,542,,,,,542,542,,,,,491,,542,,542,542',
'542,491,491,491,542,542,491,491,491,803,491,803,803,803,803,803,,,,491',
'491,,,,803,,,,,,491,491,,491,491,491,491,491,903,,903,903,903,903,903',
'1006,803,1006,1006,1006,1006,1006,,903,,803,803,803,803,,1006,,803,',
'899,,899,899,899,899,899,491,,,,903,,,491,899,,,1006,491,491,,903,903',
'803,,,903,,1006,1006,,,,1006,,,899,,,,,491,491,,,899,899,899,899,,,',
'899,,,,491,,,491,,692,692,692,491,692,,,,692,692,491,,,692,,692,692',
'692,692,692,692,692,,,,,,692,692,692,692,692,692,692,,,692,,,,,,,692',
',,692,692,692,692,692,692,692,692,,692,692,692,,692,692,,,692,,,,,,',
',,,,,,,,,,,,,692,,,692,,,692,692,,,692,,,,,,,,,,,,,,,,,,,,692,692,692',
'692,,692,692,692,692,,,,,692,692,,,,527,527,527,692,527,692,692,692',
'527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527',
'527,527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527,,527,527,527',
',527,527,,,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,,,,,',
',,,,,,,,,,,527,527,527,527,,527,527,527,527,,,,,527,527,,,,883,883,883',
'527,883,527,527,527,883,883,,,,883,,883,883,883,883,883,883,883,,,,',
',883,883,883,883,883,883,883,,,883,,,,,,,883,,,883,883,883,883,883,883',
'883,883,,883,883,883,,883,883,,,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883',
'883,,,883,,,,,,,,,,,,,,,,,,,,883,883,883,883,,883,883,883,883,,,,,883',
'883,,,,34,34,34,883,34,883,883,883,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34',
'34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,',
',,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,72,72,72,34,72,34,34',
'34,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72',
',,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,72,,,,,,,,,,,',
',,,,,72,,,72,,,72,,,72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72,72,72,,72,72',
'72,72,,,,,72,72,,,,892,892,892,72,892,72,72,72,892,892,,,,892,,892,892',
'892,892,892,892,892,,,,,,892,892,892,892,892,892,892,,,892,,,,,,,892',
',,892,892,892,892,892,892,892,892,,892,892,892,,892,892,,,892,,,,,,',
',,,,,,,,,,,,,892,,,892,,,892,892,,,892,,,,,,,,,,,,,,,,,,,,892,892,892',
'892,,892,892,892,892,,,,,892,892,,,,73,73,73,892,73,892,892,892,73,73',
',,,73,,73,73,73,73,73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73',
',,73,73,73,73,73,73,73,73,,73,73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73',
',,73,,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73',
'73,,,,71,71,71,73,71,73,73,73,71,71,,,,71,,71,71,71,71,71,71,71,,,,',
',71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71',
'71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,',
',,,,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,519,519,519,71,519,71',
'71,71,519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519',
'519,519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519',
'519,,519,519,,,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,',
',,,,,,,,,,,,,,,519,519,519,519,,519,519,519,519,,,,,519,519,,,,939,939',
'939,519,939,519,519,519,939,939,,,,939,,939,939,939,939,939,939,939',
',,,,,939,939,939,939,939,939,939,,,939,,,,,,,939,,,939,939,939,939,939',
'939,939,939,,939,939,939,,939,939,,,939,,,,,,,,,,,,,,,,,,,,939,,,939',
',,939,939,,,939,,,,,,,,,,,,,,,,,,,,939,939,939,939,,939,939,939,939',
',,,,939,939,,,,306,306,306,939,306,939,939,939,306,306,,,,306,,306,306',
'306,306,306,306,306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306',
',,306,306,306,306,306,306,306,306,,306,306,306,,306,306,,,306,,,,,,',
',,,,,,,,,,,,,306,,,306,,,306,306,,,306,,,992,,992,992,992,992,992,,',
',,,,,,992,,306,306,306,306,,306,306,306,306,,,,,306,306,,,,306,,992',
'306,,306,306,306,681,681,681,,681,992,992,,681,681,992,,,681,,681,681',
'681,681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,,681',
',,681,681,681,681,681,681,681,681,,681,681,681,,681,681,,,681,,,,,,',
',,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,,,,,,,,,,,,,,,,,681,681,681',
'681,,681,681,681,681,,,,,681,681,,,,35,35,35,681,35,681,681,681,35,35',
',,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35',
',,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35',
',,35,,,35,35,,,35,,,935,,935,935,935,935,935,,,,,,,,,935,,35,35,35,35',
',35,35,35,35,,,,,35,35,,,,35,,935,35,,35,35,35,323,323,323,,323,935',
'935,,323,323,935,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323',
'323,323,323,323,,,323,,,,,,,323,,,323,323,323,323,323,323,323,323,,323',
'323,323,,323,323,,,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323',
',,,,,,,,,,,,,,,,,,,323,323,323,323,,323,323,323,323,,,,,323,323,,,,',
',,323,,323,323,323,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,',
',,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8',
'8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,',
',8,8,,,,,,,,,,,,,,8,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,,,,407,407,407,407,407',
'407,407,407,407,407,,,,,,407,407,407,407,407,407,407,407,407,,,407,',
',,,,,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407,407,407',
'407,,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407,407,407',
'407,,,407,407,,,,,,,,,,,,,,407,631,631,631,631,631,631,631,631,631,631',
'631,631,631,631,631,631,631,631,631,631,631,631,631,631,,,,631,631,631',
'631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,631,631',
',,631,,,,,,,,631,631,,631,631,631,631,631,631,631,,,631,631,,,,631,631',
'631,631,,,,,,,,,,,,,,631,631,,631,631,631,631,631,631,631,631,631,631',
'631,631,,,631,631,,,,,,,,,,,,,,631,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,',
',,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9',
'9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,753,753,753,753,753,753,753,753,753',
'753,753,753,753,753,753,753,753,753,753,753,753,753,753,753,,,,753,753',
'753,753,753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753,753',
'753,,,753,,,,,,,,753,753,,753,753,753,753,753,753,753,,,753,753,,,,753',
'753,753,753,,,,,,,,,,,,,,753,753,,753,753,753,753,753,753,753,753,753',
'753,753,753,,,753,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74',
'74,74,74,74,74,74,74,74,74,,74,,,,,,74,74,,74,74,74,74,74,74,74,,,74',
'74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74',
'74,74,601,601,74,,601,,,,,,,,601,601,,601,601,601,601,601,601,601,,',
'601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601,601,601,601',
'601,601,601,601,601,601,601,601,638,638,601,,638,,,,,,,,638,638,,638',
'638,638,638,638,638,638,,,638,638,,,,638,638,638,638,,,,,,638,,,,,,',
',638,638,,638,638,638,638,638,638,638,638,638,638,638,638,637,637,638',
',637,,,,,,,,637,637,,637,637,637,637,637,637,637,,,637,637,,,,637,637',
'637,637,,,,,,637,,,,,,,,637,637,,637,637,637,637,637,637,637,637,637',
'637,637,637,986,986,637,,986,,,,,,,,986,986,,986,986,986,986,986,986',
'986,,,986,986,,,,986,986,986,986,,,,,,986,,,,,,,,986,986,,986,986,986',
'986,986,986,986,986,986,986,986,986,985,985,986,,985,,,,,,,,985,985',
',985,985,985,985,985,985,985,,,985,985,,,,985,985,985,985,,,,,,985,',
',,,,,,985,985,,985,985,985,985,985,985,985,985,985,985,985,985,981,981',
'985,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,,,981,981,,,,981',
'981,981,981,,,,,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,981',
'981,981,981,981,522,522,981,,522,,,,,,,,522,522,,522,522,522,522,522',
'522,522,,,522,522,,,,522,522,522,522,,,,,,522,,,,,,,,522,522,,522,522',
'522,522,522,522,522,522,522,522,522,522,523,523,522,,523,,,,,,,,523',
'523,,523,523,523,523,523,523,523,,,523,523,,,,523,523,523,523,,,,,,523',
',,,,,,,523,523,,523,523,523,523,523,523,523,523,523,523,523,523,461',
'461,523,,461,,,,,,,,461,461,,461,461,461,461,461,461,461,,,461,461,',
',,461,461,461,461,,,,,,461,,,,,,,,461,461,,461,461,461,461,461,461,461',
'461,461,461,461,461,531,531,461,,531,,,,,,,,531,531,,531,531,531,531',
'531,531,531,,,531,531,,,,531,531,531,531,,,,,,531,,,,,,,,531,531,,531',
'531,531,531,531,531,531,531,531,531,531,531,532,532,531,,532,,,,,,,',
'532,532,,532,532,532,532,532,532,532,,,532,532,,,,532,532,532,532,,',
',,,532,,,,,,,,532,532,,532,532,532,532,532,532,532,532,532,532,532,532',
'460,460,532,,460,,,,,,,,460,460,,460,460,460,460,460,460,460,,,460,460',
',,,460,460,460,460,,,,,,460,,,,,,,,460,460,,460,460,460,460,460,460',
'460,460,460,460,460,460,217,217,460,,217,,,,,,,,217,217,,217,217,217',
'217,217,217,217,,,217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217',
',217,217,217,217,217,217,217,217,217,217,217,217,218,218,217,,218,,',
',,,,,218,218,,218,218,218,218,218,218,218,,,218,218,,,,218,218,218,218',
',,,,,218,,,,,,,,218,218,,218,218,218,218,218,218,218,218,218,218,218',
'218,219,219,218,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,,,219',
'219,,,,219,219,219,219,,,,,,,,,,,,,,219,219,,219,219,219,219,219,219',
'219,219,219,219,219,219,267,267,219,,267,,,,,,,,267,267,,267,267,267',
'267,267,267,267,,,267,267,,,,267,267,267,267,,,,,,,,,,,,,,267,267,,267',
'267,267,267,267,267,267,267,267,267,267,267,593,593,267,,593,,,,,,,',
'593,593,,593,593,593,593,593,593,593,,,593,593,,,,593,593,593,593,,',
',,,593,,,,,,,,593,593,,593,593,593,593,593,593,593,593,593,593,593,593',
'594,594,593,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,,,594,594',
',,,594,594,594,594,,,,,,594,,,,,,,,594,594,,594,594,594,594,594,594',
'594,594,594,594,594,594,600,600,594,,600,,,,,,,,600,600,,600,600,600',
'600,600,600,600,,,600,600,,,,600,600,600,600,,,,,,600,,,,,,,,600,600',
',600,600,600,600,600,600,600,600,600,600,600,600,,550,600,550,550,550',
'550,550,,933,,933,933,933,933,933,550,,,,,,,,933,,752,,752,752,752,752',
'752,,,,,,550,,,752,,,,,933,550,550,550,550,,,,550,933,933,933,933,,',
',933,752,,751,,751,751,751,751,751,752,752,752,752,,,,752,751,,712,',
'712,712,712,712,712,1030,,1030,1030,1030,1030,1030,,712,,,,,751,,1030',
',,,,,,751,751,751,751,,,,751,712,,,,,,,1030,,,,712,712,,,,712,,1030',
'1030,,,347,1030,347,347,347,347,347,1008,,1008,1008,1008,1008,1008,',
'347,,,,,,931,1008,931,931,931,931,931,901,,901,901,901,901,901,,931',
'347,347,,,,,901,1008,,347,347,347,347,,,,347,,1008,1008,,931,,1008,',
',,,901,,931,931,931,931,,,,931,,901,901,,,1002,901,1002,1002,1002,1002',
'1002,,710,,710,710,710,710,710,1002,,,,,,,,710,,708,,708,708,708,708',
'708,,,,,,1002,,,708,,,,,710,1002,1002,1002,1002,,,,1002,710,710,710',
'710,,,,710,708,,905,,905,905,905,905,905,708,708,708,708,,,,708,905',
',1004,,1004,1004,1004,1004,1004,,,,,,,,,1004,,,,,905,,,,,,,,,,,905,905',
',,,905,1004,,,,,,,,,,,1004,1004,,,,1004' ]
        racc_action_check = arr = ::Array.new(25263, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2146,   869,   nil,  -101,   nil,  6630,  1551,   934, 23011, 23395,
   930,   nil,   839,   834,   422,   845,   496,   677,   nil,   -74,
 19835,  1276,   846,   nil,   808,   nil,   252,  9031,  9141,  9275,
  9406,  9537,   nil,  2291, 21546, 22733,   nil,   701,   877,   486,
   726,  9668,  9799,   277,  9930, 10061,  1339, 10192,   650,   500,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 10326,
   nil, 10468, 10599, 10730,   -23,   nil, 10861, 10992,   nil,   nil,
 11123, 22070, 21677, 21939, 23636,   nil,   nil,   nil,   nil,   nil,
   436,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     0,   nil,   nil,   112,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   762,   nil, 11267,   nil,   nil,   nil,
   nil, 11411, 11542, 11673, 11804,  5045,   nil,  1131,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
  1421,  5307,  5438,  5569,  5700,  5831,  5962, 24429, 24490, 24551,
   nil,   nil,  6224,  6355,  6486,   nil,   nil,   560,   390,   397,
   581,   477,   340,   384,   nil,  7023,  3451,   376, 11935, 12066,
 12197, 12328, 12459, 12590, 12721, 12852, 12983, 13114, 13245, 13376,
 13507, 13638, 13769, 13900, 14031, 14162, 14293, 14424, 14555, 14686,
   nil,   nil,   nil,   nil, 14817,   nil,   nil, 24612,   nil,   nil,
   299, 15224, 15355,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 15486,   nil,  1566,   nil,   251,   249,   nil, 16010,   273, 16272,
   nil,   nil, 16403, 16534,   nil,   nil,   -73,   nil, 16678,   917,
   230,   182,  3741,   191,   197,   115, 22463,  3161,   605,   645,
   672,   175,   744,   nil,   104,    46,    33,   nil,   nil,   nil,
   -24,   223,   -84, 22872,   nil,   500,   748,  3596,  3451,  1218,
   nil,  1199, 17202,   nil, 17333,  1856,  1116,  1114,   nil,   298,
   -38,  1124,  1099,   320,  1100,   nil,   nil, 24997,   234,    34,
    35, 17857,  1566,  4901,   148,  1102,   981,     8,   -18,   752,
  1045,    26,  1075,   nil,   nil,   533,   708,     8,   nil,   778,
   nil,   983, 18643,   nil,   nil,   nil,   677,   608,   680,   674,
   537,   676,   675,   563,   564,   nil,   603,   nil, 19704,   nil,
   274,   380,   386,   441,   482,   -41,   -35,   487,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   642, 23139,   nil,   nil,
   nil,   nil,  1000,   nil,   nil,  1040, 19966,  1122,   nil,   nil,
  1112,   nil,   492,   389,  1218,   nil,   nil,   986,   nil,   nil,
   nil,   nil,   nil,  1131,   218,   nil,   220,   256,   879,   880,
 20755,   nil,   nil,   nil,   336,   700,   623,   nil,   nil, 15082,
  7288,   nil,   nil,   nil,   nil,   nil,   nil,   -33,   nil,   706,
 24368, 24185,  7823,   416,  7954,  8085,  8216,  3161,  3016,   772,
  2174,   910,   915,   918,   936,  4611,  4466,  4321,  3741,  3886,
  4031,  4176,  2291,  2436,   795,  2266,  2581,  2726,  2001,  2871,
   nil, 21023,   nil,   nil,   870,   nil,   nil,   nil,   865,   nil,
   nil,  8897,   nil,  8766,   nil,  8635,   nil,   372,   nil,   nil,
   nil,  8491,  1261,   nil,   734,   727,   nil,   nil,   726, 22201,
   728,  8347, 24063, 24124,   812,   735,   nil, 21284,   666,   nil,
  7692, 24246, 24307,  7561,  3306,  1856,  7430,   788,   785,   659,
   630,   nil, 20889,   nil,   nil, 20621,   nil,   nil,   nil,   nil,
 24857,   nil,   578,   544,   nil,   535,   518,   517,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   470,  2161,   nil,   nil,
 20490,   nil,   nil,   nil,   456,   nil,   nil,   nil,   403,   nil,
   nil,   350,  1711,   346,   nil,   986,    62,   310,   304,     5,
  1263, 20359, 20228, 24673, 24734,   -19,   nil,   nil,   851,   nil,
 24795, 23697, 20097,   nil,   nil,    81,  4611,  1022,   nil,   -14,
   nil,   nil,   nil,  1086,   nil,   nil,   nil,   961,   nil,   nil,
   263,   nil,   375,   nil,   nil,   942,   nil,   939,   nil,   nil,
   nil, 23267,   nil,   939, 19573, 19442, 19311, 23819, 23758, 19180,
 19036,   658,   988, 18905, 18774, 18512, 18250,  1002,   nil,   nil,
 18119, 17988,  1014,   nil,   nil,   nil,   382,   506,   840,   224,
   990,   991,  1118,   nil,  1111,   176,   nil,   nil,  1034,   -57,
  1158,   nil,  1035,   nil,  1085, 17726,   nil,   nil, 17595,   nil,
  -113, 22602,  1058,   nil,  1081,   235,   123,  1128,   362,   885,
  1136,  1094, 21153,   nil,  1169,    44,  1229, 17464,   nil,   nil,
   nil,   182,    23,  1115,  1164,   nil,   nil,   205, 25102,   nil,
 25085,   nil, 24938,   nil, 17071,   nil,  2132,   nil,  1150,   339,
  1155,   nil,   nil,   nil,   nil,   557,   nil,  1274,   nil,   nil,
   nil,   nil,   nil,  1280,   nil,   250,  -120,   -23,    40,   258,
   183,  2001,   456,   986,   nil,    98,  2726, 16940,   nil,   248,
  3886, 24921, 24882, 23523,   nil,   nil,   nil,   nil,   nil,   nil,
  4031,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   207, 16809,
   216,   143,   140,   588,   448,   nil,  1421, 16141,   nil,   241,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 15879, 15748, 15617,  7154,    89, 14948,   nil,   -56,   nil,   nil,
   347,   nil,   nil, 20987,   nil,  3596,   nil,   nil,   nil,   nil,
   341,   347,   nil,   nil,   486,   nil,  3306,   396,   450,   nil,
   nil,   nil,   nil,   nil,   nil,   404,   454,   449,   nil,   nil,
   nil,   454,   467,   nil,   470,   472,   nil,   476,   nil,   nil,
   485,  2191,   485,  2567,   nil,   611,   nil,  6892,   640,   nil,
  6761,  3016,    11,   660,   nil,   664,   144,  2436,   nil,   674,
   554,    74,   nil,   577,   577,   223,   nil,   nil,  6093,  5176,
  1711,  1276,   nil,   591,   593,   nil,   594,   595,   599,   nil,
   626,   616,   939, 21415,   nil,   nil,   nil,   nil,  4176,   nil,
   nil,    -1, 21808,   nil,  4466,  4321,  1552,   nil,   nil, 21042,
   nil, 25025,   nil, 21016,   nil, 25141,   nil,   nil,   nil,   nil,
   370,  2857,   693,   nil,    36,   nil,   nil,    85,   nil,   nil,
   nil,   830,   nil,   nil,   nil,   755,   nil,   nil,  1309,   nil,
   nil, 25018,   nil, 24865,   nil, 22780,   nil,   nil,   754, 22332,
  1028,   817,   nil,  4756,    92,    33,  1131,   823,    32,   nil,
   771,   879,   300,   nil,   nil,   nil,   766,   769,   770,   771,
   792,  2712,   796,  2422,  2581,   nil,   nil,   nil,   nil,  2871,
   799,   nil,   nil,   804,   806,   808,   828,   nil,   831,   nil,
  1173, 24002,   nil,   972, 18381, 23941, 23880,    42,   nil,   nil,
   nil,  1407, 22510,   nil,   nil,   nil,   nil,  2171,   865,    17,
   990,   nil, 25077,   nil, 25158,   nil, 21023,   nil, 25004,   nil,
   nil,   922,   925,   nil,   892,   146,   138,   111,   145,   nil,
   933,   934,   nil,   nil,   724,  1123,  1088,    70,    26,   nil,
 24945,   nil,   nil,   nil,   nil,   835,   nil ]

racc_action_default = [
    -3,  -609,    -1,  -595,    -4,  -609,    -7,  -609,  -609,  -609,
  -609,   -30,  -609,  -609,   -34,  -609,  -609,  -289,   -46,  -597,
  -609,   -51,   -55,   -56,   -57,   -61,  -266,  -266,  -266,  -302,
  -331,  -332,   -73,   -12,   -77,   -85,   -87,  -609,  -499,  -500,
  -609,  -609,  -609,  -609,  -609,  -609,  -225,  -609,  -597,  -239,
  -280,  -281,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -583,
  -291,  -295,  -608,  -573,  -310,  -394,  -609,  -609,   -53,   -53,
  -595,  -609,  -609,  -609,  -609,  -333,  -334,  -337,  -439,  -440,
  -441,  -442,  -463,  -445,  -446,  -465,  -467,  -450,  -455,  -459,
  -461,  -477,  -478,  -479,  -463,  -481,  -483,  -484,  -485,  -486,
  -581,  -488,  -489,  -582,  -491,  -492,  -493,  -494,  -495,  -496,
  -497,  -498,  -503,  -504,  -609,    -2,  -596,  -604,  -605,  -606,
    -6,  -609,  -609,  -609,  -609,  -609,    -8,    -3,   -18,  -609,
  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -126,  -127,  -128,
  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,   -23,  -123,
   -12,  -609,  -609,  -609,  -609,  -609,  -256,  -609,  -609,  -609,
  -593,  -594,  -609,  -609,  -597,  -598,   -50,  -609,  -499,  -500,
  -609,  -289,  -609,  -609,  -231,  -609,   -12,  -609,  -208,  -209,
  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
  -240,  -241,  -242,  -243,  -609,  -403,  -405,  -609,  -591,  -592,
   -62,  -256,  -609,  -309,  -409,  -418,  -420,   -68,  -415,   -69,
  -597,   -70,  -246,  -261,  -270,  -270,  -265,  -609,  -271,  -609,
  -463,  -575,  -609,  -609,   -71,   -72,  -595,   -13,  -609,   -16,
  -609,   -75,   -12,  -597,  -609,   -78,   -81,   -12,   -93,   -94,
  -609,  -609,  -101,  -302,  -305,  -597,  -609,  -331,  -332,  -336,
  -416,  -609,   -83,  -609,   -89,  -299,  -609,  -210,  -211,  -482,
  -219,  -220,  -609,  -232,  -609,   -12,  -293,  -597,  -247,  -601,
  -601,  -609,  -609,  -601,  -609,  -311,  -312,  -531,   -52,  -609,
  -609,  -609,   -12,   -12,  -595,  -609,  -596,  -499,  -500,  -609,
  -609,  -289,  -609,  -347,  -348,  -111,  -112,  -609,  -114,  -609,
  -289,  -507,  -609,  -499,  -500,  -324,  -116,  -117,  -156,  -157,
  -158,  -174,  -179,  -186,  -189,  -326,  -609,  -571,  -609,  -443,
  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  1037,    -5,
  -607,   -24,   -25,   -26,   -27,   -28,  -609,  -609,   -20,   -21,
   -22,  -124,  -609,   -31,   -33,  -276,  -609,  -609,  -275,   -32,
  -609,   -35,  -609,  -289,   -43,   -45,  -197,  -251,  -271,   -47,
   -48,   -36,  -198,  -251,  -597,  -257,  -270,  -270,  -584,  -585,
  -266,  -413,  -586,  -587,  -585,  -584,  -266,  -412,  -414,  -586,
  -587,  -335,  -584,  -585,   -42,  -205,   -49,  -597,  -308,  -609,
  -609,  -609,  -256,  -299,  -609,  -609,  -609,  -206,  -207,  -212,
  -213,  -214,  -215,  -216,  -217,  -221,  -222,  -223,  -224,  -226,
  -227,  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -597,  -244,
  -424,  -266,   -59,   -63,  -597,  -267,  -422,  -424,  -597,  -304,
  -262,  -609,  -263,  -609,  -268,  -609,  -272,  -609,  -578,  -580,
   -11,  -596,   -15,   -17,  -597,   -74,  -297,   -90,   -79,  -609,
  -597,  -256,  -609,  -609,  -100,  -609,  -482,  -609,   -86,   -91,
  -609,  -609,  -609,  -609,  -245,  -237,  -609,  -431,  -609,  -597,
  -609,  -248,  -603,  -602,  -250,  -603,  -300,  -301,  -574,  -395,
  -531,  -398,  -570,  -570,  -514,  -516,  -516,  -516,  -530,  -532,
  -533,  -534,  -535,  -536,  -537,  -538,  -539,  -609,  -541,  -543,
  -545,  -550,  -552,  -553,  -555,  -560,  -562,  -563,  -565,  -566,
  -567,  -609,   -12,  -338,  -339,   -12,  -609,  -609,  -609,  -609,
  -609,  -609,  -256,  -609,  -609,  -299,   -53,  -111,  -112,  -113,
  -609,  -609,  -256,  -320,  -505,  -609,   -12,  -509,  -328,  -597,
  -444,  -464,  -469,  -609,  -471,  -447,  -466,  -609,  -468,  -449,
  -609,  -452,  -609,  -454,  -457,  -609,  -458,  -609,  -480,    -9,
   -19,  -609,   -29,  -279,  -609,  -609,  -256,  -609,  -609,  -609,
  -609,  -417,  -609,  -258,  -260,  -609,  -609,   -64,  -255,  -410,
  -609,  -609,   -66,  -411,  -307,  -599,  -584,  -585,  -584,  -585,
  -597,  -609,  -609,  -425,   -58,  -406,  -422,  -253,  -609,  -383,
  -609,  -303,  -270,  -269,  -273,  -609,  -576,  -577,  -609,   -14,
   -76,  -609,   -82,   -88,  -597,  -584,  -585,  -254,  -588,   -99,
  -609,   -84,  -609,  -204,  -218,  -597,  -608,  -608,  -292,  -294,
  -296,  -601,  -609,  -597,  -609,  -512,  -513,  -609,  -609,  -523,
  -609,  -526,  -609,  -528,  -609,  -349,  -609,  -351,  -353,  -360,
  -597,  -544,  -554,  -564,  -568,  -608,  -340,  -608,   -54,  -341,
  -342,  -315,  -316,  -609,  -318,  -609,  -597,  -584,  -585,  -588,
  -298,   -12,  -111,  -112,  -115,  -597,   -12,  -609,  -322,  -609,
   -12,  -531,  -531,  -609,  -572,  -470,  -473,  -474,  -475,  -476,
   -12,  -448,  -451,  -453,  -456,  -460,  -462,  -125,  -277,  -609,
  -597,  -584,  -585,  -585,  -584,   -44,  -252,  -609,  -600,  -270,
   -38,  -200,   -39,  -201,   -65,   -40,  -203,   -41,  -202,   -67,
  -609,  -609,  -609,  -609,  -417,  -609,  -404,  -383,  -408,  -407,
  -609,  -419,  -384,  -597,  -386,   -12,  -421,  -264,  -274,  -579,
   -80,  -417,   -92,  -306,  -608,  -345,   -12,  -432,  -608,  -433,
  -434,  -249,  -396,  -399,  -401,  -388,  -609,  -570,  -551,  -569,
  -515,  -516,  -516,  -542,  -516,  -516,  -561,  -516,  -539,  -556,
  -597,  -609,  -358,  -609,  -540,  -609,  -343,  -609,  -609,  -317,
  -609,   -12,  -417,  -609,  -417,  -609,  -609,   -12,  -325,  -609,
  -597,  -609,  -329,  -609,  -278,  -417,   -37,  -199,  -259,  -609,
  -238,   -12,   -60,  -570,  -570,  -365,  -367,  -367,  -367,  -382,
  -609,  -597,  -539,  -547,  -548,  -558,  -423,   -10,   -12,  -438,
  -346,  -609,  -609,  -436,   -12,   -12,  -609,  -397,  -511,  -609,
  -519,  -609,  -521,  -609,  -524,  -609,  -527,  -529,  -350,  -352,
  -356,  -609,  -361,  -313,  -609,  -314,  -273,  -608,  -319,  -321,
  -506,  -609,  -327,  -508,  -510,  -509,  -472,  -426,  -609,  -363,
  -364,  -373,  -375,  -609,  -378,  -609,  -380,  -385,  -609,  -609,
  -546,  -609,  -437,   -12,  -499,  -500,  -609,  -609,  -289,  -435,
  -609,  -609,  -597,  -390,  -392,  -393,  -516,  -516,  -516,  -516,
  -354,  -609,  -359,  -609,   -12,  -427,  -428,  -429,  -323,   -12,
  -570,  -549,  -366,  -367,  -367,  -367,  -367,  -559,  -367,  -387,
  -557,  -609,  -299,  -431,  -256,  -609,  -609,  -299,  -400,  -402,
  -389,  -609,  -609,  -517,  -520,  -522,  -525,  -609,  -357,  -608,
  -609,  -362,  -609,  -370,  -609,  -372,  -609,  -376,  -609,  -379,
  -381,  -298,  -588,  -430,  -597,  -584,  -585,  -588,  -298,  -391,
  -516,  -355,  -344,  -330,  -367,  -367,  -367,  -367,  -417,  -518,
  -609,  -368,  -371,  -374,  -377,  -367,  -369 ]

clist = [
'223,385,338,26,283,283,283,566,26,305,319,319,345,266,582,585,590,558',
'217,434,133,133,502,26,136,136,268,119,696,334,750,493,26,26,26,6,26',
'352,353,267,6,274,278,329,418,419,126,319,319,319,116,349,350,128,209',
'354,431,285,285,285,440,446,451,454,26,115,284,284,284,26,26,303,301',
'26,494,836,541,544,845,673,548,673,705,706,826,226,133,270,277,279,340',
'343,676,322,119,720,336,599,814,339,805,668,909,953,977,390,401,402',
'403,404,491,348,348,551,833,348,2,397,528,26,371,375,391,641,26,26,26',
'26,26,848,26,120,355,877,676,662,538,620,622,955,392,393,670,394,395',
'396,281,294,295,755,747,6,831,828,971,760,666,631,332,728,405,341,6',
'407,414,364,348,348,348,348,29,208,665,977,502,29,679,387,342,887,346',
'362,603,386,880,335,539,337,746,857,29,283,606,607,753,925,1,879,1019',
'29,29,29,881,29,952,912,549,822,347,702,566,894,895,26,26,26,26,26,26',
'26,558,673,673,490,909,26,26,26,871,460,450,29,441,676,955,496,29,29',
'497,26,29,797,399,406,840,965,283,283,417,417,733,818,891,389,,283,',
',429,430,425,973,938,425,836,660,,,456,457,425,800,,962,26,26,413,424',
',715,424,,319,26,,,29,424,,,,29,29,29,29,29,525,29,529,319,285,26,,440',
'446,26,304,,285,284,26,833,522,507,682,,703,284,540,966,119,526,691',
'998,684,,,,531,,744,274,,512,,278,586,833,26,513,514,301,,511,,520,301',
',969,794,,,1022,,26,26,26,898,510,1021,,593,,,518,687,,,566,832,566',
'834,,811,687,26,,,119,,29,29,29,29,29,29,29,,268,495,,26,29,29,29,736',
'348,498,,,851,608,,929,930,745,29,749,784,807,,566,566,789,833,642,589',
'605,,133,,558,558,136,637,852,,,715,,,842,,609,854,,687,283,821,770',
',29,29,,687,,673,,,,29,,630,,,648,,676,,865,,653,,882,878,26,,,29,661',
',,29,450,1013,441,810,29,432,,440,446,,412,,455,780,782,,,,785,787,',
'529,319,283,,,,1001,647,529,319,,29,648,652,,304,616,618,621,621,26',
',807,860,861,,,29,29,29,26,,,,,672,819,,,,,450,,441,,26,,,29,,450,,441',
'855,,,,859,664,715,,715,943,,29,566,956,,,,,741,,283,,,701,,,,,304,',
'283,967,964,304,695,,,,26,,,26,,,882,974,882,975,26,,,,,,,827,458,,26',
'450,,441,26,729,283,450,799,,,441,,866,,,,960,715,,587,588,,735,748',
',,29,,,,883,820,26,26,,642,26,133,,,,136,26,26,450,,441,26,26,798,529',
'319,921,499,,,882,1024,,642,,812,319,,,779,927,715,775,715,767,,,,862',
'29,515,425,825,,,,,,,29,,425,425,,951,,425,425,424,874,648,1028,,653',
'29,,,715,424,424,,,,424,424,642,,,,,,,,,642,455,,432,,,856,,417,,,,',
'763,15,763,,,26,15,,,,26,26,642,29,26,889,29,,,893,,,883,29,26,883,133',
'883,,883,,1000,,29,15,,,29,,,,26,,,,825,,,1014,,,,,348,693,,,344,,,',
',15,,,,29,29,,26,29,,,,,,29,29,,,26,29,29,,,,425,970,,687,874,,874,914',
'874,,883,654,883,,883,,883,424,,,,,,,,26,,,,26,725,15,,727,319,26,,825',
'883,,15,,15,319,,,,,667,26,,,671,,,920,,,,,924,709,711,713,,,26,348',
'680,,,,26,26,683,874,,874,,874,,874,16,781,783,,29,16,786,788,319,29',
'29,699,,29,,,,,,,227,874,,29,,,990,,,227,227,227,,16,310,310,,415,428',
'26,29,985,,15,,15,,,15,,,,283,,,15,,,,,26,16,,,,26,227,227,29,15,227',
'359,369,369,,,,,,29,26,754,,,,,450,,642,,,450,,441,,829,,,829,,,,,38',
',,,853,38,,29,,,504,29,506,16,,508,509,29,227,227,227,227,16,863,16',
',,,15,,867,29,15,38,308,308,,15,932,934,936,,,781,783,788,786,,29,,',
',,,29,29,,,,,,38,,,813,15,,,886,,,357,373,373,373,,,,,890,,,15,15,,',
',,,844,,875,,,,,,,,,,,,29,,,,16,227,422,227,227,422,227,917,,38,,,422',
'227,227,867,,29,38,,38,,29,,,,16,,1003,1005,1007,1009,633,1010,,,,29',
',,,,,,942,900,902,,904,906,950,907,,,,,,,835,,837,227,227,,,,,,,,227',
',,,,,,,,1031,1032,1033,1034,,,,,,16,,1036,,16,,,,310,16,,983,,,908,38',
',,,,,829,,,875,310,875,,875,674,,344,999,677,923,,,16,,,,38,,,,,15,',
',,,,,227,16,16,,,,,,,,876,,,,,,,674,,,344,227,,,,,,,,993,994,995,996',
',,,,227,,,,,875,,875,721,875,,875,,38,,,,38,,,,308,38,,,,,15,,428,15',
',,875,,,,,308,,,,,,,,,,,,38,15,,,,,1029,,,,,,,,,,,38,38,957,,958,768',
'959,227,,,,,,15,674,344,,15,,,,,,15,15,,,,15,15,,,,,,,976,,978,,,,,',
',,808,13,,809,,,13,,,,16,,,,,,,,310,,227,,817,,,,310,,,,,,,,13,227,',
',,839,,,,,,,,,,1020,,,,,,,,,,1025,,1026,13,1027,,,,,,,,,363,15,,,,,15',
',,16,15,,16,,,1035,,,,227,15,,864,,,,,,,227,,,,16,,,,15,,,,38,,,,13',
',,,308,,,,,13,,13,308,,,,,422,227,,15,16,,,,,,422,422,,,15,422,422,',
',,,,,,,,,,,17,,,,,17,,,,,,,916,,,,,310,,,15,38,,,38,,15,,310,,344,,',
'17,312,312,,,,,15,,,,,38,,,13,,420,,,420,,,,15,,,420,17,,15,15,,,,,',
',361,370,370,13,,,16,38,,,,16,227,,,16,,,,,,,,,,16,,,,,,,,,,,,,,,,15',
'422,,,17,,,,308,,,,,17,,17,,,,308,,15,,,13,,15,,13,16,,,,13,,,,,,,16',
',,,,,,,,,,,,,,,,,,,,13,,,,,,,38,,,227,,38,,16,,38,13,13,,16,,,,,,38',
',,,,,,,16,,,17,,423,,,423,,,,940,,,423,,16,,,,946,,16,16,,,,,17,,,,',
',,39,38,,,,39,,,,,,,38,,,,,,,,,,,,,,,,,,,,980,39,309,309,16,,,,,,,,',
',,38,,,,,,38,,17,,16,,17,,39,16,312,17,,,38,,,,358,374,374,374,,,227',
',373,312,,,,38,,,,944,,38,38,17,,,,,,,,,,,,,,13,,,17,17,,,,,,39,,,,',
',,,,39,,39,,,,,,,,373,,,,38,,,,,,,,,,,,,,,,,,,,,38,,,,,38,,,,,,,,,,',
',13,,,13,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,420,,',
',13,,39,,,,420,420,,,,420,420,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,312,,,',
',,,,312,,,,,,,,,,,,,,39,,,,39,,,,309,39,,,,,,,,,,,,,,,,309,,,,,,,,,',
',,39,13,,,17,,13,17,,,13,,,,,,,39,39,,13,,,,,,,,17,,,,,,,759,,420,,',
',,,,,,,,,,,,,,,,,423,,,,17,,,,13,,423,423,,,,423,423,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,312,,,,,,,,13,,,312,,,13,,,,,,,,,,,,,,13,,,,,,,,,,,',
',,,,,13,,,,949,,13,13,,,,,,,,17,,,,,17,,,,17,,,,39,,,,,,17,,309,,,,',
',,,309,,,,,,,423,,,,13,,,,,,,,,,,,,,,,,,,,,13,,,17,,13,,,,,,,,,17,,',
',,,,,,39,,,39,,,,,,,,,,,,,,,,,,,,,39,,17,,,,,,17,,,,,,,,,,,,,,17,,,',
',,,,,,,39,370,,,,,17,,,,948,,17,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,309,',
',,,,,,,,,309,,,,370,,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,,17,,,,,,,,,,,,',
',,39,,,,,39,,,,39,,,234,,,,,,,39,,282,282,282,,,,,,,,,,327,328,,330',
'331,,333,,,,,,,,,,,,,,,282,282,,,,,,,,,39,,,,,,,,,,,39,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,39,,,,,,39,,,,,,,,,,,,,,39,,,,,,,,,,,,374,,,,,39',
',,,945,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,374,,,,39,282',
'427,,,433,282,,,,,,433,,,,,,,,,39,,,,234,39,,467,468,469,470,471,472',
'473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,,,,',
'489,,,,,,,282,282,,,,,,,,282,,,,,,,282,,282,,,282,282,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,534,,535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,282,,433,433,433,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,282,,282,,282,,,,,,,,,,,,,,,,282,,,,,,,,,433,,,694,,,,,,,',
',282,,,282,,,,,,,,,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,,282,282,',
',,,,,,,,282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,433,282,,,,776,,,282',
'282,433,433,,,,433,433,,,,,,,,,,,,,,,,,,,,,,,,282,,,282,,,,,,,,,,,,',
',,,,,,282,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,282,,,,,,,,433,,,,,,,,,,,,,433,433,433,433,,870,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282,,,,,,,,,,,,,,',
',,,282,433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,282' ]
        racc_goto_table = arr = ::Array.new(3532, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,63,75,47,39,39,39,175,47,56,71,71,94,139,97,97,99,170,32,30,64,64',
'81,47,66,66,32,102,11,34,103,45,47,47,47,7,47,36,36,42,7,79,79,69,23',
'23,8,71,71,71,6,18,18,16,16,18,27,78,78,78,43,43,43,27,47,4,76,76,76',
'47,47,53,52,47,30,181,77,77,98,82,77,82,121,121,130,21,64,44,44,44,78',
'78,185,57,102,116,7,61,12,76,128,46,114,132,182,156,18,18,18,18,43,25',
'25,138,176,25,2,156,58,47,62,62,157,31,47,47,47,47,47,12,47,5,4,126',
'185,142,9,160,160,133,158,159,142,162,163,164,51,51,51,165,169,7,174',
'178,179,166,48,67,72,37,7,74,7,26,24,20,25,25,25,25,50,17,80,182,81',
'50,15,92,93,13,96,100,101,104,130,105,106,107,108,109,50,39,110,111',
'112,113,1,118,132,50,50,50,124,50,131,117,134,135,136,137,175,140,141',
'47,47,47,47,47,47,47,170,82,82,143,114,47,47,47,128,32,64,50,79,185',
'133,145,50,50,146,47,50,149,5,2,116,150,39,39,76,76,99,151,152,155,',
'39,,,25,25,19,126,130,19,181,30,,,25,25,19,46,,117,47,47,21,21,,115',
'21,,71,47,,,50,21,,,,50,50,50,50,50,34,50,56,71,78,47,,43,43,47,10,',
'78,76,47,176,32,156,58,,138,76,34,12,102,69,58,117,30,,,,32,,61,79,',
'7,,79,18,176,47,8,53,52,,6,,53,52,,103,31,,,98,,47,47,47,121,4,117,',
'32,,,57,43,,,175,127,175,127,,31,43,47,,,102,,50,50,50,50,50,50,50,',
'32,51,,47,50,50,50,30,25,51,,,97,42,,121,121,30,50,9,45,81,,175,175',
'45,176,34,4,25,,64,,170,170,66,32,31,,,115,,,115,,25,31,,43,39,77,30',
',50,50,,43,,82,,,,50,,16,,,79,,185,,31,,79,,175,127,47,,,50,34,,,50',
'64,11,79,58,50,68,,43,43,,10,,68,27,27,,,,27,27,,56,71,39,,,,121,44',
'56,71,,50,79,44,,10,161,161,161,161,47,,81,138,138,,,50,50,50,47,,,',
',78,23,,,,,64,,79,,47,,,50,,64,,79,9,,,,9,44,115,,115,97,,50,175,127',
',,,,36,,39,,,78,,,,,10,,39,99,97,10,25,,,,47,,,47,,,175,127,175,127',
'47,,,,,,,120,54,,47,64,,79,47,102,39,64,94,,,79,,27,,,,115,115,,10,10',
',76,102,,,50,,,,177,75,47,47,,34,47,64,,,,66,47,47,64,,79,47,47,139',
'56,71,9,54,,,175,127,,34,,56,71,,,78,9,115,7,115,16,,,,63,50,54,19,34',
',,,,,,50,,19,19,,9,,19,19,21,120,79,31,,79,50,,,115,21,21,,,,21,21,34',
',,,,,,,,34,68,,68,,,18,,76,,,,,161,28,161,,,47,28,,,,47,47,34,50,47',
'75,50,,,75,,,177,50,47,177,64,177,,177,,9,,50,28,,,50,,,,47,,,,34,,',
'30,,,,,25,68,,,73,,,,,28,,,,50,50,,47,50,,,,,,50,50,,,47,50,50,,,,19',
'120,,43,120,,120,18,120,,177,54,177,,177,,177,21,,,,,,,,47,,,,47,10',
'28,,10,71,47,,34,177,,28,,28,71,,,,,54,47,,,54,,,102,,,,,102,173,173',
'173,,,47,25,54,,,,47,47,54,120,,120,,120,,120,29,68,68,,50,29,68,68',
'71,50,50,54,,50,,,,,,,29,120,,50,,,34,,,29,29,29,,29,29,29,,73,73,47',
'50,32,,28,,28,,,28,,,,39,,,28,,,,,47,29,,,,47,29,29,50,28,29,29,29,29',
',,,,,50,47,54,,,,,64,,34,,,64,,79,,122,,,122,,,,,59,,,,10,59,,50,,,73',
'50,73,29,,73,73,50,29,29,29,29,29,10,29,,,,28,,68,50,28,59,59,59,,28',
'123,123,123,,,68,68,68,68,,50,,,,,,50,50,,,,,,59,,,54,28,,,10,,,59,59',
'59,59,,,,,10,,,28,28,,,,,,54,,122,,,,,,,,,,,,50,,,,29,29,29,29,29,29',
'29,10,,59,,,29,29,29,68,,50,59,,59,,50,,,,29,,123,123,123,123,73,123',
',,,50,,,,,,,10,173,173,,173,173,10,173,,,,,,,125,,125,29,29,,,,,,,,29',
',,,,,,,,123,123,123,123,,,,,,29,,123,,29,,,,29,29,,10,,,54,59,,,,,,122',
',,122,29,122,,122,73,,73,10,73,54,,,29,,,,59,,,,,28,,,,,,,29,29,29,',
',,,,,,125,,,,,,,73,,,73,29,,,,,,,,173,173,173,173,,,,,29,,,,,122,,122',
'73,122,,122,,59,,,,59,,,,59,59,,,,,28,,73,28,,,122,,,,,59,,,,,,,,,,',
',59,28,,,,,173,,,,,,,,,,,59,59,125,,125,73,125,29,,,,,,28,73,73,,28',
',,,,,28,28,,,,28,28,,,,,,,125,,125,,,,,,,,73,22,,73,,,22,,,,29,,,,,',
',,29,,29,,73,,,,29,,,,,,,,22,29,,,,73,,,,,,,,,,125,,,,,,,,,,125,,125',
'22,125,,,,,,,,,22,28,,,,,28,,,29,28,,29,,,125,,,,29,28,,73,,,,,,,29',
',,,29,,,,28,,,,59,,,,22,,,,59,,,,,22,,22,59,,,,,29,29,,28,29,,,,,,29',
'29,,,28,29,29,,,,,,,,,,,,,33,,,,,33,,,,,,,73,,,,,29,,,28,59,,,59,,28',
',29,,73,,,33,33,33,,,,,28,,,,,59,,,22,,22,,,22,,,,28,,,22,33,,28,28',
',,,,,,33,33,33,22,,,29,59,,,,29,29,,,29,,,,,,,,,,29,,,,,,,,,,,,,,,,28',
'29,,,33,,,,59,,,,,33,,33,,,,59,,28,,,22,,28,,22,29,,,,22,,,,,,,29,,',
',,,,,,,,,,,,,,,,,,22,,,,,,,59,,,29,,59,,29,,59,22,22,,29,,,,,,59,,,',
',,,,29,,,33,,33,,,33,,,,29,,,33,,29,,,,29,,29,29,,,,,33,,,,,,,60,59',
',,,60,,,,,,,59,,,,,,,,,,,,,,,,,,,,29,60,60,60,29,,,,,,,,,,,59,,,,,,59',
',33,,29,,33,,60,29,33,33,,,59,,,,60,60,60,60,,,29,,59,33,,,,59,,,,59',
',59,59,33,,,,,,,,,,,,,,22,,,33,33,,,,,,60,,,,,,,,,60,,60,,,,,,,,59,',
',,59,,,,,,,,,,,,,,,,,,,,,59,,,,,59,,,,,,,,,,,,22,,,22,,,,,,,,,,,,,,',
',,,,,,22,,,,,,,,,60,,,,,,,,,,,,,,,,,,,,22,,,,22,,60,,,,22,22,,,,22,22',
',,,,,,,,,,,,,,,,,,,,,33,,,,,,,,33,,,,,,,,33,,,,,,,,,,,,,,60,,,,60,,',
',60,60,,,,,,,,,,,,,,,,60,,,,,,,,,,,,60,22,,,33,,22,33,,,22,,,,,,,60',
'60,,22,,,,,,,,33,,,,,,,33,,22,,,,,,,,,,,,,,,,,,,,33,,,,33,,,,22,,33',
'33,,,,33,33,,,22,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,22,,,33,,,22,,',
',,,,,,,,,,,22,,,,,,,,,,,,,,,,,22,,,,22,,22,22,,,,,,,,33,,,,,33,,,,33',
',,,60,,,,,,33,,60,,,,,,,,60,,,,,,,33,,,,22,,,,,,,,,,,,,,,,,,,,,22,,',
'33,,22,,,,,,,,,33,,,,,,,,,60,,,60,,,,,,,,,,,,,,,,,,,,,60,,33,,,,,,33',
',,,,,,,,,,,,,33,,,,,,,,,,,60,33,,,,,33,,,,33,,33,33,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,60,,,,,,,,,,,60,,,,33,,,,33,,,,,,,,,,,,,,,,,,,,,33,,,,,33',
',,,,,,,,,,,,,,60,,,,,60,,,,60,,,35,,,,,,,60,,35,35,35,,,,,,,,,,35,35',
',35,35,,35,,,,,,,,,,,,,,,35,35,,,,,,,,,60,,,,,,,,,,,60,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,60,,,,,,60,,,,,,,,,,,,,,60,,,,,,,,,,,,60,,,,,60',
',,,60,,60,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,35',
'35,,,35,35,,,,,,35,,,,,,,,,60,,,,35,60,,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,,,,35,35,,,,,,,,35,,,',
',,,35,,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,',
',,,35,,,35,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35',
',,35,35,35,35,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,',
',,,,35,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3532, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   196,   116,   nil,    62,   126,    47,    35,    39,  -199,
   273,  -509,  -598,  -635,   nil,  -335,    45,   162,   -15,    48,
    94,    65,  1409,  -167,   -47,    45,    35,  -159,   740,   907,
  -197,  -311,     2,  1571,   -19,  2547,   -31,  -427,   nil,   -25,
   nil,   nil,    15,  -157,    61,  -239,  -395,     3,  -336,   nil,
   170,   117,    39,    38,   379,   nil,   -25,    58,  -205,  1010,
  1814,  -270,    48,   -73,    12,   nil,    16,  -254,   263,     0,
   nil,   -24,   112,   733,    99,   -60,    37,  -263,    28,    15,
  -319,  -263,  -422,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   103,   115,   -52,   nil,   115,  -335,  -647,  -339,
   110,  -189,    24,  -577,   109,   125,  -150,   126,  -415,  -559,
  -183,  -192,  -414,  -667,  -739,  -288,  -472,  -638,  -606,   nil,
  -102,  -470,   298,   172,  -601,   465,  -670,  -339,  -569,   nil,
  -619,  -692,  -793,  -757,  -141,  -495,   143,  -340,  -234,    -9,
  -612,  -612,  -355,   -42,   nil,   -40,   -38,   nil,   nil,  -422,
  -672,  -446,  -566,   nil,   nil,   173,    23,    37,    54,    54,
  -256,   119,    55,    55,    55,  -464,  -459,   nil,   nil,  -454,
  -330,   nil,   nil,   331,  -556,  -340,  -594,  -167,  -551,  -774,
   nil,  -635,  -829,   nil,   nil,  -411 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   356,   299,   nil,   nil,
   537,   nil,   846,   nil,   296,   297,   nil,   nil,   nil,    11,
    12,    18,   232,   nil,   nil,    14,   nil,   421,   233,   326,
   nil,   nil,   601,   231,   459,    21,   nil,   nil,   351,    22,
    23,    24,   nil,   690,   nil,   nil,   nil,   316,   nil,    25,
   313,   435,    32,   nil,   nil,    34,    37,    36,   nil,   228,
   229,   368,   nil,   135,   443,   134,    79,   nil,   426,    95,
    46,    49,   264,   288,   nil,   815,   436,   nil,   437,   448,
   649,   500,   286,   272,    50,    51,    52,    53,    54,    55,
    56,    57,    58,   nil,   273,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   583,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   717,   565,   nil,   718,   972,   873,
   553,   nil,   554,   nil,   nil,   555,   nil,   557,   nil,   802,
   nil,   nil,   nil,   563,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   447,   nil,   nil,   669,   663,   nil,
   nil,   nil,   nil,    78,    80,    81,   nil,   nil,   nil,   nil,
   nil,   611,   nil,   nil,   nil,   nil,   nil,    91,    92,   nil,
   830,   752,   552,   nil,   556,   838,   568,   570,   571,   884,
   574,   575,   885,   578,   581,   291 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 149, :_reduce_none,
  2, 150, :_reduce_2,
  0, 151, :_reduce_3,
  1, 151, :_reduce_4,
  3, 151, :_reduce_5,
  2, 151, :_reduce_6,
  1, 153, :_reduce_none,
  2, 153, :_reduce_8,
  3, 156, :_reduce_9,
  4, 157, :_reduce_10,
  2, 158, :_reduce_11,
  0, 162, :_reduce_12,
  1, 162, :_reduce_13,
  3, 162, :_reduce_14,
  2, 162, :_reduce_15,
  1, 163, :_reduce_none,
  2, 163, :_reduce_17,
  0, 174, :_reduce_18,
  4, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  2, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  4, 155, :_reduce_29,
  1, 155, :_reduce_none,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  1, 155, :_reduce_none,
  3, 167, :_reduce_35,
  3, 167, :_reduce_36,
  6, 167, :_reduce_37,
  5, 167, :_reduce_38,
  5, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  3, 167, :_reduce_42,
  1, 175, :_reduce_none,
  3, 175, :_reduce_44,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_47,
  3, 173, :_reduce_48,
  3, 173, :_reduce_49,
  2, 173, :_reduce_50,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 186, :_reduce_53,
  3, 184, :_reduce_54,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 188, :_reduce_none,
  4, 188, :_reduce_58,
  0, 196, :_reduce_59,
  4, 193, :_reduce_60,
  1, 195, :_reduce_none,
  2, 187, :_reduce_62,
  3, 187, :_reduce_63,
  4, 187, :_reduce_64,
  5, 187, :_reduce_65,
  4, 187, :_reduce_66,
  5, 187, :_reduce_67,
  2, 187, :_reduce_68,
  2, 187, :_reduce_69,
  2, 187, :_reduce_70,
  2, 187, :_reduce_71,
  2, 187, :_reduce_72,
  1, 168, :_reduce_73,
  3, 168, :_reduce_74,
  1, 201, :_reduce_75,
  3, 201, :_reduce_76,
  1, 200, :_reduce_none,
  2, 200, :_reduce_78,
  3, 200, :_reduce_79,
  5, 200, :_reduce_80,
  2, 200, :_reduce_81,
  4, 200, :_reduce_82,
  2, 200, :_reduce_83,
  4, 200, :_reduce_84,
  1, 200, :_reduce_85,
  3, 200, :_reduce_86,
  1, 204, :_reduce_none,
  3, 204, :_reduce_88,
  2, 203, :_reduce_89,
  3, 203, :_reduce_90,
  1, 206, :_reduce_91,
  3, 206, :_reduce_92,
  1, 205, :_reduce_93,
  1, 205, :_reduce_94,
  4, 205, :_reduce_95,
  3, 205, :_reduce_96,
  3, 205, :_reduce_97,
  3, 205, :_reduce_98,
  3, 205, :_reduce_99,
  2, 205, :_reduce_100,
  1, 205, :_reduce_101,
  1, 170, :_reduce_102,
  1, 170, :_reduce_103,
  4, 170, :_reduce_104,
  3, 170, :_reduce_105,
  3, 170, :_reduce_106,
  3, 170, :_reduce_107,
  3, 170, :_reduce_108,
  2, 170, :_reduce_109,
  1, 170, :_reduce_110,
  1, 209, :_reduce_111,
  1, 209, :_reduce_none,
  2, 210, :_reduce_113,
  1, 210, :_reduce_114,
  3, 210, :_reduce_115,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 164, :_reduce_121,
  1, 164, :_reduce_none,
  1, 165, :_reduce_123,
  0, 215, :_reduce_124,
  4, 165, :_reduce_125,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  3, 183, :_reduce_197,
  3, 183, :_reduce_198,
  6, 183, :_reduce_199,
  5, 183, :_reduce_200,
  5, 183, :_reduce_201,
  5, 183, :_reduce_202,
  5, 183, :_reduce_203,
  4, 183, :_reduce_204,
  3, 183, :_reduce_205,
  3, 183, :_reduce_206,
  3, 183, :_reduce_207,
  2, 183, :_reduce_208,
  2, 183, :_reduce_209,
  2, 183, :_reduce_210,
  2, 183, :_reduce_211,
  3, 183, :_reduce_212,
  3, 183, :_reduce_213,
  3, 183, :_reduce_214,
  3, 183, :_reduce_215,
  3, 183, :_reduce_216,
  3, 183, :_reduce_217,
  4, 183, :_reduce_218,
  2, 183, :_reduce_219,
  2, 183, :_reduce_220,
  3, 183, :_reduce_221,
  3, 183, :_reduce_222,
  3, 183, :_reduce_223,
  3, 183, :_reduce_224,
  1, 183, :_reduce_none,
  3, 183, :_reduce_226,
  3, 183, :_reduce_227,
  3, 183, :_reduce_228,
  3, 183, :_reduce_229,
  3, 183, :_reduce_230,
  2, 183, :_reduce_231,
  2, 183, :_reduce_232,
  3, 183, :_reduce_233,
  3, 183, :_reduce_234,
  3, 183, :_reduce_235,
  3, 183, :_reduce_236,
  3, 183, :_reduce_237,
  6, 183, :_reduce_238,
  1, 183, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  3, 218, :_reduce_244,
  3, 218, :_reduce_245,
  1, 221, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  4, 222, :_reduce_249,
  2, 222, :_reduce_250,
  1, 216, :_reduce_none,
  3, 216, :_reduce_252,
  3, 227, :_reduce_253,
  0, 228, :_reduce_254,
  1, 228, :_reduce_none,
  0, 178, :_reduce_256,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_259,
  2, 178, :_reduce_260,
  1, 199, :_reduce_261,
  2, 199, :_reduce_262,
  2, 199, :_reduce_263,
  4, 199, :_reduce_264,
  1, 199, :_reduce_265,
  0, 231, :_reduce_266,
  2, 192, :_reduce_267,
  2, 230, :_reduce_268,
  2, 229, :_reduce_269,
  0, 229, :_reduce_270,
  1, 224, :_reduce_271,
  2, 224, :_reduce_272,
  3, 224, :_reduce_273,
  4, 224, :_reduce_274,
  1, 172, :_reduce_275,
  1, 172, :_reduce_none,
  3, 171, :_reduce_277,
  4, 171, :_reduce_278,
  2, 171, :_reduce_279,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_290,
  0, 253, :_reduce_291,
  4, 219, :_reduce_292,
  0, 254, :_reduce_293,
  4, 219, :_reduce_294,
  0, 255, :_reduce_295,
  4, 219, :_reduce_296,
  3, 219, :_reduce_297,
  3, 219, :_reduce_298,
  2, 219, :_reduce_299,
  3, 219, :_reduce_300,
  3, 219, :_reduce_301,
  1, 219, :_reduce_302,
  4, 219, :_reduce_303,
  3, 219, :_reduce_304,
  1, 219, :_reduce_305,
  5, 219, :_reduce_306,
  4, 219, :_reduce_307,
  3, 219, :_reduce_308,
  2, 219, :_reduce_309,
  1, 219, :_reduce_none,
  2, 219, :_reduce_311,
  2, 219, :_reduce_312,
  6, 219, :_reduce_313,
  6, 219, :_reduce_314,
  4, 219, :_reduce_315,
  4, 219, :_reduce_316,
  5, 219, :_reduce_317,
  4, 219, :_reduce_318,
  6, 219, :_reduce_319,
  0, 256, :_reduce_320,
  6, 219, :_reduce_321,
  0, 257, :_reduce_322,
  7, 219, :_reduce_323,
  0, 258, :_reduce_324,
  5, 219, :_reduce_325,
  0, 259, :_reduce_326,
  6, 219, :_reduce_327,
  0, 260, :_reduce_328,
  0, 261, :_reduce_329,
  9, 219, :_reduce_330,
  1, 219, :_reduce_331,
  1, 219, :_reduce_332,
  1, 219, :_reduce_333,
  1, 219, :_reduce_334,
  3, 219, :_reduce_335,
  1, 177, :_reduce_none,
  1, 198, :_reduce_337,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  2, 245, :_reduce_340,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 246, :_reduce_none,
  5, 246, :_reduce_344,
  1, 160, :_reduce_none,
  2, 160, :_reduce_346,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 262, :_reduce_349,
  3, 262, :_reduce_350,
  1, 265, :_reduce_351,
  3, 265, :_reduce_352,
  1, 264, :_reduce_none,
  4, 264, :_reduce_354,
  6, 264, :_reduce_355,
  3, 264, :_reduce_356,
  5, 264, :_reduce_357,
  2, 264, :_reduce_358,
  4, 264, :_reduce_359,
  1, 264, :_reduce_360,
  3, 264, :_reduce_361,
  4, 266, :_reduce_362,
  2, 266, :_reduce_363,
  2, 266, :_reduce_364,
  1, 266, :_reduce_365,
  2, 271, :_reduce_366,
  0, 271, :_reduce_367,
  6, 272, :_reduce_368,
  8, 272, :_reduce_369,
  4, 272, :_reduce_370,
  6, 272, :_reduce_371,
  4, 272, :_reduce_372,
  2, 272, :_reduce_none,
  6, 272, :_reduce_374,
  2, 272, :_reduce_375,
  4, 272, :_reduce_376,
  6, 272, :_reduce_377,
  2, 272, :_reduce_378,
  4, 272, :_reduce_379,
  2, 272, :_reduce_380,
  4, 272, :_reduce_381,
  1, 272, :_reduce_none,
  0, 276, :_reduce_383,
  1, 276, :_reduce_384,
  3, 277, :_reduce_385,
  1, 277, :_reduce_386,
  4, 277, :_reduce_387,
  1, 278, :_reduce_388,
  4, 278, :_reduce_389,
  1, 279, :_reduce_390,
  3, 279, :_reduce_391,
  1, 280, :_reduce_392,
  1, 280, :_reduce_none,
  0, 284, :_reduce_394,
  0, 285, :_reduce_395,
  4, 244, :_reduce_396,
  4, 282, :_reduce_397,
  1, 282, :_reduce_398,
  0, 288, :_reduce_399,
  4, 283, :_reduce_400,
  0, 289, :_reduce_401,
  4, 283, :_reduce_402,
  0, 291, :_reduce_403,
  4, 287, :_reduce_404,
  2, 189, :_reduce_405,
  4, 189, :_reduce_406,
  5, 189, :_reduce_407,
  5, 189, :_reduce_408,
  2, 243, :_reduce_409,
  4, 243, :_reduce_410,
  4, 243, :_reduce_411,
  3, 243, :_reduce_412,
  3, 243, :_reduce_413,
  3, 243, :_reduce_414,
  2, 243, :_reduce_415,
  1, 243, :_reduce_416,
  4, 243, :_reduce_417,
  0, 293, :_reduce_418,
  4, 242, :_reduce_419,
  0, 294, :_reduce_420,
  4, 242, :_reduce_421,
  0, 295, :_reduce_422,
  3, 194, :_reduce_423,
  0, 296, :_reduce_424,
  0, 297, :_reduce_425,
  4, 290, :_reduce_426,
  5, 247, :_reduce_427,
  1, 298, :_reduce_428,
  1, 298, :_reduce_none,
  6, 159, :_reduce_430,
  0, 159, :_reduce_431,
  1, 299, :_reduce_432,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  2, 300, :_reduce_435,
  1, 300, :_reduce_none,
  2, 161, :_reduce_437,
  1, 161, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 233, :_reduce_441,
  1, 302, :_reduce_442,
  2, 302, :_reduce_443,
  3, 303, :_reduce_444,
  1, 303, :_reduce_445,
  1, 303, :_reduce_446,
  3, 234, :_reduce_447,
  4, 235, :_reduce_448,
  3, 236, :_reduce_449,
  0, 307, :_reduce_450,
  3, 307, :_reduce_451,
  1, 308, :_reduce_452,
  2, 308, :_reduce_453,
  3, 238, :_reduce_454,
  0, 310, :_reduce_455,
  3, 310, :_reduce_456,
  3, 237, :_reduce_457,
  3, 239, :_reduce_458,
  0, 311, :_reduce_459,
  3, 311, :_reduce_460,
  0, 312, :_reduce_461,
  3, 312, :_reduce_462,
  0, 304, :_reduce_463,
  2, 304, :_reduce_464,
  0, 305, :_reduce_465,
  2, 305, :_reduce_466,
  0, 306, :_reduce_467,
  2, 306, :_reduce_468,
  1, 309, :_reduce_469,
  2, 309, :_reduce_470,
  0, 314, :_reduce_471,
  4, 309, :_reduce_472,
  1, 313, :_reduce_473,
  1, 313, :_reduce_474,
  1, 313, :_reduce_475,
  1, 313, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 315, :_reduce_479,
  3, 316, :_reduce_480,
  1, 301, :_reduce_481,
  2, 301, :_reduce_482,
  1, 217, :_reduce_483,
  1, 217, :_reduce_484,
  1, 217, :_reduce_485,
  1, 217, :_reduce_486,
  1, 207, :_reduce_487,
  1, 207, :_reduce_488,
  1, 207, :_reduce_489,
  1, 207, :_reduce_490,
  1, 207, :_reduce_491,
  1, 208, :_reduce_492,
  1, 208, :_reduce_493,
  1, 208, :_reduce_494,
  1, 208, :_reduce_495,
  1, 208, :_reduce_496,
  1, 208, :_reduce_497,
  1, 208, :_reduce_498,
  1, 240, :_reduce_499,
  1, 240, :_reduce_500,
  1, 176, :_reduce_501,
  1, 176, :_reduce_502,
  1, 181, :_reduce_503,
  1, 181, :_reduce_504,
  0, 317, :_reduce_505,
  4, 249, :_reduce_506,
  0, 249, :_reduce_507,
  3, 251, :_reduce_508,
  0, 319, :_reduce_509,
  3, 251, :_reduce_510,
  4, 318, :_reduce_511,
  2, 318, :_reduce_512,
  2, 318, :_reduce_513,
  1, 318, :_reduce_514,
  2, 321, :_reduce_515,
  0, 321, :_reduce_516,
  6, 286, :_reduce_517,
  8, 286, :_reduce_518,
  4, 286, :_reduce_519,
  6, 286, :_reduce_520,
  4, 286, :_reduce_521,
  6, 286, :_reduce_522,
  2, 286, :_reduce_523,
  4, 286, :_reduce_524,
  6, 286, :_reduce_525,
  2, 286, :_reduce_526,
  4, 286, :_reduce_527,
  2, 286, :_reduce_528,
  4, 286, :_reduce_529,
  1, 286, :_reduce_530,
  0, 286, :_reduce_531,
  1, 281, :_reduce_532,
  1, 281, :_reduce_533,
  1, 281, :_reduce_534,
  1, 281, :_reduce_535,
  1, 263, :_reduce_none,
  1, 263, :_reduce_537,
  1, 323, :_reduce_538,
  1, 324, :_reduce_539,
  3, 324, :_reduce_540,
  1, 273, :_reduce_541,
  3, 273, :_reduce_542,
  1, 325, :_reduce_543,
  2, 326, :_reduce_544,
  1, 326, :_reduce_545,
  2, 327, :_reduce_546,
  1, 327, :_reduce_547,
  1, 267, :_reduce_548,
  3, 267, :_reduce_549,
  1, 320, :_reduce_550,
  3, 320, :_reduce_551,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 268, :_reduce_554,
  1, 268, :_reduce_555,
  3, 329, :_reduce_556,
  3, 330, :_reduce_557,
  1, 274, :_reduce_558,
  3, 274, :_reduce_559,
  1, 322, :_reduce_560,
  3, 322, :_reduce_561,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  2, 275, :_reduce_564,
  1, 275, :_reduce_565,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 270, :_reduce_568,
  2, 269, :_reduce_569,
  0, 269, :_reduce_570,
  1, 252, :_reduce_none,
  3, 252, :_reduce_572,
  0, 241, :_reduce_573,
  2, 241, :_reduce_none,
  1, 226, :_reduce_575,
  3, 226, :_reduce_576,
  3, 333, :_reduce_577,
  2, 333, :_reduce_578,
  4, 333, :_reduce_579,
  2, 333, :_reduce_580,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 180, :_reduce_593,
  1, 180, :_reduce_594,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 202, :_reduce_599,
  2, 179, :_reduce_600,
  0, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 250, :_reduce_604,
  1, 250, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 223, :_reduce_608 ]

racc_reduce_n = 609

racc_shift_n = 1037

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tMETHREF => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tEQL => 146,
  :tLOWEST => 147 }

racc_nt_base = 148

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tMETHREF",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "ssym",
  "dsym",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 122 omitted

def _reduce_123(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_124(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_125(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 225 omitted

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      result = []
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_267(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = []
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

def _reduce_290(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 310 omitted

def _reduce_311(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_312(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_313(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_321(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_325(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.method_ref(val[0], val[1], val[2])
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 345 omitted

def _reduce_346(val, _values, result)
                      result = val
                    
    result
end

# reduce 347 omitted

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = []
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 382 omitted

def _reduce_383(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_384(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = []
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_392(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_395(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_396(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_403(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_405(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_418(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_425(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = []
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_448(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = []
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_472(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_482(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_483(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_505(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_506(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_508(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_509(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_510(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = []
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = []
                    
    result
end

def _reduce_532(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_535(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 552 omitted

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_557(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 562 omitted

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 566 omitted

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = []
                    
    result
end

# reduce 571 omitted

def _reduce_572(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = []
                    
    result
end

# reduce 574 omitted

def _reduce_575(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_600(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

def _reduce_608(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
